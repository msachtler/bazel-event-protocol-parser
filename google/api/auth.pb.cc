// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/auth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace api {
class AuthenticationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Authentication> {
} _Authentication_default_instance_;
class AuthenticationRuleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthenticationRule> {
} _AuthenticationRule_default_instance_;
class AuthProviderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthProvider> {
} _AuthProvider_default_instance_;
class OAuthRequirementsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OAuthRequirements> {
} _OAuthRequirements_default_instance_;
class AuthRequirementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthRequirement> {
} _AuthRequirement_default_instance_;

namespace protobuf_google_2fapi_2fauth_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authentication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authentication, rules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authentication, providers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationRule, selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationRule, oauth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationRule, allow_without_credential_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticationRule, requirements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthProvider, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthProvider, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthProvider, issuer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthProvider, jwks_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthProvider, audiences_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthProvider, authorization_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OAuthRequirements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OAuthRequirements, canonical_scopes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequirement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequirement, provider_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequirement, audiences_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Authentication)},
  { 7, -1, sizeof(AuthenticationRule)},
  { 16, -1, sizeof(AuthProvider)},
  { 26, -1, sizeof(OAuthRequirements)},
  { 32, -1, sizeof(AuthRequirement)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Authentication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthenticationRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthProvider_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OAuthRequirements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuthRequirement_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/api/auth.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _Authentication_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _AuthenticationRule_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _AuthProvider_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _OAuthRequirements_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _AuthRequirement_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  _Authentication_default_instance_.DefaultConstruct();
  _AuthenticationRule_default_instance_.DefaultConstruct();
  _AuthProvider_default_instance_.DefaultConstruct();
  _OAuthRequirements_default_instance_.DefaultConstruct();
  _AuthRequirement_default_instance_.DefaultConstruct();
  _AuthenticationRule_default_instance_.get_mutable()->oauth_ = const_cast< ::google::api::OAuthRequirements*>(
      ::google::api::OAuthRequirements::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025google/api/auth.proto\022\ngoogle.api\032\034goo"
      "gle/api/annotations.proto\"l\n\016Authenticat"
      "ion\022-\n\005rules\030\003 \003(\0132\036.google.api.Authenti"
      "cationRule\022+\n\tproviders\030\004 \003(\0132\030.google.a"
      "pi.AuthProvider\"\251\001\n\022AuthenticationRule\022\020"
      "\n\010selector\030\001 \001(\t\022,\n\005oauth\030\002 \001(\0132\035.google"
      ".api.OAuthRequirements\022 \n\030allow_without_"
      "credential\030\005 \001(\010\0221\n\014requirements\030\007 \003(\0132\033"
      ".google.api.AuthRequirement\"j\n\014AuthProvi"
      "der\022\n\n\002id\030\001 \001(\t\022\016\n\006issuer\030\002 \001(\t\022\020\n\010jwks_"
      "uri\030\003 \001(\t\022\021\n\taudiences\030\004 \001(\t\022\031\n\021authoriz"
      "ation_url\030\005 \001(\t\"-\n\021OAuthRequirements\022\030\n\020"
      "canonical_scopes\030\001 \001(\t\"9\n\017AuthRequiremen"
      "t\022\023\n\013provider_id\030\001 \001(\t\022\021\n\taudiences\030\002 \001("
      "\tBk\n\016com.google.apiB\tAuthProtoP\001ZEgoogle"
      ".golang.org/genproto/googleapis/api/serv"
      "iceconfig;serviceconfig\242\002\004GAPIb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 678);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/auth.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fapi_2fauth_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authentication::kRulesFieldNumber;
const int Authentication::kProvidersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authentication::Authentication()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fapi_2fauth_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Authentication)
}
Authentication::Authentication(const Authentication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_),
      providers_(from.providers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.api.Authentication)
}

void Authentication::SharedCtor() {
  _cached_size_ = 0;
}

Authentication::~Authentication() {
  // @@protoc_insertion_point(destructor:google.api.Authentication)
  SharedDtor();
}

void Authentication::SharedDtor() {
}

void Authentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Authentication::descriptor() {
  protobuf_google_2fapi_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authentication& Authentication::default_instance() {
  protobuf_google_2fapi_2fauth_2eproto::InitDefaults();
  return *internal_default_instance();
}

Authentication* Authentication::New(::google::protobuf::Arena* arena) const {
  Authentication* n = new Authentication;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Authentication::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Authentication)
  rules_.Clear();
  providers_.Clear();
}

bool Authentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Authentication)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.api.AuthenticationRule rules = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.api.AuthProvider providers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_providers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Authentication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Authentication)
  return false;
#undef DO_
}

void Authentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Authentication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.AuthenticationRule rules = 3;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rules(i), output);
  }

  // repeated .google.api.AuthProvider providers = 4;
  for (unsigned int i = 0, n = this->providers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->providers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.Authentication)
}

::google::protobuf::uint8* Authentication::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Authentication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.AuthenticationRule rules = 3;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->rules(i), deterministic, target);
  }

  // repeated .google.api.AuthProvider providers = 4;
  for (unsigned int i = 0, n = this->providers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->providers(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.Authentication)
  return target;
}

size_t Authentication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Authentication)
  size_t total_size = 0;

  // repeated .google.api.AuthenticationRule rules = 3;
  {
    unsigned int count = this->rules_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rules(i));
    }
  }

  // repeated .google.api.AuthProvider providers = 4;
  {
    unsigned int count = this->providers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->providers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Authentication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Authentication)
  GOOGLE_DCHECK_NE(&from, this);
  const Authentication* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authentication>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Authentication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Authentication)
    MergeFrom(*source);
  }
}

void Authentication::MergeFrom(const Authentication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Authentication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  providers_.MergeFrom(from.providers_);
}

void Authentication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Authentication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authentication::CopyFrom(const Authentication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Authentication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authentication::IsInitialized() const {
  return true;
}

void Authentication::Swap(Authentication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authentication::InternalSwap(Authentication* other) {
  rules_.InternalSwap(&other->rules_);
  providers_.InternalSwap(&other->providers_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Authentication::GetMetadata() const {
  protobuf_google_2fapi_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Authentication

// repeated .google.api.AuthenticationRule rules = 3;
int Authentication::rules_size() const {
  return rules_.size();
}
void Authentication::clear_rules() {
  rules_.Clear();
}
const ::google::api::AuthenticationRule& Authentication::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Authentication.rules)
  return rules_.Get(index);
}
::google::api::AuthenticationRule* Authentication::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Authentication.rules)
  return rules_.Mutable(index);
}
::google::api::AuthenticationRule* Authentication::add_rules() {
  // @@protoc_insertion_point(field_add:google.api.Authentication.rules)
  return rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::AuthenticationRule >*
Authentication::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Authentication.rules)
  return &rules_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::AuthenticationRule >&
Authentication::rules() const {
  // @@protoc_insertion_point(field_list:google.api.Authentication.rules)
  return rules_;
}

// repeated .google.api.AuthProvider providers = 4;
int Authentication::providers_size() const {
  return providers_.size();
}
void Authentication::clear_providers() {
  providers_.Clear();
}
const ::google::api::AuthProvider& Authentication::providers(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Authentication.providers)
  return providers_.Get(index);
}
::google::api::AuthProvider* Authentication::mutable_providers(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Authentication.providers)
  return providers_.Mutable(index);
}
::google::api::AuthProvider* Authentication::add_providers() {
  // @@protoc_insertion_point(field_add:google.api.Authentication.providers)
  return providers_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::AuthProvider >*
Authentication::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Authentication.providers)
  return &providers_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::AuthProvider >&
Authentication::providers() const {
  // @@protoc_insertion_point(field_list:google.api.Authentication.providers)
  return providers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticationRule::kSelectorFieldNumber;
const int AuthenticationRule::kOauthFieldNumber;
const int AuthenticationRule::kAllowWithoutCredentialFieldNumber;
const int AuthenticationRule::kRequirementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticationRule::AuthenticationRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fapi_2fauth_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.AuthenticationRule)
}
AuthenticationRule::AuthenticationRule(const AuthenticationRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      requirements_(from.requirements_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.selector().size() > 0) {
    selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selector_);
  }
  if (from.has_oauth()) {
    oauth_ = new ::google::api::OAuthRequirements(*from.oauth_);
  } else {
    oauth_ = NULL;
  }
  allow_without_credential_ = from.allow_without_credential_;
  // @@protoc_insertion_point(copy_constructor:google.api.AuthenticationRule)
}

void AuthenticationRule::SharedCtor() {
  selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&oauth_, 0, reinterpret_cast<char*>(&allow_without_credential_) -
    reinterpret_cast<char*>(&oauth_) + sizeof(allow_without_credential_));
  _cached_size_ = 0;
}

AuthenticationRule::~AuthenticationRule() {
  // @@protoc_insertion_point(destructor:google.api.AuthenticationRule)
  SharedDtor();
}

void AuthenticationRule::SharedDtor() {
  selector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete oauth_;
  }
}

void AuthenticationRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticationRule::descriptor() {
  protobuf_google_2fapi_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticationRule& AuthenticationRule::default_instance() {
  protobuf_google_2fapi_2fauth_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthenticationRule* AuthenticationRule::New(::google::protobuf::Arena* arena) const {
  AuthenticationRule* n = new AuthenticationRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticationRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.AuthenticationRule)
  requirements_.Clear();
  selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && oauth_ != NULL) {
    delete oauth_;
  }
  oauth_ = NULL;
  allow_without_credential_ = false;
}

bool AuthenticationRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.AuthenticationRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string selector = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selector()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->selector().data(), this->selector().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthenticationRule.selector"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.api.OAuthRequirements oauth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oauth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allow_without_credential = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_without_credential_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.api.AuthRequirement requirements = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requirements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.AuthenticationRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.AuthenticationRule)
  return false;
#undef DO_
}

void AuthenticationRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.AuthenticationRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string selector = 1;
  if (this->selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->selector().data(), this->selector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthenticationRule.selector");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->selector(), output);
  }

  // .google.api.OAuthRequirements oauth = 2;
  if (this->has_oauth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->oauth_, output);
  }

  // bool allow_without_credential = 5;
  if (this->allow_without_credential() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_without_credential(), output);
  }

  // repeated .google.api.AuthRequirement requirements = 7;
  for (unsigned int i = 0, n = this->requirements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->requirements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.AuthenticationRule)
}

::google::protobuf::uint8* AuthenticationRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.AuthenticationRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string selector = 1;
  if (this->selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->selector().data(), this->selector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthenticationRule.selector");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->selector(), target);
  }

  // .google.api.OAuthRequirements oauth = 2;
  if (this->has_oauth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->oauth_, deterministic, target);
  }

  // bool allow_without_credential = 5;
  if (this->allow_without_credential() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allow_without_credential(), target);
  }

  // repeated .google.api.AuthRequirement requirements = 7;
  for (unsigned int i = 0, n = this->requirements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->requirements(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.AuthenticationRule)
  return target;
}

size_t AuthenticationRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.AuthenticationRule)
  size_t total_size = 0;

  // repeated .google.api.AuthRequirement requirements = 7;
  {
    unsigned int count = this->requirements_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requirements(i));
    }
  }

  // string selector = 1;
  if (this->selector().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->selector());
  }

  // .google.api.OAuthRequirements oauth = 2;
  if (this->has_oauth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->oauth_);
  }

  // bool allow_without_credential = 5;
  if (this->allow_without_credential() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticationRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.AuthenticationRule)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticationRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticationRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.AuthenticationRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.AuthenticationRule)
    MergeFrom(*source);
  }
}

void AuthenticationRule::MergeFrom(const AuthenticationRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.AuthenticationRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requirements_.MergeFrom(from.requirements_);
  if (from.selector().size() > 0) {

    selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selector_);
  }
  if (from.has_oauth()) {
    mutable_oauth()->::google::api::OAuthRequirements::MergeFrom(from.oauth());
  }
  if (from.allow_without_credential() != 0) {
    set_allow_without_credential(from.allow_without_credential());
  }
}

void AuthenticationRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.AuthenticationRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticationRule::CopyFrom(const AuthenticationRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.AuthenticationRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationRule::IsInitialized() const {
  return true;
}

void AuthenticationRule::Swap(AuthenticationRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticationRule::InternalSwap(AuthenticationRule* other) {
  requirements_.InternalSwap(&other->requirements_);
  selector_.Swap(&other->selector_);
  std::swap(oauth_, other->oauth_);
  std::swap(allow_without_credential_, other->allow_without_credential_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthenticationRule::GetMetadata() const {
  protobuf_google_2fapi_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthenticationRule

// string selector = 1;
void AuthenticationRule::clear_selector() {
  selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthenticationRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.AuthenticationRule.selector)
  return selector_.GetNoArena();
}
void AuthenticationRule::set_selector(const ::std::string& value) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthenticationRule.selector)
}
#if LANG_CXX11
void AuthenticationRule::set_selector(::std::string&& value) {
  
  selector_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.AuthenticationRule.selector)
}
#endif
void AuthenticationRule::set_selector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthenticationRule.selector)
}
void AuthenticationRule::set_selector(const char* value, size_t size) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthenticationRule.selector)
}
::std::string* AuthenticationRule::mutable_selector() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthenticationRule.selector)
  return selector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthenticationRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.AuthenticationRule.selector)
  
  return selector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthenticationRule::set_allocated_selector(::std::string* selector) {
  if (selector != NULL) {
    
  } else {
    
  }
  selector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selector);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthenticationRule.selector)
}

// .google.api.OAuthRequirements oauth = 2;
bool AuthenticationRule::has_oauth() const {
  return this != internal_default_instance() && oauth_ != NULL;
}
void AuthenticationRule::clear_oauth() {
  if (GetArenaNoVirtual() == NULL && oauth_ != NULL) delete oauth_;
  oauth_ = NULL;
}
const ::google::api::OAuthRequirements& AuthenticationRule::oauth() const {
  // @@protoc_insertion_point(field_get:google.api.AuthenticationRule.oauth)
  return oauth_ != NULL ? *oauth_
                         : *::google::api::OAuthRequirements::internal_default_instance();
}
::google::api::OAuthRequirements* AuthenticationRule::mutable_oauth() {
  
  if (oauth_ == NULL) {
    oauth_ = new ::google::api::OAuthRequirements;
  }
  // @@protoc_insertion_point(field_mutable:google.api.AuthenticationRule.oauth)
  return oauth_;
}
::google::api::OAuthRequirements* AuthenticationRule::release_oauth() {
  // @@protoc_insertion_point(field_release:google.api.AuthenticationRule.oauth)
  
  ::google::api::OAuthRequirements* temp = oauth_;
  oauth_ = NULL;
  return temp;
}
void AuthenticationRule::set_allocated_oauth(::google::api::OAuthRequirements* oauth) {
  delete oauth_;
  oauth_ = oauth;
  if (oauth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthenticationRule.oauth)
}

// bool allow_without_credential = 5;
void AuthenticationRule::clear_allow_without_credential() {
  allow_without_credential_ = false;
}
bool AuthenticationRule::allow_without_credential() const {
  // @@protoc_insertion_point(field_get:google.api.AuthenticationRule.allow_without_credential)
  return allow_without_credential_;
}
void AuthenticationRule::set_allow_without_credential(bool value) {
  
  allow_without_credential_ = value;
  // @@protoc_insertion_point(field_set:google.api.AuthenticationRule.allow_without_credential)
}

// repeated .google.api.AuthRequirement requirements = 7;
int AuthenticationRule::requirements_size() const {
  return requirements_.size();
}
void AuthenticationRule::clear_requirements() {
  requirements_.Clear();
}
const ::google::api::AuthRequirement& AuthenticationRule::requirements(int index) const {
  // @@protoc_insertion_point(field_get:google.api.AuthenticationRule.requirements)
  return requirements_.Get(index);
}
::google::api::AuthRequirement* AuthenticationRule::mutable_requirements(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.AuthenticationRule.requirements)
  return requirements_.Mutable(index);
}
::google::api::AuthRequirement* AuthenticationRule::add_requirements() {
  // @@protoc_insertion_point(field_add:google.api.AuthenticationRule.requirements)
  return requirements_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::AuthRequirement >*
AuthenticationRule::mutable_requirements() {
  // @@protoc_insertion_point(field_mutable_list:google.api.AuthenticationRule.requirements)
  return &requirements_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::AuthRequirement >&
AuthenticationRule::requirements() const {
  // @@protoc_insertion_point(field_list:google.api.AuthenticationRule.requirements)
  return requirements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthProvider::kIdFieldNumber;
const int AuthProvider::kIssuerFieldNumber;
const int AuthProvider::kJwksUriFieldNumber;
const int AuthProvider::kAudiencesFieldNumber;
const int AuthProvider::kAuthorizationUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthProvider::AuthProvider()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fapi_2fauth_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.AuthProvider)
}
AuthProvider::AuthProvider(const AuthProvider& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  issuer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.issuer().size() > 0) {
    issuer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  jwks_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.jwks_uri().size() > 0) {
    jwks_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jwks_uri_);
  }
  audiences_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.audiences().size() > 0) {
    audiences_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audiences_);
  }
  authorization_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.authorization_url().size() > 0) {
    authorization_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authorization_url_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.AuthProvider)
}

void AuthProvider::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jwks_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiences_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorization_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthProvider::~AuthProvider() {
  // @@protoc_insertion_point(destructor:google.api.AuthProvider)
  SharedDtor();
}

void AuthProvider::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jwks_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiences_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorization_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthProvider::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthProvider::descriptor() {
  protobuf_google_2fapi_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthProvider& AuthProvider::default_instance() {
  protobuf_google_2fapi_2fauth_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthProvider* AuthProvider::New(::google::protobuf::Arena* arena) const {
  AuthProvider* n = new AuthProvider;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthProvider::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.AuthProvider)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jwks_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiences_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorization_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthProvider::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.AuthProvider)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthProvider.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string issuer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->issuer().data(), this->issuer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthProvider.issuer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string jwks_uri = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jwks_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jwks_uri().data(), this->jwks_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthProvider.jwks_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string audiences = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audiences()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->audiences().data(), this->audiences().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthProvider.audiences"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string authorization_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorization_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->authorization_url().data(), this->authorization_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthProvider.authorization_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.AuthProvider)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.AuthProvider)
  return false;
#undef DO_
}

void AuthProvider::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.AuthProvider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string issuer = 2;
  if (this->issuer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->issuer().data(), this->issuer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.issuer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->issuer(), output);
  }

  // string jwks_uri = 3;
  if (this->jwks_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jwks_uri().data(), this->jwks_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.jwks_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->jwks_uri(), output);
  }

  // string audiences = 4;
  if (this->audiences().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audiences().data(), this->audiences().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.audiences");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->audiences(), output);
  }

  // string authorization_url = 5;
  if (this->authorization_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authorization_url().data(), this->authorization_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.authorization_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->authorization_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.AuthProvider)
}

::google::protobuf::uint8* AuthProvider::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.AuthProvider)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string issuer = 2;
  if (this->issuer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->issuer().data(), this->issuer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.issuer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->issuer(), target);
  }

  // string jwks_uri = 3;
  if (this->jwks_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jwks_uri().data(), this->jwks_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.jwks_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->jwks_uri(), target);
  }

  // string audiences = 4;
  if (this->audiences().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audiences().data(), this->audiences().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.audiences");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->audiences(), target);
  }

  // string authorization_url = 5;
  if (this->authorization_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authorization_url().data(), this->authorization_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthProvider.authorization_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->authorization_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.AuthProvider)
  return target;
}

size_t AuthProvider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.AuthProvider)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string issuer = 2;
  if (this->issuer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->issuer());
  }

  // string jwks_uri = 3;
  if (this->jwks_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jwks_uri());
  }

  // string audiences = 4;
  if (this->audiences().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->audiences());
  }

  // string authorization_url = 5;
  if (this->authorization_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->authorization_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthProvider::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.AuthProvider)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthProvider* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthProvider>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.AuthProvider)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.AuthProvider)
    MergeFrom(*source);
  }
}

void AuthProvider::MergeFrom(const AuthProvider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.AuthProvider)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.issuer().size() > 0) {

    issuer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  if (from.jwks_uri().size() > 0) {

    jwks_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jwks_uri_);
  }
  if (from.audiences().size() > 0) {

    audiences_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audiences_);
  }
  if (from.authorization_url().size() > 0) {

    authorization_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authorization_url_);
  }
}

void AuthProvider::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.AuthProvider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthProvider::CopyFrom(const AuthProvider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.AuthProvider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthProvider::IsInitialized() const {
  return true;
}

void AuthProvider::Swap(AuthProvider* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthProvider::InternalSwap(AuthProvider* other) {
  id_.Swap(&other->id_);
  issuer_.Swap(&other->issuer_);
  jwks_uri_.Swap(&other->jwks_uri_);
  audiences_.Swap(&other->audiences_);
  authorization_url_.Swap(&other->authorization_url_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthProvider::GetMetadata() const {
  protobuf_google_2fapi_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthProvider

// string id = 1;
void AuthProvider::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthProvider::id() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.id)
  return id_.GetNoArena();
}
void AuthProvider::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.id)
}
#if LANG_CXX11
void AuthProvider::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.AuthProvider.id)
}
#endif
void AuthProvider::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthProvider.id)
}
void AuthProvider::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthProvider.id)
}
::std::string* AuthProvider::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthProvider::release_id() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.id)
}

// string issuer = 2;
void AuthProvider::clear_issuer() {
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthProvider::issuer() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.issuer)
  return issuer_.GetNoArena();
}
void AuthProvider::set_issuer(const ::std::string& value) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.issuer)
}
#if LANG_CXX11
void AuthProvider::set_issuer(::std::string&& value) {
  
  issuer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.AuthProvider.issuer)
}
#endif
void AuthProvider::set_issuer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthProvider.issuer)
}
void AuthProvider::set_issuer(const char* value, size_t size) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthProvider.issuer)
}
::std::string* AuthProvider::mutable_issuer() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.issuer)
  return issuer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthProvider::release_issuer() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.issuer)
  
  return issuer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_allocated_issuer(::std::string* issuer) {
  if (issuer != NULL) {
    
  } else {
    
  }
  issuer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.issuer)
}

// string jwks_uri = 3;
void AuthProvider::clear_jwks_uri() {
  jwks_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthProvider::jwks_uri() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.jwks_uri)
  return jwks_uri_.GetNoArena();
}
void AuthProvider::set_jwks_uri(const ::std::string& value) {
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.jwks_uri)
}
#if LANG_CXX11
void AuthProvider::set_jwks_uri(::std::string&& value) {
  
  jwks_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.AuthProvider.jwks_uri)
}
#endif
void AuthProvider::set_jwks_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthProvider.jwks_uri)
}
void AuthProvider::set_jwks_uri(const char* value, size_t size) {
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthProvider.jwks_uri)
}
::std::string* AuthProvider::mutable_jwks_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.jwks_uri)
  return jwks_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthProvider::release_jwks_uri() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.jwks_uri)
  
  return jwks_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_allocated_jwks_uri(::std::string* jwks_uri) {
  if (jwks_uri != NULL) {
    
  } else {
    
  }
  jwks_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jwks_uri);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.jwks_uri)
}

// string audiences = 4;
void AuthProvider::clear_audiences() {
  audiences_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthProvider::audiences() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.audiences)
  return audiences_.GetNoArena();
}
void AuthProvider::set_audiences(const ::std::string& value) {
  
  audiences_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.audiences)
}
#if LANG_CXX11
void AuthProvider::set_audiences(::std::string&& value) {
  
  audiences_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.AuthProvider.audiences)
}
#endif
void AuthProvider::set_audiences(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audiences_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthProvider.audiences)
}
void AuthProvider::set_audiences(const char* value, size_t size) {
  
  audiences_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthProvider.audiences)
}
::std::string* AuthProvider::mutable_audiences() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.audiences)
  return audiences_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthProvider::release_audiences() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.audiences)
  
  return audiences_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_allocated_audiences(::std::string* audiences) {
  if (audiences != NULL) {
    
  } else {
    
  }
  audiences_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audiences);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.audiences)
}

// string authorization_url = 5;
void AuthProvider::clear_authorization_url() {
  authorization_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthProvider::authorization_url() const {
  // @@protoc_insertion_point(field_get:google.api.AuthProvider.authorization_url)
  return authorization_url_.GetNoArena();
}
void AuthProvider::set_authorization_url(const ::std::string& value) {
  
  authorization_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthProvider.authorization_url)
}
#if LANG_CXX11
void AuthProvider::set_authorization_url(::std::string&& value) {
  
  authorization_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.AuthProvider.authorization_url)
}
#endif
void AuthProvider::set_authorization_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  authorization_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthProvider.authorization_url)
}
void AuthProvider::set_authorization_url(const char* value, size_t size) {
  
  authorization_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthProvider.authorization_url)
}
::std::string* AuthProvider::mutable_authorization_url() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthProvider.authorization_url)
  return authorization_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthProvider::release_authorization_url() {
  // @@protoc_insertion_point(field_release:google.api.AuthProvider.authorization_url)
  
  return authorization_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthProvider::set_allocated_authorization_url(::std::string* authorization_url) {
  if (authorization_url != NULL) {
    
  } else {
    
  }
  authorization_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authorization_url);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthProvider.authorization_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OAuthRequirements::kCanonicalScopesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OAuthRequirements::OAuthRequirements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fapi_2fauth_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.OAuthRequirements)
}
OAuthRequirements::OAuthRequirements(const OAuthRequirements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  canonical_scopes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.canonical_scopes().size() > 0) {
    canonical_scopes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_scopes_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.OAuthRequirements)
}

void OAuthRequirements::SharedCtor() {
  canonical_scopes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OAuthRequirements::~OAuthRequirements() {
  // @@protoc_insertion_point(destructor:google.api.OAuthRequirements)
  SharedDtor();
}

void OAuthRequirements::SharedDtor() {
  canonical_scopes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OAuthRequirements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OAuthRequirements::descriptor() {
  protobuf_google_2fapi_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OAuthRequirements& OAuthRequirements::default_instance() {
  protobuf_google_2fapi_2fauth_2eproto::InitDefaults();
  return *internal_default_instance();
}

OAuthRequirements* OAuthRequirements::New(::google::protobuf::Arena* arena) const {
  OAuthRequirements* n = new OAuthRequirements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OAuthRequirements::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.OAuthRequirements)
  canonical_scopes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OAuthRequirements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.OAuthRequirements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string canonical_scopes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canonical_scopes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->canonical_scopes().data(), this->canonical_scopes().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.OAuthRequirements.canonical_scopes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.OAuthRequirements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.OAuthRequirements)
  return false;
#undef DO_
}

void OAuthRequirements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.OAuthRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string canonical_scopes = 1;
  if (this->canonical_scopes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canonical_scopes().data(), this->canonical_scopes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.OAuthRequirements.canonical_scopes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->canonical_scopes(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.OAuthRequirements)
}

::google::protobuf::uint8* OAuthRequirements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.OAuthRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string canonical_scopes = 1;
  if (this->canonical_scopes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canonical_scopes().data(), this->canonical_scopes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.OAuthRequirements.canonical_scopes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->canonical_scopes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.OAuthRequirements)
  return target;
}

size_t OAuthRequirements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.OAuthRequirements)
  size_t total_size = 0;

  // string canonical_scopes = 1;
  if (this->canonical_scopes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->canonical_scopes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OAuthRequirements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.OAuthRequirements)
  GOOGLE_DCHECK_NE(&from, this);
  const OAuthRequirements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OAuthRequirements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.OAuthRequirements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.OAuthRequirements)
    MergeFrom(*source);
  }
}

void OAuthRequirements::MergeFrom(const OAuthRequirements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.OAuthRequirements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.canonical_scopes().size() > 0) {

    canonical_scopes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_scopes_);
  }
}

void OAuthRequirements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.OAuthRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OAuthRequirements::CopyFrom(const OAuthRequirements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.OAuthRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OAuthRequirements::IsInitialized() const {
  return true;
}

void OAuthRequirements::Swap(OAuthRequirements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OAuthRequirements::InternalSwap(OAuthRequirements* other) {
  canonical_scopes_.Swap(&other->canonical_scopes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OAuthRequirements::GetMetadata() const {
  protobuf_google_2fapi_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OAuthRequirements

// string canonical_scopes = 1;
void OAuthRequirements::clear_canonical_scopes() {
  canonical_scopes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OAuthRequirements::canonical_scopes() const {
  // @@protoc_insertion_point(field_get:google.api.OAuthRequirements.canonical_scopes)
  return canonical_scopes_.GetNoArena();
}
void OAuthRequirements::set_canonical_scopes(const ::std::string& value) {
  
  canonical_scopes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.OAuthRequirements.canonical_scopes)
}
#if LANG_CXX11
void OAuthRequirements::set_canonical_scopes(::std::string&& value) {
  
  canonical_scopes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.OAuthRequirements.canonical_scopes)
}
#endif
void OAuthRequirements::set_canonical_scopes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  canonical_scopes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.OAuthRequirements.canonical_scopes)
}
void OAuthRequirements::set_canonical_scopes(const char* value, size_t size) {
  
  canonical_scopes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.OAuthRequirements.canonical_scopes)
}
::std::string* OAuthRequirements::mutable_canonical_scopes() {
  
  // @@protoc_insertion_point(field_mutable:google.api.OAuthRequirements.canonical_scopes)
  return canonical_scopes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OAuthRequirements::release_canonical_scopes() {
  // @@protoc_insertion_point(field_release:google.api.OAuthRequirements.canonical_scopes)
  
  return canonical_scopes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OAuthRequirements::set_allocated_canonical_scopes(::std::string* canonical_scopes) {
  if (canonical_scopes != NULL) {
    
  } else {
    
  }
  canonical_scopes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonical_scopes);
  // @@protoc_insertion_point(field_set_allocated:google.api.OAuthRequirements.canonical_scopes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRequirement::kProviderIdFieldNumber;
const int AuthRequirement::kAudiencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRequirement::AuthRequirement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fapi_2fauth_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.AuthRequirement)
}
AuthRequirement::AuthRequirement(const AuthRequirement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  provider_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.provider_id().size() > 0) {
    provider_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.provider_id_);
  }
  audiences_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.audiences().size() > 0) {
    audiences_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audiences_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.AuthRequirement)
}

void AuthRequirement::SharedCtor() {
  provider_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiences_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AuthRequirement::~AuthRequirement() {
  // @@protoc_insertion_point(destructor:google.api.AuthRequirement)
  SharedDtor();
}

void AuthRequirement::SharedDtor() {
  provider_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiences_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthRequirement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRequirement::descriptor() {
  protobuf_google_2fapi_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthRequirement& AuthRequirement::default_instance() {
  protobuf_google_2fapi_2fauth_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthRequirement* AuthRequirement::New(::google::protobuf::Arena* arena) const {
  AuthRequirement* n = new AuthRequirement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthRequirement::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.AuthRequirement)
  provider_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audiences_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AuthRequirement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.AuthRequirement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string provider_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->provider_id().data(), this->provider_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthRequirement.provider_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string audiences = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audiences()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->audiences().data(), this->audiences().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.AuthRequirement.audiences"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.AuthRequirement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.AuthRequirement)
  return false;
#undef DO_
}

void AuthRequirement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.AuthRequirement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provider_id = 1;
  if (this->provider_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->provider_id().data(), this->provider_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthRequirement.provider_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->provider_id(), output);
  }

  // string audiences = 2;
  if (this->audiences().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audiences().data(), this->audiences().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthRequirement.audiences");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->audiences(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.AuthRequirement)
}

::google::protobuf::uint8* AuthRequirement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.AuthRequirement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provider_id = 1;
  if (this->provider_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->provider_id().data(), this->provider_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthRequirement.provider_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->provider_id(), target);
  }

  // string audiences = 2;
  if (this->audiences().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audiences().data(), this->audiences().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.AuthRequirement.audiences");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->audiences(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.AuthRequirement)
  return target;
}

size_t AuthRequirement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.AuthRequirement)
  size_t total_size = 0;

  // string provider_id = 1;
  if (this->provider_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->provider_id());
  }

  // string audiences = 2;
  if (this->audiences().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->audiences());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRequirement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.AuthRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRequirement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthRequirement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.AuthRequirement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.AuthRequirement)
    MergeFrom(*source);
  }
}

void AuthRequirement::MergeFrom(const AuthRequirement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.AuthRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.provider_id().size() > 0) {

    provider_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.provider_id_);
  }
  if (from.audiences().size() > 0) {

    audiences_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audiences_);
  }
}

void AuthRequirement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.AuthRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRequirement::CopyFrom(const AuthRequirement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.AuthRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRequirement::IsInitialized() const {
  return true;
}

void AuthRequirement::Swap(AuthRequirement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRequirement::InternalSwap(AuthRequirement* other) {
  provider_id_.Swap(&other->provider_id_);
  audiences_.Swap(&other->audiences_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthRequirement::GetMetadata() const {
  protobuf_google_2fapi_2fauth_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fauth_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthRequirement

// string provider_id = 1;
void AuthRequirement::clear_provider_id() {
  provider_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRequirement::provider_id() const {
  // @@protoc_insertion_point(field_get:google.api.AuthRequirement.provider_id)
  return provider_id_.GetNoArena();
}
void AuthRequirement::set_provider_id(const ::std::string& value) {
  
  provider_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthRequirement.provider_id)
}
#if LANG_CXX11
void AuthRequirement::set_provider_id(::std::string&& value) {
  
  provider_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.AuthRequirement.provider_id)
}
#endif
void AuthRequirement::set_provider_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  provider_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthRequirement.provider_id)
}
void AuthRequirement::set_provider_id(const char* value, size_t size) {
  
  provider_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthRequirement.provider_id)
}
::std::string* AuthRequirement::mutable_provider_id() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthRequirement.provider_id)
  return provider_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRequirement::release_provider_id() {
  // @@protoc_insertion_point(field_release:google.api.AuthRequirement.provider_id)
  
  return provider_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRequirement::set_allocated_provider_id(::std::string* provider_id) {
  if (provider_id != NULL) {
    
  } else {
    
  }
  provider_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provider_id);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthRequirement.provider_id)
}

// string audiences = 2;
void AuthRequirement::clear_audiences() {
  audiences_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AuthRequirement::audiences() const {
  // @@protoc_insertion_point(field_get:google.api.AuthRequirement.audiences)
  return audiences_.GetNoArena();
}
void AuthRequirement::set_audiences(const ::std::string& value) {
  
  audiences_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.AuthRequirement.audiences)
}
#if LANG_CXX11
void AuthRequirement::set_audiences(::std::string&& value) {
  
  audiences_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.AuthRequirement.audiences)
}
#endif
void AuthRequirement::set_audiences(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audiences_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.AuthRequirement.audiences)
}
void AuthRequirement::set_audiences(const char* value, size_t size) {
  
  audiences_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.AuthRequirement.audiences)
}
::std::string* AuthRequirement::mutable_audiences() {
  
  // @@protoc_insertion_point(field_mutable:google.api.AuthRequirement.audiences)
  return audiences_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthRequirement::release_audiences() {
  // @@protoc_insertion_point(field_release:google.api.AuthRequirement.audiences)
  
  return audiences_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthRequirement::set_allocated_audiences(::std::string* audiences) {
  if (audiences != NULL) {
    
  } else {
    
  }
  audiences_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audiences);
  // @@protoc_insertion_point(field_set_allocated:google.api.AuthRequirement.audiences)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)
