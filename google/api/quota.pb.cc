// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/quota.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/api/quota.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace api {
class QuotaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Quota> {
} _Quota_default_instance_;
class MetricRule_MetricCostsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MetricRule::MetricRule_MetricCostsEntry> {
} _MetricRule_MetricCostsEntry_default_instance_;
class MetricRuleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MetricRule> {
} _MetricRule_default_instance_;
class QuotaLimit_ValuesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuotaLimit::QuotaLimit_ValuesEntry> {
} _QuotaLimit_ValuesEntry_default_instance_;
class QuotaLimitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuotaLimit> {
} _QuotaLimit_default_instance_;

namespace protobuf_google_2fapi_2fquota_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quota, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quota, limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quota, metric_rules_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricRule, selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricRule, metric_costs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, default_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, max_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, free_tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, metric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotaLimit, display_name_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Quota)},
  { 7, -1, sizeof(MetricRule)},
  { 14, -1, sizeof(QuotaLimit)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Quota_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MetricRule_MetricCostsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MetricRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuotaLimit_ValuesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuotaLimit_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/api/quota.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
file_level_metadata[1].reflection = MetricRule::MetricRule_MetricCostsEntry::CreateReflection(file_level_metadata[1].descriptor, _MetricRule_MetricCostsEntry_default_instance_.get_mutable());
file_level_metadata[3].reflection = QuotaLimit::QuotaLimit_ValuesEntry::CreateReflection(file_level_metadata[3].descriptor, _QuotaLimit_ValuesEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _Quota_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MetricRule_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _QuotaLimit_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  delete file_level_metadata[1].reflection;
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  _Quota_default_instance_.DefaultConstruct();
  _MetricRule_MetricCostsEntry_default_instance_.DefaultConstruct();
  _MetricRule_default_instance_.DefaultConstruct();
  _QuotaLimit_ValuesEntry_default_instance_.DefaultConstruct();
  _QuotaLimit_default_instance_.DefaultConstruct();
  _MetricRule_MetricCostsEntry_default_instance_.get_mutable()->set_default_instance(_MetricRule_MetricCostsEntry_default_instance_.get_mutable());
  _MetricRule_MetricCostsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _QuotaLimit_ValuesEntry_default_instance_.get_mutable()->set_default_instance(_QuotaLimit_ValuesEntry_default_instance_.get_mutable());
  _QuotaLimit_ValuesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026google/api/quota.proto\022\ngoogle.api\032\034go"
      "ogle/api/annotations.proto\"]\n\005Quota\022&\n\006l"
      "imits\030\003 \003(\0132\026.google.api.QuotaLimit\022,\n\014m"
      "etric_rules\030\004 \003(\0132\026.google.api.MetricRul"
      "e\"\221\001\n\nMetricRule\022\020\n\010selector\030\001 \001(\t\022=\n\014me"
      "tric_costs\030\002 \003(\0132\'.google.api.MetricRule"
      ".MetricCostsEntry\0322\n\020MetricCostsEntry\022\013\n"
      "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\"\225\002\n\nQuotaL"
      "imit\022\014\n\004name\030\006 \001(\t\022\023\n\013description\030\002 \001(\t\022"
      "\025\n\rdefault_limit\030\003 \001(\003\022\021\n\tmax_limit\030\004 \001("
      "\003\022\021\n\tfree_tier\030\007 \001(\003\022\020\n\010duration\030\005 \001(\t\022\016"
      "\n\006metric\030\010 \001(\t\022\014\n\004unit\030\t \001(\t\0222\n\006values\030\n"
      " \003(\0132\".google.api.QuotaLimit.ValuesEntry"
      "\022\024\n\014display_name\030\014 \001(\t\032-\n\013ValuesEntry\022\013\n"
      "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001Bl\n\016com.goo"
      "gle.apiB\nQuotaProtoP\001ZEgoogle.golang.org"
      "/genproto/googleapis/api/serviceconfig;s"
      "erviceconfig\242\002\004GAPIb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 707);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/api/quota.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fapi_2fquota_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quota::kLimitsFieldNumber;
const int Quota::kMetricRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quota::Quota()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fapi_2fquota_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Quota)
}
Quota::Quota(const Quota& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      limits_(from.limits_),
      metric_rules_(from.metric_rules_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.api.Quota)
}

void Quota::SharedCtor() {
  _cached_size_ = 0;
}

Quota::~Quota() {
  // @@protoc_insertion_point(destructor:google.api.Quota)
  SharedDtor();
}

void Quota::SharedDtor() {
}

void Quota::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quota::descriptor() {
  protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Quota& Quota::default_instance() {
  protobuf_google_2fapi_2fquota_2eproto::InitDefaults();
  return *internal_default_instance();
}

Quota* Quota::New(::google::protobuf::Arena* arena) const {
  Quota* n = new Quota;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quota::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Quota)
  limits_.Clear();
  metric_rules_.Clear();
}

bool Quota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Quota)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.api.QuotaLimit limits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.api.MetricRule metric_rules = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metric_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Quota)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Quota)
  return false;
#undef DO_
}

void Quota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Quota)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.QuotaLimit limits = 3;
  for (unsigned int i = 0, n = this->limits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->limits(i), output);
  }

  // repeated .google.api.MetricRule metric_rules = 4;
  for (unsigned int i = 0, n = this->metric_rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->metric_rules(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.Quota)
}

::google::protobuf::uint8* Quota::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Quota)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.QuotaLimit limits = 3;
  for (unsigned int i = 0, n = this->limits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->limits(i), deterministic, target);
  }

  // repeated .google.api.MetricRule metric_rules = 4;
  for (unsigned int i = 0, n = this->metric_rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->metric_rules(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.Quota)
  return target;
}

size_t Quota::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Quota)
  size_t total_size = 0;

  // repeated .google.api.QuotaLimit limits = 3;
  {
    unsigned int count = this->limits_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limits(i));
    }
  }

  // repeated .google.api.MetricRule metric_rules = 4;
  {
    unsigned int count = this->metric_rules_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metric_rules(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quota::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Quota)
  GOOGLE_DCHECK_NE(&from, this);
  const Quota* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quota>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Quota)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Quota)
    MergeFrom(*source);
  }
}

void Quota::MergeFrom(const Quota& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Quota)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limits_.MergeFrom(from.limits_);
  metric_rules_.MergeFrom(from.metric_rules_);
}

void Quota::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Quota)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quota::CopyFrom(const Quota& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Quota)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quota::IsInitialized() const {
  return true;
}

void Quota::Swap(Quota* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quota::InternalSwap(Quota* other) {
  limits_.InternalSwap(&other->limits_);
  metric_rules_.InternalSwap(&other->metric_rules_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quota::GetMetadata() const {
  protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quota

// repeated .google.api.QuotaLimit limits = 3;
int Quota::limits_size() const {
  return limits_.size();
}
void Quota::clear_limits() {
  limits_.Clear();
}
const ::google::api::QuotaLimit& Quota::limits(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Quota.limits)
  return limits_.Get(index);
}
::google::api::QuotaLimit* Quota::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Quota.limits)
  return limits_.Mutable(index);
}
::google::api::QuotaLimit* Quota::add_limits() {
  // @@protoc_insertion_point(field_add:google.api.Quota.limits)
  return limits_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::QuotaLimit >*
Quota::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Quota.limits)
  return &limits_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::QuotaLimit >&
Quota::limits() const {
  // @@protoc_insertion_point(field_list:google.api.Quota.limits)
  return limits_;
}

// repeated .google.api.MetricRule metric_rules = 4;
int Quota::metric_rules_size() const {
  return metric_rules_.size();
}
void Quota::clear_metric_rules() {
  metric_rules_.Clear();
}
const ::google::api::MetricRule& Quota::metric_rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Quota.metric_rules)
  return metric_rules_.Get(index);
}
::google::api::MetricRule* Quota::mutable_metric_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Quota.metric_rules)
  return metric_rules_.Mutable(index);
}
::google::api::MetricRule* Quota::add_metric_rules() {
  // @@protoc_insertion_point(field_add:google.api.Quota.metric_rules)
  return metric_rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::api::MetricRule >*
Quota::mutable_metric_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Quota.metric_rules)
  return &metric_rules_;
}
const ::google::protobuf::RepeatedPtrField< ::google::api::MetricRule >&
Quota::metric_rules() const {
  // @@protoc_insertion_point(field_list:google.api.Quota.metric_rules)
  return metric_rules_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

MetricRule::MetricRule_MetricCostsEntry::MetricRule_MetricCostsEntry() {}
MetricRule::MetricRule_MetricCostsEntry::MetricRule_MetricCostsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata MetricRule::MetricRule_MetricCostsEntry::GetMetadata() const {
  protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[1];
}
void MetricRule::MetricRule_MetricCostsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void MetricRule::MetricRule_MetricCostsEntry::MergeFrom(const MetricRule_MetricCostsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricRule::kSelectorFieldNumber;
const int MetricRule::kMetricCostsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricRule::MetricRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fapi_2fquota_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.MetricRule)
}
MetricRule::MetricRule(const MetricRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metric_costs_.MergeFrom(from.metric_costs_);
  selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.selector().size() > 0) {
    selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selector_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.MetricRule)
}

void MetricRule::SharedCtor() {
  selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MetricRule::~MetricRule() {
  // @@protoc_insertion_point(destructor:google.api.MetricRule)
  SharedDtor();
}

void MetricRule::SharedDtor() {
  selector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetricRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricRule::descriptor() {
  protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetricRule& MetricRule::default_instance() {
  protobuf_google_2fapi_2fquota_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetricRule* MetricRule::New(::google::protobuf::Arena* arena) const {
  MetricRule* n = new MetricRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetricRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.MetricRule)
  metric_costs_.Clear();
  selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MetricRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.MetricRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string selector = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selector()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->selector().data(), this->selector().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.MetricRule.selector"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> metric_costs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          MetricRule_MetricCostsEntry::Parser< ::google::protobuf::internal::MapField<
              MetricRule_MetricCostsEntry,
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&metric_costs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.MetricRule.MetricCostsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.MetricRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.MetricRule)
  return false;
#undef DO_
}

void MetricRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.MetricRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string selector = 1;
  if (this->selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->selector().data(), this->selector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricRule.selector");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->selector(), output);
  }

  // map<string, int64> metric_costs = 2;
  if (!this->metric_costs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.MetricRule.MetricCostsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->metric_costs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metric_costs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->metric_costs().begin();
          it != this->metric_costs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MetricRule_MetricCostsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metric_costs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MetricRule_MetricCostsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->metric_costs().begin();
          it != this->metric_costs().end(); ++it) {
        entry.reset(metric_costs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.api.MetricRule)
}

::google::protobuf::uint8* MetricRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.MetricRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string selector = 1;
  if (this->selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->selector().data(), this->selector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.MetricRule.selector");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->selector(), target);
  }

  // map<string, int64> metric_costs = 2;
  if (!this->metric_costs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.MetricRule.MetricCostsEntry.key");
      }
    };

    if (deterministic &&
        this->metric_costs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metric_costs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->metric_costs().begin();
          it != this->metric_costs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MetricRule_MetricCostsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metric_costs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MetricRule_MetricCostsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->metric_costs().begin();
          it != this->metric_costs().end(); ++it) {
        entry.reset(metric_costs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.MetricRule)
  return target;
}

size_t MetricRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.MetricRule)
  size_t total_size = 0;

  // map<string, int64> metric_costs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metric_costs_size());
  {
    ::google::protobuf::scoped_ptr<MetricRule_MetricCostsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->metric_costs().begin();
        it != this->metric_costs().end(); ++it) {
      entry.reset(metric_costs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string selector = 1;
  if (this->selector().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->selector());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.MetricRule)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricRule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetricRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.MetricRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.MetricRule)
    MergeFrom(*source);
  }
}

void MetricRule::MergeFrom(const MetricRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.MetricRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metric_costs_.MergeFrom(from.metric_costs_);
  if (from.selector().size() > 0) {

    selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selector_);
  }
}

void MetricRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.MetricRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricRule::CopyFrom(const MetricRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.MetricRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricRule::IsInitialized() const {
  return true;
}

void MetricRule::Swap(MetricRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricRule::InternalSwap(MetricRule* other) {
  metric_costs_.Swap(&other->metric_costs_);
  selector_.Swap(&other->selector_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetricRule::GetMetadata() const {
  protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetricRule

// string selector = 1;
void MetricRule::clear_selector() {
  selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MetricRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.MetricRule.selector)
  return selector_.GetNoArena();
}
void MetricRule::set_selector(const ::std::string& value) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricRule.selector)
}
#if LANG_CXX11
void MetricRule::set_selector(::std::string&& value) {
  
  selector_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.MetricRule.selector)
}
#endif
void MetricRule::set_selector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricRule.selector)
}
void MetricRule::set_selector(const char* value, size_t size) {
  
  selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricRule.selector)
}
::std::string* MetricRule::mutable_selector() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricRule.selector)
  return selector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetricRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.MetricRule.selector)
  
  return selector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricRule::set_allocated_selector(::std::string* selector) {
  if (selector != NULL) {
    
  } else {
    
  }
  selector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selector);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricRule.selector)
}

// map<string, int64> metric_costs = 2;
int MetricRule::metric_costs_size() const {
  return metric_costs_.size();
}
void MetricRule::clear_metric_costs() {
  metric_costs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
MetricRule::metric_costs() const {
  // @@protoc_insertion_point(field_map:google.api.MetricRule.metric_costs)
  return metric_costs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
MetricRule::mutable_metric_costs() {
  // @@protoc_insertion_point(field_mutable_map:google.api.MetricRule.metric_costs)
  return metric_costs_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

QuotaLimit::QuotaLimit_ValuesEntry::QuotaLimit_ValuesEntry() {}
QuotaLimit::QuotaLimit_ValuesEntry::QuotaLimit_ValuesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata QuotaLimit::QuotaLimit_ValuesEntry::GetMetadata() const {
  protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[3];
}
void QuotaLimit::QuotaLimit_ValuesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void QuotaLimit::QuotaLimit_ValuesEntry::MergeFrom(const QuotaLimit_ValuesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuotaLimit::kNameFieldNumber;
const int QuotaLimit::kDescriptionFieldNumber;
const int QuotaLimit::kDefaultLimitFieldNumber;
const int QuotaLimit::kMaxLimitFieldNumber;
const int QuotaLimit::kFreeTierFieldNumber;
const int QuotaLimit::kDurationFieldNumber;
const int QuotaLimit::kMetricFieldNumber;
const int QuotaLimit::kUnitFieldNumber;
const int QuotaLimit::kValuesFieldNumber;
const int QuotaLimit::kDisplayNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuotaLimit::QuotaLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fapi_2fquota_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.QuotaLimit)
}
QuotaLimit::QuotaLimit(const QuotaLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  duration_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.duration().size() > 0) {
    duration_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duration_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  metric_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metric().size() > 0) {
    metric_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_);
  }
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unit().size() > 0) {
    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  ::memcpy(&default_limit_, &from.default_limit_,
    reinterpret_cast<char*>(&free_tier_) -
    reinterpret_cast<char*>(&default_limit_) + sizeof(free_tier_));
  // @@protoc_insertion_point(copy_constructor:google.api.QuotaLimit)
}

void QuotaLimit::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&default_limit_, 0, reinterpret_cast<char*>(&free_tier_) -
    reinterpret_cast<char*>(&default_limit_) + sizeof(free_tier_));
  _cached_size_ = 0;
}

QuotaLimit::~QuotaLimit() {
  // @@protoc_insertion_point(destructor:google.api.QuotaLimit)
  SharedDtor();
}

void QuotaLimit::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QuotaLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuotaLimit::descriptor() {
  protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuotaLimit& QuotaLimit::default_instance() {
  protobuf_google_2fapi_2fquota_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuotaLimit* QuotaLimit::New(::google::protobuf::Arena* arena) const {
  QuotaLimit* n = new QuotaLimit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuotaLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.QuotaLimit)
  values_.Clear();
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metric_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&default_limit_, 0, reinterpret_cast<char*>(&free_tier_) -
    reinterpret_cast<char*>(&default_limit_) + sizeof(free_tier_));
}

bool QuotaLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.QuotaLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 default_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &default_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duration()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->duration().data(), this->duration().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.duration"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 free_tier = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &free_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metric = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metric()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metric().data(), this->metric().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.metric"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.unit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> values = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          QuotaLimit_ValuesEntry::Parser< ::google::protobuf::internal::MapField<
              QuotaLimit_ValuesEntry,
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.ValuesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.api.QuotaLimit.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.QuotaLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.QuotaLimit)
  return false;
#undef DO_
}

void QuotaLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.QuotaLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // int64 default_limit = 3;
  if (this->default_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->default_limit(), output);
  }

  // int64 max_limit = 4;
  if (this->max_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_limit(), output);
  }

  // string duration = 5;
  if (this->duration().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->duration().data(), this->duration().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.duration");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->duration(), output);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // int64 free_tier = 7;
  if (this->free_tier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->free_tier(), output);
  }

  // string metric = 8;
  if (this->metric().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric().data(), this->metric().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.metric");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->metric(), output);
  }

  // string unit = 9;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->unit(), output);
  }

  // map<string, int64> values = 10;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.QuotaLimit.ValuesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<QuotaLimit_ValuesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<QuotaLimit_ValuesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string display_name = 12;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->display_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.api.QuotaLimit)
}

::google::protobuf::uint8* QuotaLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.api.QuotaLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // int64 default_limit = 3;
  if (this->default_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->default_limit(), target);
  }

  // int64 max_limit = 4;
  if (this->max_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->max_limit(), target);
  }

  // string duration = 5;
  if (this->duration().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->duration().data(), this->duration().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.duration");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->duration(), target);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // int64 free_tier = 7;
  if (this->free_tier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->free_tier(), target);
  }

  // string metric = 8;
  if (this->metric().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric().data(), this->metric().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.metric");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->metric(), target);
  }

  // string unit = 9;
  if (this->unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->unit(), target);
  }

  // map<string, int64> values = 10;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.api.QuotaLimit.ValuesEntry.key");
      }
    };

    if (deterministic &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<QuotaLimit_ValuesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<QuotaLimit_ValuesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string display_name = 12;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.api.QuotaLimit.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->display_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.api.QuotaLimit)
  return target;
}

size_t QuotaLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.QuotaLimit)
  size_t total_size = 0;

  // map<string, int64> values = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::google::protobuf::scoped_ptr<QuotaLimit_ValuesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string duration = 5;
  if (this->duration().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->duration());
  }

  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string metric = 8;
  if (this->metric().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metric());
  }

  // string unit = 9;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit());
  }

  // string display_name = 12;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // int64 default_limit = 3;
  if (this->default_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->default_limit());
  }

  // int64 max_limit = 4;
  if (this->max_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_limit());
  }

  // int64 free_tier = 7;
  if (this->free_tier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->free_tier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuotaLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.QuotaLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const QuotaLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuotaLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.QuotaLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.QuotaLimit)
    MergeFrom(*source);
  }
}

void QuotaLimit::MergeFrom(const QuotaLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.QuotaLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.duration().size() > 0) {

    duration_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duration_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.metric().size() > 0) {

    metric_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_);
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.default_limit() != 0) {
    set_default_limit(from.default_limit());
  }
  if (from.max_limit() != 0) {
    set_max_limit(from.max_limit());
  }
  if (from.free_tier() != 0) {
    set_free_tier(from.free_tier());
  }
}

void QuotaLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.QuotaLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuotaLimit::CopyFrom(const QuotaLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.QuotaLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaLimit::IsInitialized() const {
  return true;
}

void QuotaLimit::Swap(QuotaLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuotaLimit::InternalSwap(QuotaLimit* other) {
  values_.Swap(&other->values_);
  description_.Swap(&other->description_);
  duration_.Swap(&other->duration_);
  name_.Swap(&other->name_);
  metric_.Swap(&other->metric_);
  unit_.Swap(&other->unit_);
  display_name_.Swap(&other->display_name_);
  std::swap(default_limit_, other->default_limit_);
  std::swap(max_limit_, other->max_limit_);
  std::swap(free_tier_, other->free_tier_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuotaLimit::GetMetadata() const {
  protobuf_google_2fapi_2fquota_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fapi_2fquota_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuotaLimit

// string name = 6;
void QuotaLimit::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuotaLimit::name() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.name)
  return name_.GetNoArena();
}
void QuotaLimit::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.name)
}
#if LANG_CXX11
void QuotaLimit::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.QuotaLimit.name)
}
#endif
void QuotaLimit::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.name)
}
void QuotaLimit::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.name)
}
::std::string* QuotaLimit::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuotaLimit::release_name() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.name)
}

// string description = 2;
void QuotaLimit::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuotaLimit::description() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.description)
  return description_.GetNoArena();
}
void QuotaLimit::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.description)
}
#if LANG_CXX11
void QuotaLimit::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.QuotaLimit.description)
}
#endif
void QuotaLimit::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.description)
}
void QuotaLimit::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.description)
}
::std::string* QuotaLimit::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuotaLimit::release_description() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.description)
}

// int64 default_limit = 3;
void QuotaLimit::clear_default_limit() {
  default_limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuotaLimit::default_limit() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.default_limit)
  return default_limit_;
}
void QuotaLimit::set_default_limit(::google::protobuf::int64 value) {
  
  default_limit_ = value;
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.default_limit)
}

// int64 max_limit = 4;
void QuotaLimit::clear_max_limit() {
  max_limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuotaLimit::max_limit() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.max_limit)
  return max_limit_;
}
void QuotaLimit::set_max_limit(::google::protobuf::int64 value) {
  
  max_limit_ = value;
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.max_limit)
}

// int64 free_tier = 7;
void QuotaLimit::clear_free_tier() {
  free_tier_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QuotaLimit::free_tier() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.free_tier)
  return free_tier_;
}
void QuotaLimit::set_free_tier(::google::protobuf::int64 value) {
  
  free_tier_ = value;
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.free_tier)
}

// string duration = 5;
void QuotaLimit::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuotaLimit::duration() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.duration)
  return duration_.GetNoArena();
}
void QuotaLimit::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.duration)
}
#if LANG_CXX11
void QuotaLimit::set_duration(::std::string&& value) {
  
  duration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.QuotaLimit.duration)
}
#endif
void QuotaLimit::set_duration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.duration)
}
void QuotaLimit::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.duration)
}
::std::string* QuotaLimit::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuotaLimit::release_duration() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.duration)
}

// string metric = 8;
void QuotaLimit::clear_metric() {
  metric_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuotaLimit::metric() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.metric)
  return metric_.GetNoArena();
}
void QuotaLimit::set_metric(const ::std::string& value) {
  
  metric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.metric)
}
#if LANG_CXX11
void QuotaLimit::set_metric(::std::string&& value) {
  
  metric_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.QuotaLimit.metric)
}
#endif
void QuotaLimit::set_metric(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.metric)
}
void QuotaLimit::set_metric(const char* value, size_t size) {
  
  metric_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.metric)
}
::std::string* QuotaLimit::mutable_metric() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.metric)
  return metric_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuotaLimit::release_metric() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.metric)
  
  return metric_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_allocated_metric(::std::string* metric) {
  if (metric != NULL) {
    
  } else {
    
  }
  metric_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metric);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.metric)
}

// string unit = 9;
void QuotaLimit::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuotaLimit::unit() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.unit)
  return unit_.GetNoArena();
}
void QuotaLimit::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.unit)
}
#if LANG_CXX11
void QuotaLimit::set_unit(::std::string&& value) {
  
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.QuotaLimit.unit)
}
#endif
void QuotaLimit::set_unit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.unit)
}
void QuotaLimit::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.unit)
}
::std::string* QuotaLimit::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuotaLimit::release_unit() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.unit)
}

// map<string, int64> values = 10;
int QuotaLimit::values_size() const {
  return values_.size();
}
void QuotaLimit::clear_values() {
  values_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
QuotaLimit::values() const {
  // @@protoc_insertion_point(field_map:google.api.QuotaLimit.values)
  return values_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
QuotaLimit::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:google.api.QuotaLimit.values)
  return values_.MutableMap();
}

// string display_name = 12;
void QuotaLimit::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuotaLimit::display_name() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.display_name)
  return display_name_.GetNoArena();
}
void QuotaLimit::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.display_name)
}
#if LANG_CXX11
void QuotaLimit::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.QuotaLimit.display_name)
}
#endif
void QuotaLimit::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.display_name)
}
void QuotaLimit::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.display_name)
}
::std::string* QuotaLimit::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuotaLimit::release_display_name() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuotaLimit::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.display_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)
