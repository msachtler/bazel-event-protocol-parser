// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/assistant/embedded/v1alpha1/embedded_assistant.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/assistant/embedded/v1alpha1/embedded_assistant.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace assistant {
namespace embedded {
namespace v1alpha1 {
class ConverseConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConverseConfig> {
} _ConverseConfig_default_instance_;
class AudioInConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioInConfig> {
} _AudioInConfig_default_instance_;
class AudioOutConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioOutConfig> {
} _AudioOutConfig_default_instance_;
class ConverseStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConverseState> {
} _ConverseState_default_instance_;
class AudioOutDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioOut> {
} _AudioOut_default_instance_;
class ConverseResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConverseResult> {
} _ConverseResult_default_instance_;
class ConverseRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConverseRequest> {
  public:
  const ::google::assistant::embedded::v1alpha1::ConverseConfig* config_;
  ::google::protobuf::internal::ArenaStringPtr audio_in_;
} _ConverseRequest_default_instance_;
class ConverseResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConverseResponse> {
  public:
  const ::google::rpc::Status* error_;
  int event_type_;
  const ::google::assistant::embedded::v1alpha1::AudioOut* audio_out_;
  const ::google::assistant::embedded::v1alpha1::ConverseResult* result_;
} _ConverseResponse_default_instance_;

namespace protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseConfig, audio_in_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseConfig, audio_out_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseConfig, converse_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioInConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioInConfig, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioInConfig, sample_rate_hertz_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioOutConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioOutConfig, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioOutConfig, sample_rate_hertz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioOutConfig, volume_percentage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseState, conversation_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioOut, audio_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseResult, spoken_request_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseResult, spoken_response_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseResult, conversation_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseResult, microphone_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseResult, volume_percentage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ConverseRequest_default_instance_), config_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ConverseRequest_default_instance_), audio_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseRequest, converse_request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ConverseResponse_default_instance_), error_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ConverseResponse_default_instance_), event_type_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ConverseResponse_default_instance_), audio_out_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ConverseResponse_default_instance_), result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConverseResponse, converse_response_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ConverseConfig)},
  { 8, -1, sizeof(AudioInConfig)},
  { 15, -1, sizeof(AudioOutConfig)},
  { 23, -1, sizeof(ConverseState)},
  { 29, -1, sizeof(AudioOut)},
  { 35, -1, sizeof(ConverseResult)},
  { 45, -1, sizeof(ConverseRequest)},
  { 53, -1, sizeof(ConverseResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConverseConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AudioInConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AudioOutConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConverseState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AudioOut_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConverseResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConverseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConverseResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/assistant/embedded/v1alpha1/embedded_assistant.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _ConverseConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _AudioInConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _AudioOutConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ConverseState_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _AudioOut_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ConverseResult_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ConverseRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ConverseResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::InitDefaults();
  _ConverseConfig_default_instance_.DefaultConstruct();
  _AudioInConfig_default_instance_.DefaultConstruct();
  _AudioOutConfig_default_instance_.DefaultConstruct();
  _ConverseState_default_instance_.DefaultConstruct();
  _AudioOut_default_instance_.DefaultConstruct();
  _ConverseResult_default_instance_.DefaultConstruct();
  _ConverseRequest_default_instance_.DefaultConstruct();
  _ConverseResponse_default_instance_.DefaultConstruct();
  _ConverseConfig_default_instance_.get_mutable()->audio_in_config_ = const_cast< ::google::assistant::embedded::v1alpha1::AudioInConfig*>(
      ::google::assistant::embedded::v1alpha1::AudioInConfig::internal_default_instance());
  _ConverseConfig_default_instance_.get_mutable()->audio_out_config_ = const_cast< ::google::assistant::embedded::v1alpha1::AudioOutConfig*>(
      ::google::assistant::embedded::v1alpha1::AudioOutConfig::internal_default_instance());
  _ConverseConfig_default_instance_.get_mutable()->converse_state_ = const_cast< ::google::assistant::embedded::v1alpha1::ConverseState*>(
      ::google::assistant::embedded::v1alpha1::ConverseState::internal_default_instance());
  _ConverseRequest_default_instance_.config_ = const_cast< ::google::assistant::embedded::v1alpha1::ConverseConfig*>(
      ::google::assistant::embedded::v1alpha1::ConverseConfig::internal_default_instance());
  _ConverseRequest_default_instance_.audio_in_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ConverseResponse_default_instance_.error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  _ConverseResponse_default_instance_.event_type_ = 0;
  _ConverseResponse_default_instance_.audio_out_ = const_cast< ::google::assistant::embedded::v1alpha1::AudioOut*>(
      ::google::assistant::embedded::v1alpha1::AudioOut::internal_default_instance());
  _ConverseResponse_default_instance_.result_ = const_cast< ::google::assistant::embedded::v1alpha1::ConverseResult*>(
      ::google::assistant::embedded::v1alpha1::ConverseResult::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n;google/assistant/embedded/v1alpha1/emb"
      "edded_assistant.proto\022\"google.assistant."
      "embedded.v1alpha1\032\034google/api/annotation"
      "s.proto\032\027google/rpc/status.proto\"\365\001\n\016Con"
      "verseConfig\022J\n\017audio_in_config\030\001 \001(\01321.g"
      "oogle.assistant.embedded.v1alpha1.AudioI"
      "nConfig\022L\n\020audio_out_config\030\002 \001(\01322.goog"
      "le.assistant.embedded.v1alpha1.AudioOutC"
      "onfig\022I\n\016converse_state\030\003 \001(\01321.google.a"
      "ssistant.embedded.v1alpha1.ConverseState"
      "\"\266\001\n\rAudioInConfig\022L\n\010encoding\030\001 \001(\0162:.g"
      "oogle.assistant.embedded.v1alpha1.AudioI"
      "nConfig.Encoding\022\031\n\021sample_rate_hertz\030\002 "
      "\001(\005\"<\n\010Encoding\022\030\n\024ENCODING_UNSPECIFIED\020"
      "\000\022\014\n\010LINEAR16\020\001\022\010\n\004FLAC\020\002\"\343\001\n\016AudioOutCo"
      "nfig\022M\n\010encoding\030\001 \001(\0162;.google.assistan"
      "t.embedded.v1alpha1.AudioOutConfig.Encod"
      "ing\022\031\n\021sample_rate_hertz\030\002 \001(\005\022\031\n\021volume"
      "_percentage\030\003 \001(\005\"L\n\010Encoding\022\030\n\024ENCODIN"
      "G_UNSPECIFIED\020\000\022\014\n\010LINEAR16\020\001\022\007\n\003MP3\020\002\022\017"
      "\n\013OPUS_IN_OGG\020\003\"+\n\rConverseState\022\032\n\022conv"
      "ersation_state\030\001 \001(\014\"\036\n\010AudioOut\022\022\n\naudi"
      "o_data\030\001 \001(\014\"\275\002\n\016ConverseResult\022\033\n\023spoke"
      "n_request_text\030\001 \001(\t\022\034\n\024spoken_response_"
      "text\030\002 \001(\t\022\032\n\022conversation_state\030\003 \001(\014\022Z"
      "\n\017microphone_mode\030\004 \001(\0162A.google.assista"
      "nt.embedded.v1alpha1.ConverseResult.Micr"
      "ophoneMode\022\031\n\021volume_percentage\030\005 \001(\005\"]\n"
      "\016MicrophoneMode\022\037\n\033MICROPHONE_MODE_UNSPE"
      "CIFIED\020\000\022\024\n\020CLOSE_MICROPHONE\020\001\022\024\n\020DIALOG"
      "_FOLLOW_ON\020\002\"\177\n\017ConverseRequest\022D\n\006confi"
      "g\030\001 \001(\01322.google.assistant.embedded.v1al"
      "pha1.ConverseConfigH\000\022\022\n\010audio_in\030\002 \001(\014H"
      "\000B\022\n\020converse_request\"\352\002\n\020ConverseRespon"
      "se\022#\n\005error\030\001 \001(\0132\022.google.rpc.StatusH\000\022"
      "T\n\nevent_type\030\002 \001(\0162>.google.assistant.e"
      "mbedded.v1alpha1.ConverseResponse.EventT"
      "ypeH\000\022A\n\taudio_out\030\003 \001(\0132,.google.assist"
      "ant.embedded.v1alpha1.AudioOutH\000\022D\n\006resu"
      "lt\030\005 \001(\01322.google.assistant.embedded.v1a"
      "lpha1.ConverseResultH\000\"=\n\tEventType\022\032\n\026E"
      "VENT_TYPE_UNSPECIFIED\020\000\022\024\n\020END_OF_UTTERA"
      "NCE\020\001B\023\n\021converse_response2\216\001\n\021EmbeddedA"
      "ssistant\022y\n\010Converse\0223.google.assistant."
      "embedded.v1alpha1.ConverseRequest\0324.goog"
      "le.assistant.embedded.v1alpha1.ConverseR"
      "esponse(\0010\001B\206\001\n&com.google.assistant.emb"
      "edded.v1alpha1B\016AssistantProtoP\001ZJgoogle"
      ".golang.org/genproto/googleapis/assistan"
      "t/embedded/v1alpha1;embeddedb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1996);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/assistant/embedded/v1alpha1/embedded_assistant.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto

const ::google::protobuf::EnumDescriptor* AudioInConfig_Encoding_descriptor() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_enum_descriptors[0];
}
bool AudioInConfig_Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AudioInConfig_Encoding AudioInConfig::ENCODING_UNSPECIFIED;
const AudioInConfig_Encoding AudioInConfig::LINEAR16;
const AudioInConfig_Encoding AudioInConfig::FLAC;
const AudioInConfig_Encoding AudioInConfig::Encoding_MIN;
const AudioInConfig_Encoding AudioInConfig::Encoding_MAX;
const int AudioInConfig::Encoding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AudioOutConfig_Encoding_descriptor() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_enum_descriptors[1];
}
bool AudioOutConfig_Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AudioOutConfig_Encoding AudioOutConfig::ENCODING_UNSPECIFIED;
const AudioOutConfig_Encoding AudioOutConfig::LINEAR16;
const AudioOutConfig_Encoding AudioOutConfig::MP3;
const AudioOutConfig_Encoding AudioOutConfig::OPUS_IN_OGG;
const AudioOutConfig_Encoding AudioOutConfig::Encoding_MIN;
const AudioOutConfig_Encoding AudioOutConfig::Encoding_MAX;
const int AudioOutConfig::Encoding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConverseResult_MicrophoneMode_descriptor() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_enum_descriptors[2];
}
bool ConverseResult_MicrophoneMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConverseResult_MicrophoneMode ConverseResult::MICROPHONE_MODE_UNSPECIFIED;
const ConverseResult_MicrophoneMode ConverseResult::CLOSE_MICROPHONE;
const ConverseResult_MicrophoneMode ConverseResult::DIALOG_FOLLOW_ON;
const ConverseResult_MicrophoneMode ConverseResult::MicrophoneMode_MIN;
const ConverseResult_MicrophoneMode ConverseResult::MicrophoneMode_MAX;
const int ConverseResult::MicrophoneMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ConverseResponse_EventType_descriptor() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_enum_descriptors[3];
}
bool ConverseResponse_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConverseResponse_EventType ConverseResponse::EVENT_TYPE_UNSPECIFIED;
const ConverseResponse_EventType ConverseResponse::END_OF_UTTERANCE;
const ConverseResponse_EventType ConverseResponse::EventType_MIN;
const ConverseResponse_EventType ConverseResponse::EventType_MAX;
const int ConverseResponse::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConverseConfig::kAudioInConfigFieldNumber;
const int ConverseConfig::kAudioOutConfigFieldNumber;
const int ConverseConfig::kConverseStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConverseConfig::ConverseConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.assistant.embedded.v1alpha1.ConverseConfig)
}
ConverseConfig::ConverseConfig(const ConverseConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_audio_in_config()) {
    audio_in_config_ = new ::google::assistant::embedded::v1alpha1::AudioInConfig(*from.audio_in_config_);
  } else {
    audio_in_config_ = NULL;
  }
  if (from.has_audio_out_config()) {
    audio_out_config_ = new ::google::assistant::embedded::v1alpha1::AudioOutConfig(*from.audio_out_config_);
  } else {
    audio_out_config_ = NULL;
  }
  if (from.has_converse_state()) {
    converse_state_ = new ::google::assistant::embedded::v1alpha1::ConverseState(*from.converse_state_);
  } else {
    converse_state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.assistant.embedded.v1alpha1.ConverseConfig)
}

void ConverseConfig::SharedCtor() {
  ::memset(&audio_in_config_, 0, reinterpret_cast<char*>(&converse_state_) -
    reinterpret_cast<char*>(&audio_in_config_) + sizeof(converse_state_));
  _cached_size_ = 0;
}

ConverseConfig::~ConverseConfig() {
  // @@protoc_insertion_point(destructor:google.assistant.embedded.v1alpha1.ConverseConfig)
  SharedDtor();
}

void ConverseConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete audio_in_config_;
  }
  if (this != internal_default_instance()) {
    delete audio_out_config_;
  }
  if (this != internal_default_instance()) {
    delete converse_state_;
  }
}

void ConverseConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConverseConfig::descriptor() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConverseConfig& ConverseConfig::default_instance() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConverseConfig* ConverseConfig::New(::google::protobuf::Arena* arena) const {
  ConverseConfig* n = new ConverseConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConverseConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.assistant.embedded.v1alpha1.ConverseConfig)
  if (GetArenaNoVirtual() == NULL && audio_in_config_ != NULL) {
    delete audio_in_config_;
  }
  audio_in_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_out_config_ != NULL) {
    delete audio_out_config_;
  }
  audio_out_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && converse_state_ != NULL) {
    delete converse_state_;
  }
  converse_state_ = NULL;
}

bool ConverseConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.assistant.embedded.v1alpha1.ConverseConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.assistant.embedded.v1alpha1.AudioInConfig audio_in_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_in_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.assistant.embedded.v1alpha1.AudioOutConfig audio_out_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_out_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.assistant.embedded.v1alpha1.ConverseState converse_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_converse_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.assistant.embedded.v1alpha1.ConverseConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.assistant.embedded.v1alpha1.ConverseConfig)
  return false;
#undef DO_
}

void ConverseConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.assistant.embedded.v1alpha1.ConverseConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.assistant.embedded.v1alpha1.AudioInConfig audio_in_config = 1;
  if (this->has_audio_in_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->audio_in_config_, output);
  }

  // .google.assistant.embedded.v1alpha1.AudioOutConfig audio_out_config = 2;
  if (this->has_audio_out_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->audio_out_config_, output);
  }

  // .google.assistant.embedded.v1alpha1.ConverseState converse_state = 3;
  if (this->has_converse_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->converse_state_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.assistant.embedded.v1alpha1.ConverseConfig)
}

::google::protobuf::uint8* ConverseConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.assistant.embedded.v1alpha1.ConverseConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.assistant.embedded.v1alpha1.AudioInConfig audio_in_config = 1;
  if (this->has_audio_in_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->audio_in_config_, deterministic, target);
  }

  // .google.assistant.embedded.v1alpha1.AudioOutConfig audio_out_config = 2;
  if (this->has_audio_out_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->audio_out_config_, deterministic, target);
  }

  // .google.assistant.embedded.v1alpha1.ConverseState converse_state = 3;
  if (this->has_converse_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->converse_state_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.assistant.embedded.v1alpha1.ConverseConfig)
  return target;
}

size_t ConverseConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.assistant.embedded.v1alpha1.ConverseConfig)
  size_t total_size = 0;

  // .google.assistant.embedded.v1alpha1.AudioInConfig audio_in_config = 1;
  if (this->has_audio_in_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audio_in_config_);
  }

  // .google.assistant.embedded.v1alpha1.AudioOutConfig audio_out_config = 2;
  if (this->has_audio_out_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audio_out_config_);
  }

  // .google.assistant.embedded.v1alpha1.ConverseState converse_state = 3;
  if (this->has_converse_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->converse_state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConverseConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.assistant.embedded.v1alpha1.ConverseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ConverseConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConverseConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.assistant.embedded.v1alpha1.ConverseConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.assistant.embedded.v1alpha1.ConverseConfig)
    MergeFrom(*source);
  }
}

void ConverseConfig::MergeFrom(const ConverseConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.assistant.embedded.v1alpha1.ConverseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_audio_in_config()) {
    mutable_audio_in_config()->::google::assistant::embedded::v1alpha1::AudioInConfig::MergeFrom(from.audio_in_config());
  }
  if (from.has_audio_out_config()) {
    mutable_audio_out_config()->::google::assistant::embedded::v1alpha1::AudioOutConfig::MergeFrom(from.audio_out_config());
  }
  if (from.has_converse_state()) {
    mutable_converse_state()->::google::assistant::embedded::v1alpha1::ConverseState::MergeFrom(from.converse_state());
  }
}

void ConverseConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.assistant.embedded.v1alpha1.ConverseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConverseConfig::CopyFrom(const ConverseConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.assistant.embedded.v1alpha1.ConverseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConverseConfig::IsInitialized() const {
  return true;
}

void ConverseConfig::Swap(ConverseConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConverseConfig::InternalSwap(ConverseConfig* other) {
  std::swap(audio_in_config_, other->audio_in_config_);
  std::swap(audio_out_config_, other->audio_out_config_);
  std::swap(converse_state_, other->converse_state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConverseConfig::GetMetadata() const {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConverseConfig

// .google.assistant.embedded.v1alpha1.AudioInConfig audio_in_config = 1;
bool ConverseConfig::has_audio_in_config() const {
  return this != internal_default_instance() && audio_in_config_ != NULL;
}
void ConverseConfig::clear_audio_in_config() {
  if (GetArenaNoVirtual() == NULL && audio_in_config_ != NULL) delete audio_in_config_;
  audio_in_config_ = NULL;
}
const ::google::assistant::embedded::v1alpha1::AudioInConfig& ConverseConfig::audio_in_config() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseConfig.audio_in_config)
  return audio_in_config_ != NULL ? *audio_in_config_
                         : *::google::assistant::embedded::v1alpha1::AudioInConfig::internal_default_instance();
}
::google::assistant::embedded::v1alpha1::AudioInConfig* ConverseConfig::mutable_audio_in_config() {
  
  if (audio_in_config_ == NULL) {
    audio_in_config_ = new ::google::assistant::embedded::v1alpha1::AudioInConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseConfig.audio_in_config)
  return audio_in_config_;
}
::google::assistant::embedded::v1alpha1::AudioInConfig* ConverseConfig::release_audio_in_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseConfig.audio_in_config)
  
  ::google::assistant::embedded::v1alpha1::AudioInConfig* temp = audio_in_config_;
  audio_in_config_ = NULL;
  return temp;
}
void ConverseConfig::set_allocated_audio_in_config(::google::assistant::embedded::v1alpha1::AudioInConfig* audio_in_config) {
  delete audio_in_config_;
  audio_in_config_ = audio_in_config;
  if (audio_in_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseConfig.audio_in_config)
}

// .google.assistant.embedded.v1alpha1.AudioOutConfig audio_out_config = 2;
bool ConverseConfig::has_audio_out_config() const {
  return this != internal_default_instance() && audio_out_config_ != NULL;
}
void ConverseConfig::clear_audio_out_config() {
  if (GetArenaNoVirtual() == NULL && audio_out_config_ != NULL) delete audio_out_config_;
  audio_out_config_ = NULL;
}
const ::google::assistant::embedded::v1alpha1::AudioOutConfig& ConverseConfig::audio_out_config() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseConfig.audio_out_config)
  return audio_out_config_ != NULL ? *audio_out_config_
                         : *::google::assistant::embedded::v1alpha1::AudioOutConfig::internal_default_instance();
}
::google::assistant::embedded::v1alpha1::AudioOutConfig* ConverseConfig::mutable_audio_out_config() {
  
  if (audio_out_config_ == NULL) {
    audio_out_config_ = new ::google::assistant::embedded::v1alpha1::AudioOutConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseConfig.audio_out_config)
  return audio_out_config_;
}
::google::assistant::embedded::v1alpha1::AudioOutConfig* ConverseConfig::release_audio_out_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseConfig.audio_out_config)
  
  ::google::assistant::embedded::v1alpha1::AudioOutConfig* temp = audio_out_config_;
  audio_out_config_ = NULL;
  return temp;
}
void ConverseConfig::set_allocated_audio_out_config(::google::assistant::embedded::v1alpha1::AudioOutConfig* audio_out_config) {
  delete audio_out_config_;
  audio_out_config_ = audio_out_config;
  if (audio_out_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseConfig.audio_out_config)
}

// .google.assistant.embedded.v1alpha1.ConverseState converse_state = 3;
bool ConverseConfig::has_converse_state() const {
  return this != internal_default_instance() && converse_state_ != NULL;
}
void ConverseConfig::clear_converse_state() {
  if (GetArenaNoVirtual() == NULL && converse_state_ != NULL) delete converse_state_;
  converse_state_ = NULL;
}
const ::google::assistant::embedded::v1alpha1::ConverseState& ConverseConfig::converse_state() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseConfig.converse_state)
  return converse_state_ != NULL ? *converse_state_
                         : *::google::assistant::embedded::v1alpha1::ConverseState::internal_default_instance();
}
::google::assistant::embedded::v1alpha1::ConverseState* ConverseConfig::mutable_converse_state() {
  
  if (converse_state_ == NULL) {
    converse_state_ = new ::google::assistant::embedded::v1alpha1::ConverseState;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseConfig.converse_state)
  return converse_state_;
}
::google::assistant::embedded::v1alpha1::ConverseState* ConverseConfig::release_converse_state() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseConfig.converse_state)
  
  ::google::assistant::embedded::v1alpha1::ConverseState* temp = converse_state_;
  converse_state_ = NULL;
  return temp;
}
void ConverseConfig::set_allocated_converse_state(::google::assistant::embedded::v1alpha1::ConverseState* converse_state) {
  delete converse_state_;
  converse_state_ = converse_state;
  if (converse_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseConfig.converse_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioInConfig::kEncodingFieldNumber;
const int AudioInConfig::kSampleRateHertzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioInConfig::AudioInConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.assistant.embedded.v1alpha1.AudioInConfig)
}
AudioInConfig::AudioInConfig(const AudioInConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&encoding_, &from.encoding_,
    reinterpret_cast<char*>(&sample_rate_hertz_) -
    reinterpret_cast<char*>(&encoding_) + sizeof(sample_rate_hertz_));
  // @@protoc_insertion_point(copy_constructor:google.assistant.embedded.v1alpha1.AudioInConfig)
}

void AudioInConfig::SharedCtor() {
  ::memset(&encoding_, 0, reinterpret_cast<char*>(&sample_rate_hertz_) -
    reinterpret_cast<char*>(&encoding_) + sizeof(sample_rate_hertz_));
  _cached_size_ = 0;
}

AudioInConfig::~AudioInConfig() {
  // @@protoc_insertion_point(destructor:google.assistant.embedded.v1alpha1.AudioInConfig)
  SharedDtor();
}

void AudioInConfig::SharedDtor() {
}

void AudioInConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioInConfig::descriptor() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AudioInConfig& AudioInConfig::default_instance() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioInConfig* AudioInConfig::New(::google::protobuf::Arena* arena) const {
  AudioInConfig* n = new AudioInConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioInConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.assistant.embedded.v1alpha1.AudioInConfig)
  ::memset(&encoding_, 0, reinterpret_cast<char*>(&sample_rate_hertz_) -
    reinterpret_cast<char*>(&encoding_) + sizeof(sample_rate_hertz_));
}

bool AudioInConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.assistant.embedded.v1alpha1.AudioInConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.assistant.embedded.v1alpha1.AudioInConfig.Encoding encoding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::google::assistant::embedded::v1alpha1::AudioInConfig_Encoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sample_rate_hertz = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.assistant.embedded.v1alpha1.AudioInConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.assistant.embedded.v1alpha1.AudioInConfig)
  return false;
#undef DO_
}

void AudioInConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.assistant.embedded.v1alpha1.AudioInConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.assistant.embedded.v1alpha1.AudioInConfig.Encoding encoding = 1;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sample_rate_hertz(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.assistant.embedded.v1alpha1.AudioInConfig)
}

::google::protobuf::uint8* AudioInConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.assistant.embedded.v1alpha1.AudioInConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.assistant.embedded.v1alpha1.AudioInConfig.Encoding encoding = 1;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->encoding(), target);
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sample_rate_hertz(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.assistant.embedded.v1alpha1.AudioInConfig)
  return target;
}

size_t AudioInConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.assistant.embedded.v1alpha1.AudioInConfig)
  size_t total_size = 0;

  // .google.assistant.embedded.v1alpha1.AudioInConfig.Encoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioInConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.assistant.embedded.v1alpha1.AudioInConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioInConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioInConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.assistant.embedded.v1alpha1.AudioInConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.assistant.embedded.v1alpha1.AudioInConfig)
    MergeFrom(*source);
  }
}

void AudioInConfig::MergeFrom(const AudioInConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.assistant.embedded.v1alpha1.AudioInConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
}

void AudioInConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.assistant.embedded.v1alpha1.AudioInConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioInConfig::CopyFrom(const AudioInConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.assistant.embedded.v1alpha1.AudioInConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioInConfig::IsInitialized() const {
  return true;
}

void AudioInConfig::Swap(AudioInConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioInConfig::InternalSwap(AudioInConfig* other) {
  std::swap(encoding_, other->encoding_);
  std::swap(sample_rate_hertz_, other->sample_rate_hertz_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioInConfig::GetMetadata() const {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioInConfig

// .google.assistant.embedded.v1alpha1.AudioInConfig.Encoding encoding = 1;
void AudioInConfig::clear_encoding() {
  encoding_ = 0;
}
::google::assistant::embedded::v1alpha1::AudioInConfig_Encoding AudioInConfig::encoding() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.AudioInConfig.encoding)
  return static_cast< ::google::assistant::embedded::v1alpha1::AudioInConfig_Encoding >(encoding_);
}
void AudioInConfig::set_encoding(::google::assistant::embedded::v1alpha1::AudioInConfig_Encoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.AudioInConfig.encoding)
}

// int32 sample_rate_hertz = 2;
void AudioInConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
::google::protobuf::int32 AudioInConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.AudioInConfig.sample_rate_hertz)
  return sample_rate_hertz_;
}
void AudioInConfig::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.AudioInConfig.sample_rate_hertz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioOutConfig::kEncodingFieldNumber;
const int AudioOutConfig::kSampleRateHertzFieldNumber;
const int AudioOutConfig::kVolumePercentageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioOutConfig::AudioOutConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.assistant.embedded.v1alpha1.AudioOutConfig)
}
AudioOutConfig::AudioOutConfig(const AudioOutConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&encoding_, &from.encoding_,
    reinterpret_cast<char*>(&volume_percentage_) -
    reinterpret_cast<char*>(&encoding_) + sizeof(volume_percentage_));
  // @@protoc_insertion_point(copy_constructor:google.assistant.embedded.v1alpha1.AudioOutConfig)
}

void AudioOutConfig::SharedCtor() {
  ::memset(&encoding_, 0, reinterpret_cast<char*>(&volume_percentage_) -
    reinterpret_cast<char*>(&encoding_) + sizeof(volume_percentage_));
  _cached_size_ = 0;
}

AudioOutConfig::~AudioOutConfig() {
  // @@protoc_insertion_point(destructor:google.assistant.embedded.v1alpha1.AudioOutConfig)
  SharedDtor();
}

void AudioOutConfig::SharedDtor() {
}

void AudioOutConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioOutConfig::descriptor() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AudioOutConfig& AudioOutConfig::default_instance() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioOutConfig* AudioOutConfig::New(::google::protobuf::Arena* arena) const {
  AudioOutConfig* n = new AudioOutConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioOutConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.assistant.embedded.v1alpha1.AudioOutConfig)
  ::memset(&encoding_, 0, reinterpret_cast<char*>(&volume_percentage_) -
    reinterpret_cast<char*>(&encoding_) + sizeof(volume_percentage_));
}

bool AudioOutConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.assistant.embedded.v1alpha1.AudioOutConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.assistant.embedded.v1alpha1.AudioOutConfig.Encoding encoding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::google::assistant::embedded::v1alpha1::AudioOutConfig_Encoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sample_rate_hertz = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_percentage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.assistant.embedded.v1alpha1.AudioOutConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.assistant.embedded.v1alpha1.AudioOutConfig)
  return false;
#undef DO_
}

void AudioOutConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.assistant.embedded.v1alpha1.AudioOutConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.assistant.embedded.v1alpha1.AudioOutConfig.Encoding encoding = 1;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sample_rate_hertz(), output);
  }

  // int32 volume_percentage = 3;
  if (this->volume_percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->volume_percentage(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.assistant.embedded.v1alpha1.AudioOutConfig)
}

::google::protobuf::uint8* AudioOutConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.assistant.embedded.v1alpha1.AudioOutConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.assistant.embedded.v1alpha1.AudioOutConfig.Encoding encoding = 1;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->encoding(), target);
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sample_rate_hertz(), target);
  }

  // int32 volume_percentage = 3;
  if (this->volume_percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->volume_percentage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.assistant.embedded.v1alpha1.AudioOutConfig)
  return target;
}

size_t AudioOutConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.assistant.embedded.v1alpha1.AudioOutConfig)
  size_t total_size = 0;

  // .google.assistant.embedded.v1alpha1.AudioOutConfig.Encoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  // int32 volume_percentage = 3;
  if (this->volume_percentage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_percentage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioOutConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.assistant.embedded.v1alpha1.AudioOutConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioOutConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioOutConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.assistant.embedded.v1alpha1.AudioOutConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.assistant.embedded.v1alpha1.AudioOutConfig)
    MergeFrom(*source);
  }
}

void AudioOutConfig::MergeFrom(const AudioOutConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.assistant.embedded.v1alpha1.AudioOutConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
  if (from.volume_percentage() != 0) {
    set_volume_percentage(from.volume_percentage());
  }
}

void AudioOutConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.assistant.embedded.v1alpha1.AudioOutConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioOutConfig::CopyFrom(const AudioOutConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.assistant.embedded.v1alpha1.AudioOutConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioOutConfig::IsInitialized() const {
  return true;
}

void AudioOutConfig::Swap(AudioOutConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioOutConfig::InternalSwap(AudioOutConfig* other) {
  std::swap(encoding_, other->encoding_);
  std::swap(sample_rate_hertz_, other->sample_rate_hertz_);
  std::swap(volume_percentage_, other->volume_percentage_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioOutConfig::GetMetadata() const {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioOutConfig

// .google.assistant.embedded.v1alpha1.AudioOutConfig.Encoding encoding = 1;
void AudioOutConfig::clear_encoding() {
  encoding_ = 0;
}
::google::assistant::embedded::v1alpha1::AudioOutConfig_Encoding AudioOutConfig::encoding() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.AudioOutConfig.encoding)
  return static_cast< ::google::assistant::embedded::v1alpha1::AudioOutConfig_Encoding >(encoding_);
}
void AudioOutConfig::set_encoding(::google::assistant::embedded::v1alpha1::AudioOutConfig_Encoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.AudioOutConfig.encoding)
}

// int32 sample_rate_hertz = 2;
void AudioOutConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
::google::protobuf::int32 AudioOutConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.AudioOutConfig.sample_rate_hertz)
  return sample_rate_hertz_;
}
void AudioOutConfig::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.AudioOutConfig.sample_rate_hertz)
}

// int32 volume_percentage = 3;
void AudioOutConfig::clear_volume_percentage() {
  volume_percentage_ = 0;
}
::google::protobuf::int32 AudioOutConfig::volume_percentage() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.AudioOutConfig.volume_percentage)
  return volume_percentage_;
}
void AudioOutConfig::set_volume_percentage(::google::protobuf::int32 value) {
  
  volume_percentage_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.AudioOutConfig.volume_percentage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConverseState::kConversationStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConverseState::ConverseState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.assistant.embedded.v1alpha1.ConverseState)
}
ConverseState::ConverseState(const ConverseState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  conversation_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.conversation_state().size() > 0) {
    conversation_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conversation_state_);
  }
  // @@protoc_insertion_point(copy_constructor:google.assistant.embedded.v1alpha1.ConverseState)
}

void ConverseState::SharedCtor() {
  conversation_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ConverseState::~ConverseState() {
  // @@protoc_insertion_point(destructor:google.assistant.embedded.v1alpha1.ConverseState)
  SharedDtor();
}

void ConverseState::SharedDtor() {
  conversation_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConverseState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConverseState::descriptor() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConverseState& ConverseState::default_instance() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConverseState* ConverseState::New(::google::protobuf::Arena* arena) const {
  ConverseState* n = new ConverseState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConverseState::Clear() {
// @@protoc_insertion_point(message_clear_start:google.assistant.embedded.v1alpha1.ConverseState)
  conversation_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ConverseState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.assistant.embedded.v1alpha1.ConverseState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes conversation_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_conversation_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.assistant.embedded.v1alpha1.ConverseState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.assistant.embedded.v1alpha1.ConverseState)
  return false;
#undef DO_
}

void ConverseState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.assistant.embedded.v1alpha1.ConverseState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes conversation_state = 1;
  if (this->conversation_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->conversation_state(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.assistant.embedded.v1alpha1.ConverseState)
}

::google::protobuf::uint8* ConverseState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.assistant.embedded.v1alpha1.ConverseState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes conversation_state = 1;
  if (this->conversation_state().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->conversation_state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.assistant.embedded.v1alpha1.ConverseState)
  return target;
}

size_t ConverseState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.assistant.embedded.v1alpha1.ConverseState)
  size_t total_size = 0;

  // bytes conversation_state = 1;
  if (this->conversation_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->conversation_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConverseState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.assistant.embedded.v1alpha1.ConverseState)
  GOOGLE_DCHECK_NE(&from, this);
  const ConverseState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConverseState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.assistant.embedded.v1alpha1.ConverseState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.assistant.embedded.v1alpha1.ConverseState)
    MergeFrom(*source);
  }
}

void ConverseState::MergeFrom(const ConverseState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.assistant.embedded.v1alpha1.ConverseState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.conversation_state().size() > 0) {

    conversation_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conversation_state_);
  }
}

void ConverseState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.assistant.embedded.v1alpha1.ConverseState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConverseState::CopyFrom(const ConverseState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.assistant.embedded.v1alpha1.ConverseState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConverseState::IsInitialized() const {
  return true;
}

void ConverseState::Swap(ConverseState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConverseState::InternalSwap(ConverseState* other) {
  conversation_state_.Swap(&other->conversation_state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConverseState::GetMetadata() const {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConverseState

// bytes conversation_state = 1;
void ConverseState::clear_conversation_state() {
  conversation_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConverseState::conversation_state() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
  return conversation_state_.GetNoArena();
}
void ConverseState::set_conversation_state(const ::std::string& value) {
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
}
#if LANG_CXX11
void ConverseState::set_conversation_state(::std::string&& value) {
  
  conversation_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
}
#endif
void ConverseState::set_conversation_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
}
void ConverseState::set_conversation_state(const void* value, size_t size) {
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
}
::std::string* ConverseState::mutable_conversation_state() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
  return conversation_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConverseState::release_conversation_state() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
  
  return conversation_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConverseState::set_allocated_conversation_state(::std::string* conversation_state) {
  if (conversation_state != NULL) {
    
  } else {
    
  }
  conversation_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conversation_state);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseState.conversation_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioOut::kAudioDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioOut::AudioOut()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.assistant.embedded.v1alpha1.AudioOut)
}
AudioOut::AudioOut(const AudioOut& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  audio_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.audio_data().size() > 0) {
    audio_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_data_);
  }
  // @@protoc_insertion_point(copy_constructor:google.assistant.embedded.v1alpha1.AudioOut)
}

void AudioOut::SharedCtor() {
  audio_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AudioOut::~AudioOut() {
  // @@protoc_insertion_point(destructor:google.assistant.embedded.v1alpha1.AudioOut)
  SharedDtor();
}

void AudioOut::SharedDtor() {
  audio_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioOut::descriptor() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AudioOut& AudioOut::default_instance() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioOut* AudioOut::New(::google::protobuf::Arena* arena) const {
  AudioOut* n = new AudioOut;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioOut::Clear() {
// @@protoc_insertion_point(message_clear_start:google.assistant.embedded.v1alpha1.AudioOut)
  audio_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AudioOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.assistant.embedded.v1alpha1.AudioOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes audio_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.assistant.embedded.v1alpha1.AudioOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.assistant.embedded.v1alpha1.AudioOut)
  return false;
#undef DO_
}

void AudioOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.assistant.embedded.v1alpha1.AudioOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio_data = 1;
  if (this->audio_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->audio_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.assistant.embedded.v1alpha1.AudioOut)
}

::google::protobuf::uint8* AudioOut::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.assistant.embedded.v1alpha1.AudioOut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio_data = 1;
  if (this->audio_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->audio_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.assistant.embedded.v1alpha1.AudioOut)
  return target;
}

size_t AudioOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.assistant.embedded.v1alpha1.AudioOut)
  size_t total_size = 0;

  // bytes audio_data = 1;
  if (this->audio_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->audio_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioOut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.assistant.embedded.v1alpha1.AudioOut)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioOut* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioOut>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.assistant.embedded.v1alpha1.AudioOut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.assistant.embedded.v1alpha1.AudioOut)
    MergeFrom(*source);
  }
}

void AudioOut::MergeFrom(const AudioOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.assistant.embedded.v1alpha1.AudioOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio_data().size() > 0) {

    audio_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audio_data_);
  }
}

void AudioOut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.assistant.embedded.v1alpha1.AudioOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioOut::CopyFrom(const AudioOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.assistant.embedded.v1alpha1.AudioOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioOut::IsInitialized() const {
  return true;
}

void AudioOut::Swap(AudioOut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioOut::InternalSwap(AudioOut* other) {
  audio_data_.Swap(&other->audio_data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioOut::GetMetadata() const {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioOut

// bytes audio_data = 1;
void AudioOut::clear_audio_data() {
  audio_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AudioOut::audio_data() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
  return audio_data_.GetNoArena();
}
void AudioOut::set_audio_data(const ::std::string& value) {
  
  audio_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
}
#if LANG_CXX11
void AudioOut::set_audio_data(::std::string&& value) {
  
  audio_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
}
#endif
void AudioOut::set_audio_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audio_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
}
void AudioOut::set_audio_data(const void* value, size_t size) {
  
  audio_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
}
::std::string* AudioOut::mutable_audio_data() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
  return audio_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioOut::release_audio_data() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
  
  return audio_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioOut::set_allocated_audio_data(::std::string* audio_data) {
  if (audio_data != NULL) {
    
  } else {
    
  }
  audio_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_data);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.AudioOut.audio_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConverseResult::kSpokenRequestTextFieldNumber;
const int ConverseResult::kSpokenResponseTextFieldNumber;
const int ConverseResult::kConversationStateFieldNumber;
const int ConverseResult::kMicrophoneModeFieldNumber;
const int ConverseResult::kVolumePercentageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConverseResult::ConverseResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.assistant.embedded.v1alpha1.ConverseResult)
}
ConverseResult::ConverseResult(const ConverseResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spoken_request_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spoken_request_text().size() > 0) {
    spoken_request_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spoken_request_text_);
  }
  spoken_response_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spoken_response_text().size() > 0) {
    spoken_response_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spoken_response_text_);
  }
  conversation_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.conversation_state().size() > 0) {
    conversation_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conversation_state_);
  }
  ::memcpy(&microphone_mode_, &from.microphone_mode_,
    reinterpret_cast<char*>(&volume_percentage_) -
    reinterpret_cast<char*>(&microphone_mode_) + sizeof(volume_percentage_));
  // @@protoc_insertion_point(copy_constructor:google.assistant.embedded.v1alpha1.ConverseResult)
}

void ConverseResult::SharedCtor() {
  spoken_request_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spoken_response_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conversation_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&microphone_mode_, 0, reinterpret_cast<char*>(&volume_percentage_) -
    reinterpret_cast<char*>(&microphone_mode_) + sizeof(volume_percentage_));
  _cached_size_ = 0;
}

ConverseResult::~ConverseResult() {
  // @@protoc_insertion_point(destructor:google.assistant.embedded.v1alpha1.ConverseResult)
  SharedDtor();
}

void ConverseResult::SharedDtor() {
  spoken_request_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spoken_response_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conversation_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConverseResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConverseResult::descriptor() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConverseResult& ConverseResult::default_instance() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConverseResult* ConverseResult::New(::google::protobuf::Arena* arena) const {
  ConverseResult* n = new ConverseResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConverseResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.assistant.embedded.v1alpha1.ConverseResult)
  spoken_request_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spoken_response_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conversation_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&microphone_mode_, 0, reinterpret_cast<char*>(&volume_percentage_) -
    reinterpret_cast<char*>(&microphone_mode_) + sizeof(volume_percentage_));
}

bool ConverseResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.assistant.embedded.v1alpha1.ConverseResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string spoken_request_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spoken_request_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spoken_request_text().data(), this->spoken_request_text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string spoken_response_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spoken_response_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spoken_response_text().data(), this->spoken_response_text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes conversation_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_conversation_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode microphone_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_microphone_mode(static_cast< ::google::assistant::embedded::v1alpha1::ConverseResult_MicrophoneMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_percentage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.assistant.embedded.v1alpha1.ConverseResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.assistant.embedded.v1alpha1.ConverseResult)
  return false;
#undef DO_
}

void ConverseResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.assistant.embedded.v1alpha1.ConverseResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spoken_request_text = 1;
  if (this->spoken_request_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spoken_request_text().data(), this->spoken_request_text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->spoken_request_text(), output);
  }

  // string spoken_response_text = 2;
  if (this->spoken_response_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spoken_response_text().data(), this->spoken_response_text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->spoken_response_text(), output);
  }

  // bytes conversation_state = 3;
  if (this->conversation_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->conversation_state(), output);
  }

  // .google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode microphone_mode = 4;
  if (this->microphone_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->microphone_mode(), output);
  }

  // int32 volume_percentage = 5;
  if (this->volume_percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->volume_percentage(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.assistant.embedded.v1alpha1.ConverseResult)
}

::google::protobuf::uint8* ConverseResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.assistant.embedded.v1alpha1.ConverseResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spoken_request_text = 1;
  if (this->spoken_request_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spoken_request_text().data(), this->spoken_request_text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spoken_request_text(), target);
  }

  // string spoken_response_text = 2;
  if (this->spoken_response_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spoken_response_text().data(), this->spoken_response_text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->spoken_response_text(), target);
  }

  // bytes conversation_state = 3;
  if (this->conversation_state().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->conversation_state(), target);
  }

  // .google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode microphone_mode = 4;
  if (this->microphone_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->microphone_mode(), target);
  }

  // int32 volume_percentage = 5;
  if (this->volume_percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->volume_percentage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.assistant.embedded.v1alpha1.ConverseResult)
  return target;
}

size_t ConverseResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.assistant.embedded.v1alpha1.ConverseResult)
  size_t total_size = 0;

  // string spoken_request_text = 1;
  if (this->spoken_request_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spoken_request_text());
  }

  // string spoken_response_text = 2;
  if (this->spoken_response_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spoken_response_text());
  }

  // bytes conversation_state = 3;
  if (this->conversation_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->conversation_state());
  }

  // .google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode microphone_mode = 4;
  if (this->microphone_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->microphone_mode());
  }

  // int32 volume_percentage = 5;
  if (this->volume_percentage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_percentage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConverseResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.assistant.embedded.v1alpha1.ConverseResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ConverseResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConverseResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.assistant.embedded.v1alpha1.ConverseResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.assistant.embedded.v1alpha1.ConverseResult)
    MergeFrom(*source);
  }
}

void ConverseResult::MergeFrom(const ConverseResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.assistant.embedded.v1alpha1.ConverseResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spoken_request_text().size() > 0) {

    spoken_request_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spoken_request_text_);
  }
  if (from.spoken_response_text().size() > 0) {

    spoken_response_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spoken_response_text_);
  }
  if (from.conversation_state().size() > 0) {

    conversation_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conversation_state_);
  }
  if (from.microphone_mode() != 0) {
    set_microphone_mode(from.microphone_mode());
  }
  if (from.volume_percentage() != 0) {
    set_volume_percentage(from.volume_percentage());
  }
}

void ConverseResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.assistant.embedded.v1alpha1.ConverseResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConverseResult::CopyFrom(const ConverseResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.assistant.embedded.v1alpha1.ConverseResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConverseResult::IsInitialized() const {
  return true;
}

void ConverseResult::Swap(ConverseResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConverseResult::InternalSwap(ConverseResult* other) {
  spoken_request_text_.Swap(&other->spoken_request_text_);
  spoken_response_text_.Swap(&other->spoken_response_text_);
  conversation_state_.Swap(&other->conversation_state_);
  std::swap(microphone_mode_, other->microphone_mode_);
  std::swap(volume_percentage_, other->volume_percentage_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConverseResult::GetMetadata() const {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConverseResult

// string spoken_request_text = 1;
void ConverseResult::clear_spoken_request_text() {
  spoken_request_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConverseResult::spoken_request_text() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
  return spoken_request_text_.GetNoArena();
}
void ConverseResult::set_spoken_request_text(const ::std::string& value) {
  
  spoken_request_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
}
#if LANG_CXX11
void ConverseResult::set_spoken_request_text(::std::string&& value) {
  
  spoken_request_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
}
#endif
void ConverseResult::set_spoken_request_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  spoken_request_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
}
void ConverseResult::set_spoken_request_text(const char* value, size_t size) {
  
  spoken_request_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
}
::std::string* ConverseResult::mutable_spoken_request_text() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
  return spoken_request_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConverseResult::release_spoken_request_text() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
  
  return spoken_request_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConverseResult::set_allocated_spoken_request_text(::std::string* spoken_request_text) {
  if (spoken_request_text != NULL) {
    
  } else {
    
  }
  spoken_request_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spoken_request_text);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseResult.spoken_request_text)
}

// string spoken_response_text = 2;
void ConverseResult::clear_spoken_response_text() {
  spoken_response_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConverseResult::spoken_response_text() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
  return spoken_response_text_.GetNoArena();
}
void ConverseResult::set_spoken_response_text(const ::std::string& value) {
  
  spoken_response_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
}
#if LANG_CXX11
void ConverseResult::set_spoken_response_text(::std::string&& value) {
  
  spoken_response_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
}
#endif
void ConverseResult::set_spoken_response_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  spoken_response_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
}
void ConverseResult::set_spoken_response_text(const char* value, size_t size) {
  
  spoken_response_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
}
::std::string* ConverseResult::mutable_spoken_response_text() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
  return spoken_response_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConverseResult::release_spoken_response_text() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
  
  return spoken_response_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConverseResult::set_allocated_spoken_response_text(::std::string* spoken_response_text) {
  if (spoken_response_text != NULL) {
    
  } else {
    
  }
  spoken_response_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spoken_response_text);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseResult.spoken_response_text)
}

// bytes conversation_state = 3;
void ConverseResult::clear_conversation_state() {
  conversation_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConverseResult::conversation_state() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
  return conversation_state_.GetNoArena();
}
void ConverseResult::set_conversation_state(const ::std::string& value) {
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
}
#if LANG_CXX11
void ConverseResult::set_conversation_state(::std::string&& value) {
  
  conversation_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
}
#endif
void ConverseResult::set_conversation_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
}
void ConverseResult::set_conversation_state(const void* value, size_t size) {
  
  conversation_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
}
::std::string* ConverseResult::mutable_conversation_state() {
  
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
  return conversation_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConverseResult::release_conversation_state() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
  
  return conversation_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConverseResult::set_allocated_conversation_state(::std::string* conversation_state) {
  if (conversation_state != NULL) {
    
  } else {
    
  }
  conversation_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conversation_state);
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseResult.conversation_state)
}

// .google.assistant.embedded.v1alpha1.ConverseResult.MicrophoneMode microphone_mode = 4;
void ConverseResult::clear_microphone_mode() {
  microphone_mode_ = 0;
}
::google::assistant::embedded::v1alpha1::ConverseResult_MicrophoneMode ConverseResult::microphone_mode() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResult.microphone_mode)
  return static_cast< ::google::assistant::embedded::v1alpha1::ConverseResult_MicrophoneMode >(microphone_mode_);
}
void ConverseResult::set_microphone_mode(::google::assistant::embedded::v1alpha1::ConverseResult_MicrophoneMode value) {
  
  microphone_mode_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseResult.microphone_mode)
}

// int32 volume_percentage = 5;
void ConverseResult::clear_volume_percentage() {
  volume_percentage_ = 0;
}
::google::protobuf::int32 ConverseResult::volume_percentage() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResult.volume_percentage)
  return volume_percentage_;
}
void ConverseResult::set_volume_percentage(::google::protobuf::int32 value) {
  
  volume_percentage_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseResult.volume_percentage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConverseRequest::kConfigFieldNumber;
const int ConverseRequest::kAudioInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConverseRequest::ConverseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.assistant.embedded.v1alpha1.ConverseRequest)
}
ConverseRequest::ConverseRequest(const ConverseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_converse_request();
  switch (from.converse_request_case()) {
    case kConfig: {
      mutable_config()->::google::assistant::embedded::v1alpha1::ConverseConfig::MergeFrom(from.config());
      break;
    }
    case kAudioIn: {
      set_audio_in(from.audio_in());
      break;
    }
    case CONVERSE_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.assistant.embedded.v1alpha1.ConverseRequest)
}

void ConverseRequest::SharedCtor() {
  clear_has_converse_request();
  _cached_size_ = 0;
}

ConverseRequest::~ConverseRequest() {
  // @@protoc_insertion_point(destructor:google.assistant.embedded.v1alpha1.ConverseRequest)
  SharedDtor();
}

void ConverseRequest::SharedDtor() {
  if (has_converse_request()) {
    clear_converse_request();
  }
}

void ConverseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConverseRequest::descriptor() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConverseRequest& ConverseRequest::default_instance() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConverseRequest* ConverseRequest::New(::google::protobuf::Arena* arena) const {
  ConverseRequest* n = new ConverseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConverseRequest::clear_converse_request() {
// @@protoc_insertion_point(one_of_clear_start:google.assistant.embedded.v1alpha1.ConverseRequest)
  switch (converse_request_case()) {
    case kConfig: {
      delete converse_request_.config_;
      break;
    }
    case kAudioIn: {
      converse_request_.audio_in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CONVERSE_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONVERSE_REQUEST_NOT_SET;
}


void ConverseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.assistant.embedded.v1alpha1.ConverseRequest)
  clear_converse_request();
}

bool ConverseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.assistant.embedded.v1alpha1.ConverseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.assistant.embedded.v1alpha1.ConverseConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes audio_in = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.assistant.embedded.v1alpha1.ConverseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.assistant.embedded.v1alpha1.ConverseRequest)
  return false;
#undef DO_
}

void ConverseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.assistant.embedded.v1alpha1.ConverseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.assistant.embedded.v1alpha1.ConverseConfig config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *converse_request_.config_, output);
  }

  // bytes audio_in = 2;
  if (has_audio_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->audio_in(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.assistant.embedded.v1alpha1.ConverseRequest)
}

::google::protobuf::uint8* ConverseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.assistant.embedded.v1alpha1.ConverseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.assistant.embedded.v1alpha1.ConverseConfig config = 1;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *converse_request_.config_, deterministic, target);
  }

  // bytes audio_in = 2;
  if (has_audio_in()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->audio_in(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.assistant.embedded.v1alpha1.ConverseRequest)
  return target;
}

size_t ConverseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.assistant.embedded.v1alpha1.ConverseRequest)
  size_t total_size = 0;

  switch (converse_request_case()) {
    // .google.assistant.embedded.v1alpha1.ConverseConfig config = 1;
    case kConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *converse_request_.config_);
      break;
    }
    // bytes audio_in = 2;
    case kAudioIn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->audio_in());
      break;
    }
    case CONVERSE_REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConverseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.assistant.embedded.v1alpha1.ConverseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConverseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConverseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.assistant.embedded.v1alpha1.ConverseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.assistant.embedded.v1alpha1.ConverseRequest)
    MergeFrom(*source);
  }
}

void ConverseRequest::MergeFrom(const ConverseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.assistant.embedded.v1alpha1.ConverseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.converse_request_case()) {
    case kConfig: {
      mutable_config()->::google::assistant::embedded::v1alpha1::ConverseConfig::MergeFrom(from.config());
      break;
    }
    case kAudioIn: {
      set_audio_in(from.audio_in());
      break;
    }
    case CONVERSE_REQUEST_NOT_SET: {
      break;
    }
  }
}

void ConverseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.assistant.embedded.v1alpha1.ConverseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConverseRequest::CopyFrom(const ConverseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.assistant.embedded.v1alpha1.ConverseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConverseRequest::IsInitialized() const {
  return true;
}

void ConverseRequest::Swap(ConverseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConverseRequest::InternalSwap(ConverseRequest* other) {
  std::swap(converse_request_, other->converse_request_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConverseRequest::GetMetadata() const {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConverseRequest

// .google.assistant.embedded.v1alpha1.ConverseConfig config = 1;
bool ConverseRequest::has_config() const {
  return converse_request_case() == kConfig;
}
void ConverseRequest::set_has_config() {
  _oneof_case_[0] = kConfig;
}
void ConverseRequest::clear_config() {
  if (has_config()) {
    delete converse_request_.config_;
    clear_has_converse_request();
  }
}
 const ::google::assistant::embedded::v1alpha1::ConverseConfig& ConverseRequest::config() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseRequest.config)
  return has_config()
      ? *converse_request_.config_
      : ::google::assistant::embedded::v1alpha1::ConverseConfig::default_instance();
}
::google::assistant::embedded::v1alpha1::ConverseConfig* ConverseRequest::mutable_config() {
  if (!has_config()) {
    clear_converse_request();
    set_has_config();
    converse_request_.config_ = new ::google::assistant::embedded::v1alpha1::ConverseConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseRequest.config)
  return converse_request_.config_;
}
::google::assistant::embedded::v1alpha1::ConverseConfig* ConverseRequest::release_config() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseRequest.config)
  if (has_config()) {
    clear_has_converse_request();
    ::google::assistant::embedded::v1alpha1::ConverseConfig* temp = converse_request_.config_;
    converse_request_.config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ConverseRequest::set_allocated_config(::google::assistant::embedded::v1alpha1::ConverseConfig* config) {
  clear_converse_request();
  if (config) {
    set_has_config();
    converse_request_.config_ = config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseRequest.config)
}

// bytes audio_in = 2;
bool ConverseRequest::has_audio_in() const {
  return converse_request_case() == kAudioIn;
}
void ConverseRequest::set_has_audio_in() {
  _oneof_case_[0] = kAudioIn;
}
void ConverseRequest::clear_audio_in() {
  if (has_audio_in()) {
    converse_request_.audio_in_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_converse_request();
  }
}
const ::std::string& ConverseRequest::audio_in() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
  if (has_audio_in()) {
    return converse_request_.audio_in_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ConverseRequest::set_audio_in(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
  if (!has_audio_in()) {
    clear_converse_request();
    set_has_audio_in();
    converse_request_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  converse_request_.audio_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
}
#if LANG_CXX11
void ConverseRequest::set_audio_in(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
  if (!has_audio_in()) {
    clear_converse_request();
    set_has_audio_in();
    converse_request_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  converse_request_.audio_in_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
}
#endif
void ConverseRequest::set_audio_in(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_audio_in()) {
    clear_converse_request();
    set_has_audio_in();
    converse_request_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  converse_request_.audio_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
}
void ConverseRequest::set_audio_in(const void* value, size_t size) {
  if (!has_audio_in()) {
    clear_converse_request();
    set_has_audio_in();
    converse_request_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  converse_request_.audio_in_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
}
::std::string* ConverseRequest::mutable_audio_in() {
  if (!has_audio_in()) {
    clear_converse_request();
    set_has_audio_in();
    converse_request_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
  return converse_request_.audio_in_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConverseRequest::release_audio_in() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
  if (has_audio_in()) {
    clear_has_converse_request();
    return converse_request_.audio_in_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ConverseRequest::set_allocated_audio_in(::std::string* audio_in) {
  if (!has_audio_in()) {
    converse_request_.audio_in_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_converse_request();
  if (audio_in != NULL) {
    set_has_audio_in();
    converse_request_.audio_in_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        audio_in);
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseRequest.audio_in)
}

bool ConverseRequest::has_converse_request() const {
  return converse_request_case() != CONVERSE_REQUEST_NOT_SET;
}
void ConverseRequest::clear_has_converse_request() {
  _oneof_case_[0] = CONVERSE_REQUEST_NOT_SET;
}
ConverseRequest::ConverseRequestCase ConverseRequest::converse_request_case() const {
  return ConverseRequest::ConverseRequestCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConverseResponse::kErrorFieldNumber;
const int ConverseResponse::kEventTypeFieldNumber;
const int ConverseResponse::kAudioOutFieldNumber;
const int ConverseResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConverseResponse::ConverseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.assistant.embedded.v1alpha1.ConverseResponse)
}
ConverseResponse::ConverseResponse(const ConverseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_converse_response();
  switch (from.converse_response_case()) {
    case kError: {
      mutable_error()->::google::rpc::Status::MergeFrom(from.error());
      break;
    }
    case kEventType: {
      set_event_type(from.event_type());
      break;
    }
    case kAudioOut: {
      mutable_audio_out()->::google::assistant::embedded::v1alpha1::AudioOut::MergeFrom(from.audio_out());
      break;
    }
    case kResult: {
      mutable_result()->::google::assistant::embedded::v1alpha1::ConverseResult::MergeFrom(from.result());
      break;
    }
    case CONVERSE_RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.assistant.embedded.v1alpha1.ConverseResponse)
}

void ConverseResponse::SharedCtor() {
  clear_has_converse_response();
  _cached_size_ = 0;
}

ConverseResponse::~ConverseResponse() {
  // @@protoc_insertion_point(destructor:google.assistant.embedded.v1alpha1.ConverseResponse)
  SharedDtor();
}

void ConverseResponse::SharedDtor() {
  if (has_converse_response()) {
    clear_converse_response();
  }
}

void ConverseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConverseResponse::descriptor() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConverseResponse& ConverseResponse::default_instance() {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConverseResponse* ConverseResponse::New(::google::protobuf::Arena* arena) const {
  ConverseResponse* n = new ConverseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConverseResponse::clear_converse_response() {
// @@protoc_insertion_point(one_of_clear_start:google.assistant.embedded.v1alpha1.ConverseResponse)
  switch (converse_response_case()) {
    case kError: {
      delete converse_response_.error_;
      break;
    }
    case kEventType: {
      // No need to clear
      break;
    }
    case kAudioOut: {
      delete converse_response_.audio_out_;
      break;
    }
    case kResult: {
      delete converse_response_.result_;
      break;
    }
    case CONVERSE_RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONVERSE_RESPONSE_NOT_SET;
}


void ConverseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.assistant.embedded.v1alpha1.ConverseResponse)
  clear_converse_response();
}

bool ConverseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.assistant.embedded.v1alpha1.ConverseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.assistant.embedded.v1alpha1.ConverseResponse.EventType event_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_event_type(static_cast< ::google::assistant::embedded::v1alpha1::ConverseResponse_EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.assistant.embedded.v1alpha1.AudioOut audio_out = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.assistant.embedded.v1alpha1.ConverseResult result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.assistant.embedded.v1alpha1.ConverseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.assistant.embedded.v1alpha1.ConverseResponse)
  return false;
#undef DO_
}

void ConverseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.assistant.embedded.v1alpha1.ConverseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *converse_response_.error_, output);
  }

  // .google.assistant.embedded.v1alpha1.ConverseResponse.EventType event_type = 2;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // .google.assistant.embedded.v1alpha1.AudioOut audio_out = 3;
  if (has_audio_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *converse_response_.audio_out_, output);
  }

  // .google.assistant.embedded.v1alpha1.ConverseResult result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *converse_response_.result_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.assistant.embedded.v1alpha1.ConverseResponse)
}

::google::protobuf::uint8* ConverseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.assistant.embedded.v1alpha1.ConverseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *converse_response_.error_, deterministic, target);
  }

  // .google.assistant.embedded.v1alpha1.ConverseResponse.EventType event_type = 2;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  // .google.assistant.embedded.v1alpha1.AudioOut audio_out = 3;
  if (has_audio_out()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *converse_response_.audio_out_, deterministic, target);
  }

  // .google.assistant.embedded.v1alpha1.ConverseResult result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *converse_response_.result_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.assistant.embedded.v1alpha1.ConverseResponse)
  return target;
}

size_t ConverseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.assistant.embedded.v1alpha1.ConverseResponse)
  size_t total_size = 0;

  switch (converse_response_case()) {
    // .google.rpc.Status error = 1;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *converse_response_.error_);
      break;
    }
    // .google.assistant.embedded.v1alpha1.ConverseResponse.EventType event_type = 2;
    case kEventType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
      break;
    }
    // .google.assistant.embedded.v1alpha1.AudioOut audio_out = 3;
    case kAudioOut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *converse_response_.audio_out_);
      break;
    }
    // .google.assistant.embedded.v1alpha1.ConverseResult result = 5;
    case kResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *converse_response_.result_);
      break;
    }
    case CONVERSE_RESPONSE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConverseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.assistant.embedded.v1alpha1.ConverseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConverseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConverseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.assistant.embedded.v1alpha1.ConverseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.assistant.embedded.v1alpha1.ConverseResponse)
    MergeFrom(*source);
  }
}

void ConverseResponse::MergeFrom(const ConverseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.assistant.embedded.v1alpha1.ConverseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.converse_response_case()) {
    case kError: {
      mutable_error()->::google::rpc::Status::MergeFrom(from.error());
      break;
    }
    case kEventType: {
      set_event_type(from.event_type());
      break;
    }
    case kAudioOut: {
      mutable_audio_out()->::google::assistant::embedded::v1alpha1::AudioOut::MergeFrom(from.audio_out());
      break;
    }
    case kResult: {
      mutable_result()->::google::assistant::embedded::v1alpha1::ConverseResult::MergeFrom(from.result());
      break;
    }
    case CONVERSE_RESPONSE_NOT_SET: {
      break;
    }
  }
}

void ConverseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.assistant.embedded.v1alpha1.ConverseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConverseResponse::CopyFrom(const ConverseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.assistant.embedded.v1alpha1.ConverseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConverseResponse::IsInitialized() const {
  return true;
}

void ConverseResponse::Swap(ConverseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConverseResponse::InternalSwap(ConverseResponse* other) {
  std::swap(converse_response_, other->converse_response_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConverseResponse::GetMetadata() const {
  protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fassistant_2fembedded_2fv1alpha1_2fembedded_5fassistant_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConverseResponse

// .google.rpc.Status error = 1;
bool ConverseResponse::has_error() const {
  return converse_response_case() == kError;
}
void ConverseResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
void ConverseResponse::clear_error() {
  if (has_error()) {
    delete converse_response_.error_;
    clear_has_converse_response();
  }
}
 const ::google::rpc::Status& ConverseResponse::error() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResponse.error)
  return has_error()
      ? *converse_response_.error_
      : ::google::rpc::Status::default_instance();
}
::google::rpc::Status* ConverseResponse::mutable_error() {
  if (!has_error()) {
    clear_converse_response();
    set_has_error();
    converse_response_.error_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseResponse.error)
  return converse_response_.error_;
}
::google::rpc::Status* ConverseResponse::release_error() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseResponse.error)
  if (has_error()) {
    clear_has_converse_response();
    ::google::rpc::Status* temp = converse_response_.error_;
    converse_response_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ConverseResponse::set_allocated_error(::google::rpc::Status* error) {
  clear_converse_response();
  if (error) {
    set_has_error();
    converse_response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseResponse.error)
}

// .google.assistant.embedded.v1alpha1.ConverseResponse.EventType event_type = 2;
bool ConverseResponse::has_event_type() const {
  return converse_response_case() == kEventType;
}
void ConverseResponse::set_has_event_type() {
  _oneof_case_[0] = kEventType;
}
void ConverseResponse::clear_event_type() {
  if (has_event_type()) {
    converse_response_.event_type_ = 0;
    clear_has_converse_response();
  }
}
::google::assistant::embedded::v1alpha1::ConverseResponse_EventType ConverseResponse::event_type() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResponse.event_type)
  if (has_event_type()) {
    return static_cast< ::google::assistant::embedded::v1alpha1::ConverseResponse_EventType >(converse_response_.event_type_);
  }
  return static_cast< ::google::assistant::embedded::v1alpha1::ConverseResponse_EventType >(0);
}
void ConverseResponse::set_event_type(::google::assistant::embedded::v1alpha1::ConverseResponse_EventType value) {
  if (!has_event_type()) {
    clear_converse_response();
    set_has_event_type();
  }
  converse_response_.event_type_ = value;
  // @@protoc_insertion_point(field_set:google.assistant.embedded.v1alpha1.ConverseResponse.event_type)
}

// .google.assistant.embedded.v1alpha1.AudioOut audio_out = 3;
bool ConverseResponse::has_audio_out() const {
  return converse_response_case() == kAudioOut;
}
void ConverseResponse::set_has_audio_out() {
  _oneof_case_[0] = kAudioOut;
}
void ConverseResponse::clear_audio_out() {
  if (has_audio_out()) {
    delete converse_response_.audio_out_;
    clear_has_converse_response();
  }
}
 const ::google::assistant::embedded::v1alpha1::AudioOut& ConverseResponse::audio_out() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResponse.audio_out)
  return has_audio_out()
      ? *converse_response_.audio_out_
      : ::google::assistant::embedded::v1alpha1::AudioOut::default_instance();
}
::google::assistant::embedded::v1alpha1::AudioOut* ConverseResponse::mutable_audio_out() {
  if (!has_audio_out()) {
    clear_converse_response();
    set_has_audio_out();
    converse_response_.audio_out_ = new ::google::assistant::embedded::v1alpha1::AudioOut;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseResponse.audio_out)
  return converse_response_.audio_out_;
}
::google::assistant::embedded::v1alpha1::AudioOut* ConverseResponse::release_audio_out() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseResponse.audio_out)
  if (has_audio_out()) {
    clear_has_converse_response();
    ::google::assistant::embedded::v1alpha1::AudioOut* temp = converse_response_.audio_out_;
    converse_response_.audio_out_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ConverseResponse::set_allocated_audio_out(::google::assistant::embedded::v1alpha1::AudioOut* audio_out) {
  clear_converse_response();
  if (audio_out) {
    set_has_audio_out();
    converse_response_.audio_out_ = audio_out;
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseResponse.audio_out)
}

// .google.assistant.embedded.v1alpha1.ConverseResult result = 5;
bool ConverseResponse::has_result() const {
  return converse_response_case() == kResult;
}
void ConverseResponse::set_has_result() {
  _oneof_case_[0] = kResult;
}
void ConverseResponse::clear_result() {
  if (has_result()) {
    delete converse_response_.result_;
    clear_has_converse_response();
  }
}
 const ::google::assistant::embedded::v1alpha1::ConverseResult& ConverseResponse::result() const {
  // @@protoc_insertion_point(field_get:google.assistant.embedded.v1alpha1.ConverseResponse.result)
  return has_result()
      ? *converse_response_.result_
      : ::google::assistant::embedded::v1alpha1::ConverseResult::default_instance();
}
::google::assistant::embedded::v1alpha1::ConverseResult* ConverseResponse::mutable_result() {
  if (!has_result()) {
    clear_converse_response();
    set_has_result();
    converse_response_.result_ = new ::google::assistant::embedded::v1alpha1::ConverseResult;
  }
  // @@protoc_insertion_point(field_mutable:google.assistant.embedded.v1alpha1.ConverseResponse.result)
  return converse_response_.result_;
}
::google::assistant::embedded::v1alpha1::ConverseResult* ConverseResponse::release_result() {
  // @@protoc_insertion_point(field_release:google.assistant.embedded.v1alpha1.ConverseResponse.result)
  if (has_result()) {
    clear_has_converse_response();
    ::google::assistant::embedded::v1alpha1::ConverseResult* temp = converse_response_.result_;
    converse_response_.result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ConverseResponse::set_allocated_result(::google::assistant::embedded::v1alpha1::ConverseResult* result) {
  clear_converse_response();
  if (result) {
    set_has_result();
    converse_response_.result_ = result;
  }
  // @@protoc_insertion_point(field_set_allocated:google.assistant.embedded.v1alpha1.ConverseResponse.result)
}

bool ConverseResponse::has_converse_response() const {
  return converse_response_case() != CONVERSE_RESPONSE_NOT_SET;
}
void ConverseResponse::clear_has_converse_response() {
  _oneof_case_[0] = CONVERSE_RESPONSE_NOT_SET;
}
ConverseResponse::ConverseResponseCase ConverseResponse::converse_response_case() const {
  return ConverseResponse::ConverseResponseCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace embedded
}  // namespace assistant
}  // namespace google

// @@protoc_insertion_point(global_scope)
