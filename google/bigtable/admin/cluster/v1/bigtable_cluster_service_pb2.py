# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/admin/cluster/v1/bigtable_cluster_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.bigtable.admin.cluster.v1 import bigtable_cluster_data_pb2 as google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2
from google.bigtable.admin.cluster.v1 import bigtable_cluster_service_messages_pb2 as google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2
from google.longrunning import operations_pb2 as google_dot_longrunning_dot_operations__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='google/bigtable/admin/cluster/v1/bigtable_cluster_service.proto',
  package='google.bigtable.admin.cluster.v1',
  syntax='proto3',
  serialized_pb=_b('\n?google/bigtable/admin/cluster/v1/bigtable_cluster_service.proto\x12 google.bigtable.admin.cluster.v1\x1a\x1cgoogle/api/annotations.proto\x1a<google/bigtable/admin/cluster/v1/bigtable_cluster_data.proto\x1aHgoogle/bigtable/admin/cluster/v1/bigtable_cluster_service_messages.proto\x1a#google/longrunning/operations.proto\x1a\x1bgoogle/protobuf/empty.proto2\x89\t\n\x16\x42igtableClusterService\x12\x99\x01\n\tListZones\x12\x32.google.bigtable.admin.cluster.v1.ListZonesRequest\x1a\x33.google.bigtable.admin.cluster.v1.ListZonesResponse\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b/v1/{name=projects/*}/zones\x12\x9e\x01\n\nGetCluster\x12\x33.google.bigtable.admin.cluster.v1.GetClusterRequest\x1a).google.bigtable.admin.cluster.v1.Cluster\"0\x82\xd3\xe4\x93\x02*\x12(/v1/{name=projects/*/zones/*/clusters/*}\x12\xb0\x01\n\x0cListClusters\x12\x35.google.bigtable.admin.cluster.v1.ListClustersRequest\x1a\x36.google.bigtable.admin.cluster.v1.ListClustersResponse\"1\x82\xd3\xe4\x93\x02+\x12)/v1/{name=projects/*}/aggregated/clusters\x12\xa5\x01\n\rCreateCluster\x12\x36.google.bigtable.admin.cluster.v1.CreateClusterRequest\x1a).google.bigtable.admin.cluster.v1.Cluster\"1\x82\xd3\xe4\x93\x02+\"&/v1/{name=projects/*/zones/*}/clusters:\x01*\x12\x9a\x01\n\rUpdateCluster\x12).google.bigtable.admin.cluster.v1.Cluster\x1a).google.bigtable.admin.cluster.v1.Cluster\"3\x82\xd3\xe4\x93\x02-\x1a(/v1/{name=projects/*/zones/*/clusters/*}:\x01*\x12\x91\x01\n\rDeleteCluster\x12\x36.google.bigtable.admin.cluster.v1.DeleteClusterRequest\x1a\x16.google.protobuf.Empty\"0\x82\xd3\xe4\x93\x02**(/v1/{name=projects/*/zones/*/clusters/*}\x12\xa5\x01\n\x0fUndeleteCluster\x12\x38.google.bigtable.admin.cluster.v1.UndeleteClusterRequest\x1a\x1d.google.longrunning.Operation\"9\x82\xd3\xe4\x93\x02\x33\"1/v1/{name=projects/*/zones/*/clusters/*}:undeleteB\x8f\x01\n$com.google.bigtable.admin.cluster.v1B\x1c\x42igtableClusterServicesProtoP\x01ZGgoogle.golang.org/genproto/googleapis/bigtable/admin/cluster/v1;clusterb\x06proto3')
  ,
  dependencies=[google_dot_api_dot_annotations__pb2.DESCRIPTOR,google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.DESCRIPTOR,google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.DESCRIPTOR,google_dot_longrunning_dot_operations__pb2.DESCRIPTOR,google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,])



_sym_db.RegisterFileDescriptor(DESCRIPTOR)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n$com.google.bigtable.admin.cluster.v1B\034BigtableClusterServicesProtoP\001ZGgoogle.golang.org/genproto/googleapis/bigtable/admin/cluster/v1;cluster'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class BigtableClusterServiceStub(object):
    """Service for managing zonal Cloud Bigtable resources.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.ListZones = channel.unary_unary(
          '/google.bigtable.admin.cluster.v1.BigtableClusterService/ListZones',
          request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListZonesRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListZonesResponse.FromString,
          )
      self.GetCluster = channel.unary_unary(
          '/google.bigtable.admin.cluster.v1.BigtableClusterService/GetCluster',
          request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.GetClusterRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.FromString,
          )
      self.ListClusters = channel.unary_unary(
          '/google.bigtable.admin.cluster.v1.BigtableClusterService/ListClusters',
          request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListClustersRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListClustersResponse.FromString,
          )
      self.CreateCluster = channel.unary_unary(
          '/google.bigtable.admin.cluster.v1.BigtableClusterService/CreateCluster',
          request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.CreateClusterRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.FromString,
          )
      self.UpdateCluster = channel.unary_unary(
          '/google.bigtable.admin.cluster.v1.BigtableClusterService/UpdateCluster',
          request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.FromString,
          )
      self.DeleteCluster = channel.unary_unary(
          '/google.bigtable.admin.cluster.v1.BigtableClusterService/DeleteCluster',
          request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.DeleteClusterRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )
      self.UndeleteCluster = channel.unary_unary(
          '/google.bigtable.admin.cluster.v1.BigtableClusterService/UndeleteCluster',
          request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.UndeleteClusterRequest.SerializeToString,
          response_deserializer=google_dot_longrunning_dot_operations__pb2.Operation.FromString,
          )


  class BigtableClusterServiceServicer(object):
    """Service for managing zonal Cloud Bigtable resources.
    """

    def ListZones(self, request, context):
      """Lists the supported zones for the given project.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetCluster(self, request, context):
      """Gets information about a particular cluster.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListClusters(self, request, context):
      """Lists all clusters in the given project, along with any zones for which
      cluster information could not be retrieved.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CreateCluster(self, request, context):
      """Creates a cluster and begins preparing it to begin serving. The returned
      cluster embeds as its "current_operation" a long-running operation which
      can be used to track the progress of turning up the new cluster.
      Immediately upon completion of this request:
      * The cluster will be readable via the API, with all requested attributes
      but no allocated resources.
      Until completion of the embedded operation:
      * Cancelling the operation will render the cluster immediately unreadable
      via the API.
      * All other attempts to modify or delete the cluster will be rejected.
      Upon completion of the embedded operation:
      * Billing for all successfully-allocated resources will begin (some types
      may have lower than the requested levels).
      * New tables can be created in the cluster.
      * The cluster's allocated resource levels will be readable via the API.
      The embedded operation's "metadata" field type is
      [CreateClusterMetadata][google.bigtable.admin.cluster.v1.CreateClusterMetadata] The embedded operation's "response" field type is
      [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpdateCluster(self, request, context):
      """Updates a cluster, and begins allocating or releasing resources as
      requested. The returned cluster embeds as its "current_operation" a
      long-running operation which can be used to track the progress of updating
      the cluster.
      Immediately upon completion of this request:
      * For resource types where a decrease in the cluster's allocation has been
      requested, billing will be based on the newly-requested level.
      Until completion of the embedded operation:
      * Cancelling the operation will set its metadata's "cancelled_at_time",
      and begin restoring resources to their pre-request values. The operation
      is guaranteed to succeed at undoing all resource changes, after which
      point it will terminate with a CANCELLED status.
      * All other attempts to modify or delete the cluster will be rejected.
      * Reading the cluster via the API will continue to give the pre-request
      resource levels.
      Upon completion of the embedded operation:
      * Billing will begin for all successfully-allocated resources (some types
      may have lower than the requested levels).
      * All newly-reserved resources will be available for serving the cluster's
      tables.
      * The cluster's new resource levels will be readable via the API.
      [UpdateClusterMetadata][google.bigtable.admin.cluster.v1.UpdateClusterMetadata] The embedded operation's "response" field type is
      [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteCluster(self, request, context):
      """Marks a cluster and all of its tables for permanent deletion in 7 days.
      Immediately upon completion of the request:
      * Billing will cease for all of the cluster's reserved resources.
      * The cluster's "delete_time" field will be set 7 days in the future.
      Soon afterward:
      * All tables within the cluster will become unavailable.
      Prior to the cluster's "delete_time":
      * The cluster can be recovered with a call to UndeleteCluster.
      * All other attempts to modify or delete the cluster will be rejected.
      At the cluster's "delete_time":
      * The cluster and *all of its tables* will immediately and irrevocably
      disappear from the API, and their data will be permanently deleted.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UndeleteCluster(self, request, context):
      """Cancels the scheduled deletion of an cluster and begins preparing it to
      resume serving. The returned operation will also be embedded as the
      cluster's "current_operation".
      Immediately upon completion of this request:
      * The cluster's "delete_time" field will be unset, protecting it from
      automatic deletion.
      Until completion of the returned operation:
      * The operation cannot be cancelled.
      Upon completion of the returned operation:
      * Billing for the cluster's resources will resume.
      * All tables within the cluster will be available.
      [UndeleteClusterMetadata][google.bigtable.admin.cluster.v1.UndeleteClusterMetadata] The embedded operation's "response" field type is
      [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_BigtableClusterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ListZones': grpc.unary_unary_rpc_method_handler(
            servicer.ListZones,
            request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListZonesRequest.FromString,
            response_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListZonesResponse.SerializeToString,
        ),
        'GetCluster': grpc.unary_unary_rpc_method_handler(
            servicer.GetCluster,
            request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.GetClusterRequest.FromString,
            response_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.SerializeToString,
        ),
        'ListClusters': grpc.unary_unary_rpc_method_handler(
            servicer.ListClusters,
            request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListClustersRequest.FromString,
            response_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListClustersResponse.SerializeToString,
        ),
        'CreateCluster': grpc.unary_unary_rpc_method_handler(
            servicer.CreateCluster,
            request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.CreateClusterRequest.FromString,
            response_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.SerializeToString,
        ),
        'UpdateCluster': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateCluster,
            request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.FromString,
            response_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.SerializeToString,
        ),
        'DeleteCluster': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteCluster,
            request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.DeleteClusterRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'UndeleteCluster': grpc.unary_unary_rpc_method_handler(
            servicer.UndeleteCluster,
            request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.UndeleteClusterRequest.FromString,
            response_serializer=google_dot_longrunning_dot_operations__pb2.Operation.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'google.bigtable.admin.cluster.v1.BigtableClusterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaBigtableClusterServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Service for managing zonal Cloud Bigtable resources.
    """
    def ListZones(self, request, context):
      """Lists the supported zones for the given project.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetCluster(self, request, context):
      """Gets information about a particular cluster.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListClusters(self, request, context):
      """Lists all clusters in the given project, along with any zones for which
      cluster information could not be retrieved.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CreateCluster(self, request, context):
      """Creates a cluster and begins preparing it to begin serving. The returned
      cluster embeds as its "current_operation" a long-running operation which
      can be used to track the progress of turning up the new cluster.
      Immediately upon completion of this request:
      * The cluster will be readable via the API, with all requested attributes
      but no allocated resources.
      Until completion of the embedded operation:
      * Cancelling the operation will render the cluster immediately unreadable
      via the API.
      * All other attempts to modify or delete the cluster will be rejected.
      Upon completion of the embedded operation:
      * Billing for all successfully-allocated resources will begin (some types
      may have lower than the requested levels).
      * New tables can be created in the cluster.
      * The cluster's allocated resource levels will be readable via the API.
      The embedded operation's "metadata" field type is
      [CreateClusterMetadata][google.bigtable.admin.cluster.v1.CreateClusterMetadata] The embedded operation's "response" field type is
      [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpdateCluster(self, request, context):
      """Updates a cluster, and begins allocating or releasing resources as
      requested. The returned cluster embeds as its "current_operation" a
      long-running operation which can be used to track the progress of updating
      the cluster.
      Immediately upon completion of this request:
      * For resource types where a decrease in the cluster's allocation has been
      requested, billing will be based on the newly-requested level.
      Until completion of the embedded operation:
      * Cancelling the operation will set its metadata's "cancelled_at_time",
      and begin restoring resources to their pre-request values. The operation
      is guaranteed to succeed at undoing all resource changes, after which
      point it will terminate with a CANCELLED status.
      * All other attempts to modify or delete the cluster will be rejected.
      * Reading the cluster via the API will continue to give the pre-request
      resource levels.
      Upon completion of the embedded operation:
      * Billing will begin for all successfully-allocated resources (some types
      may have lower than the requested levels).
      * All newly-reserved resources will be available for serving the cluster's
      tables.
      * The cluster's new resource levels will be readable via the API.
      [UpdateClusterMetadata][google.bigtable.admin.cluster.v1.UpdateClusterMetadata] The embedded operation's "response" field type is
      [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteCluster(self, request, context):
      """Marks a cluster and all of its tables for permanent deletion in 7 days.
      Immediately upon completion of the request:
      * Billing will cease for all of the cluster's reserved resources.
      * The cluster's "delete_time" field will be set 7 days in the future.
      Soon afterward:
      * All tables within the cluster will become unavailable.
      Prior to the cluster's "delete_time":
      * The cluster can be recovered with a call to UndeleteCluster.
      * All other attempts to modify or delete the cluster will be rejected.
      At the cluster's "delete_time":
      * The cluster and *all of its tables* will immediately and irrevocably
      disappear from the API, and their data will be permanently deleted.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UndeleteCluster(self, request, context):
      """Cancels the scheduled deletion of an cluster and begins preparing it to
      resume serving. The returned operation will also be embedded as the
      cluster's "current_operation".
      Immediately upon completion of this request:
      * The cluster's "delete_time" field will be unset, protecting it from
      automatic deletion.
      Until completion of the returned operation:
      * The operation cannot be cancelled.
      Upon completion of the returned operation:
      * Billing for the cluster's resources will resume.
      * All tables within the cluster will be available.
      [UndeleteClusterMetadata][google.bigtable.admin.cluster.v1.UndeleteClusterMetadata] The embedded operation's "response" field type is
      [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaBigtableClusterServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Service for managing zonal Cloud Bigtable resources.
    """
    def ListZones(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Lists the supported zones for the given project.
      """
      raise NotImplementedError()
    ListZones.future = None
    def GetCluster(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Gets information about a particular cluster.
      """
      raise NotImplementedError()
    GetCluster.future = None
    def ListClusters(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Lists all clusters in the given project, along with any zones for which
      cluster information could not be retrieved.
      """
      raise NotImplementedError()
    ListClusters.future = None
    def CreateCluster(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Creates a cluster and begins preparing it to begin serving. The returned
      cluster embeds as its "current_operation" a long-running operation which
      can be used to track the progress of turning up the new cluster.
      Immediately upon completion of this request:
      * The cluster will be readable via the API, with all requested attributes
      but no allocated resources.
      Until completion of the embedded operation:
      * Cancelling the operation will render the cluster immediately unreadable
      via the API.
      * All other attempts to modify or delete the cluster will be rejected.
      Upon completion of the embedded operation:
      * Billing for all successfully-allocated resources will begin (some types
      may have lower than the requested levels).
      * New tables can be created in the cluster.
      * The cluster's allocated resource levels will be readable via the API.
      The embedded operation's "metadata" field type is
      [CreateClusterMetadata][google.bigtable.admin.cluster.v1.CreateClusterMetadata] The embedded operation's "response" field type is
      [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
      """
      raise NotImplementedError()
    CreateCluster.future = None
    def UpdateCluster(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Updates a cluster, and begins allocating or releasing resources as
      requested. The returned cluster embeds as its "current_operation" a
      long-running operation which can be used to track the progress of updating
      the cluster.
      Immediately upon completion of this request:
      * For resource types where a decrease in the cluster's allocation has been
      requested, billing will be based on the newly-requested level.
      Until completion of the embedded operation:
      * Cancelling the operation will set its metadata's "cancelled_at_time",
      and begin restoring resources to their pre-request values. The operation
      is guaranteed to succeed at undoing all resource changes, after which
      point it will terminate with a CANCELLED status.
      * All other attempts to modify or delete the cluster will be rejected.
      * Reading the cluster via the API will continue to give the pre-request
      resource levels.
      Upon completion of the embedded operation:
      * Billing will begin for all successfully-allocated resources (some types
      may have lower than the requested levels).
      * All newly-reserved resources will be available for serving the cluster's
      tables.
      * The cluster's new resource levels will be readable via the API.
      [UpdateClusterMetadata][google.bigtable.admin.cluster.v1.UpdateClusterMetadata] The embedded operation's "response" field type is
      [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
      """
      raise NotImplementedError()
    UpdateCluster.future = None
    def DeleteCluster(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Marks a cluster and all of its tables for permanent deletion in 7 days.
      Immediately upon completion of the request:
      * Billing will cease for all of the cluster's reserved resources.
      * The cluster's "delete_time" field will be set 7 days in the future.
      Soon afterward:
      * All tables within the cluster will become unavailable.
      Prior to the cluster's "delete_time":
      * The cluster can be recovered with a call to UndeleteCluster.
      * All other attempts to modify or delete the cluster will be rejected.
      At the cluster's "delete_time":
      * The cluster and *all of its tables* will immediately and irrevocably
      disappear from the API, and their data will be permanently deleted.
      """
      raise NotImplementedError()
    DeleteCluster.future = None
    def UndeleteCluster(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Cancels the scheduled deletion of an cluster and begins preparing it to
      resume serving. The returned operation will also be embedded as the
      cluster's "current_operation".
      Immediately upon completion of this request:
      * The cluster's "delete_time" field will be unset, protecting it from
      automatic deletion.
      Until completion of the returned operation:
      * The operation cannot be cancelled.
      Upon completion of the returned operation:
      * Billing for the cluster's resources will resume.
      * All tables within the cluster will be available.
      [UndeleteClusterMetadata][google.bigtable.admin.cluster.v1.UndeleteClusterMetadata] The embedded operation's "response" field type is
      [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
      """
      raise NotImplementedError()
    UndeleteCluster.future = None


  def beta_create_BigtableClusterService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'CreateCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.CreateClusterRequest.FromString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'DeleteCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.DeleteClusterRequest.FromString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'GetCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.GetClusterRequest.FromString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'ListClusters'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListClustersRequest.FromString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'ListZones'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListZonesRequest.FromString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'UndeleteCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.UndeleteClusterRequest.FromString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'UpdateCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.FromString,
    }
    response_serializers = {
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'CreateCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.SerializeToString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'DeleteCluster'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'GetCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.SerializeToString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'ListClusters'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListClustersResponse.SerializeToString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'ListZones'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListZonesResponse.SerializeToString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'UndeleteCluster'): google_dot_longrunning_dot_operations__pb2.Operation.SerializeToString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'UpdateCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.SerializeToString,
    }
    method_implementations = {
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'CreateCluster'): face_utilities.unary_unary_inline(servicer.CreateCluster),
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'DeleteCluster'): face_utilities.unary_unary_inline(servicer.DeleteCluster),
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'GetCluster'): face_utilities.unary_unary_inline(servicer.GetCluster),
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'ListClusters'): face_utilities.unary_unary_inline(servicer.ListClusters),
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'ListZones'): face_utilities.unary_unary_inline(servicer.ListZones),
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'UndeleteCluster'): face_utilities.unary_unary_inline(servicer.UndeleteCluster),
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'UpdateCluster'): face_utilities.unary_unary_inline(servicer.UpdateCluster),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_BigtableClusterService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'CreateCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.CreateClusterRequest.SerializeToString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'DeleteCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.DeleteClusterRequest.SerializeToString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'GetCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.GetClusterRequest.SerializeToString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'ListClusters'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListClustersRequest.SerializeToString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'ListZones'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListZonesRequest.SerializeToString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'UndeleteCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.UndeleteClusterRequest.SerializeToString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'UpdateCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.SerializeToString,
    }
    response_deserializers = {
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'CreateCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.FromString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'DeleteCluster'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'GetCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.FromString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'ListClusters'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListClustersResponse.FromString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'ListZones'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListZonesResponse.FromString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'UndeleteCluster'): google_dot_longrunning_dot_operations__pb2.Operation.FromString,
      ('google.bigtable.admin.cluster.v1.BigtableClusterService', 'UpdateCluster'): google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.FromString,
    }
    cardinalities = {
      'CreateCluster': cardinality.Cardinality.UNARY_UNARY,
      'DeleteCluster': cardinality.Cardinality.UNARY_UNARY,
      'GetCluster': cardinality.Cardinality.UNARY_UNARY,
      'ListClusters': cardinality.Cardinality.UNARY_UNARY,
      'ListZones': cardinality.Cardinality.UNARY_UNARY,
      'UndeleteCluster': cardinality.Cardinality.UNARY_UNARY,
      'UpdateCluster': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'google.bigtable.admin.cluster.v1.BigtableClusterService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
