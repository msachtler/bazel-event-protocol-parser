# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.bigtable.admin.cluster.v1 import bigtable_cluster_data_pb2 as google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2
from google.bigtable.admin.cluster.v1 import bigtable_cluster_service_messages_pb2 as google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2
from google.longrunning import operations_pb2 as google_dot_longrunning_dot_operations__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class BigtableClusterServiceStub(object):
  """Service for managing zonal Cloud Bigtable resources.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ListZones = channel.unary_unary(
        '/google.bigtable.admin.cluster.v1.BigtableClusterService/ListZones',
        request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListZonesRequest.SerializeToString,
        response_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListZonesResponse.FromString,
        )
    self.GetCluster = channel.unary_unary(
        '/google.bigtable.admin.cluster.v1.BigtableClusterService/GetCluster',
        request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.GetClusterRequest.SerializeToString,
        response_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.FromString,
        )
    self.ListClusters = channel.unary_unary(
        '/google.bigtable.admin.cluster.v1.BigtableClusterService/ListClusters',
        request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListClustersRequest.SerializeToString,
        response_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListClustersResponse.FromString,
        )
    self.CreateCluster = channel.unary_unary(
        '/google.bigtable.admin.cluster.v1.BigtableClusterService/CreateCluster',
        request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.CreateClusterRequest.SerializeToString,
        response_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.FromString,
        )
    self.UpdateCluster = channel.unary_unary(
        '/google.bigtable.admin.cluster.v1.BigtableClusterService/UpdateCluster',
        request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.SerializeToString,
        response_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.FromString,
        )
    self.DeleteCluster = channel.unary_unary(
        '/google.bigtable.admin.cluster.v1.BigtableClusterService/DeleteCluster',
        request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.DeleteClusterRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.UndeleteCluster = channel.unary_unary(
        '/google.bigtable.admin.cluster.v1.BigtableClusterService/UndeleteCluster',
        request_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.UndeleteClusterRequest.SerializeToString,
        response_deserializer=google_dot_longrunning_dot_operations__pb2.Operation.FromString,
        )


class BigtableClusterServiceServicer(object):
  """Service for managing zonal Cloud Bigtable resources.
  """

  def ListZones(self, request, context):
    """Lists the supported zones for the given project.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetCluster(self, request, context):
    """Gets information about a particular cluster.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListClusters(self, request, context):
    """Lists all clusters in the given project, along with any zones for which
    cluster information could not be retrieved.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateCluster(self, request, context):
    """Creates a cluster and begins preparing it to begin serving. The returned
    cluster embeds as its "current_operation" a long-running operation which
    can be used to track the progress of turning up the new cluster.
    Immediately upon completion of this request:
    * The cluster will be readable via the API, with all requested attributes
    but no allocated resources.
    Until completion of the embedded operation:
    * Cancelling the operation will render the cluster immediately unreadable
    via the API.
    * All other attempts to modify or delete the cluster will be rejected.
    Upon completion of the embedded operation:
    * Billing for all successfully-allocated resources will begin (some types
    may have lower than the requested levels).
    * New tables can be created in the cluster.
    * The cluster's allocated resource levels will be readable via the API.
    The embedded operation's "metadata" field type is
    [CreateClusterMetadata][google.bigtable.admin.cluster.v1.CreateClusterMetadata] The embedded operation's "response" field type is
    [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateCluster(self, request, context):
    """Updates a cluster, and begins allocating or releasing resources as
    requested. The returned cluster embeds as its "current_operation" a
    long-running operation which can be used to track the progress of updating
    the cluster.
    Immediately upon completion of this request:
    * For resource types where a decrease in the cluster's allocation has been
    requested, billing will be based on the newly-requested level.
    Until completion of the embedded operation:
    * Cancelling the operation will set its metadata's "cancelled_at_time",
    and begin restoring resources to their pre-request values. The operation
    is guaranteed to succeed at undoing all resource changes, after which
    point it will terminate with a CANCELLED status.
    * All other attempts to modify or delete the cluster will be rejected.
    * Reading the cluster via the API will continue to give the pre-request
    resource levels.
    Upon completion of the embedded operation:
    * Billing will begin for all successfully-allocated resources (some types
    may have lower than the requested levels).
    * All newly-reserved resources will be available for serving the cluster's
    tables.
    * The cluster's new resource levels will be readable via the API.
    [UpdateClusterMetadata][google.bigtable.admin.cluster.v1.UpdateClusterMetadata] The embedded operation's "response" field type is
    [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteCluster(self, request, context):
    """Marks a cluster and all of its tables for permanent deletion in 7 days.
    Immediately upon completion of the request:
    * Billing will cease for all of the cluster's reserved resources.
    * The cluster's "delete_time" field will be set 7 days in the future.
    Soon afterward:
    * All tables within the cluster will become unavailable.
    Prior to the cluster's "delete_time":
    * The cluster can be recovered with a call to UndeleteCluster.
    * All other attempts to modify or delete the cluster will be rejected.
    At the cluster's "delete_time":
    * The cluster and *all of its tables* will immediately and irrevocably
    disappear from the API, and their data will be permanently deleted.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UndeleteCluster(self, request, context):
    """Cancels the scheduled deletion of an cluster and begins preparing it to
    resume serving. The returned operation will also be embedded as the
    cluster's "current_operation".
    Immediately upon completion of this request:
    * The cluster's "delete_time" field will be unset, protecting it from
    automatic deletion.
    Until completion of the returned operation:
    * The operation cannot be cancelled.
    Upon completion of the returned operation:
    * Billing for the cluster's resources will resume.
    * All tables within the cluster will be available.
    [UndeleteClusterMetadata][google.bigtable.admin.cluster.v1.UndeleteClusterMetadata] The embedded operation's "response" field type is
    [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BigtableClusterServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ListZones': grpc.unary_unary_rpc_method_handler(
          servicer.ListZones,
          request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListZonesRequest.FromString,
          response_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListZonesResponse.SerializeToString,
      ),
      'GetCluster': grpc.unary_unary_rpc_method_handler(
          servicer.GetCluster,
          request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.GetClusterRequest.FromString,
          response_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.SerializeToString,
      ),
      'ListClusters': grpc.unary_unary_rpc_method_handler(
          servicer.ListClusters,
          request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListClustersRequest.FromString,
          response_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.ListClustersResponse.SerializeToString,
      ),
      'CreateCluster': grpc.unary_unary_rpc_method_handler(
          servicer.CreateCluster,
          request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.CreateClusterRequest.FromString,
          response_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.SerializeToString,
      ),
      'UpdateCluster': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateCluster,
          request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.FromString,
          response_serializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__data__pb2.Cluster.SerializeToString,
      ),
      'DeleteCluster': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteCluster,
          request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.DeleteClusterRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'UndeleteCluster': grpc.unary_unary_rpc_method_handler(
          servicer.UndeleteCluster,
          request_deserializer=google_dot_bigtable_dot_admin_dot_cluster_dot_v1_dot_bigtable__cluster__service__messages__pb2.UndeleteClusterRequest.FromString,
          response_serializer=google_dot_longrunning_dot_operations__pb2.Operation.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'google.bigtable.admin.cluster.v1.BigtableClusterService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
