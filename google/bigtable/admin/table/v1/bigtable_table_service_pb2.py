# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/admin/table/v1/bigtable_table_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.bigtable.admin.table.v1 import bigtable_table_data_pb2 as google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2
from google.bigtable.admin.table.v1 import bigtable_table_service_messages_pb2 as google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='google/bigtable/admin/table/v1/bigtable_table_service.proto',
  package='google.bigtable.admin.table.v1',
  syntax='proto3',
  serialized_pb=_b('\n;google/bigtable/admin/table/v1/bigtable_table_service.proto\x12\x1egoogle.bigtable.admin.table.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x38google/bigtable/admin/table/v1/bigtable_table_data.proto\x1a\x44google/bigtable/admin/table/v1/bigtable_table_service_messages.proto\x1a\x1bgoogle/protobuf/empty.proto2\xbe\x0c\n\x14\x42igtableTableService\x12\xa4\x01\n\x0b\x43reateTable\x12\x32.google.bigtable.admin.table.v1.CreateTableRequest\x1a%.google.bigtable.admin.table.v1.Table\":\x82\xd3\xe4\x93\x02\x34\"//v1/{name=projects/*/zones/*/clusters/*}/tables:\x01*\x12\xac\x01\n\nListTables\x12\x31.google.bigtable.admin.table.v1.ListTablesRequest\x1a\x32.google.bigtable.admin.table.v1.ListTablesResponse\"7\x82\xd3\xe4\x93\x02\x31\x12//v1/{name=projects/*/zones/*/clusters/*}/tables\x12\x9d\x01\n\x08GetTable\x12/.google.bigtable.admin.table.v1.GetTableRequest\x1a%.google.bigtable.admin.table.v1.Table\"9\x82\xd3\xe4\x93\x02\x33\x12\x31/v1/{name=projects/*/zones/*/clusters/*/tables/*}\x12\x94\x01\n\x0b\x44\x65leteTable\x12\x32.google.bigtable.admin.table.v1.DeleteTableRequest\x1a\x16.google.protobuf.Empty\"9\x82\xd3\xe4\x93\x02\x33*1/v1/{name=projects/*/zones/*/clusters/*/tables/*}\x12\x9e\x01\n\x0bRenameTable\x12\x32.google.bigtable.admin.table.v1.RenameTableRequest\x1a\x16.google.protobuf.Empty\"C\x82\xd3\xe4\x93\x02=\"8/v1/{name=projects/*/zones/*/clusters/*/tables/*}:rename:\x01*\x12\xca\x01\n\x12\x43reateColumnFamily\x12\x39.google.bigtable.admin.table.v1.CreateColumnFamilyRequest\x1a,.google.bigtable.admin.table.v1.ColumnFamily\"K\x82\xd3\xe4\x93\x02\x45\"@/v1/{name=projects/*/zones/*/clusters/*/tables/*}/columnFamilies:\x01*\x12\xbf\x01\n\x12UpdateColumnFamily\x12,.google.bigtable.admin.table.v1.ColumnFamily\x1a,.google.bigtable.admin.table.v1.ColumnFamily\"M\x82\xd3\xe4\x93\x02G\x1a\x42/v1/{name=projects/*/zones/*/clusters/*/tables/*/columnFamilies/*}:\x01*\x12\xb3\x01\n\x12\x44\x65leteColumnFamily\x12\x39.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest\x1a\x16.google.protobuf.Empty\"J\x82\xd3\xe4\x93\x02\x44*B/v1/{name=projects/*/zones/*/clusters/*/tables/*/columnFamilies/*}\x12\xb2\x01\n\x0e\x42ulkDeleteRows\x12\x35.google.bigtable.admin.table.v1.BulkDeleteRowsRequest\x1a\x16.google.protobuf.Empty\"Q\x82\xd3\xe4\x93\x02K\"F/v1/{table_name=projects/*/zones/*/clusters/*/tables/*}:bulkDeleteRows:\x01*B\x87\x01\n\"com.google.bigtable.admin.table.v1B\x1a\x42igtableTableServicesProtoP\x01ZCgoogle.golang.org/genproto/googleapis/bigtable/admin/table/v1;tableb\x06proto3')
  ,
  dependencies=[google_dot_api_dot_annotations__pb2.DESCRIPTOR,google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.DESCRIPTOR,google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.DESCRIPTOR,google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,])



_sym_db.RegisterFileDescriptor(DESCRIPTOR)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\"com.google.bigtable.admin.table.v1B\032BigtableTableServicesProtoP\001ZCgoogle.golang.org/genproto/googleapis/bigtable/admin/table/v1;table'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class BigtableTableServiceStub(object):
    """Service for creating, configuring, and deleting Cloud Bigtable tables.
    Provides access to the table schemas only, not the data stored within the tables.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.CreateTable = channel.unary_unary(
          '/google.bigtable.admin.table.v1.BigtableTableService/CreateTable',
          request_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.CreateTableRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.Table.FromString,
          )
      self.ListTables = channel.unary_unary(
          '/google.bigtable.admin.table.v1.BigtableTableService/ListTables',
          request_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.ListTablesRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.ListTablesResponse.FromString,
          )
      self.GetTable = channel.unary_unary(
          '/google.bigtable.admin.table.v1.BigtableTableService/GetTable',
          request_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.GetTableRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.Table.FromString,
          )
      self.DeleteTable = channel.unary_unary(
          '/google.bigtable.admin.table.v1.BigtableTableService/DeleteTable',
          request_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.DeleteTableRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )
      self.RenameTable = channel.unary_unary(
          '/google.bigtable.admin.table.v1.BigtableTableService/RenameTable',
          request_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.RenameTableRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )
      self.CreateColumnFamily = channel.unary_unary(
          '/google.bigtable.admin.table.v1.BigtableTableService/CreateColumnFamily',
          request_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.CreateColumnFamilyRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.ColumnFamily.FromString,
          )
      self.UpdateColumnFamily = channel.unary_unary(
          '/google.bigtable.admin.table.v1.BigtableTableService/UpdateColumnFamily',
          request_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.ColumnFamily.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.ColumnFamily.FromString,
          )
      self.DeleteColumnFamily = channel.unary_unary(
          '/google.bigtable.admin.table.v1.BigtableTableService/DeleteColumnFamily',
          request_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.DeleteColumnFamilyRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )
      self.BulkDeleteRows = channel.unary_unary(
          '/google.bigtable.admin.table.v1.BigtableTableService/BulkDeleteRows',
          request_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.BulkDeleteRowsRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )


  class BigtableTableServiceServicer(object):
    """Service for creating, configuring, and deleting Cloud Bigtable tables.
    Provides access to the table schemas only, not the data stored within the tables.
    """

    def CreateTable(self, request, context):
      """Creates a new table, to be served from a specified cluster.
      The table can be created with a full set of initial column families,
      specified in the request.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListTables(self, request, context):
      """Lists the names of all tables served from a specified cluster.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetTable(self, request, context):
      """Gets the schema of the specified table, including its column families.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteTable(self, request, context):
      """Permanently deletes a specified table and all of its data.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RenameTable(self, request, context):
      """Changes the name of a specified table.
      Cannot be used to move tables between clusters, zones, or projects.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CreateColumnFamily(self, request, context):
      """Creates a new column family within a specified table.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpdateColumnFamily(self, request, context):
      """Changes the configuration of a specified column family.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteColumnFamily(self, request, context):
      """Permanently deletes a specified column family and all of its data.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BulkDeleteRows(self, request, context):
      """Delete all rows in a table corresponding to a particular prefix
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_BigtableTableServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'CreateTable': grpc.unary_unary_rpc_method_handler(
            servicer.CreateTable,
            request_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.CreateTableRequest.FromString,
            response_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.Table.SerializeToString,
        ),
        'ListTables': grpc.unary_unary_rpc_method_handler(
            servicer.ListTables,
            request_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.ListTablesRequest.FromString,
            response_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.ListTablesResponse.SerializeToString,
        ),
        'GetTable': grpc.unary_unary_rpc_method_handler(
            servicer.GetTable,
            request_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.GetTableRequest.FromString,
            response_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.Table.SerializeToString,
        ),
        'DeleteTable': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteTable,
            request_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.DeleteTableRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'RenameTable': grpc.unary_unary_rpc_method_handler(
            servicer.RenameTable,
            request_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.RenameTableRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'CreateColumnFamily': grpc.unary_unary_rpc_method_handler(
            servicer.CreateColumnFamily,
            request_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.CreateColumnFamilyRequest.FromString,
            response_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.ColumnFamily.SerializeToString,
        ),
        'UpdateColumnFamily': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateColumnFamily,
            request_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.ColumnFamily.FromString,
            response_serializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.ColumnFamily.SerializeToString,
        ),
        'DeleteColumnFamily': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteColumnFamily,
            request_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.DeleteColumnFamilyRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'BulkDeleteRows': grpc.unary_unary_rpc_method_handler(
            servicer.BulkDeleteRows,
            request_deserializer=google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.BulkDeleteRowsRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'google.bigtable.admin.table.v1.BigtableTableService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaBigtableTableServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Service for creating, configuring, and deleting Cloud Bigtable tables.
    Provides access to the table schemas only, not the data stored within the tables.
    """
    def CreateTable(self, request, context):
      """Creates a new table, to be served from a specified cluster.
      The table can be created with a full set of initial column families,
      specified in the request.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListTables(self, request, context):
      """Lists the names of all tables served from a specified cluster.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetTable(self, request, context):
      """Gets the schema of the specified table, including its column families.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteTable(self, request, context):
      """Permanently deletes a specified table and all of its data.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RenameTable(self, request, context):
      """Changes the name of a specified table.
      Cannot be used to move tables between clusters, zones, or projects.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CreateColumnFamily(self, request, context):
      """Creates a new column family within a specified table.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpdateColumnFamily(self, request, context):
      """Changes the configuration of a specified column family.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteColumnFamily(self, request, context):
      """Permanently deletes a specified column family and all of its data.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BulkDeleteRows(self, request, context):
      """Delete all rows in a table corresponding to a particular prefix
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaBigtableTableServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Service for creating, configuring, and deleting Cloud Bigtable tables.
    Provides access to the table schemas only, not the data stored within the tables.
    """
    def CreateTable(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Creates a new table, to be served from a specified cluster.
      The table can be created with a full set of initial column families,
      specified in the request.
      """
      raise NotImplementedError()
    CreateTable.future = None
    def ListTables(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Lists the names of all tables served from a specified cluster.
      """
      raise NotImplementedError()
    ListTables.future = None
    def GetTable(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Gets the schema of the specified table, including its column families.
      """
      raise NotImplementedError()
    GetTable.future = None
    def DeleteTable(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Permanently deletes a specified table and all of its data.
      """
      raise NotImplementedError()
    DeleteTable.future = None
    def RenameTable(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Changes the name of a specified table.
      Cannot be used to move tables between clusters, zones, or projects.
      """
      raise NotImplementedError()
    RenameTable.future = None
    def CreateColumnFamily(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Creates a new column family within a specified table.
      """
      raise NotImplementedError()
    CreateColumnFamily.future = None
    def UpdateColumnFamily(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Changes the configuration of a specified column family.
      """
      raise NotImplementedError()
    UpdateColumnFamily.future = None
    def DeleteColumnFamily(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Permanently deletes a specified column family and all of its data.
      """
      raise NotImplementedError()
    DeleteColumnFamily.future = None
    def BulkDeleteRows(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Delete all rows in a table corresponding to a particular prefix
      """
      raise NotImplementedError()
    BulkDeleteRows.future = None


  def beta_create_BigtableTableService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('google.bigtable.admin.table.v1.BigtableTableService', 'BulkDeleteRows'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.BulkDeleteRowsRequest.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'CreateColumnFamily'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.CreateColumnFamilyRequest.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'CreateTable'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.CreateTableRequest.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'DeleteColumnFamily'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.DeleteColumnFamilyRequest.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'DeleteTable'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.DeleteTableRequest.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'GetTable'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.GetTableRequest.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'ListTables'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.ListTablesRequest.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'RenameTable'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.RenameTableRequest.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'UpdateColumnFamily'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.ColumnFamily.FromString,
    }
    response_serializers = {
      ('google.bigtable.admin.table.v1.BigtableTableService', 'BulkDeleteRows'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'CreateColumnFamily'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.ColumnFamily.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'CreateTable'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.Table.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'DeleteColumnFamily'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'DeleteTable'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'GetTable'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.Table.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'ListTables'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.ListTablesResponse.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'RenameTable'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'UpdateColumnFamily'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.ColumnFamily.SerializeToString,
    }
    method_implementations = {
      ('google.bigtable.admin.table.v1.BigtableTableService', 'BulkDeleteRows'): face_utilities.unary_unary_inline(servicer.BulkDeleteRows),
      ('google.bigtable.admin.table.v1.BigtableTableService', 'CreateColumnFamily'): face_utilities.unary_unary_inline(servicer.CreateColumnFamily),
      ('google.bigtable.admin.table.v1.BigtableTableService', 'CreateTable'): face_utilities.unary_unary_inline(servicer.CreateTable),
      ('google.bigtable.admin.table.v1.BigtableTableService', 'DeleteColumnFamily'): face_utilities.unary_unary_inline(servicer.DeleteColumnFamily),
      ('google.bigtable.admin.table.v1.BigtableTableService', 'DeleteTable'): face_utilities.unary_unary_inline(servicer.DeleteTable),
      ('google.bigtable.admin.table.v1.BigtableTableService', 'GetTable'): face_utilities.unary_unary_inline(servicer.GetTable),
      ('google.bigtable.admin.table.v1.BigtableTableService', 'ListTables'): face_utilities.unary_unary_inline(servicer.ListTables),
      ('google.bigtable.admin.table.v1.BigtableTableService', 'RenameTable'): face_utilities.unary_unary_inline(servicer.RenameTable),
      ('google.bigtable.admin.table.v1.BigtableTableService', 'UpdateColumnFamily'): face_utilities.unary_unary_inline(servicer.UpdateColumnFamily),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_BigtableTableService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('google.bigtable.admin.table.v1.BigtableTableService', 'BulkDeleteRows'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.BulkDeleteRowsRequest.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'CreateColumnFamily'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.CreateColumnFamilyRequest.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'CreateTable'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.CreateTableRequest.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'DeleteColumnFamily'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.DeleteColumnFamilyRequest.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'DeleteTable'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.DeleteTableRequest.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'GetTable'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.GetTableRequest.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'ListTables'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.ListTablesRequest.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'RenameTable'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.RenameTableRequest.SerializeToString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'UpdateColumnFamily'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.ColumnFamily.SerializeToString,
    }
    response_deserializers = {
      ('google.bigtable.admin.table.v1.BigtableTableService', 'BulkDeleteRows'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'CreateColumnFamily'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.ColumnFamily.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'CreateTable'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.Table.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'DeleteColumnFamily'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'DeleteTable'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'GetTable'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.Table.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'ListTables'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__service__messages__pb2.ListTablesResponse.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'RenameTable'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('google.bigtable.admin.table.v1.BigtableTableService', 'UpdateColumnFamily'): google_dot_bigtable_dot_admin_dot_table_dot_v1_dot_bigtable__table__data__pb2.ColumnFamily.FromString,
    }
    cardinalities = {
      'BulkDeleteRows': cardinality.Cardinality.UNARY_UNARY,
      'CreateColumnFamily': cardinality.Cardinality.UNARY_UNARY,
      'CreateTable': cardinality.Cardinality.UNARY_UNARY,
      'DeleteColumnFamily': cardinality.Cardinality.UNARY_UNARY,
      'DeleteTable': cardinality.Cardinality.UNARY_UNARY,
      'GetTable': cardinality.Cardinality.UNARY_UNARY,
      'ListTables': cardinality.Cardinality.UNARY_UNARY,
      'RenameTable': cardinality.Cardinality.UNARY_UNARY,
      'UpdateColumnFamily': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'google.bigtable.admin.table.v1.BigtableTableService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
