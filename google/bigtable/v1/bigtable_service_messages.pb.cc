// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v1/bigtable_service_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/bigtable/v1/bigtable_service_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace bigtable {
namespace v1 {
class ReadRowsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadRowsRequest> {
  public:
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  const ::google::bigtable::v1::RowRange* row_range_;
  const ::google::bigtable::v1::RowSet* row_set_;
} _ReadRowsRequest_default_instance_;
class ReadRowsResponse_ChunkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadRowsResponse_Chunk> {
  public:
  const ::google::bigtable::v1::Family* row_contents_;
  bool reset_row_;
  bool commit_row_;
} _ReadRowsResponse_Chunk_default_instance_;
class ReadRowsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadRowsResponse> {
} _ReadRowsResponse_default_instance_;
class SampleRowKeysRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SampleRowKeysRequest> {
} _SampleRowKeysRequest_default_instance_;
class SampleRowKeysResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SampleRowKeysResponse> {
} _SampleRowKeysResponse_default_instance_;
class MutateRowRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MutateRowRequest> {
} _MutateRowRequest_default_instance_;
class MutateRowsRequest_EntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MutateRowsRequest_Entry> {
} _MutateRowsRequest_Entry_default_instance_;
class MutateRowsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MutateRowsRequest> {
} _MutateRowsRequest_default_instance_;
class MutateRowsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MutateRowsResponse> {
} _MutateRowsResponse_default_instance_;
class CheckAndMutateRowRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckAndMutateRowRequest> {
} _CheckAndMutateRowRequest_default_instance_;
class CheckAndMutateRowResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckAndMutateRowResponse> {
} _CheckAndMutateRowResponse_default_instance_;
class ReadModifyWriteRowRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadModifyWriteRowRequest> {
} _ReadModifyWriteRowRequest_default_instance_;

namespace protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, table_name_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ReadRowsRequest_default_instance_), row_key_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ReadRowsRequest_default_instance_), row_range_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ReadRowsRequest_default_instance_), row_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, allow_row_interleaving_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, num_rows_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsRequest, target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_Chunk, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ReadRowsResponse_Chunk_default_instance_), row_contents_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ReadRowsResponse_Chunk_default_instance_), reset_row_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ReadRowsResponse_Chunk_default_instance_), commit_row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse_Chunk, chunk_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse, row_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRowsResponse, chunks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysRequest, table_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysResponse, row_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRowKeysResponse, offset_bytes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, row_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowRequest, mutations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest_Entry, row_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest_Entry, mutations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsRequest, entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutateRowsResponse, statuses_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, row_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, predicate_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, true_mutations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowRequest, false_mutations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAndMutateRowResponse, predicate_matched_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, row_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadModifyWriteRowRequest, rules_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ReadRowsRequest)},
  { 13, -1, sizeof(ReadRowsResponse_Chunk)},
  { 22, -1, sizeof(ReadRowsResponse)},
  { 29, -1, sizeof(SampleRowKeysRequest)},
  { 35, -1, sizeof(SampleRowKeysResponse)},
  { 42, -1, sizeof(MutateRowRequest)},
  { 50, -1, sizeof(MutateRowsRequest_Entry)},
  { 57, -1, sizeof(MutateRowsRequest)},
  { 64, -1, sizeof(MutateRowsResponse)},
  { 70, -1, sizeof(CheckAndMutateRowRequest)},
  { 80, -1, sizeof(CheckAndMutateRowResponse)},
  { 86, -1, sizeof(ReadModifyWriteRowRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReadRowsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReadRowsResponse_Chunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReadRowsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SampleRowKeysRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SampleRowKeysResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MutateRowRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MutateRowsRequest_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MutateRowsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MutateRowsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckAndMutateRowRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckAndMutateRowResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReadModifyWriteRowRequest_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/bigtable/v1/bigtable_service_messages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace

void TableStruct::Shutdown() {
  _ReadRowsRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ReadRowsResponse_Chunk_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ReadRowsResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SampleRowKeysRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SampleRowKeysResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _MutateRowRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _MutateRowsRequest_Entry_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _MutateRowsRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _MutateRowsResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CheckAndMutateRowRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CheckAndMutateRowResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ReadModifyWriteRowRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::bigtable::v1::protobuf_google_2fbigtable_2fv1_2fbigtable_5fdata_2eproto::InitDefaults();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::InitDefaults();
  _ReadRowsRequest_default_instance_.DefaultConstruct();
  _ReadRowsResponse_Chunk_default_instance_.DefaultConstruct();
  _ReadRowsResponse_default_instance_.DefaultConstruct();
  _SampleRowKeysRequest_default_instance_.DefaultConstruct();
  _SampleRowKeysResponse_default_instance_.DefaultConstruct();
  _MutateRowRequest_default_instance_.DefaultConstruct();
  _MutateRowsRequest_Entry_default_instance_.DefaultConstruct();
  _MutateRowsRequest_default_instance_.DefaultConstruct();
  _MutateRowsResponse_default_instance_.DefaultConstruct();
  _CheckAndMutateRowRequest_default_instance_.DefaultConstruct();
  _CheckAndMutateRowResponse_default_instance_.DefaultConstruct();
  _ReadModifyWriteRowRequest_default_instance_.DefaultConstruct();
  _ReadRowsRequest_default_instance_.row_key_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ReadRowsRequest_default_instance_.row_range_ = const_cast< ::google::bigtable::v1::RowRange*>(
      ::google::bigtable::v1::RowRange::internal_default_instance());
  _ReadRowsRequest_default_instance_.row_set_ = const_cast< ::google::bigtable::v1::RowSet*>(
      ::google::bigtable::v1::RowSet::internal_default_instance());
  _ReadRowsRequest_default_instance_.get_mutable()->filter_ = const_cast< ::google::bigtable::v1::RowFilter*>(
      ::google::bigtable::v1::RowFilter::internal_default_instance());
  _ReadRowsResponse_Chunk_default_instance_.row_contents_ = const_cast< ::google::bigtable::v1::Family*>(
      ::google::bigtable::v1::Family::internal_default_instance());
  _ReadRowsResponse_Chunk_default_instance_.reset_row_ = false;
  _ReadRowsResponse_Chunk_default_instance_.commit_row_ = false;
  _CheckAndMutateRowRequest_default_instance_.get_mutable()->predicate_filter_ = const_cast< ::google::bigtable::v1::RowFilter*>(
      ::google::bigtable::v1::RowFilter::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n2google/bigtable/v1/bigtable_service_me"
      "ssages.proto\022\022google.bigtable.v1\032&google"
      "/bigtable/v1/bigtable_data.proto\032\027google"
      "/rpc/status.proto\"\213\002\n\017ReadRowsRequest\022\022\n"
      "\ntable_name\030\001 \001(\t\022\021\n\007row_key\030\002 \001(\014H\000\0221\n\t"
      "row_range\030\003 \001(\0132\034.google.bigtable.v1.Row"
      "RangeH\000\022-\n\007row_set\030\010 \001(\0132\032.google.bigtab"
      "le.v1.RowSetH\000\022-\n\006filter\030\005 \001(\0132\035.google."
      "bigtable.v1.RowFilter\022\036\n\026allow_row_inter"
      "leaving\030\006 \001(\010\022\026\n\016num_rows_limit\030\007 \001(\003B\010\n"
      "\006target\"\320\001\n\020ReadRowsResponse\022\017\n\007row_key\030"
      "\001 \001(\014\022:\n\006chunks\030\002 \003(\0132*.google.bigtable."
      "v1.ReadRowsResponse.Chunk\032o\n\005Chunk\0222\n\014ro"
      "w_contents\030\001 \001(\0132\032.google.bigtable.v1.Fa"
      "milyH\000\022\023\n\treset_row\030\002 \001(\010H\000\022\024\n\ncommit_ro"
      "w\030\003 \001(\010H\000B\007\n\005chunk\"*\n\024SampleRowKeysReque"
      "st\022\022\n\ntable_name\030\001 \001(\t\">\n\025SampleRowKeysR"
      "esponse\022\017\n\007row_key\030\001 \001(\014\022\024\n\014offset_bytes"
      "\030\002 \001(\003\"h\n\020MutateRowRequest\022\022\n\ntable_name"
      "\030\001 \001(\t\022\017\n\007row_key\030\002 \001(\014\022/\n\tmutations\030\003 \003"
      "(\0132\034.google.bigtable.v1.Mutation\"\260\001\n\021Mut"
      "ateRowsRequest\022\022\n\ntable_name\030\001 \001(\t\022<\n\007en"
      "tries\030\002 \003(\0132+.google.bigtable.v1.MutateR"
      "owsRequest.Entry\032I\n\005Entry\022\017\n\007row_key\030\001 \001"
      "(\014\022/\n\tmutations\030\002 \003(\0132\034.google.bigtable."
      "v1.Mutation\":\n\022MutateRowsResponse\022$\n\010sta"
      "tuses\030\001 \003(\0132\022.google.rpc.Status\"\345\001\n\030Chec"
      "kAndMutateRowRequest\022\022\n\ntable_name\030\001 \001(\t"
      "\022\017\n\007row_key\030\002 \001(\014\0227\n\020predicate_filter\030\006 "
      "\001(\0132\035.google.bigtable.v1.RowFilter\0224\n\016tr"
      "ue_mutations\030\004 \003(\0132\034.google.bigtable.v1."
      "Mutation\0225\n\017false_mutations\030\005 \003(\0132\034.goog"
      "le.bigtable.v1.Mutation\"6\n\031CheckAndMutat"
      "eRowResponse\022\031\n\021predicate_matched\030\001 \001(\010\""
      "x\n\031ReadModifyWriteRowRequest\022\022\n\ntable_na"
      "me\030\001 \001(\t\022\017\n\007row_key\030\002 \001(\014\0226\n\005rules\030\003 \003(\013"
      "2\'.google.bigtable.v1.ReadModifyWriteRul"
      "eBt\n\026com.google.bigtable.v1B\034BigtableSer"
      "viceMessagesProtoP\001Z:google.golang.org/g"
      "enproto/googleapis/bigtable/v1;bigtableb"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1607);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/bigtable/v1/bigtable_service_messages.proto", &protobuf_RegisterTypes);
  ::google::bigtable::v1::protobuf_google_2fbigtable_2fv1_2fbigtable_5fdata_2eproto::AddDescriptors();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRowsRequest::kTableNameFieldNumber;
const int ReadRowsRequest::kRowKeyFieldNumber;
const int ReadRowsRequest::kRowRangeFieldNumber;
const int ReadRowsRequest::kRowSetFieldNumber;
const int ReadRowsRequest::kFilterFieldNumber;
const int ReadRowsRequest::kAllowRowInterleavingFieldNumber;
const int ReadRowsRequest::kNumRowsLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRowsRequest::ReadRowsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.ReadRowsRequest)
}
ReadRowsRequest::ReadRowsRequest(const ReadRowsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_filter()) {
    filter_ = new ::google::bigtable::v1::RowFilter(*from.filter_);
  } else {
    filter_ = NULL;
  }
  ::memcpy(&allow_row_interleaving_, &from.allow_row_interleaving_,
    reinterpret_cast<char*>(&num_rows_limit_) -
    reinterpret_cast<char*>(&allow_row_interleaving_) + sizeof(num_rows_limit_));
  clear_has_target();
  switch (from.target_case()) {
    case kRowKey: {
      set_row_key(from.row_key());
      break;
    }
    case kRowRange: {
      mutable_row_range()->::google::bigtable::v1::RowRange::MergeFrom(from.row_range());
      break;
    }
    case kRowSet: {
      mutable_row_set()->::google::bigtable::v1::RowSet::MergeFrom(from.row_set());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.ReadRowsRequest)
}

void ReadRowsRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&filter_, 0, reinterpret_cast<char*>(&num_rows_limit_) -
    reinterpret_cast<char*>(&filter_) + sizeof(num_rows_limit_));
  clear_has_target();
  _cached_size_ = 0;
}

ReadRowsRequest::~ReadRowsRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.ReadRowsRequest)
  SharedDtor();
}

void ReadRowsRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete filter_;
  }
  if (has_target()) {
    clear_target();
  }
}

void ReadRowsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRowsRequest::descriptor() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadRowsRequest& ReadRowsRequest::default_instance() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReadRowsRequest* ReadRowsRequest::New(::google::protobuf::Arena* arena) const {
  ReadRowsRequest* n = new ReadRowsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRowsRequest::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v1.ReadRowsRequest)
  switch (target_case()) {
    case kRowKey: {
      target_.row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRowRange: {
      delete target_.row_range_;
      break;
    }
    case kRowSet: {
      delete target_.row_set_;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void ReadRowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.ReadRowsRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) {
    delete filter_;
  }
  filter_ = NULL;
  ::memset(&allow_row_interleaving_, 0, reinterpret_cast<char*>(&num_rows_limit_) -
    reinterpret_cast<char*>(&allow_row_interleaving_) + sizeof(num_rows_limit_));
  clear_target();
}

bool ReadRowsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.ReadRowsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v1.ReadRowsRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes row_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.v1.RowRange row_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.v1.RowFilter filter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allow_row_interleaving = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_row_interleaving_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_rows_limit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_rows_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.v1.RowSet row_set = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.ReadRowsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.ReadRowsRequest)
  return false;
#undef DO_
}

void ReadRowsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.ReadRowsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.ReadRowsRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // bytes row_key = 2;
  if (has_row_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row_key(), output);
  }

  // .google.bigtable.v1.RowRange row_range = 3;
  if (has_row_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *target_.row_range_, output);
  }

  // .google.bigtable.v1.RowFilter filter = 5;
  if (this->has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->filter_, output);
  }

  // bool allow_row_interleaving = 6;
  if (this->allow_row_interleaving() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allow_row_interleaving(), output);
  }

  // int64 num_rows_limit = 7;
  if (this->num_rows_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->num_rows_limit(), output);
  }

  // .google.bigtable.v1.RowSet row_set = 8;
  if (has_row_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *target_.row_set_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.ReadRowsRequest)
}

::google::protobuf::uint8* ReadRowsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.ReadRowsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.ReadRowsRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // bytes row_key = 2;
  if (has_row_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row_key(), target);
  }

  // .google.bigtable.v1.RowRange row_range = 3;
  if (has_row_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *target_.row_range_, deterministic, target);
  }

  // .google.bigtable.v1.RowFilter filter = 5;
  if (this->has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->filter_, deterministic, target);
  }

  // bool allow_row_interleaving = 6;
  if (this->allow_row_interleaving() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->allow_row_interleaving(), target);
  }

  // int64 num_rows_limit = 7;
  if (this->num_rows_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->num_rows_limit(), target);
  }

  // .google.bigtable.v1.RowSet row_set = 8;
  if (has_row_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *target_.row_set_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.ReadRowsRequest)
  return target;
}

size_t ReadRowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.ReadRowsRequest)
  size_t total_size = 0;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // .google.bigtable.v1.RowFilter filter = 5;
  if (this->has_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->filter_);
  }

  // bool allow_row_interleaving = 6;
  if (this->allow_row_interleaving() != 0) {
    total_size += 1 + 1;
  }

  // int64 num_rows_limit = 7;
  if (this->num_rows_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_rows_limit());
  }

  switch (target_case()) {
    // bytes row_key = 2;
    case kRowKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->row_key());
      break;
    }
    // .google.bigtable.v1.RowRange row_range = 3;
    case kRowRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *target_.row_range_);
      break;
    }
    // .google.bigtable.v1.RowSet row_set = 8;
    case kRowSet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *target_.row_set_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRowsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.ReadRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRowsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRowsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.ReadRowsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.ReadRowsRequest)
    MergeFrom(*source);
  }
}

void ReadRowsRequest::MergeFrom(const ReadRowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.ReadRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.has_filter()) {
    mutable_filter()->::google::bigtable::v1::RowFilter::MergeFrom(from.filter());
  }
  if (from.allow_row_interleaving() != 0) {
    set_allow_row_interleaving(from.allow_row_interleaving());
  }
  if (from.num_rows_limit() != 0) {
    set_num_rows_limit(from.num_rows_limit());
  }
  switch (from.target_case()) {
    case kRowKey: {
      set_row_key(from.row_key());
      break;
    }
    case kRowRange: {
      mutable_row_range()->::google::bigtable::v1::RowRange::MergeFrom(from.row_range());
      break;
    }
    case kRowSet: {
      mutable_row_set()->::google::bigtable::v1::RowSet::MergeFrom(from.row_set());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void ReadRowsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.ReadRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsRequest::CopyFrom(const ReadRowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.ReadRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRowsRequest::IsInitialized() const {
  return true;
}

void ReadRowsRequest::Swap(ReadRowsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRowsRequest::InternalSwap(ReadRowsRequest* other) {
  table_name_.Swap(&other->table_name_);
  std::swap(filter_, other->filter_);
  std::swap(allow_row_interleaving_, other->allow_row_interleaving_);
  std::swap(num_rows_limit_, other->num_rows_limit_);
  std::swap(target_, other->target_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRowsRequest::GetMetadata() const {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRowsRequest

// string table_name = 1;
void ReadRowsRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.table_name)
  return table_name_.GetNoArena();
}
void ReadRowsRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.table_name)
}
#if LANG_CXX11
void ReadRowsRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.ReadRowsRequest.table_name)
}
#endif
void ReadRowsRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadRowsRequest.table_name)
}
void ReadRowsRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadRowsRequest.table_name)
}
::std::string* ReadRowsRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadRowsRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.table_name)
}

// bytes row_key = 2;
bool ReadRowsRequest::has_row_key() const {
  return target_case() == kRowKey;
}
void ReadRowsRequest::set_has_row_key() {
  _oneof_case_[0] = kRowKey;
}
void ReadRowsRequest::clear_row_key() {
  if (has_row_key()) {
    target_.row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_target();
  }
}
const ::std::string& ReadRowsRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.row_key)
  if (has_row_key()) {
    return target_.row_key_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ReadRowsRequest::set_row_key(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.row_key)
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.row_key)
}
#if LANG_CXX11
void ReadRowsRequest::set_row_key(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.row_key)
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.ReadRowsRequest.row_key)
}
#endif
void ReadRowsRequest::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadRowsRequest.row_key)
}
void ReadRowsRequest::set_row_key(const void* value, size_t size) {
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadRowsRequest.row_key)
}
::std::string* ReadRowsRequest::mutable_row_key() {
  if (!has_row_key()) {
    clear_target();
    set_has_row_key();
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.row_key)
  return target_.row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadRowsRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.row_key)
  if (has_row_key()) {
    clear_has_target();
    return target_.row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ReadRowsRequest::set_allocated_row_key(::std::string* row_key) {
  if (!has_row_key()) {
    target_.row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_target();
  if (row_key != NULL) {
    set_has_row_key();
    target_.row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        row_key);
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.row_key)
}

// .google.bigtable.v1.RowRange row_range = 3;
bool ReadRowsRequest::has_row_range() const {
  return target_case() == kRowRange;
}
void ReadRowsRequest::set_has_row_range() {
  _oneof_case_[0] = kRowRange;
}
void ReadRowsRequest::clear_row_range() {
  if (has_row_range()) {
    delete target_.row_range_;
    clear_has_target();
  }
}
 const ::google::bigtable::v1::RowRange& ReadRowsRequest::row_range() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.row_range)
  return has_row_range()
      ? *target_.row_range_
      : ::google::bigtable::v1::RowRange::default_instance();
}
::google::bigtable::v1::RowRange* ReadRowsRequest::mutable_row_range() {
  if (!has_row_range()) {
    clear_target();
    set_has_row_range();
    target_.row_range_ = new ::google::bigtable::v1::RowRange;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.row_range)
  return target_.row_range_;
}
::google::bigtable::v1::RowRange* ReadRowsRequest::release_row_range() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.row_range)
  if (has_row_range()) {
    clear_has_target();
    ::google::bigtable::v1::RowRange* temp = target_.row_range_;
    target_.row_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReadRowsRequest::set_allocated_row_range(::google::bigtable::v1::RowRange* row_range) {
  clear_target();
  if (row_range) {
    set_has_row_range();
    target_.row_range_ = row_range;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.row_range)
}

// .google.bigtable.v1.RowSet row_set = 8;
bool ReadRowsRequest::has_row_set() const {
  return target_case() == kRowSet;
}
void ReadRowsRequest::set_has_row_set() {
  _oneof_case_[0] = kRowSet;
}
void ReadRowsRequest::clear_row_set() {
  if (has_row_set()) {
    delete target_.row_set_;
    clear_has_target();
  }
}
 const ::google::bigtable::v1::RowSet& ReadRowsRequest::row_set() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.row_set)
  return has_row_set()
      ? *target_.row_set_
      : ::google::bigtable::v1::RowSet::default_instance();
}
::google::bigtable::v1::RowSet* ReadRowsRequest::mutable_row_set() {
  if (!has_row_set()) {
    clear_target();
    set_has_row_set();
    target_.row_set_ = new ::google::bigtable::v1::RowSet;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.row_set)
  return target_.row_set_;
}
::google::bigtable::v1::RowSet* ReadRowsRequest::release_row_set() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.row_set)
  if (has_row_set()) {
    clear_has_target();
    ::google::bigtable::v1::RowSet* temp = target_.row_set_;
    target_.row_set_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReadRowsRequest::set_allocated_row_set(::google::bigtable::v1::RowSet* row_set) {
  clear_target();
  if (row_set) {
    set_has_row_set();
    target_.row_set_ = row_set;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.row_set)
}

// .google.bigtable.v1.RowFilter filter = 5;
bool ReadRowsRequest::has_filter() const {
  return this != internal_default_instance() && filter_ != NULL;
}
void ReadRowsRequest::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
const ::google::bigtable::v1::RowFilter& ReadRowsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.filter)
  return filter_ != NULL ? *filter_
                         : *::google::bigtable::v1::RowFilter::internal_default_instance();
}
::google::bigtable::v1::RowFilter* ReadRowsRequest::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::google::bigtable::v1::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsRequest.filter)
  return filter_;
}
::google::bigtable::v1::RowFilter* ReadRowsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsRequest.filter)
  
  ::google::bigtable::v1::RowFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
void ReadRowsRequest::set_allocated_filter(::google::bigtable::v1::RowFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsRequest.filter)
}

// bool allow_row_interleaving = 6;
void ReadRowsRequest::clear_allow_row_interleaving() {
  allow_row_interleaving_ = false;
}
bool ReadRowsRequest::allow_row_interleaving() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.allow_row_interleaving)
  return allow_row_interleaving_;
}
void ReadRowsRequest::set_allow_row_interleaving(bool value) {
  
  allow_row_interleaving_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.allow_row_interleaving)
}

// int64 num_rows_limit = 7;
void ReadRowsRequest::clear_num_rows_limit() {
  num_rows_limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReadRowsRequest::num_rows_limit() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsRequest.num_rows_limit)
  return num_rows_limit_;
}
void ReadRowsRequest::set_num_rows_limit(::google::protobuf::int64 value) {
  
  num_rows_limit_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsRequest.num_rows_limit)
}

bool ReadRowsRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
void ReadRowsRequest::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
ReadRowsRequest::TargetCase ReadRowsRequest::target_case() const {
  return ReadRowsRequest::TargetCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRowsResponse_Chunk::kRowContentsFieldNumber;
const int ReadRowsResponse_Chunk::kResetRowFieldNumber;
const int ReadRowsResponse_Chunk::kCommitRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRowsResponse_Chunk::ReadRowsResponse_Chunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.ReadRowsResponse.Chunk)
}
ReadRowsResponse_Chunk::ReadRowsResponse_Chunk(const ReadRowsResponse_Chunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_chunk();
  switch (from.chunk_case()) {
    case kRowContents: {
      mutable_row_contents()->::google::bigtable::v1::Family::MergeFrom(from.row_contents());
      break;
    }
    case kResetRow: {
      set_reset_row(from.reset_row());
      break;
    }
    case kCommitRow: {
      set_commit_row(from.commit_row());
      break;
    }
    case CHUNK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.ReadRowsResponse.Chunk)
}

void ReadRowsResponse_Chunk::SharedCtor() {
  clear_has_chunk();
  _cached_size_ = 0;
}

ReadRowsResponse_Chunk::~ReadRowsResponse_Chunk() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.ReadRowsResponse.Chunk)
  SharedDtor();
}

void ReadRowsResponse_Chunk::SharedDtor() {
  if (has_chunk()) {
    clear_chunk();
  }
}

void ReadRowsResponse_Chunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRowsResponse_Chunk::descriptor() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadRowsResponse_Chunk& ReadRowsResponse_Chunk::default_instance() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReadRowsResponse_Chunk* ReadRowsResponse_Chunk::New(::google::protobuf::Arena* arena) const {
  ReadRowsResponse_Chunk* n = new ReadRowsResponse_Chunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRowsResponse_Chunk::clear_chunk() {
// @@protoc_insertion_point(one_of_clear_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  switch (chunk_case()) {
    case kRowContents: {
      delete chunk_.row_contents_;
      break;
    }
    case kResetRow: {
      // No need to clear
      break;
    }
    case kCommitRow: {
      // No need to clear
      break;
    }
    case CHUNK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHUNK_NOT_SET;
}


void ReadRowsResponse_Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  clear_chunk();
}

bool ReadRowsResponse_Chunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.bigtable.v1.Family row_contents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row_contents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reset_row = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          clear_chunk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chunk_.reset_row_)));
          set_has_reset_row();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool commit_row = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          clear_chunk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chunk_.commit_row_)));
          set_has_commit_row();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.ReadRowsResponse.Chunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.ReadRowsResponse.Chunk)
  return false;
#undef DO_
}

void ReadRowsResponse_Chunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.bigtable.v1.Family row_contents = 1;
  if (has_row_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *chunk_.row_contents_, output);
  }

  // bool reset_row = 2;
  if (has_reset_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reset_row(), output);
  }

  // bool commit_row = 3;
  if (has_commit_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->commit_row(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.ReadRowsResponse.Chunk)
}

::google::protobuf::uint8* ReadRowsResponse_Chunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.bigtable.v1.Family row_contents = 1;
  if (has_row_contents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *chunk_.row_contents_, deterministic, target);
  }

  // bool reset_row = 2;
  if (has_reset_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reset_row(), target);
  }

  // bool commit_row = 3;
  if (has_commit_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->commit_row(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.ReadRowsResponse.Chunk)
  return target;
}

size_t ReadRowsResponse_Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  size_t total_size = 0;

  switch (chunk_case()) {
    // .google.bigtable.v1.Family row_contents = 1;
    case kRowContents: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *chunk_.row_contents_);
      break;
    }
    // bool reset_row = 2;
    case kResetRow: {
      total_size += 1 + 1;
      break;
    }
    // bool commit_row = 3;
    case kCommitRow: {
      total_size += 1 + 1;
      break;
    }
    case CHUNK_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRowsResponse_Chunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRowsResponse_Chunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRowsResponse_Chunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.ReadRowsResponse.Chunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.ReadRowsResponse.Chunk)
    MergeFrom(*source);
  }
}

void ReadRowsResponse_Chunk::MergeFrom(const ReadRowsResponse_Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.chunk_case()) {
    case kRowContents: {
      mutable_row_contents()->::google::bigtable::v1::Family::MergeFrom(from.row_contents());
      break;
    }
    case kResetRow: {
      set_reset_row(from.reset_row());
      break;
    }
    case kCommitRow: {
      set_commit_row(from.commit_row());
      break;
    }
    case CHUNK_NOT_SET: {
      break;
    }
  }
}

void ReadRowsResponse_Chunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsResponse_Chunk::CopyFrom(const ReadRowsResponse_Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.ReadRowsResponse.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRowsResponse_Chunk::IsInitialized() const {
  return true;
}

void ReadRowsResponse_Chunk::Swap(ReadRowsResponse_Chunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRowsResponse_Chunk::InternalSwap(ReadRowsResponse_Chunk* other) {
  std::swap(chunk_, other->chunk_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRowsResponse_Chunk::GetMetadata() const {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRowsResponse_Chunk

// .google.bigtable.v1.Family row_contents = 1;
bool ReadRowsResponse_Chunk::has_row_contents() const {
  return chunk_case() == kRowContents;
}
void ReadRowsResponse_Chunk::set_has_row_contents() {
  _oneof_case_[0] = kRowContents;
}
void ReadRowsResponse_Chunk::clear_row_contents() {
  if (has_row_contents()) {
    delete chunk_.row_contents_;
    clear_has_chunk();
  }
}
 const ::google::bigtable::v1::Family& ReadRowsResponse_Chunk::row_contents() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.Chunk.row_contents)
  return has_row_contents()
      ? *chunk_.row_contents_
      : ::google::bigtable::v1::Family::default_instance();
}
::google::bigtable::v1::Family* ReadRowsResponse_Chunk::mutable_row_contents() {
  if (!has_row_contents()) {
    clear_chunk();
    set_has_row_contents();
    chunk_.row_contents_ = new ::google::bigtable::v1::Family;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsResponse.Chunk.row_contents)
  return chunk_.row_contents_;
}
::google::bigtable::v1::Family* ReadRowsResponse_Chunk::release_row_contents() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsResponse.Chunk.row_contents)
  if (has_row_contents()) {
    clear_has_chunk();
    ::google::bigtable::v1::Family* temp = chunk_.row_contents_;
    chunk_.row_contents_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ReadRowsResponse_Chunk::set_allocated_row_contents(::google::bigtable::v1::Family* row_contents) {
  clear_chunk();
  if (row_contents) {
    set_has_row_contents();
    chunk_.row_contents_ = row_contents;
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsResponse.Chunk.row_contents)
}

// bool reset_row = 2;
bool ReadRowsResponse_Chunk::has_reset_row() const {
  return chunk_case() == kResetRow;
}
void ReadRowsResponse_Chunk::set_has_reset_row() {
  _oneof_case_[0] = kResetRow;
}
void ReadRowsResponse_Chunk::clear_reset_row() {
  if (has_reset_row()) {
    chunk_.reset_row_ = false;
    clear_has_chunk();
  }
}
bool ReadRowsResponse_Chunk::reset_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.Chunk.reset_row)
  if (has_reset_row()) {
    return chunk_.reset_row_;
  }
  return false;
}
void ReadRowsResponse_Chunk::set_reset_row(bool value) {
  if (!has_reset_row()) {
    clear_chunk();
    set_has_reset_row();
  }
  chunk_.reset_row_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsResponse.Chunk.reset_row)
}

// bool commit_row = 3;
bool ReadRowsResponse_Chunk::has_commit_row() const {
  return chunk_case() == kCommitRow;
}
void ReadRowsResponse_Chunk::set_has_commit_row() {
  _oneof_case_[0] = kCommitRow;
}
void ReadRowsResponse_Chunk::clear_commit_row() {
  if (has_commit_row()) {
    chunk_.commit_row_ = false;
    clear_has_chunk();
  }
}
bool ReadRowsResponse_Chunk::commit_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.Chunk.commit_row)
  if (has_commit_row()) {
    return chunk_.commit_row_;
  }
  return false;
}
void ReadRowsResponse_Chunk::set_commit_row(bool value) {
  if (!has_commit_row()) {
    clear_chunk();
    set_has_commit_row();
  }
  chunk_.commit_row_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsResponse.Chunk.commit_row)
}

bool ReadRowsResponse_Chunk::has_chunk() const {
  return chunk_case() != CHUNK_NOT_SET;
}
void ReadRowsResponse_Chunk::clear_has_chunk() {
  _oneof_case_[0] = CHUNK_NOT_SET;
}
ReadRowsResponse_Chunk::ChunkCase ReadRowsResponse_Chunk::chunk_case() const {
  return ReadRowsResponse_Chunk::ChunkCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRowsResponse::kRowKeyFieldNumber;
const int ReadRowsResponse::kChunksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRowsResponse::ReadRowsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.ReadRowsResponse)
}
ReadRowsResponse::ReadRowsResponse(const ReadRowsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chunks_(from.chunks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.row_key().size() > 0) {
    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.ReadRowsResponse)
}

void ReadRowsResponse::SharedCtor() {
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReadRowsResponse::~ReadRowsResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.ReadRowsResponse)
  SharedDtor();
}

void ReadRowsResponse::SharedDtor() {
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadRowsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRowsResponse::descriptor() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadRowsResponse& ReadRowsResponse::default_instance() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReadRowsResponse* ReadRowsResponse::New(::google::protobuf::Arena* arena) const {
  ReadRowsResponse* n = new ReadRowsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRowsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.ReadRowsResponse)
  chunks_.Clear();
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReadRowsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.ReadRowsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes row_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.ReadRowsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.ReadRowsResponse)
  return false;
#undef DO_
}

void ReadRowsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.ReadRowsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes row_key = 1;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row_key(), output);
  }

  // repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;
  for (unsigned int i = 0, n = this->chunks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chunks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.ReadRowsResponse)
}

::google::protobuf::uint8* ReadRowsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.ReadRowsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes row_key = 1;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row_key(), target);
  }

  // repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;
  for (unsigned int i = 0, n = this->chunks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->chunks(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.ReadRowsResponse)
  return target;
}

size_t ReadRowsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.ReadRowsResponse)
  size_t total_size = 0;

  // repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;
  {
    unsigned int count = this->chunks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunks(i));
    }
  }

  // bytes row_key = 1;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRowsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.ReadRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRowsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRowsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.ReadRowsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.ReadRowsResponse)
    MergeFrom(*source);
  }
}

void ReadRowsResponse::MergeFrom(const ReadRowsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.ReadRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_.MergeFrom(from.chunks_);
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
}

void ReadRowsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.ReadRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRowsResponse::CopyFrom(const ReadRowsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.ReadRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRowsResponse::IsInitialized() const {
  return true;
}

void ReadRowsResponse::Swap(ReadRowsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRowsResponse::InternalSwap(ReadRowsResponse* other) {
  chunks_.InternalSwap(&other->chunks_);
  row_key_.Swap(&other->row_key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRowsResponse::GetMetadata() const {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRowsResponse

// bytes row_key = 1;
void ReadRowsResponse::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadRowsResponse::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.row_key)
  return row_key_.GetNoArena();
}
void ReadRowsResponse::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadRowsResponse.row_key)
}
#if LANG_CXX11
void ReadRowsResponse::set_row_key(::std::string&& value) {
  
  row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.ReadRowsResponse.row_key)
}
#endif
void ReadRowsResponse::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadRowsResponse.row_key)
}
void ReadRowsResponse::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadRowsResponse.row_key)
}
::std::string* ReadRowsResponse::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsResponse.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadRowsResponse::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadRowsResponse.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadRowsResponse::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadRowsResponse.row_key)
}

// repeated .google.bigtable.v1.ReadRowsResponse.Chunk chunks = 2;
int ReadRowsResponse::chunks_size() const {
  return chunks_.size();
}
void ReadRowsResponse::clear_chunks() {
  chunks_.Clear();
}
const ::google::bigtable::v1::ReadRowsResponse_Chunk& ReadRowsResponse::chunks(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadRowsResponse.chunks)
  return chunks_.Get(index);
}
::google::bigtable::v1::ReadRowsResponse_Chunk* ReadRowsResponse::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadRowsResponse.chunks)
  return chunks_.Mutable(index);
}
::google::bigtable::v1::ReadRowsResponse_Chunk* ReadRowsResponse::add_chunks() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.ReadRowsResponse.chunks)
  return chunks_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadRowsResponse_Chunk >*
ReadRowsResponse::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.ReadRowsResponse.chunks)
  return &chunks_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadRowsResponse_Chunk >&
ReadRowsResponse::chunks() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.ReadRowsResponse.chunks)
  return chunks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleRowKeysRequest::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleRowKeysRequest::SampleRowKeysRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.SampleRowKeysRequest)
}
SampleRowKeysRequest::SampleRowKeysRequest(const SampleRowKeysRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.SampleRowKeysRequest)
}

void SampleRowKeysRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SampleRowKeysRequest::~SampleRowKeysRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.SampleRowKeysRequest)
  SharedDtor();
}

void SampleRowKeysRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SampleRowKeysRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleRowKeysRequest::descriptor() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SampleRowKeysRequest& SampleRowKeysRequest::default_instance() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

SampleRowKeysRequest* SampleRowKeysRequest::New(::google::protobuf::Arena* arena) const {
  SampleRowKeysRequest* n = new SampleRowKeysRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleRowKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.SampleRowKeysRequest)
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SampleRowKeysRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.SampleRowKeysRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v1.SampleRowKeysRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.SampleRowKeysRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.SampleRowKeysRequest)
  return false;
#undef DO_
}

void SampleRowKeysRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.SampleRowKeysRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.SampleRowKeysRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.SampleRowKeysRequest)
}

::google::protobuf::uint8* SampleRowKeysRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.SampleRowKeysRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.SampleRowKeysRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.SampleRowKeysRequest)
  return target;
}

size_t SampleRowKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.SampleRowKeysRequest)
  size_t total_size = 0;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleRowKeysRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.SampleRowKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleRowKeysRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleRowKeysRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.SampleRowKeysRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.SampleRowKeysRequest)
    MergeFrom(*source);
  }
}

void SampleRowKeysRequest::MergeFrom(const SampleRowKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.SampleRowKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void SampleRowKeysRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.SampleRowKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleRowKeysRequest::CopyFrom(const SampleRowKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.SampleRowKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleRowKeysRequest::IsInitialized() const {
  return true;
}

void SampleRowKeysRequest::Swap(SampleRowKeysRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleRowKeysRequest::InternalSwap(SampleRowKeysRequest* other) {
  table_name_.Swap(&other->table_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleRowKeysRequest::GetMetadata() const {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleRowKeysRequest

// string table_name = 1;
void SampleRowKeysRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SampleRowKeysRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.SampleRowKeysRequest.table_name)
  return table_name_.GetNoArena();
}
void SampleRowKeysRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.SampleRowKeysRequest.table_name)
}
#if LANG_CXX11
void SampleRowKeysRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.SampleRowKeysRequest.table_name)
}
#endif
void SampleRowKeysRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.SampleRowKeysRequest.table_name)
}
void SampleRowKeysRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.SampleRowKeysRequest.table_name)
}
::std::string* SampleRowKeysRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.SampleRowKeysRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SampleRowKeysRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.SampleRowKeysRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SampleRowKeysRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.SampleRowKeysRequest.table_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleRowKeysResponse::kRowKeyFieldNumber;
const int SampleRowKeysResponse::kOffsetBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleRowKeysResponse::SampleRowKeysResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.SampleRowKeysResponse)
}
SampleRowKeysResponse::SampleRowKeysResponse(const SampleRowKeysResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.row_key().size() > 0) {
    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  offset_bytes_ = from.offset_bytes_;
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.SampleRowKeysResponse)
}

void SampleRowKeysResponse::SharedCtor() {
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_bytes_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

SampleRowKeysResponse::~SampleRowKeysResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.SampleRowKeysResponse)
  SharedDtor();
}

void SampleRowKeysResponse::SharedDtor() {
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SampleRowKeysResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleRowKeysResponse::descriptor() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SampleRowKeysResponse& SampleRowKeysResponse::default_instance() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

SampleRowKeysResponse* SampleRowKeysResponse::New(::google::protobuf::Arena* arena) const {
  SampleRowKeysResponse* n = new SampleRowKeysResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleRowKeysResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.SampleRowKeysResponse)
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_bytes_ = GOOGLE_LONGLONG(0);
}

bool SampleRowKeysResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.SampleRowKeysResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes row_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.SampleRowKeysResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.SampleRowKeysResponse)
  return false;
#undef DO_
}

void SampleRowKeysResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.SampleRowKeysResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes row_key = 1;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row_key(), output);
  }

  // int64 offset_bytes = 2;
  if (this->offset_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offset_bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.SampleRowKeysResponse)
}

::google::protobuf::uint8* SampleRowKeysResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.SampleRowKeysResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes row_key = 1;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row_key(), target);
  }

  // int64 offset_bytes = 2;
  if (this->offset_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offset_bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.SampleRowKeysResponse)
  return target;
}

size_t SampleRowKeysResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.SampleRowKeysResponse)
  size_t total_size = 0;

  // bytes row_key = 1;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // int64 offset_bytes = 2;
  if (this->offset_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleRowKeysResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.SampleRowKeysResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleRowKeysResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleRowKeysResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.SampleRowKeysResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.SampleRowKeysResponse)
    MergeFrom(*source);
  }
}

void SampleRowKeysResponse::MergeFrom(const SampleRowKeysResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.SampleRowKeysResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  if (from.offset_bytes() != 0) {
    set_offset_bytes(from.offset_bytes());
  }
}

void SampleRowKeysResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.SampleRowKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleRowKeysResponse::CopyFrom(const SampleRowKeysResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.SampleRowKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleRowKeysResponse::IsInitialized() const {
  return true;
}

void SampleRowKeysResponse::Swap(SampleRowKeysResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleRowKeysResponse::InternalSwap(SampleRowKeysResponse* other) {
  row_key_.Swap(&other->row_key_);
  std::swap(offset_bytes_, other->offset_bytes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleRowKeysResponse::GetMetadata() const {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleRowKeysResponse

// bytes row_key = 1;
void SampleRowKeysResponse::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SampleRowKeysResponse::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.SampleRowKeysResponse.row_key)
  return row_key_.GetNoArena();
}
void SampleRowKeysResponse::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.SampleRowKeysResponse.row_key)
}
#if LANG_CXX11
void SampleRowKeysResponse::set_row_key(::std::string&& value) {
  
  row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.SampleRowKeysResponse.row_key)
}
#endif
void SampleRowKeysResponse::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.SampleRowKeysResponse.row_key)
}
void SampleRowKeysResponse::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.SampleRowKeysResponse.row_key)
}
::std::string* SampleRowKeysResponse::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.SampleRowKeysResponse.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SampleRowKeysResponse::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.SampleRowKeysResponse.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SampleRowKeysResponse::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.SampleRowKeysResponse.row_key)
}

// int64 offset_bytes = 2;
void SampleRowKeysResponse::clear_offset_bytes() {
  offset_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SampleRowKeysResponse::offset_bytes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.SampleRowKeysResponse.offset_bytes)
  return offset_bytes_;
}
void SampleRowKeysResponse::set_offset_bytes(::google::protobuf::int64 value) {
  
  offset_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.SampleRowKeysResponse.offset_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowRequest::kTableNameFieldNumber;
const int MutateRowRequest::kRowKeyFieldNumber;
const int MutateRowRequest::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowRequest::MutateRowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.MutateRowRequest)
}
MutateRowRequest::MutateRowRequest(const MutateRowRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mutations_(from.mutations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.row_key().size() > 0) {
    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.MutateRowRequest)
}

void MutateRowRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MutateRowRequest::~MutateRowRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.MutateRowRequest)
  SharedDtor();
}

void MutateRowRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MutateRowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowRequest::descriptor() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MutateRowRequest& MutateRowRequest::default_instance() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

MutateRowRequest* MutateRowRequest::New(::google::protobuf::Arena* arena) const {
  MutateRowRequest* n = new MutateRowRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.MutateRowRequest)
  mutations_.Clear();
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MutateRowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.MutateRowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v1.MutateRowRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes row_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.bigtable.v1.Mutation mutations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.MutateRowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.MutateRowRequest)
  return false;
#undef DO_
}

void MutateRowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.MutateRowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.MutateRowRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // bytes row_key = 2;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row_key(), output);
  }

  // repeated .google.bigtable.v1.Mutation mutations = 3;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mutations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.MutateRowRequest)
}

::google::protobuf::uint8* MutateRowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.MutateRowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.MutateRowRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // bytes row_key = 2;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row_key(), target);
  }

  // repeated .google.bigtable.v1.Mutation mutations = 3;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mutations(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.MutateRowRequest)
  return target;
}

size_t MutateRowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.MutateRowRequest)
  size_t total_size = 0;

  // repeated .google.bigtable.v1.Mutation mutations = 3;
  {
    unsigned int count = this->mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutations(i));
    }
  }

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // bytes row_key = 2;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.MutateRowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MutateRowRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.MutateRowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.MutateRowRequest)
    MergeFrom(*source);
  }
}

void MutateRowRequest::MergeFrom(const MutateRowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.MutateRowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mutations_.MergeFrom(from.mutations_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
}

void MutateRowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.MutateRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowRequest::CopyFrom(const MutateRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.MutateRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRowRequest::IsInitialized() const {
  return true;
}

void MutateRowRequest::Swap(MutateRowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowRequest::InternalSwap(MutateRowRequest* other) {
  mutations_.InternalSwap(&other->mutations_);
  table_name_.Swap(&other->table_name_);
  row_key_.Swap(&other->row_key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowRequest::GetMetadata() const {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutateRowRequest

// string table_name = 1;
void MutateRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowRequest.table_name)
  return table_name_.GetNoArena();
}
void MutateRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.MutateRowRequest.table_name)
}
#if LANG_CXX11
void MutateRowRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.MutateRowRequest.table_name)
}
#endif
void MutateRowRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.MutateRowRequest.table_name)
}
void MutateRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.MutateRowRequest.table_name)
}
::std::string* MutateRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.MutateRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MutateRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.MutateRowRequest.table_name)
}

// bytes row_key = 2;
void MutateRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowRequest.row_key)
  return row_key_.GetNoArena();
}
void MutateRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.MutateRowRequest.row_key)
}
#if LANG_CXX11
void MutateRowRequest::set_row_key(::std::string&& value) {
  
  row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.MutateRowRequest.row_key)
}
#endif
void MutateRowRequest::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.MutateRowRequest.row_key)
}
void MutateRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.MutateRowRequest.row_key)
}
::std::string* MutateRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.MutateRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MutateRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.MutateRowRequest.row_key)
}

// repeated .google.bigtable.v1.Mutation mutations = 3;
int MutateRowRequest::mutations_size() const {
  return mutations_.size();
}
void MutateRowRequest::clear_mutations() {
  mutations_.Clear();
}
const ::google::bigtable::v1::Mutation& MutateRowRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowRequest.mutations)
  return mutations_.Get(index);
}
::google::bigtable::v1::Mutation* MutateRowRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowRequest.mutations)
  return mutations_.Mutable(index);
}
::google::bigtable::v1::Mutation* MutateRowRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.MutateRowRequest.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
MutateRowRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.MutateRowRequest.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
MutateRowRequest::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.MutateRowRequest.mutations)
  return mutations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowsRequest_Entry::kRowKeyFieldNumber;
const int MutateRowsRequest_Entry::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowsRequest_Entry::MutateRowsRequest_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.MutateRowsRequest.Entry)
}
MutateRowsRequest_Entry::MutateRowsRequest_Entry(const MutateRowsRequest_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mutations_(from.mutations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.row_key().size() > 0) {
    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.MutateRowsRequest.Entry)
}

void MutateRowsRequest_Entry::SharedCtor() {
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MutateRowsRequest_Entry::~MutateRowsRequest_Entry() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.MutateRowsRequest.Entry)
  SharedDtor();
}

void MutateRowsRequest_Entry::SharedDtor() {
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MutateRowsRequest_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowsRequest_Entry::descriptor() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MutateRowsRequest_Entry& MutateRowsRequest_Entry::default_instance() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

MutateRowsRequest_Entry* MutateRowsRequest_Entry::New(::google::protobuf::Arena* arena) const {
  MutateRowsRequest_Entry* n = new MutateRowsRequest_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowsRequest_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.MutateRowsRequest.Entry)
  mutations_.Clear();
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MutateRowsRequest_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.MutateRowsRequest.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes row_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.bigtable.v1.Mutation mutations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.MutateRowsRequest.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.MutateRowsRequest.Entry)
  return false;
#undef DO_
}

void MutateRowsRequest_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.MutateRowsRequest.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes row_key = 1;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->row_key(), output);
  }

  // repeated .google.bigtable.v1.Mutation mutations = 2;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mutations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.MutateRowsRequest.Entry)
}

::google::protobuf::uint8* MutateRowsRequest_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.MutateRowsRequest.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes row_key = 1;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->row_key(), target);
  }

  // repeated .google.bigtable.v1.Mutation mutations = 2;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->mutations(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.MutateRowsRequest.Entry)
  return target;
}

size_t MutateRowsRequest_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.MutateRowsRequest.Entry)
  size_t total_size = 0;

  // repeated .google.bigtable.v1.Mutation mutations = 2;
  {
    unsigned int count = this->mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutations(i));
    }
  }

  // bytes row_key = 1;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowsRequest_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.MutateRowsRequest.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const MutateRowsRequest_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowsRequest_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.MutateRowsRequest.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.MutateRowsRequest.Entry)
    MergeFrom(*source);
  }
}

void MutateRowsRequest_Entry::MergeFrom(const MutateRowsRequest_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.MutateRowsRequest.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mutations_.MergeFrom(from.mutations_);
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
}

void MutateRowsRequest_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.MutateRowsRequest.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsRequest_Entry::CopyFrom(const MutateRowsRequest_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.MutateRowsRequest.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRowsRequest_Entry::IsInitialized() const {
  return true;
}

void MutateRowsRequest_Entry::Swap(MutateRowsRequest_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowsRequest_Entry::InternalSwap(MutateRowsRequest_Entry* other) {
  mutations_.InternalSwap(&other->mutations_);
  row_key_.Swap(&other->row_key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowsRequest_Entry::GetMetadata() const {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutateRowsRequest_Entry

// bytes row_key = 1;
void MutateRowsRequest_Entry::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MutateRowsRequest_Entry::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
  return row_key_.GetNoArena();
}
void MutateRowsRequest_Entry::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}
#if LANG_CXX11
void MutateRowsRequest_Entry::set_row_key(::std::string&& value) {
  
  row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}
#endif
void MutateRowsRequest_Entry::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}
void MutateRowsRequest_Entry::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}
::std::string* MutateRowsRequest_Entry::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MutateRowsRequest_Entry::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MutateRowsRequest_Entry::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.MutateRowsRequest.Entry.row_key)
}

// repeated .google.bigtable.v1.Mutation mutations = 2;
int MutateRowsRequest_Entry::mutations_size() const {
  return mutations_.size();
}
void MutateRowsRequest_Entry::clear_mutations() {
  mutations_.Clear();
}
const ::google::bigtable::v1::Mutation& MutateRowsRequest_Entry::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return mutations_.Get(index);
}
::google::bigtable::v1::Mutation* MutateRowsRequest_Entry::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return mutations_.Mutable(index);
}
::google::bigtable::v1::Mutation* MutateRowsRequest_Entry::add_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
MutateRowsRequest_Entry::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
MutateRowsRequest_Entry::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.MutateRowsRequest.Entry.mutations)
  return mutations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowsRequest::kTableNameFieldNumber;
const int MutateRowsRequest::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowsRequest::MutateRowsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.MutateRowsRequest)
}
MutateRowsRequest::MutateRowsRequest(const MutateRowsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.MutateRowsRequest)
}

void MutateRowsRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MutateRowsRequest::~MutateRowsRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.MutateRowsRequest)
  SharedDtor();
}

void MutateRowsRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MutateRowsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowsRequest::descriptor() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MutateRowsRequest& MutateRowsRequest::default_instance() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

MutateRowsRequest* MutateRowsRequest::New(::google::protobuf::Arena* arena) const {
  MutateRowsRequest* n = new MutateRowsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.MutateRowsRequest)
  entries_.Clear();
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MutateRowsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.MutateRowsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v1.MutateRowsRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.MutateRowsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.MutateRowsRequest)
  return false;
#undef DO_
}

void MutateRowsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.MutateRowsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.MutateRowsRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.MutateRowsRequest)
}

::google::protobuf::uint8* MutateRowsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.MutateRowsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.MutateRowsRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->entries(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.MutateRowsRequest)
  return target;
}

size_t MutateRowsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.MutateRowsRequest)
  size_t total_size = 0;

  // repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.MutateRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MutateRowsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.MutateRowsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.MutateRowsRequest)
    MergeFrom(*source);
  }
}

void MutateRowsRequest::MergeFrom(const MutateRowsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.MutateRowsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
}

void MutateRowsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.MutateRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsRequest::CopyFrom(const MutateRowsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.MutateRowsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRowsRequest::IsInitialized() const {
  return true;
}

void MutateRowsRequest::Swap(MutateRowsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowsRequest::InternalSwap(MutateRowsRequest* other) {
  entries_.InternalSwap(&other->entries_);
  table_name_.Swap(&other->table_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowsRequest::GetMetadata() const {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutateRowsRequest

// string table_name = 1;
void MutateRowsRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MutateRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsRequest.table_name)
  return table_name_.GetNoArena();
}
void MutateRowsRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.MutateRowsRequest.table_name)
}
#if LANG_CXX11
void MutateRowsRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.MutateRowsRequest.table_name)
}
#endif
void MutateRowsRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.MutateRowsRequest.table_name)
}
void MutateRowsRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.MutateRowsRequest.table_name)
}
::std::string* MutateRowsRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MutateRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.MutateRowsRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MutateRowsRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.MutateRowsRequest.table_name)
}

// repeated .google.bigtable.v1.MutateRowsRequest.Entry entries = 2;
int MutateRowsRequest::entries_size() const {
  return entries_.size();
}
void MutateRowsRequest::clear_entries() {
  entries_.Clear();
}
const ::google::bigtable::v1::MutateRowsRequest_Entry& MutateRowsRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsRequest.entries)
  return entries_.Get(index);
}
::google::bigtable::v1::MutateRowsRequest_Entry* MutateRowsRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsRequest.entries)
  return entries_.Mutable(index);
}
::google::bigtable::v1::MutateRowsRequest_Entry* MutateRowsRequest::add_entries() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.MutateRowsRequest.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::MutateRowsRequest_Entry >*
MutateRowsRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.MutateRowsRequest.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::MutateRowsRequest_Entry >&
MutateRowsRequest::entries() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.MutateRowsRequest.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutateRowsResponse::kStatusesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutateRowsResponse::MutateRowsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.MutateRowsResponse)
}
MutateRowsResponse::MutateRowsResponse(const MutateRowsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      statuses_(from.statuses_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.MutateRowsResponse)
}

void MutateRowsResponse::SharedCtor() {
  _cached_size_ = 0;
}

MutateRowsResponse::~MutateRowsResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.MutateRowsResponse)
  SharedDtor();
}

void MutateRowsResponse::SharedDtor() {
}

void MutateRowsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutateRowsResponse::descriptor() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MutateRowsResponse& MutateRowsResponse::default_instance() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

MutateRowsResponse* MutateRowsResponse::New(::google::protobuf::Arena* arena) const {
  MutateRowsResponse* n = new MutateRowsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutateRowsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.MutateRowsResponse)
  statuses_.Clear();
}

bool MutateRowsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.MutateRowsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.rpc.Status statuses = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statuses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.MutateRowsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.MutateRowsResponse)
  return false;
#undef DO_
}

void MutateRowsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.MutateRowsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.rpc.Status statuses = 1;
  for (unsigned int i = 0, n = this->statuses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statuses(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.MutateRowsResponse)
}

::google::protobuf::uint8* MutateRowsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.MutateRowsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.rpc.Status statuses = 1;
  for (unsigned int i = 0, n = this->statuses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->statuses(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.MutateRowsResponse)
  return target;
}

size_t MutateRowsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.MutateRowsResponse)
  size_t total_size = 0;

  // repeated .google.rpc.Status statuses = 1;
  {
    unsigned int count = this->statuses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statuses(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutateRowsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.MutateRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MutateRowsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MutateRowsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.MutateRowsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.MutateRowsResponse)
    MergeFrom(*source);
  }
}

void MutateRowsResponse::MergeFrom(const MutateRowsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.MutateRowsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statuses_.MergeFrom(from.statuses_);
}

void MutateRowsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.MutateRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateRowsResponse::CopyFrom(const MutateRowsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.MutateRowsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateRowsResponse::IsInitialized() const {
  return true;
}

void MutateRowsResponse::Swap(MutateRowsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutateRowsResponse::InternalSwap(MutateRowsResponse* other) {
  statuses_.InternalSwap(&other->statuses_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutateRowsResponse::GetMetadata() const {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutateRowsResponse

// repeated .google.rpc.Status statuses = 1;
int MutateRowsResponse::statuses_size() const {
  return statuses_.size();
}
void MutateRowsResponse::clear_statuses() {
  statuses_.Clear();
}
const ::google::rpc::Status& MutateRowsResponse::statuses(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.MutateRowsResponse.statuses)
  return statuses_.Get(index);
}
::google::rpc::Status* MutateRowsResponse::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.MutateRowsResponse.statuses)
  return statuses_.Mutable(index);
}
::google::rpc::Status* MutateRowsResponse::add_statuses() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.MutateRowsResponse.statuses)
  return statuses_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::rpc::Status >*
MutateRowsResponse::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.MutateRowsResponse.statuses)
  return &statuses_;
}
const ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >&
MutateRowsResponse::statuses() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.MutateRowsResponse.statuses)
  return statuses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckAndMutateRowRequest::kTableNameFieldNumber;
const int CheckAndMutateRowRequest::kRowKeyFieldNumber;
const int CheckAndMutateRowRequest::kPredicateFilterFieldNumber;
const int CheckAndMutateRowRequest::kTrueMutationsFieldNumber;
const int CheckAndMutateRowRequest::kFalseMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAndMutateRowRequest::CheckAndMutateRowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.CheckAndMutateRowRequest)
}
CheckAndMutateRowRequest::CheckAndMutateRowRequest(const CheckAndMutateRowRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      true_mutations_(from.true_mutations_),
      false_mutations_(from.false_mutations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.row_key().size() > 0) {
    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  if (from.has_predicate_filter()) {
    predicate_filter_ = new ::google::bigtable::v1::RowFilter(*from.predicate_filter_);
  } else {
    predicate_filter_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.CheckAndMutateRowRequest)
}

void CheckAndMutateRowRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  predicate_filter_ = NULL;
  _cached_size_ = 0;
}

CheckAndMutateRowRequest::~CheckAndMutateRowRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.CheckAndMutateRowRequest)
  SharedDtor();
}

void CheckAndMutateRowRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete predicate_filter_;
  }
}

void CheckAndMutateRowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAndMutateRowRequest::descriptor() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckAndMutateRowRequest& CheckAndMutateRowRequest::default_instance() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckAndMutateRowRequest* CheckAndMutateRowRequest::New(::google::protobuf::Arena* arena) const {
  CheckAndMutateRowRequest* n = new CheckAndMutateRowRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAndMutateRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.CheckAndMutateRowRequest)
  true_mutations_.Clear();
  false_mutations_.Clear();
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && predicate_filter_ != NULL) {
    delete predicate_filter_;
  }
  predicate_filter_ = NULL;
}

bool CheckAndMutateRowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.CheckAndMutateRowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v1.CheckAndMutateRowRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes row_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.bigtable.v1.Mutation true_mutations = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_true_mutations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.bigtable.v1.Mutation false_mutations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_false_mutations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.bigtable.v1.RowFilter predicate_filter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predicate_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.CheckAndMutateRowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.CheckAndMutateRowRequest)
  return false;
#undef DO_
}

void CheckAndMutateRowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.CheckAndMutateRowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.CheckAndMutateRowRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // bytes row_key = 2;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row_key(), output);
  }

  // repeated .google.bigtable.v1.Mutation true_mutations = 4;
  for (unsigned int i = 0, n = this->true_mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->true_mutations(i), output);
  }

  // repeated .google.bigtable.v1.Mutation false_mutations = 5;
  for (unsigned int i = 0, n = this->false_mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->false_mutations(i), output);
  }

  // .google.bigtable.v1.RowFilter predicate_filter = 6;
  if (this->has_predicate_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->predicate_filter_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.CheckAndMutateRowRequest)
}

::google::protobuf::uint8* CheckAndMutateRowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.CheckAndMutateRowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.CheckAndMutateRowRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // bytes row_key = 2;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row_key(), target);
  }

  // repeated .google.bigtable.v1.Mutation true_mutations = 4;
  for (unsigned int i = 0, n = this->true_mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->true_mutations(i), deterministic, target);
  }

  // repeated .google.bigtable.v1.Mutation false_mutations = 5;
  for (unsigned int i = 0, n = this->false_mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->false_mutations(i), deterministic, target);
  }

  // .google.bigtable.v1.RowFilter predicate_filter = 6;
  if (this->has_predicate_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->predicate_filter_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.CheckAndMutateRowRequest)
  return target;
}

size_t CheckAndMutateRowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.CheckAndMutateRowRequest)
  size_t total_size = 0;

  // repeated .google.bigtable.v1.Mutation true_mutations = 4;
  {
    unsigned int count = this->true_mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->true_mutations(i));
    }
  }

  // repeated .google.bigtable.v1.Mutation false_mutations = 5;
  {
    unsigned int count = this->false_mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->false_mutations(i));
    }
  }

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // bytes row_key = 2;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  // .google.bigtable.v1.RowFilter predicate_filter = 6;
  if (this->has_predicate_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->predicate_filter_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAndMutateRowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.CheckAndMutateRowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckAndMutateRowRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckAndMutateRowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.CheckAndMutateRowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.CheckAndMutateRowRequest)
    MergeFrom(*source);
  }
}

void CheckAndMutateRowRequest::MergeFrom(const CheckAndMutateRowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.CheckAndMutateRowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  true_mutations_.MergeFrom(from.true_mutations_);
  false_mutations_.MergeFrom(from.false_mutations_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  if (from.has_predicate_filter()) {
    mutable_predicate_filter()->::google::bigtable::v1::RowFilter::MergeFrom(from.predicate_filter());
  }
}

void CheckAndMutateRowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.CheckAndMutateRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAndMutateRowRequest::CopyFrom(const CheckAndMutateRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.CheckAndMutateRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAndMutateRowRequest::IsInitialized() const {
  return true;
}

void CheckAndMutateRowRequest::Swap(CheckAndMutateRowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAndMutateRowRequest::InternalSwap(CheckAndMutateRowRequest* other) {
  true_mutations_.InternalSwap(&other->true_mutations_);
  false_mutations_.InternalSwap(&other->false_mutations_);
  table_name_.Swap(&other->table_name_);
  row_key_.Swap(&other->row_key_);
  std::swap(predicate_filter_, other->predicate_filter_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckAndMutateRowRequest::GetMetadata() const {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAndMutateRowRequest

// string table_name = 1;
void CheckAndMutateRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CheckAndMutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
  return table_name_.GetNoArena();
}
void CheckAndMutateRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}
#if LANG_CXX11
void CheckAndMutateRowRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}
#endif
void CheckAndMutateRowRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}
void CheckAndMutateRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}
::std::string* CheckAndMutateRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckAndMutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckAndMutateRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.CheckAndMutateRowRequest.table_name)
}

// bytes row_key = 2;
void CheckAndMutateRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CheckAndMutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
  return row_key_.GetNoArena();
}
void CheckAndMutateRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}
#if LANG_CXX11
void CheckAndMutateRowRequest::set_row_key(::std::string&& value) {
  
  row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}
#endif
void CheckAndMutateRowRequest::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}
void CheckAndMutateRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}
::std::string* CheckAndMutateRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckAndMutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckAndMutateRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.CheckAndMutateRowRequest.row_key)
}

// .google.bigtable.v1.RowFilter predicate_filter = 6;
bool CheckAndMutateRowRequest::has_predicate_filter() const {
  return this != internal_default_instance() && predicate_filter_ != NULL;
}
void CheckAndMutateRowRequest::clear_predicate_filter() {
  if (GetArenaNoVirtual() == NULL && predicate_filter_ != NULL) delete predicate_filter_;
  predicate_filter_ = NULL;
}
const ::google::bigtable::v1::RowFilter& CheckAndMutateRowRequest::predicate_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.predicate_filter)
  return predicate_filter_ != NULL ? *predicate_filter_
                         : *::google::bigtable::v1::RowFilter::internal_default_instance();
}
::google::bigtable::v1::RowFilter* CheckAndMutateRowRequest::mutable_predicate_filter() {
  
  if (predicate_filter_ == NULL) {
    predicate_filter_ = new ::google::bigtable::v1::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.predicate_filter)
  return predicate_filter_;
}
::google::bigtable::v1::RowFilter* CheckAndMutateRowRequest::release_predicate_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.CheckAndMutateRowRequest.predicate_filter)
  
  ::google::bigtable::v1::RowFilter* temp = predicate_filter_;
  predicate_filter_ = NULL;
  return temp;
}
void CheckAndMutateRowRequest::set_allocated_predicate_filter(::google::bigtable::v1::RowFilter* predicate_filter) {
  delete predicate_filter_;
  predicate_filter_ = predicate_filter;
  if (predicate_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.CheckAndMutateRowRequest.predicate_filter)
}

// repeated .google.bigtable.v1.Mutation true_mutations = 4;
int CheckAndMutateRowRequest::true_mutations_size() const {
  return true_mutations_.size();
}
void CheckAndMutateRowRequest::clear_true_mutations() {
  true_mutations_.Clear();
}
const ::google::bigtable::v1::Mutation& CheckAndMutateRowRequest::true_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Get(index);
}
::google::bigtable::v1::Mutation* CheckAndMutateRowRequest::mutable_true_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Mutable(index);
}
::google::bigtable::v1::Mutation* CheckAndMutateRowRequest::add_true_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
CheckAndMutateRowRequest::mutable_true_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return &true_mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
CheckAndMutateRowRequest::true_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_;
}

// repeated .google.bigtable.v1.Mutation false_mutations = 5;
int CheckAndMutateRowRequest::false_mutations_size() const {
  return false_mutations_.size();
}
void CheckAndMutateRowRequest::clear_false_mutations() {
  false_mutations_.Clear();
}
const ::google::bigtable::v1::Mutation& CheckAndMutateRowRequest::false_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Get(index);
}
::google::bigtable::v1::Mutation* CheckAndMutateRowRequest::mutable_false_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Mutable(index);
}
::google::bigtable::v1::Mutation* CheckAndMutateRowRequest::add_false_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >*
CheckAndMutateRowRequest::mutable_false_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return &false_mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::Mutation >&
CheckAndMutateRowRequest::false_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckAndMutateRowResponse::kPredicateMatchedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAndMutateRowResponse::CheckAndMutateRowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.CheckAndMutateRowResponse)
}
CheckAndMutateRowResponse::CheckAndMutateRowResponse(const CheckAndMutateRowResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  predicate_matched_ = from.predicate_matched_;
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.CheckAndMutateRowResponse)
}

void CheckAndMutateRowResponse::SharedCtor() {
  predicate_matched_ = false;
  _cached_size_ = 0;
}

CheckAndMutateRowResponse::~CheckAndMutateRowResponse() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.CheckAndMutateRowResponse)
  SharedDtor();
}

void CheckAndMutateRowResponse::SharedDtor() {
}

void CheckAndMutateRowResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAndMutateRowResponse::descriptor() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckAndMutateRowResponse& CheckAndMutateRowResponse::default_instance() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckAndMutateRowResponse* CheckAndMutateRowResponse::New(::google::protobuf::Arena* arena) const {
  CheckAndMutateRowResponse* n = new CheckAndMutateRowResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAndMutateRowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.CheckAndMutateRowResponse)
  predicate_matched_ = false;
}

bool CheckAndMutateRowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.CheckAndMutateRowResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool predicate_matched = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &predicate_matched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.CheckAndMutateRowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.CheckAndMutateRowResponse)
  return false;
#undef DO_
}

void CheckAndMutateRowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.CheckAndMutateRowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool predicate_matched = 1;
  if (this->predicate_matched() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->predicate_matched(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.CheckAndMutateRowResponse)
}

::google::protobuf::uint8* CheckAndMutateRowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.CheckAndMutateRowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool predicate_matched = 1;
  if (this->predicate_matched() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->predicate_matched(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.CheckAndMutateRowResponse)
  return target;
}

size_t CheckAndMutateRowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.CheckAndMutateRowResponse)
  size_t total_size = 0;

  // bool predicate_matched = 1;
  if (this->predicate_matched() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAndMutateRowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.CheckAndMutateRowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckAndMutateRowResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckAndMutateRowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.CheckAndMutateRowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.CheckAndMutateRowResponse)
    MergeFrom(*source);
  }
}

void CheckAndMutateRowResponse::MergeFrom(const CheckAndMutateRowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.CheckAndMutateRowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.predicate_matched() != 0) {
    set_predicate_matched(from.predicate_matched());
  }
}

void CheckAndMutateRowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.CheckAndMutateRowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAndMutateRowResponse::CopyFrom(const CheckAndMutateRowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.CheckAndMutateRowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAndMutateRowResponse::IsInitialized() const {
  return true;
}

void CheckAndMutateRowResponse::Swap(CheckAndMutateRowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAndMutateRowResponse::InternalSwap(CheckAndMutateRowResponse* other) {
  std::swap(predicate_matched_, other->predicate_matched_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckAndMutateRowResponse::GetMetadata() const {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAndMutateRowResponse

// bool predicate_matched = 1;
void CheckAndMutateRowResponse::clear_predicate_matched() {
  predicate_matched_ = false;
}
bool CheckAndMutateRowResponse::predicate_matched() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.CheckAndMutateRowResponse.predicate_matched)
  return predicate_matched_;
}
void CheckAndMutateRowResponse::set_predicate_matched(bool value) {
  
  predicate_matched_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v1.CheckAndMutateRowResponse.predicate_matched)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadModifyWriteRowRequest::kTableNameFieldNumber;
const int ReadModifyWriteRowRequest::kRowKeyFieldNumber;
const int ReadModifyWriteRowRequest::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadModifyWriteRowRequest::ReadModifyWriteRowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.bigtable.v1.ReadModifyWriteRowRequest)
}
ReadModifyWriteRowRequest::ReadModifyWriteRowRequest(const ReadModifyWriteRowRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_name().size() > 0) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.row_key().size() > 0) {
    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
  // @@protoc_insertion_point(copy_constructor:google.bigtable.v1.ReadModifyWriteRowRequest)
}

void ReadModifyWriteRowRequest::SharedCtor() {
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ReadModifyWriteRowRequest::~ReadModifyWriteRowRequest() {
  // @@protoc_insertion_point(destructor:google.bigtable.v1.ReadModifyWriteRowRequest)
  SharedDtor();
}

void ReadModifyWriteRowRequest::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadModifyWriteRowRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadModifyWriteRowRequest::descriptor() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadModifyWriteRowRequest& ReadModifyWriteRowRequest::default_instance() {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReadModifyWriteRowRequest* ReadModifyWriteRowRequest::New(::google::protobuf::Arena* arena) const {
  ReadModifyWriteRowRequest* n = new ReadModifyWriteRowRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadModifyWriteRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  rules_.Clear();
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReadModifyWriteRowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.bigtable.v1.ReadModifyWriteRowRequest.table_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes row_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_row_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.bigtable.v1.ReadModifyWriteRowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.bigtable.v1.ReadModifyWriteRowRequest)
  return false;
#undef DO_
}

void ReadModifyWriteRowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.ReadModifyWriteRowRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table_name(), output);
  }

  // bytes row_key = 2;
  if (this->row_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->row_key(), output);
  }

  // repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rules(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.bigtable.v1.ReadModifyWriteRowRequest)
}

::google::protobuf::uint8* ReadModifyWriteRowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.bigtable.v1.ReadModifyWriteRowRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // bytes row_key = 2;
  if (this->row_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->row_key(), target);
  }

  // repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;
  for (unsigned int i = 0, n = this->rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->rules(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.bigtable.v1.ReadModifyWriteRowRequest)
  return target;
}

size_t ReadModifyWriteRowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  size_t total_size = 0;

  // repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;
  {
    unsigned int count = this->rules_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rules(i));
    }
  }

  // string table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // bytes row_key = 2;
  if (this->row_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->row_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadModifyWriteRowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadModifyWriteRowRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadModifyWriteRowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.bigtable.v1.ReadModifyWriteRowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.bigtable.v1.ReadModifyWriteRowRequest)
    MergeFrom(*source);
  }
}

void ReadModifyWriteRowRequest::MergeFrom(const ReadModifyWriteRowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.row_key().size() > 0) {

    row_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.row_key_);
  }
}

void ReadModifyWriteRowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadModifyWriteRowRequest::CopyFrom(const ReadModifyWriteRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.bigtable.v1.ReadModifyWriteRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadModifyWriteRowRequest::IsInitialized() const {
  return true;
}

void ReadModifyWriteRowRequest::Swap(ReadModifyWriteRowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadModifyWriteRowRequest::InternalSwap(ReadModifyWriteRowRequest* other) {
  rules_.InternalSwap(&other->rules_);
  table_name_.Swap(&other->table_name_);
  row_key_.Swap(&other->row_key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadModifyWriteRowRequest::GetMetadata() const {
  protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fbigtable_2fv1_2fbigtable_5fservice_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadModifyWriteRowRequest

// string table_name = 1;
void ReadModifyWriteRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadModifyWriteRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
  return table_name_.GetNoArena();
}
void ReadModifyWriteRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}
#if LANG_CXX11
void ReadModifyWriteRowRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}
#endif
void ReadModifyWriteRowRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}
void ReadModifyWriteRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}
::std::string* ReadModifyWriteRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadModifyWriteRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadModifyWriteRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadModifyWriteRowRequest.table_name)
}

// bytes row_key = 2;
void ReadModifyWriteRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReadModifyWriteRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
  return row_key_.GetNoArena();
}
void ReadModifyWriteRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}
#if LANG_CXX11
void ReadModifyWriteRowRequest::set_row_key(::std::string&& value) {
  
  row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}
#endif
void ReadModifyWriteRowRequest::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}
void ReadModifyWriteRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}
::std::string* ReadModifyWriteRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadModifyWriteRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReadModifyWriteRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v1.ReadModifyWriteRowRequest.row_key)
}

// repeated .google.bigtable.v1.ReadModifyWriteRule rules = 3;
int ReadModifyWriteRowRequest::rules_size() const {
  return rules_.size();
}
void ReadModifyWriteRowRequest::clear_rules() {
  rules_.Clear();
}
const ::google::bigtable::v1::ReadModifyWriteRule& ReadModifyWriteRowRequest::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return rules_.Get(index);
}
::google::bigtable::v1::ReadModifyWriteRule* ReadModifyWriteRowRequest::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return rules_.Mutable(index);
}
::google::bigtable::v1::ReadModifyWriteRule* ReadModifyWriteRowRequest::add_rules() {
  // @@protoc_insertion_point(field_add:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadModifyWriteRule >*
ReadModifyWriteRowRequest::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return &rules_;
}
const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v1::ReadModifyWriteRule >&
ReadModifyWriteRowRequest::rules() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v1.ReadModifyWriteRowRequest.rules)
  return rules_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)
