# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/v1/bigtable_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.bigtable.v1 import bigtable_data_pb2 as google_dot_bigtable_dot_v1_dot_bigtable__data__pb2
from google.bigtable.v1 import bigtable_service_messages_pb2 as google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='google/bigtable/v1/bigtable_service.proto',
  package='google.bigtable.v1',
  syntax='proto3',
  serialized_pb=_b('\n)google/bigtable/v1/bigtable_service.proto\x12\x12google.bigtable.v1\x1a\x1cgoogle/api/annotations.proto\x1a&google/bigtable/v1/bigtable_data.proto\x1a\x32google/bigtable/v1/bigtable_service_messages.proto\x1a\x1bgoogle/protobuf/empty.proto2\xdd\x08\n\x0f\x42igtableService\x12\xa5\x01\n\x08ReadRows\x12#.google.bigtable.v1.ReadRowsRequest\x1a$.google.bigtable.v1.ReadRowsResponse\"L\x82\xd3\xe4\x93\x02\x46\"A/v1/{table_name=projects/*/zones/*/clusters/*/tables/*}/rows:read:\x01*0\x01\x12\xb7\x01\n\rSampleRowKeys\x12(.google.bigtable.v1.SampleRowKeysRequest\x1a).google.bigtable.v1.SampleRowKeysResponse\"O\x82\xd3\xe4\x93\x02I\x12G/v1/{table_name=projects/*/zones/*/clusters/*/tables/*}/rows:sampleKeys0\x01\x12\xa3\x01\n\tMutateRow\x12$.google.bigtable.v1.MutateRowRequest\x1a\x16.google.protobuf.Empty\"X\x82\xd3\xe4\x93\x02R\"M/v1/{table_name=projects/*/zones/*/clusters/*/tables/*}/rows/{row_key}:mutate:\x01*\x12\xaa\x01\n\nMutateRows\x12%.google.bigtable.v1.MutateRowsRequest\x1a&.google.bigtable.v1.MutateRowsResponse\"M\x82\xd3\xe4\x93\x02G\"B/v1/{table_name=projects/*/zones/*/clusters/*/tables/*}:mutateRows:\x01*\x12\xd2\x01\n\x11\x43heckAndMutateRow\x12,.google.bigtable.v1.CheckAndMutateRowRequest\x1a-.google.bigtable.v1.CheckAndMutateRowResponse\"`\x82\xd3\xe4\x93\x02Z\"U/v1/{table_name=projects/*/zones/*/clusters/*/tables/*}/rows/{row_key}:checkAndMutate:\x01*\x12\xbf\x01\n\x12ReadModifyWriteRow\x12-.google.bigtable.v1.ReadModifyWriteRowRequest\x1a\x17.google.bigtable.v1.Row\"a\x82\xd3\xe4\x93\x02[\"V/v1/{table_name=projects/*/zones/*/clusters/*/tables/*}/rows/{row_key}:readModifyWrite:\x01*Bp\n\x16\x63om.google.bigtable.v1B\x15\x42igtableServicesProtoP\x01Z:google.golang.org/genproto/googleapis/bigtable/v1;bigtable\x88\x01\x01\x62\x06proto3')
  ,
  dependencies=[google_dot_api_dot_annotations__pb2.DESCRIPTOR,google_dot_bigtable_dot_v1_dot_bigtable__data__pb2.DESCRIPTOR,google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.DESCRIPTOR,google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,])



_sym_db.RegisterFileDescriptor(DESCRIPTOR)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\026com.google.bigtable.v1B\025BigtableServicesProtoP\001Z:google.golang.org/genproto/googleapis/bigtable/v1;bigtable\210\001\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class BigtableServiceStub(object):
    """Service for reading from and writing to existing Bigtables.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.ReadRows = channel.unary_stream(
          '/google.bigtable.v1.BigtableService/ReadRows',
          request_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadRowsRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadRowsResponse.FromString,
          )
      self.SampleRowKeys = channel.unary_stream(
          '/google.bigtable.v1.BigtableService/SampleRowKeys',
          request_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.SampleRowKeysRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.SampleRowKeysResponse.FromString,
          )
      self.MutateRow = channel.unary_unary(
          '/google.bigtable.v1.BigtableService/MutateRow',
          request_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )
      self.MutateRows = channel.unary_unary(
          '/google.bigtable.v1.BigtableService/MutateRows',
          request_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowsRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowsResponse.FromString,
          )
      self.CheckAndMutateRow = channel.unary_unary(
          '/google.bigtable.v1.BigtableService/CheckAndMutateRow',
          request_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.CheckAndMutateRowRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.CheckAndMutateRowResponse.FromString,
          )
      self.ReadModifyWriteRow = channel.unary_unary(
          '/google.bigtable.v1.BigtableService/ReadModifyWriteRow',
          request_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadModifyWriteRowRequest.SerializeToString,
          response_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__data__pb2.Row.FromString,
          )


  class BigtableServiceServicer(object):
    """Service for reading from and writing to existing Bigtables.
    """

    def ReadRows(self, request, context):
      """Streams back the contents of all requested rows, optionally applying
      the same Reader filter to each. Depending on their size, rows may be
      broken up across multiple responses, but atomicity of each row will still
      be preserved.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SampleRowKeys(self, request, context):
      """Returns a sample of row keys in the table. The returned row keys will
      delimit contiguous sections of the table of approximately equal size,
      which can be used to break up the data for distributed tasks like
      mapreduces.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def MutateRow(self, request, context):
      """Mutates a row atomically. Cells already present in the row are left
      unchanged unless explicitly changed by 'mutation'.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def MutateRows(self, request, context):
      """Mutates multiple rows in a batch. Each individual row is mutated
      atomically as in MutateRow, but the entire batch is not executed
      atomically.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CheckAndMutateRow(self, request, context):
      """Mutates a row atomically based on the output of a predicate Reader filter.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ReadModifyWriteRow(self, request, context):
      """Modifies a row atomically, reading the latest existing timestamp/value from
      the specified columns and writing a new value at
      max(existing timestamp, current server time) based on pre-defined
      read/modify/write rules. Returns the new contents of all modified cells.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_BigtableServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ReadRows': grpc.unary_stream_rpc_method_handler(
            servicer.ReadRows,
            request_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadRowsRequest.FromString,
            response_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadRowsResponse.SerializeToString,
        ),
        'SampleRowKeys': grpc.unary_stream_rpc_method_handler(
            servicer.SampleRowKeys,
            request_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.SampleRowKeysRequest.FromString,
            response_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.SampleRowKeysResponse.SerializeToString,
        ),
        'MutateRow': grpc.unary_unary_rpc_method_handler(
            servicer.MutateRow,
            request_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'MutateRows': grpc.unary_unary_rpc_method_handler(
            servicer.MutateRows,
            request_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowsRequest.FromString,
            response_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowsResponse.SerializeToString,
        ),
        'CheckAndMutateRow': grpc.unary_unary_rpc_method_handler(
            servicer.CheckAndMutateRow,
            request_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.CheckAndMutateRowRequest.FromString,
            response_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.CheckAndMutateRowResponse.SerializeToString,
        ),
        'ReadModifyWriteRow': grpc.unary_unary_rpc_method_handler(
            servicer.ReadModifyWriteRow,
            request_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadModifyWriteRowRequest.FromString,
            response_serializer=google_dot_bigtable_dot_v1_dot_bigtable__data__pb2.Row.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'google.bigtable.v1.BigtableService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaBigtableServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Service for reading from and writing to existing Bigtables.
    """
    def ReadRows(self, request, context):
      """Streams back the contents of all requested rows, optionally applying
      the same Reader filter to each. Depending on their size, rows may be
      broken up across multiple responses, but atomicity of each row will still
      be preserved.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SampleRowKeys(self, request, context):
      """Returns a sample of row keys in the table. The returned row keys will
      delimit contiguous sections of the table of approximately equal size,
      which can be used to break up the data for distributed tasks like
      mapreduces.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def MutateRow(self, request, context):
      """Mutates a row atomically. Cells already present in the row are left
      unchanged unless explicitly changed by 'mutation'.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def MutateRows(self, request, context):
      """Mutates multiple rows in a batch. Each individual row is mutated
      atomically as in MutateRow, but the entire batch is not executed
      atomically.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CheckAndMutateRow(self, request, context):
      """Mutates a row atomically based on the output of a predicate Reader filter.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ReadModifyWriteRow(self, request, context):
      """Modifies a row atomically, reading the latest existing timestamp/value from
      the specified columns and writing a new value at
      max(existing timestamp, current server time) based on pre-defined
      read/modify/write rules. Returns the new contents of all modified cells.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaBigtableServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Service for reading from and writing to existing Bigtables.
    """
    def ReadRows(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Streams back the contents of all requested rows, optionally applying
      the same Reader filter to each. Depending on their size, rows may be
      broken up across multiple responses, but atomicity of each row will still
      be preserved.
      """
      raise NotImplementedError()
    def SampleRowKeys(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Returns a sample of row keys in the table. The returned row keys will
      delimit contiguous sections of the table of approximately equal size,
      which can be used to break up the data for distributed tasks like
      mapreduces.
      """
      raise NotImplementedError()
    def MutateRow(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Mutates a row atomically. Cells already present in the row are left
      unchanged unless explicitly changed by 'mutation'.
      """
      raise NotImplementedError()
    MutateRow.future = None
    def MutateRows(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Mutates multiple rows in a batch. Each individual row is mutated
      atomically as in MutateRow, but the entire batch is not executed
      atomically.
      """
      raise NotImplementedError()
    MutateRows.future = None
    def CheckAndMutateRow(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Mutates a row atomically based on the output of a predicate Reader filter.
      """
      raise NotImplementedError()
    CheckAndMutateRow.future = None
    def ReadModifyWriteRow(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Modifies a row atomically, reading the latest existing timestamp/value from
      the specified columns and writing a new value at
      max(existing timestamp, current server time) based on pre-defined
      read/modify/write rules. Returns the new contents of all modified cells.
      """
      raise NotImplementedError()
    ReadModifyWriteRow.future = None


  def beta_create_BigtableService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('google.bigtable.v1.BigtableService', 'CheckAndMutateRow'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.CheckAndMutateRowRequest.FromString,
      ('google.bigtable.v1.BigtableService', 'MutateRow'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowRequest.FromString,
      ('google.bigtable.v1.BigtableService', 'MutateRows'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowsRequest.FromString,
      ('google.bigtable.v1.BigtableService', 'ReadModifyWriteRow'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadModifyWriteRowRequest.FromString,
      ('google.bigtable.v1.BigtableService', 'ReadRows'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadRowsRequest.FromString,
      ('google.bigtable.v1.BigtableService', 'SampleRowKeys'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.SampleRowKeysRequest.FromString,
    }
    response_serializers = {
      ('google.bigtable.v1.BigtableService', 'CheckAndMutateRow'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.CheckAndMutateRowResponse.SerializeToString,
      ('google.bigtable.v1.BigtableService', 'MutateRow'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('google.bigtable.v1.BigtableService', 'MutateRows'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowsResponse.SerializeToString,
      ('google.bigtable.v1.BigtableService', 'ReadModifyWriteRow'): google_dot_bigtable_dot_v1_dot_bigtable__data__pb2.Row.SerializeToString,
      ('google.bigtable.v1.BigtableService', 'ReadRows'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadRowsResponse.SerializeToString,
      ('google.bigtable.v1.BigtableService', 'SampleRowKeys'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.SampleRowKeysResponse.SerializeToString,
    }
    method_implementations = {
      ('google.bigtable.v1.BigtableService', 'CheckAndMutateRow'): face_utilities.unary_unary_inline(servicer.CheckAndMutateRow),
      ('google.bigtable.v1.BigtableService', 'MutateRow'): face_utilities.unary_unary_inline(servicer.MutateRow),
      ('google.bigtable.v1.BigtableService', 'MutateRows'): face_utilities.unary_unary_inline(servicer.MutateRows),
      ('google.bigtable.v1.BigtableService', 'ReadModifyWriteRow'): face_utilities.unary_unary_inline(servicer.ReadModifyWriteRow),
      ('google.bigtable.v1.BigtableService', 'ReadRows'): face_utilities.unary_stream_inline(servicer.ReadRows),
      ('google.bigtable.v1.BigtableService', 'SampleRowKeys'): face_utilities.unary_stream_inline(servicer.SampleRowKeys),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_BigtableService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('google.bigtable.v1.BigtableService', 'CheckAndMutateRow'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.CheckAndMutateRowRequest.SerializeToString,
      ('google.bigtable.v1.BigtableService', 'MutateRow'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowRequest.SerializeToString,
      ('google.bigtable.v1.BigtableService', 'MutateRows'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowsRequest.SerializeToString,
      ('google.bigtable.v1.BigtableService', 'ReadModifyWriteRow'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadModifyWriteRowRequest.SerializeToString,
      ('google.bigtable.v1.BigtableService', 'ReadRows'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadRowsRequest.SerializeToString,
      ('google.bigtable.v1.BigtableService', 'SampleRowKeys'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.SampleRowKeysRequest.SerializeToString,
    }
    response_deserializers = {
      ('google.bigtable.v1.BigtableService', 'CheckAndMutateRow'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.CheckAndMutateRowResponse.FromString,
      ('google.bigtable.v1.BigtableService', 'MutateRow'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('google.bigtable.v1.BigtableService', 'MutateRows'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowsResponse.FromString,
      ('google.bigtable.v1.BigtableService', 'ReadModifyWriteRow'): google_dot_bigtable_dot_v1_dot_bigtable__data__pb2.Row.FromString,
      ('google.bigtable.v1.BigtableService', 'ReadRows'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadRowsResponse.FromString,
      ('google.bigtable.v1.BigtableService', 'SampleRowKeys'): google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.SampleRowKeysResponse.FromString,
    }
    cardinalities = {
      'CheckAndMutateRow': cardinality.Cardinality.UNARY_UNARY,
      'MutateRow': cardinality.Cardinality.UNARY_UNARY,
      'MutateRows': cardinality.Cardinality.UNARY_UNARY,
      'ReadModifyWriteRow': cardinality.Cardinality.UNARY_UNARY,
      'ReadRows': cardinality.Cardinality.UNARY_STREAM,
      'SampleRowKeys': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'google.bigtable.v1.BigtableService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
