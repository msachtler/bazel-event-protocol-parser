# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.bigtable.v1 import bigtable_data_pb2 as google_dot_bigtable_dot_v1_dot_bigtable__data__pb2
from google.bigtable.v1 import bigtable_service_messages_pb2 as google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class BigtableServiceStub(object):
  """Service for reading from and writing to existing Bigtables.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ReadRows = channel.unary_stream(
        '/google.bigtable.v1.BigtableService/ReadRows',
        request_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadRowsRequest.SerializeToString,
        response_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadRowsResponse.FromString,
        )
    self.SampleRowKeys = channel.unary_stream(
        '/google.bigtable.v1.BigtableService/SampleRowKeys',
        request_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.SampleRowKeysRequest.SerializeToString,
        response_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.SampleRowKeysResponse.FromString,
        )
    self.MutateRow = channel.unary_unary(
        '/google.bigtable.v1.BigtableService/MutateRow',
        request_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.MutateRows = channel.unary_unary(
        '/google.bigtable.v1.BigtableService/MutateRows',
        request_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowsRequest.SerializeToString,
        response_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowsResponse.FromString,
        )
    self.CheckAndMutateRow = channel.unary_unary(
        '/google.bigtable.v1.BigtableService/CheckAndMutateRow',
        request_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.CheckAndMutateRowRequest.SerializeToString,
        response_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.CheckAndMutateRowResponse.FromString,
        )
    self.ReadModifyWriteRow = channel.unary_unary(
        '/google.bigtable.v1.BigtableService/ReadModifyWriteRow',
        request_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadModifyWriteRowRequest.SerializeToString,
        response_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__data__pb2.Row.FromString,
        )


class BigtableServiceServicer(object):
  """Service for reading from and writing to existing Bigtables.
  """

  def ReadRows(self, request, context):
    """Streams back the contents of all requested rows, optionally applying
    the same Reader filter to each. Depending on their size, rows may be
    broken up across multiple responses, but atomicity of each row will still
    be preserved.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SampleRowKeys(self, request, context):
    """Returns a sample of row keys in the table. The returned row keys will
    delimit contiguous sections of the table of approximately equal size,
    which can be used to break up the data for distributed tasks like
    mapreduces.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MutateRow(self, request, context):
    """Mutates a row atomically. Cells already present in the row are left
    unchanged unless explicitly changed by 'mutation'.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MutateRows(self, request, context):
    """Mutates multiple rows in a batch. Each individual row is mutated
    atomically as in MutateRow, but the entire batch is not executed
    atomically.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CheckAndMutateRow(self, request, context):
    """Mutates a row atomically based on the output of a predicate Reader filter.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReadModifyWriteRow(self, request, context):
    """Modifies a row atomically, reading the latest existing timestamp/value from
    the specified columns and writing a new value at
    max(existing timestamp, current server time) based on pre-defined
    read/modify/write rules. Returns the new contents of all modified cells.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BigtableServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ReadRows': grpc.unary_stream_rpc_method_handler(
          servicer.ReadRows,
          request_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadRowsRequest.FromString,
          response_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadRowsResponse.SerializeToString,
      ),
      'SampleRowKeys': grpc.unary_stream_rpc_method_handler(
          servicer.SampleRowKeys,
          request_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.SampleRowKeysRequest.FromString,
          response_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.SampleRowKeysResponse.SerializeToString,
      ),
      'MutateRow': grpc.unary_unary_rpc_method_handler(
          servicer.MutateRow,
          request_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'MutateRows': grpc.unary_unary_rpc_method_handler(
          servicer.MutateRows,
          request_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowsRequest.FromString,
          response_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.MutateRowsResponse.SerializeToString,
      ),
      'CheckAndMutateRow': grpc.unary_unary_rpc_method_handler(
          servicer.CheckAndMutateRow,
          request_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.CheckAndMutateRowRequest.FromString,
          response_serializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.CheckAndMutateRowResponse.SerializeToString,
      ),
      'ReadModifyWriteRow': grpc.unary_unary_rpc_method_handler(
          servicer.ReadModifyWriteRow,
          request_deserializer=google_dot_bigtable_dot_v1_dot_bigtable__service__messages__pb2.ReadModifyWriteRowRequest.FromString,
          response_serializer=google_dot_bigtable_dot_v1_dot_bigtable__data__pb2.Row.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'google.bigtable.v1.BigtableService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
