// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v2/bigtable.proto

#ifndef PROTOBUF_google_2fbigtable_2fv2_2fbigtable_2eproto__INCLUDED
#define PROTOBUF_google_2fbigtable_2fv2_2fbigtable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/bigtable/v2/data.pb.h"
#include <google/protobuf/wrappers.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
namespace google {
namespace api {
}  // namespace api
namespace bigtable {
namespace v2 {
class Cell;
class CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
class CheckAndMutateRowRequest;
class CheckAndMutateRowRequestDefaultTypeInternal;
extern CheckAndMutateRowRequestDefaultTypeInternal _CheckAndMutateRowRequest_default_instance_;
class CheckAndMutateRowResponse;
class CheckAndMutateRowResponseDefaultTypeInternal;
extern CheckAndMutateRowResponseDefaultTypeInternal _CheckAndMutateRowResponse_default_instance_;
class Column;
class ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class ColumnRange;
class ColumnRangeDefaultTypeInternal;
extern ColumnRangeDefaultTypeInternal _ColumnRange_default_instance_;
class Family;
class FamilyDefaultTypeInternal;
extern FamilyDefaultTypeInternal _Family_default_instance_;
class MutateRowRequest;
class MutateRowRequestDefaultTypeInternal;
extern MutateRowRequestDefaultTypeInternal _MutateRowRequest_default_instance_;
class MutateRowResponse;
class MutateRowResponseDefaultTypeInternal;
extern MutateRowResponseDefaultTypeInternal _MutateRowResponse_default_instance_;
class MutateRowsRequest;
class MutateRowsRequestDefaultTypeInternal;
extern MutateRowsRequestDefaultTypeInternal _MutateRowsRequest_default_instance_;
class MutateRowsRequest_Entry;
class MutateRowsRequest_EntryDefaultTypeInternal;
extern MutateRowsRequest_EntryDefaultTypeInternal _MutateRowsRequest_Entry_default_instance_;
class MutateRowsResponse;
class MutateRowsResponseDefaultTypeInternal;
extern MutateRowsResponseDefaultTypeInternal _MutateRowsResponse_default_instance_;
class MutateRowsResponse_Entry;
class MutateRowsResponse_EntryDefaultTypeInternal;
extern MutateRowsResponse_EntryDefaultTypeInternal _MutateRowsResponse_Entry_default_instance_;
class Mutation;
class MutationDefaultTypeInternal;
extern MutationDefaultTypeInternal _Mutation_default_instance_;
class Mutation_DeleteFromColumn;
class Mutation_DeleteFromColumnDefaultTypeInternal;
extern Mutation_DeleteFromColumnDefaultTypeInternal _Mutation_DeleteFromColumn_default_instance_;
class Mutation_DeleteFromFamily;
class Mutation_DeleteFromFamilyDefaultTypeInternal;
extern Mutation_DeleteFromFamilyDefaultTypeInternal _Mutation_DeleteFromFamily_default_instance_;
class Mutation_DeleteFromRow;
class Mutation_DeleteFromRowDefaultTypeInternal;
extern Mutation_DeleteFromRowDefaultTypeInternal _Mutation_DeleteFromRow_default_instance_;
class Mutation_SetCell;
class Mutation_SetCellDefaultTypeInternal;
extern Mutation_SetCellDefaultTypeInternal _Mutation_SetCell_default_instance_;
class ReadModifyWriteRowRequest;
class ReadModifyWriteRowRequestDefaultTypeInternal;
extern ReadModifyWriteRowRequestDefaultTypeInternal _ReadModifyWriteRowRequest_default_instance_;
class ReadModifyWriteRowResponse;
class ReadModifyWriteRowResponseDefaultTypeInternal;
extern ReadModifyWriteRowResponseDefaultTypeInternal _ReadModifyWriteRowResponse_default_instance_;
class ReadModifyWriteRule;
class ReadModifyWriteRuleDefaultTypeInternal;
extern ReadModifyWriteRuleDefaultTypeInternal _ReadModifyWriteRule_default_instance_;
class ReadRowsRequest;
class ReadRowsRequestDefaultTypeInternal;
extern ReadRowsRequestDefaultTypeInternal _ReadRowsRequest_default_instance_;
class ReadRowsResponse;
class ReadRowsResponseDefaultTypeInternal;
extern ReadRowsResponseDefaultTypeInternal _ReadRowsResponse_default_instance_;
class ReadRowsResponse_CellChunk;
class ReadRowsResponse_CellChunkDefaultTypeInternal;
extern ReadRowsResponse_CellChunkDefaultTypeInternal _ReadRowsResponse_CellChunk_default_instance_;
class Row;
class RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class RowFilter;
class RowFilterDefaultTypeInternal;
extern RowFilterDefaultTypeInternal _RowFilter_default_instance_;
class RowFilter_Chain;
class RowFilter_ChainDefaultTypeInternal;
extern RowFilter_ChainDefaultTypeInternal _RowFilter_Chain_default_instance_;
class RowFilter_Condition;
class RowFilter_ConditionDefaultTypeInternal;
extern RowFilter_ConditionDefaultTypeInternal _RowFilter_Condition_default_instance_;
class RowFilter_Interleave;
class RowFilter_InterleaveDefaultTypeInternal;
extern RowFilter_InterleaveDefaultTypeInternal _RowFilter_Interleave_default_instance_;
class RowRange;
class RowRangeDefaultTypeInternal;
extern RowRangeDefaultTypeInternal _RowRange_default_instance_;
class RowSet;
class RowSetDefaultTypeInternal;
extern RowSetDefaultTypeInternal _RowSet_default_instance_;
class SampleRowKeysRequest;
class SampleRowKeysRequestDefaultTypeInternal;
extern SampleRowKeysRequestDefaultTypeInternal _SampleRowKeysRequest_default_instance_;
class SampleRowKeysResponse;
class SampleRowKeysResponseDefaultTypeInternal;
extern SampleRowKeysResponseDefaultTypeInternal _SampleRowKeysResponse_default_instance_;
class TimestampRange;
class TimestampRangeDefaultTypeInternal;
extern TimestampRangeDefaultTypeInternal _TimestampRange_default_instance_;
class ValueRange;
class ValueRangeDefaultTypeInternal;
extern ValueRangeDefaultTypeInternal _ValueRange_default_instance_;
}  // namespace v2
}  // namespace bigtable
namespace protobuf {
class BoolValue;
class BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class BytesValue;
class BytesValueDefaultTypeInternal;
extern BytesValueDefaultTypeInternal _BytesValue_default_instance_;
class DoubleValue;
class DoubleValueDefaultTypeInternal;
extern DoubleValueDefaultTypeInternal _DoubleValue_default_instance_;
class FloatValue;
class FloatValueDefaultTypeInternal;
extern FloatValueDefaultTypeInternal _FloatValue_default_instance_;
class Int32Value;
class Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class Int64Value;
class Int64ValueDefaultTypeInternal;
extern Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
class StringValue;
class StringValueDefaultTypeInternal;
extern StringValueDefaultTypeInternal _StringValue_default_instance_;
class UInt32Value;
class UInt32ValueDefaultTypeInternal;
extern UInt32ValueDefaultTypeInternal _UInt32Value_default_instance_;
class UInt64Value;
class UInt64ValueDefaultTypeInternal;
extern UInt64ValueDefaultTypeInternal _UInt64Value_default_instance_;
}  // namespace protobuf
namespace rpc {
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace rpc
}  // namespace google

namespace google {
namespace bigtable {
namespace v2 {

namespace protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto

// ===================================================================

class ReadRowsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadRowsRequest) */ {
 public:
  ReadRowsRequest();
  virtual ~ReadRowsRequest();

  ReadRowsRequest(const ReadRowsRequest& from);

  inline ReadRowsRequest& operator=(const ReadRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRowsRequest& default_instance();

  static inline const ReadRowsRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRowsRequest*>(
               &_ReadRowsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ReadRowsRequest* other);

  // implements Message ----------------------------------------------

  inline ReadRowsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ReadRowsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReadRowsRequest& from);
  void MergeFrom(const ReadRowsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReadRowsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // .google.bigtable.v2.RowSet rows = 2;
  bool has_rows() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  const ::google::bigtable::v2::RowSet& rows() const;
  ::google::bigtable::v2::RowSet* mutable_rows();
  ::google::bigtable::v2::RowSet* release_rows();
  void set_allocated_rows(::google::bigtable::v2::RowSet* rows);

  // .google.bigtable.v2.RowFilter filter = 3;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 3;
  const ::google::bigtable::v2::RowFilter& filter() const;
  ::google::bigtable::v2::RowFilter* mutable_filter();
  ::google::bigtable::v2::RowFilter* release_filter();
  void set_allocated_filter(::google::bigtable::v2::RowFilter* filter);

  // int64 rows_limit = 4;
  void clear_rows_limit();
  static const int kRowsLimitFieldNumber = 4;
  ::google::protobuf::int64 rows_limit() const;
  void set_rows_limit(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadRowsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::bigtable::v2::RowSet* rows_;
  ::google::bigtable::v2::RowFilter* filter_;
  ::google::protobuf::int64 rows_limit_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadRowsResponse_CellChunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadRowsResponse.CellChunk) */ {
 public:
  ReadRowsResponse_CellChunk();
  virtual ~ReadRowsResponse_CellChunk();

  ReadRowsResponse_CellChunk(const ReadRowsResponse_CellChunk& from);

  inline ReadRowsResponse_CellChunk& operator=(const ReadRowsResponse_CellChunk& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRowsResponse_CellChunk& default_instance();

  enum RowStatusCase {
    kResetRow = 8,
    kCommitRow = 9,
    ROW_STATUS_NOT_SET = 0,
  };

  static inline const ReadRowsResponse_CellChunk* internal_default_instance() {
    return reinterpret_cast<const ReadRowsResponse_CellChunk*>(
               &_ReadRowsResponse_CellChunk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ReadRowsResponse_CellChunk* other);

  // implements Message ----------------------------------------------

  inline ReadRowsResponse_CellChunk* New() const PROTOBUF_FINAL { return New(NULL); }

  ReadRowsResponse_CellChunk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReadRowsResponse_CellChunk& from);
  void MergeFrom(const ReadRowsResponse_CellChunk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReadRowsResponse_CellChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string labels = 5;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 5;
  const ::std::string& labels(int index) const;
  ::std::string* mutable_labels(int index);
  void set_labels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_labels(int index, ::std::string&& value);
  #endif
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  ::std::string* add_labels();
  void add_labels(const ::std::string& value);
  #if LANG_CXX11
  void add_labels(::std::string&& value);
  #endif
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // bytes row_key = 1;
  void clear_row_key();
  static const int kRowKeyFieldNumber = 1;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  #if LANG_CXX11
  void set_row_key(::std::string&& value);
  #endif
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // bytes value = 6;
  void clear_value();
  static const int kValueFieldNumber = 6;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.protobuf.StringValue family_name = 2;
  bool has_family_name() const;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 2;
  const ::google::protobuf::StringValue& family_name() const;
  ::google::protobuf::StringValue* mutable_family_name();
  ::google::protobuf::StringValue* release_family_name();
  void set_allocated_family_name(::google::protobuf::StringValue* family_name);

  // .google.protobuf.BytesValue qualifier = 3;
  bool has_qualifier() const;
  void clear_qualifier();
  static const int kQualifierFieldNumber = 3;
  const ::google::protobuf::BytesValue& qualifier() const;
  ::google::protobuf::BytesValue* mutable_qualifier();
  ::google::protobuf::BytesValue* release_qualifier();
  void set_allocated_qualifier(::google::protobuf::BytesValue* qualifier);

  // int64 timestamp_micros = 4;
  void clear_timestamp_micros();
  static const int kTimestampMicrosFieldNumber = 4;
  ::google::protobuf::int64 timestamp_micros() const;
  void set_timestamp_micros(::google::protobuf::int64 value);

  // int32 value_size = 7;
  void clear_value_size();
  static const int kValueSizeFieldNumber = 7;
  ::google::protobuf::int32 value_size() const;
  void set_value_size(::google::protobuf::int32 value);

  // bool reset_row = 8;
  private:
  bool has_reset_row() const;
  public:
  void clear_reset_row();
  static const int kResetRowFieldNumber = 8;
  bool reset_row() const;
  void set_reset_row(bool value);

  // bool commit_row = 9;
  private:
  bool has_commit_row() const;
  public:
  void clear_commit_row();
  static const int kCommitRowFieldNumber = 9;
  bool commit_row() const;
  void set_commit_row(bool value);

  RowStatusCase row_status_case() const;
  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadRowsResponse.CellChunk)
 private:
  void set_has_reset_row();
  void set_has_commit_row();

  inline bool has_row_status() const;
  void clear_row_status();
  inline void clear_has_row_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::StringValue* family_name_;
  ::google::protobuf::BytesValue* qualifier_;
  ::google::protobuf::int64 timestamp_micros_;
  ::google::protobuf::int32 value_size_;
  union RowStatusUnion {
    RowStatusUnion() {}
    bool reset_row_;
    bool commit_row_;
  } row_status_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadRowsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadRowsResponse) */ {
 public:
  ReadRowsResponse();
  virtual ~ReadRowsResponse();

  ReadRowsResponse(const ReadRowsResponse& from);

  inline ReadRowsResponse& operator=(const ReadRowsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRowsResponse& default_instance();

  static inline const ReadRowsResponse* internal_default_instance() {
    return reinterpret_cast<const ReadRowsResponse*>(
               &_ReadRowsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ReadRowsResponse* other);

  // implements Message ----------------------------------------------

  inline ReadRowsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ReadRowsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReadRowsResponse& from);
  void MergeFrom(const ReadRowsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReadRowsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReadRowsResponse_CellChunk CellChunk;

  // accessors -------------------------------------------------------

  // repeated .google.bigtable.v2.ReadRowsResponse.CellChunk chunks = 1;
  int chunks_size() const;
  void clear_chunks();
  static const int kChunksFieldNumber = 1;
  const ::google::bigtable::v2::ReadRowsResponse_CellChunk& chunks(int index) const;
  ::google::bigtable::v2::ReadRowsResponse_CellChunk* mutable_chunks(int index);
  ::google::bigtable::v2::ReadRowsResponse_CellChunk* add_chunks();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >*
      mutable_chunks();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >&
      chunks() const;

  // bytes last_scanned_row_key = 2;
  void clear_last_scanned_row_key();
  static const int kLastScannedRowKeyFieldNumber = 2;
  const ::std::string& last_scanned_row_key() const;
  void set_last_scanned_row_key(const ::std::string& value);
  #if LANG_CXX11
  void set_last_scanned_row_key(::std::string&& value);
  #endif
  void set_last_scanned_row_key(const char* value);
  void set_last_scanned_row_key(const void* value, size_t size);
  ::std::string* mutable_last_scanned_row_key();
  ::std::string* release_last_scanned_row_key();
  void set_allocated_last_scanned_row_key(::std::string* last_scanned_row_key);

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadRowsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk > chunks_;
  ::google::protobuf::internal::ArenaStringPtr last_scanned_row_key_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SampleRowKeysRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.SampleRowKeysRequest) */ {
 public:
  SampleRowKeysRequest();
  virtual ~SampleRowKeysRequest();

  SampleRowKeysRequest(const SampleRowKeysRequest& from);

  inline SampleRowKeysRequest& operator=(const SampleRowKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleRowKeysRequest& default_instance();

  static inline const SampleRowKeysRequest* internal_default_instance() {
    return reinterpret_cast<const SampleRowKeysRequest*>(
               &_SampleRowKeysRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SampleRowKeysRequest* other);

  // implements Message ----------------------------------------------

  inline SampleRowKeysRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SampleRowKeysRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SampleRowKeysRequest& from);
  void MergeFrom(const SampleRowKeysRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SampleRowKeysRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.SampleRowKeysRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SampleRowKeysResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.SampleRowKeysResponse) */ {
 public:
  SampleRowKeysResponse();
  virtual ~SampleRowKeysResponse();

  SampleRowKeysResponse(const SampleRowKeysResponse& from);

  inline SampleRowKeysResponse& operator=(const SampleRowKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleRowKeysResponse& default_instance();

  static inline const SampleRowKeysResponse* internal_default_instance() {
    return reinterpret_cast<const SampleRowKeysResponse*>(
               &_SampleRowKeysResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SampleRowKeysResponse* other);

  // implements Message ----------------------------------------------

  inline SampleRowKeysResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SampleRowKeysResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SampleRowKeysResponse& from);
  void MergeFrom(const SampleRowKeysResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SampleRowKeysResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes row_key = 1;
  void clear_row_key();
  static const int kRowKeyFieldNumber = 1;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  #if LANG_CXX11
  void set_row_key(::std::string&& value);
  #endif
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // int64 offset_bytes = 2;
  void clear_offset_bytes();
  static const int kOffsetBytesFieldNumber = 2;
  ::google::protobuf::int64 offset_bytes() const;
  void set_offset_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.SampleRowKeysResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  ::google::protobuf::int64 offset_bytes_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MutateRowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowRequest) */ {
 public:
  MutateRowRequest();
  virtual ~MutateRowRequest();

  MutateRowRequest(const MutateRowRequest& from);

  inline MutateRowRequest& operator=(const MutateRowRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutateRowRequest& default_instance();

  static inline const MutateRowRequest* internal_default_instance() {
    return reinterpret_cast<const MutateRowRequest*>(
               &_MutateRowRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(MutateRowRequest* other);

  // implements Message ----------------------------------------------

  inline MutateRowRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MutateRowRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MutateRowRequest& from);
  void MergeFrom(const MutateRowRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MutateRowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.bigtable.v2.Mutation mutations = 3;
  int mutations_size() const;
  void clear_mutations();
  static const int kMutationsFieldNumber = 3;
  const ::google::bigtable::v2::Mutation& mutations(int index) const;
  ::google::bigtable::v2::Mutation* mutable_mutations(int index);
  ::google::bigtable::v2::Mutation* add_mutations();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
      mutable_mutations();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
      mutations() const;

  // string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // bytes row_key = 2;
  void clear_row_key();
  static const int kRowKeyFieldNumber = 2;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  #if LANG_CXX11
  void set_row_key(::std::string&& value);
  #endif
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation > mutations_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MutateRowResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowResponse) */ {
 public:
  MutateRowResponse();
  virtual ~MutateRowResponse();

  MutateRowResponse(const MutateRowResponse& from);

  inline MutateRowResponse& operator=(const MutateRowResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutateRowResponse& default_instance();

  static inline const MutateRowResponse* internal_default_instance() {
    return reinterpret_cast<const MutateRowResponse*>(
               &_MutateRowResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MutateRowResponse* other);

  // implements Message ----------------------------------------------

  inline MutateRowResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MutateRowResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MutateRowResponse& from);
  void MergeFrom(const MutateRowResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MutateRowResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MutateRowsRequest_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowsRequest.Entry) */ {
 public:
  MutateRowsRequest_Entry();
  virtual ~MutateRowsRequest_Entry();

  MutateRowsRequest_Entry(const MutateRowsRequest_Entry& from);

  inline MutateRowsRequest_Entry& operator=(const MutateRowsRequest_Entry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutateRowsRequest_Entry& default_instance();

  static inline const MutateRowsRequest_Entry* internal_default_instance() {
    return reinterpret_cast<const MutateRowsRequest_Entry*>(
               &_MutateRowsRequest_Entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(MutateRowsRequest_Entry* other);

  // implements Message ----------------------------------------------

  inline MutateRowsRequest_Entry* New() const PROTOBUF_FINAL { return New(NULL); }

  MutateRowsRequest_Entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MutateRowsRequest_Entry& from);
  void MergeFrom(const MutateRowsRequest_Entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MutateRowsRequest_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.bigtable.v2.Mutation mutations = 2;
  int mutations_size() const;
  void clear_mutations();
  static const int kMutationsFieldNumber = 2;
  const ::google::bigtable::v2::Mutation& mutations(int index) const;
  ::google::bigtable::v2::Mutation* mutable_mutations(int index);
  ::google::bigtable::v2::Mutation* add_mutations();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
      mutable_mutations();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
      mutations() const;

  // bytes row_key = 1;
  void clear_row_key();
  static const int kRowKeyFieldNumber = 1;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  #if LANG_CXX11
  void set_row_key(::std::string&& value);
  #endif
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowsRequest.Entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation > mutations_;
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MutateRowsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowsRequest) */ {
 public:
  MutateRowsRequest();
  virtual ~MutateRowsRequest();

  MutateRowsRequest(const MutateRowsRequest& from);

  inline MutateRowsRequest& operator=(const MutateRowsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutateRowsRequest& default_instance();

  static inline const MutateRowsRequest* internal_default_instance() {
    return reinterpret_cast<const MutateRowsRequest*>(
               &_MutateRowsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(MutateRowsRequest* other);

  // implements Message ----------------------------------------------

  inline MutateRowsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MutateRowsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MutateRowsRequest& from);
  void MergeFrom(const MutateRowsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MutateRowsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MutateRowsRequest_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 2;
  const ::google::bigtable::v2::MutateRowsRequest_Entry& entries(int index) const;
  ::google::bigtable::v2::MutateRowsRequest_Entry* mutable_entries(int index);
  ::google::bigtable::v2::MutateRowsRequest_Entry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >&
      entries() const;

  // string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry > entries_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MutateRowsResponse_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowsResponse.Entry) */ {
 public:
  MutateRowsResponse_Entry();
  virtual ~MutateRowsResponse_Entry();

  MutateRowsResponse_Entry(const MutateRowsResponse_Entry& from);

  inline MutateRowsResponse_Entry& operator=(const MutateRowsResponse_Entry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutateRowsResponse_Entry& default_instance();

  static inline const MutateRowsResponse_Entry* internal_default_instance() {
    return reinterpret_cast<const MutateRowsResponse_Entry*>(
               &_MutateRowsResponse_Entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(MutateRowsResponse_Entry* other);

  // implements Message ----------------------------------------------

  inline MutateRowsResponse_Entry* New() const PROTOBUF_FINAL { return New(NULL); }

  MutateRowsResponse_Entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MutateRowsResponse_Entry& from);
  void MergeFrom(const MutateRowsResponse_Entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MutateRowsResponse_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.rpc.Status status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* mutable_status();
  ::google::rpc::Status* release_status();
  void set_allocated_status(::google::rpc::Status* status);

  // int64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowsResponse.Entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::rpc::Status* status_;
  ::google::protobuf::int64 index_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MutateRowsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.MutateRowsResponse) */ {
 public:
  MutateRowsResponse();
  virtual ~MutateRowsResponse();

  MutateRowsResponse(const MutateRowsResponse& from);

  inline MutateRowsResponse& operator=(const MutateRowsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutateRowsResponse& default_instance();

  static inline const MutateRowsResponse* internal_default_instance() {
    return reinterpret_cast<const MutateRowsResponse*>(
               &_MutateRowsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(MutateRowsResponse* other);

  // implements Message ----------------------------------------------

  inline MutateRowsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MutateRowsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MutateRowsResponse& from);
  void MergeFrom(const MutateRowsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MutateRowsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MutateRowsResponse_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .google.bigtable.v2.MutateRowsResponse.Entry entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  const ::google::bigtable::v2::MutateRowsResponse_Entry& entries(int index) const;
  ::google::bigtable::v2::MutateRowsResponse_Entry* mutable_entries(int index);
  ::google::bigtable::v2::MutateRowsResponse_Entry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.MutateRowsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry > entries_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckAndMutateRowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.CheckAndMutateRowRequest) */ {
 public:
  CheckAndMutateRowRequest();
  virtual ~CheckAndMutateRowRequest();

  CheckAndMutateRowRequest(const CheckAndMutateRowRequest& from);

  inline CheckAndMutateRowRequest& operator=(const CheckAndMutateRowRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAndMutateRowRequest& default_instance();

  static inline const CheckAndMutateRowRequest* internal_default_instance() {
    return reinterpret_cast<const CheckAndMutateRowRequest*>(
               &_CheckAndMutateRowRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CheckAndMutateRowRequest* other);

  // implements Message ----------------------------------------------

  inline CheckAndMutateRowRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckAndMutateRowRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckAndMutateRowRequest& from);
  void MergeFrom(const CheckAndMutateRowRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckAndMutateRowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.bigtable.v2.Mutation true_mutations = 4;
  int true_mutations_size() const;
  void clear_true_mutations();
  static const int kTrueMutationsFieldNumber = 4;
  const ::google::bigtable::v2::Mutation& true_mutations(int index) const;
  ::google::bigtable::v2::Mutation* mutable_true_mutations(int index);
  ::google::bigtable::v2::Mutation* add_true_mutations();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
      mutable_true_mutations();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
      true_mutations() const;

  // repeated .google.bigtable.v2.Mutation false_mutations = 5;
  int false_mutations_size() const;
  void clear_false_mutations();
  static const int kFalseMutationsFieldNumber = 5;
  const ::google::bigtable::v2::Mutation& false_mutations(int index) const;
  ::google::bigtable::v2::Mutation* mutable_false_mutations(int index);
  ::google::bigtable::v2::Mutation* add_false_mutations();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
      mutable_false_mutations();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
      false_mutations() const;

  // string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // bytes row_key = 2;
  void clear_row_key();
  static const int kRowKeyFieldNumber = 2;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  #if LANG_CXX11
  void set_row_key(::std::string&& value);
  #endif
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // .google.bigtable.v2.RowFilter predicate_filter = 6;
  bool has_predicate_filter() const;
  void clear_predicate_filter();
  static const int kPredicateFilterFieldNumber = 6;
  const ::google::bigtable::v2::RowFilter& predicate_filter() const;
  ::google::bigtable::v2::RowFilter* mutable_predicate_filter();
  ::google::bigtable::v2::RowFilter* release_predicate_filter();
  void set_allocated_predicate_filter(::google::bigtable::v2::RowFilter* predicate_filter);

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.CheckAndMutateRowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation > true_mutations_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation > false_mutations_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  ::google::bigtable::v2::RowFilter* predicate_filter_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckAndMutateRowResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.CheckAndMutateRowResponse) */ {
 public:
  CheckAndMutateRowResponse();
  virtual ~CheckAndMutateRowResponse();

  CheckAndMutateRowResponse(const CheckAndMutateRowResponse& from);

  inline CheckAndMutateRowResponse& operator=(const CheckAndMutateRowResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAndMutateRowResponse& default_instance();

  static inline const CheckAndMutateRowResponse* internal_default_instance() {
    return reinterpret_cast<const CheckAndMutateRowResponse*>(
               &_CheckAndMutateRowResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CheckAndMutateRowResponse* other);

  // implements Message ----------------------------------------------

  inline CheckAndMutateRowResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckAndMutateRowResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckAndMutateRowResponse& from);
  void MergeFrom(const CheckAndMutateRowResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckAndMutateRowResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool predicate_matched = 1;
  void clear_predicate_matched();
  static const int kPredicateMatchedFieldNumber = 1;
  bool predicate_matched() const;
  void set_predicate_matched(bool value);

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.CheckAndMutateRowResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool predicate_matched_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadModifyWriteRowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadModifyWriteRowRequest) */ {
 public:
  ReadModifyWriteRowRequest();
  virtual ~ReadModifyWriteRowRequest();

  ReadModifyWriteRowRequest(const ReadModifyWriteRowRequest& from);

  inline ReadModifyWriteRowRequest& operator=(const ReadModifyWriteRowRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadModifyWriteRowRequest& default_instance();

  static inline const ReadModifyWriteRowRequest* internal_default_instance() {
    return reinterpret_cast<const ReadModifyWriteRowRequest*>(
               &_ReadModifyWriteRowRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ReadModifyWriteRowRequest* other);

  // implements Message ----------------------------------------------

  inline ReadModifyWriteRowRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ReadModifyWriteRowRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReadModifyWriteRowRequest& from);
  void MergeFrom(const ReadModifyWriteRowRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReadModifyWriteRowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.bigtable.v2.ReadModifyWriteRule rules = 3;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 3;
  const ::google::bigtable::v2::ReadModifyWriteRule& rules(int index) const;
  ::google::bigtable::v2::ReadModifyWriteRule* mutable_rules(int index);
  ::google::bigtable::v2::ReadModifyWriteRule* add_rules();
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >*
      mutable_rules();
  const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >&
      rules() const;

  // string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // bytes row_key = 2;
  void clear_row_key();
  static const int kRowKeyFieldNumber = 2;
  const ::std::string& row_key() const;
  void set_row_key(const ::std::string& value);
  #if LANG_CXX11
  void set_row_key(::std::string&& value);
  #endif
  void set_row_key(const char* value);
  void set_row_key(const void* value, size_t size);
  ::std::string* mutable_row_key();
  ::std::string* release_row_key();
  void set_allocated_row_key(::std::string* row_key);

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadModifyWriteRowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule > rules_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr row_key_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadModifyWriteRowResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.bigtable.v2.ReadModifyWriteRowResponse) */ {
 public:
  ReadModifyWriteRowResponse();
  virtual ~ReadModifyWriteRowResponse();

  ReadModifyWriteRowResponse(const ReadModifyWriteRowResponse& from);

  inline ReadModifyWriteRowResponse& operator=(const ReadModifyWriteRowResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadModifyWriteRowResponse& default_instance();

  static inline const ReadModifyWriteRowResponse* internal_default_instance() {
    return reinterpret_cast<const ReadModifyWriteRowResponse*>(
               &_ReadModifyWriteRowResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ReadModifyWriteRowResponse* other);

  // implements Message ----------------------------------------------

  inline ReadModifyWriteRowResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ReadModifyWriteRowResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReadModifyWriteRowResponse& from);
  void MergeFrom(const ReadModifyWriteRowResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReadModifyWriteRowResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.bigtable.v2.Row row = 1;
  bool has_row() const;
  void clear_row();
  static const int kRowFieldNumber = 1;
  const ::google::bigtable::v2::Row& row() const;
  ::google::bigtable::v2::Row* mutable_row();
  ::google::bigtable::v2::Row* release_row();
  void set_allocated_row(::google::bigtable::v2::Row* row);

  // @@protoc_insertion_point(class_scope:google.bigtable.v2.ReadModifyWriteRowResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::bigtable::v2::Row* row_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fbigtable_2fv2_2fbigtable_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRowsRequest

// string table_name = 1;
inline void ReadRowsRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.table_name)
  return table_name_.GetNoArena();
}
inline void ReadRowsRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsRequest.table_name)
}
#if LANG_CXX11
inline void ReadRowsRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadRowsRequest.table_name)
}
#endif
inline void ReadRowsRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsRequest.table_name)
}
inline void ReadRowsRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsRequest.table_name)
}
inline ::std::string* ReadRowsRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRowsRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.table_name)
}

// .google.bigtable.v2.RowSet rows = 2;
inline bool ReadRowsRequest::has_rows() const {
  return this != internal_default_instance() && rows_ != NULL;
}
inline void ReadRowsRequest::clear_rows() {
  if (GetArenaNoVirtual() == NULL && rows_ != NULL) delete rows_;
  rows_ = NULL;
}
inline const ::google::bigtable::v2::RowSet& ReadRowsRequest::rows() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.rows)
  return rows_ != NULL ? *rows_
                         : *::google::bigtable::v2::RowSet::internal_default_instance();
}
inline ::google::bigtable::v2::RowSet* ReadRowsRequest::mutable_rows() {
  
  if (rows_ == NULL) {
    rows_ = new ::google::bigtable::v2::RowSet;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.rows)
  return rows_;
}
inline ::google::bigtable::v2::RowSet* ReadRowsRequest::release_rows() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.rows)
  
  ::google::bigtable::v2::RowSet* temp = rows_;
  rows_ = NULL;
  return temp;
}
inline void ReadRowsRequest::set_allocated_rows(::google::bigtable::v2::RowSet* rows) {
  delete rows_;
  rows_ = rows;
  if (rows) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.rows)
}

// .google.bigtable.v2.RowFilter filter = 3;
inline bool ReadRowsRequest::has_filter() const {
  return this != internal_default_instance() && filter_ != NULL;
}
inline void ReadRowsRequest::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
inline const ::google::bigtable::v2::RowFilter& ReadRowsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.filter)
  return filter_ != NULL ? *filter_
                         : *::google::bigtable::v2::RowFilter::internal_default_instance();
}
inline ::google::bigtable::v2::RowFilter* ReadRowsRequest::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::google::bigtable::v2::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsRequest.filter)
  return filter_;
}
inline ::google::bigtable::v2::RowFilter* ReadRowsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsRequest.filter)
  
  ::google::bigtable::v2::RowFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
inline void ReadRowsRequest::set_allocated_filter(::google::bigtable::v2::RowFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsRequest.filter)
}

// int64 rows_limit = 4;
inline void ReadRowsRequest::clear_rows_limit() {
  rows_limit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReadRowsRequest::rows_limit() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsRequest.rows_limit)
  return rows_limit_;
}
inline void ReadRowsRequest::set_rows_limit(::google::protobuf::int64 value) {
  
  rows_limit_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsRequest.rows_limit)
}

// -------------------------------------------------------------------

// ReadRowsResponse_CellChunk

// bytes row_key = 1;
inline void ReadRowsResponse_CellChunk::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadRowsResponse_CellChunk::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
  return row_key_.GetNoArena();
}
inline void ReadRowsResponse_CellChunk::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}
#if LANG_CXX11
inline void ReadRowsResponse_CellChunk::set_row_key(::std::string&& value) {
  
  row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}
#endif
inline void ReadRowsResponse_CellChunk::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}
inline void ReadRowsResponse_CellChunk::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}
inline ::std::string* ReadRowsResponse_CellChunk::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRowsResponse_CellChunk::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRowsResponse_CellChunk::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.row_key)
}

// .google.protobuf.StringValue family_name = 2;
inline bool ReadRowsResponse_CellChunk::has_family_name() const {
  return this != internal_default_instance() && family_name_ != NULL;
}
inline void ReadRowsResponse_CellChunk::clear_family_name() {
  if (GetArenaNoVirtual() == NULL && family_name_ != NULL) delete family_name_;
  family_name_ = NULL;
}
inline const ::google::protobuf::StringValue& ReadRowsResponse_CellChunk::family_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
  return family_name_ != NULL ? *family_name_
                         : *::google::protobuf::StringValue::internal_default_instance();
}
inline ::google::protobuf::StringValue* ReadRowsResponse_CellChunk::mutable_family_name() {
  
  if (family_name_ == NULL) {
    family_name_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
  return family_name_;
}
inline ::google::protobuf::StringValue* ReadRowsResponse_CellChunk::release_family_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
  
  ::google::protobuf::StringValue* temp = family_name_;
  family_name_ = NULL;
  return temp;
}
inline void ReadRowsResponse_CellChunk::set_allocated_family_name(::google::protobuf::StringValue* family_name) {
  delete family_name_;
  if (family_name != NULL && family_name->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_family_name = new ::google::protobuf::StringValue;
    new_family_name->CopyFrom(*family_name);
    family_name = new_family_name;
  }
  family_name_ = family_name;
  if (family_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.family_name)
}

// .google.protobuf.BytesValue qualifier = 3;
inline bool ReadRowsResponse_CellChunk::has_qualifier() const {
  return this != internal_default_instance() && qualifier_ != NULL;
}
inline void ReadRowsResponse_CellChunk::clear_qualifier() {
  if (GetArenaNoVirtual() == NULL && qualifier_ != NULL) delete qualifier_;
  qualifier_ = NULL;
}
inline const ::google::protobuf::BytesValue& ReadRowsResponse_CellChunk::qualifier() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
  return qualifier_ != NULL ? *qualifier_
                         : *::google::protobuf::BytesValue::internal_default_instance();
}
inline ::google::protobuf::BytesValue* ReadRowsResponse_CellChunk::mutable_qualifier() {
  
  if (qualifier_ == NULL) {
    qualifier_ = new ::google::protobuf::BytesValue;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
  return qualifier_;
}
inline ::google::protobuf::BytesValue* ReadRowsResponse_CellChunk::release_qualifier() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
  
  ::google::protobuf::BytesValue* temp = qualifier_;
  qualifier_ = NULL;
  return temp;
}
inline void ReadRowsResponse_CellChunk::set_allocated_qualifier(::google::protobuf::BytesValue* qualifier) {
  delete qualifier_;
  if (qualifier != NULL && qualifier->GetArena() != NULL) {
    ::google::protobuf::BytesValue* new_qualifier = new ::google::protobuf::BytesValue;
    new_qualifier->CopyFrom(*qualifier);
    qualifier = new_qualifier;
  }
  qualifier_ = qualifier;
  if (qualifier) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.qualifier)
}

// int64 timestamp_micros = 4;
inline void ReadRowsResponse_CellChunk::clear_timestamp_micros() {
  timestamp_micros_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReadRowsResponse_CellChunk::timestamp_micros() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.timestamp_micros)
  return timestamp_micros_;
}
inline void ReadRowsResponse_CellChunk::set_timestamp_micros(::google::protobuf::int64 value) {
  
  timestamp_micros_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.timestamp_micros)
}

// repeated string labels = 5;
inline int ReadRowsResponse_CellChunk::labels_size() const {
  return labels_.size();
}
inline void ReadRowsResponse_CellChunk::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& ReadRowsResponse_CellChunk::labels(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return labels_.Get(index);
}
inline ::std::string* ReadRowsResponse_CellChunk::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return labels_.Mutable(index);
}
inline void ReadRowsResponse_CellChunk::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  labels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ReadRowsResponse_CellChunk::set_labels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ReadRowsResponse_CellChunk::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline void ReadRowsResponse_CellChunk::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline ::std::string* ReadRowsResponse_CellChunk::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return labels_.Add();
}
inline void ReadRowsResponse_CellChunk::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
#if LANG_CXX11
inline void ReadRowsResponse_CellChunk::add_labels(::std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
#endif
inline void ReadRowsResponse_CellChunk::add_labels(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline void ReadRowsResponse_CellChunk::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReadRowsResponse_CellChunk::labels() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReadRowsResponse_CellChunk::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadRowsResponse.CellChunk.labels)
  return &labels_;
}

// bytes value = 6;
inline void ReadRowsResponse_CellChunk::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadRowsResponse_CellChunk::value() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
  return value_.GetNoArena();
}
inline void ReadRowsResponse_CellChunk::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}
#if LANG_CXX11
inline void ReadRowsResponse_CellChunk::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}
#endif
inline void ReadRowsResponse_CellChunk::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}
inline void ReadRowsResponse_CellChunk::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}
inline ::std::string* ReadRowsResponse_CellChunk::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRowsResponse_CellChunk::release_value() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRowsResponse_CellChunk::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.CellChunk.value)
}

// int32 value_size = 7;
inline void ReadRowsResponse_CellChunk::clear_value_size() {
  value_size_ = 0;
}
inline ::google::protobuf::int32 ReadRowsResponse_CellChunk::value_size() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.value_size)
  return value_size_;
}
inline void ReadRowsResponse_CellChunk::set_value_size(::google::protobuf::int32 value) {
  
  value_size_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.value_size)
}

// bool reset_row = 8;
inline bool ReadRowsResponse_CellChunk::has_reset_row() const {
  return row_status_case() == kResetRow;
}
inline void ReadRowsResponse_CellChunk::set_has_reset_row() {
  _oneof_case_[0] = kResetRow;
}
inline void ReadRowsResponse_CellChunk::clear_reset_row() {
  if (has_reset_row()) {
    row_status_.reset_row_ = false;
    clear_has_row_status();
  }
}
inline bool ReadRowsResponse_CellChunk::reset_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.reset_row)
  if (has_reset_row()) {
    return row_status_.reset_row_;
  }
  return false;
}
inline void ReadRowsResponse_CellChunk::set_reset_row(bool value) {
  if (!has_reset_row()) {
    clear_row_status();
    set_has_reset_row();
  }
  row_status_.reset_row_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.reset_row)
}

// bool commit_row = 9;
inline bool ReadRowsResponse_CellChunk::has_commit_row() const {
  return row_status_case() == kCommitRow;
}
inline void ReadRowsResponse_CellChunk::set_has_commit_row() {
  _oneof_case_[0] = kCommitRow;
}
inline void ReadRowsResponse_CellChunk::clear_commit_row() {
  if (has_commit_row()) {
    row_status_.commit_row_ = false;
    clear_has_row_status();
  }
}
inline bool ReadRowsResponse_CellChunk::commit_row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.CellChunk.commit_row)
  if (has_commit_row()) {
    return row_status_.commit_row_;
  }
  return false;
}
inline void ReadRowsResponse_CellChunk::set_commit_row(bool value) {
  if (!has_commit_row()) {
    clear_row_status();
    set_has_commit_row();
  }
  row_status_.commit_row_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.CellChunk.commit_row)
}

inline bool ReadRowsResponse_CellChunk::has_row_status() const {
  return row_status_case() != ROW_STATUS_NOT_SET;
}
inline void ReadRowsResponse_CellChunk::clear_has_row_status() {
  _oneof_case_[0] = ROW_STATUS_NOT_SET;
}
inline ReadRowsResponse_CellChunk::RowStatusCase ReadRowsResponse_CellChunk::row_status_case() const {
  return ReadRowsResponse_CellChunk::RowStatusCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadRowsResponse

// repeated .google.bigtable.v2.ReadRowsResponse.CellChunk chunks = 1;
inline int ReadRowsResponse::chunks_size() const {
  return chunks_.size();
}
inline void ReadRowsResponse::clear_chunks() {
  chunks_.Clear();
}
inline const ::google::bigtable::v2::ReadRowsResponse_CellChunk& ReadRowsResponse::chunks(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.chunks)
  return chunks_.Get(index);
}
inline ::google::bigtable::v2::ReadRowsResponse_CellChunk* ReadRowsResponse::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.chunks)
  return chunks_.Mutable(index);
}
inline ::google::bigtable::v2::ReadRowsResponse_CellChunk* ReadRowsResponse::add_chunks() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadRowsResponse.chunks)
  return chunks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >*
ReadRowsResponse::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadRowsResponse.chunks)
  return &chunks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadRowsResponse_CellChunk >&
ReadRowsResponse::chunks() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadRowsResponse.chunks)
  return chunks_;
}

// bytes last_scanned_row_key = 2;
inline void ReadRowsResponse::clear_last_scanned_row_key() {
  last_scanned_row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadRowsResponse::last_scanned_row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
  return last_scanned_row_key_.GetNoArena();
}
inline void ReadRowsResponse::set_last_scanned_row_key(const ::std::string& value) {
  
  last_scanned_row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}
#if LANG_CXX11
inline void ReadRowsResponse::set_last_scanned_row_key(::std::string&& value) {
  
  last_scanned_row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}
#endif
inline void ReadRowsResponse::set_last_scanned_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_scanned_row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}
inline void ReadRowsResponse::set_last_scanned_row_key(const void* value, size_t size) {
  
  last_scanned_row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}
inline ::std::string* ReadRowsResponse::mutable_last_scanned_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
  return last_scanned_row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRowsResponse::release_last_scanned_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
  
  return last_scanned_row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRowsResponse::set_allocated_last_scanned_row_key(::std::string* last_scanned_row_key) {
  if (last_scanned_row_key != NULL) {
    
  } else {
    
  }
  last_scanned_row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_scanned_row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadRowsResponse.last_scanned_row_key)
}

// -------------------------------------------------------------------

// SampleRowKeysRequest

// string table_name = 1;
inline void SampleRowKeysRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SampleRowKeysRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysRequest.table_name)
  return table_name_.GetNoArena();
}
inline void SampleRowKeysRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysRequest.table_name)
}
#if LANG_CXX11
inline void SampleRowKeysRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.SampleRowKeysRequest.table_name)
}
#endif
inline void SampleRowKeysRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.SampleRowKeysRequest.table_name)
}
inline void SampleRowKeysRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.SampleRowKeysRequest.table_name)
}
inline ::std::string* SampleRowKeysRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.SampleRowKeysRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SampleRowKeysRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.SampleRowKeysRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SampleRowKeysRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.SampleRowKeysRequest.table_name)
}

// -------------------------------------------------------------------

// SampleRowKeysResponse

// bytes row_key = 1;
inline void SampleRowKeysResponse::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SampleRowKeysResponse::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysResponse.row_key)
  return row_key_.GetNoArena();
}
inline void SampleRowKeysResponse::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysResponse.row_key)
}
#if LANG_CXX11
inline void SampleRowKeysResponse::set_row_key(::std::string&& value) {
  
  row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.SampleRowKeysResponse.row_key)
}
#endif
inline void SampleRowKeysResponse::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.SampleRowKeysResponse.row_key)
}
inline void SampleRowKeysResponse::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.SampleRowKeysResponse.row_key)
}
inline ::std::string* SampleRowKeysResponse::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.SampleRowKeysResponse.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SampleRowKeysResponse::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.SampleRowKeysResponse.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SampleRowKeysResponse::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.SampleRowKeysResponse.row_key)
}

// int64 offset_bytes = 2;
inline void SampleRowKeysResponse::clear_offset_bytes() {
  offset_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SampleRowKeysResponse::offset_bytes() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.SampleRowKeysResponse.offset_bytes)
  return offset_bytes_;
}
inline void SampleRowKeysResponse::set_offset_bytes(::google::protobuf::int64 value) {
  
  offset_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.SampleRowKeysResponse.offset_bytes)
}

// -------------------------------------------------------------------

// MutateRowRequest

// string table_name = 1;
inline void MutateRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.table_name)
  return table_name_.GetNoArena();
}
inline void MutateRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowRequest.table_name)
}
#if LANG_CXX11
inline void MutateRowRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.MutateRowRequest.table_name)
}
#endif
inline void MutateRowRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowRequest.table_name)
}
inline void MutateRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowRequest.table_name)
}
inline ::std::string* MutateRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutateRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowRequest.table_name)
}

// bytes row_key = 2;
inline void MutateRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.row_key)
  return row_key_.GetNoArena();
}
inline void MutateRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowRequest.row_key)
}
#if LANG_CXX11
inline void MutateRowRequest::set_row_key(::std::string&& value) {
  
  row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.MutateRowRequest.row_key)
}
#endif
inline void MutateRowRequest::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowRequest.row_key)
}
inline void MutateRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowRequest.row_key)
}
inline ::std::string* MutateRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutateRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowRequest.row_key)
}

// repeated .google.bigtable.v2.Mutation mutations = 3;
inline int MutateRowRequest::mutations_size() const {
  return mutations_.size();
}
inline void MutateRowRequest::clear_mutations() {
  mutations_.Clear();
}
inline const ::google::bigtable::v2::Mutation& MutateRowRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowRequest.mutations)
  return mutations_.Get(index);
}
inline ::google::bigtable::v2::Mutation* MutateRowRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowRequest.mutations)
  return mutations_.Mutable(index);
}
inline ::google::bigtable::v2::Mutation* MutateRowRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowRequest.mutations)
  return mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
MutateRowRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowRequest.mutations)
  return &mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
MutateRowRequest::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowRequest.mutations)
  return mutations_;
}

// -------------------------------------------------------------------

// MutateRowResponse

// -------------------------------------------------------------------

// MutateRowsRequest_Entry

// bytes row_key = 1;
inline void MutateRowsRequest_Entry::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MutateRowsRequest_Entry::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
  return row_key_.GetNoArena();
}
inline void MutateRowsRequest_Entry::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}
#if LANG_CXX11
inline void MutateRowsRequest_Entry::set_row_key(::std::string&& value) {
  
  row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}
#endif
inline void MutateRowsRequest_Entry::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}
inline void MutateRowsRequest_Entry::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}
inline ::std::string* MutateRowsRequest_Entry::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MutateRowsRequest_Entry::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutateRowsRequest_Entry::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsRequest.Entry.row_key)
}

// repeated .google.bigtable.v2.Mutation mutations = 2;
inline int MutateRowsRequest_Entry::mutations_size() const {
  return mutations_.size();
}
inline void MutateRowsRequest_Entry::clear_mutations() {
  mutations_.Clear();
}
inline const ::google::bigtable::v2::Mutation& MutateRowsRequest_Entry::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return mutations_.Get(index);
}
inline ::google::bigtable::v2::Mutation* MutateRowsRequest_Entry::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return mutations_.Mutable(index);
}
inline ::google::bigtable::v2::Mutation* MutateRowsRequest_Entry::add_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
MutateRowsRequest_Entry::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return &mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
MutateRowsRequest_Entry::mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowsRequest.Entry.mutations)
  return mutations_;
}

// -------------------------------------------------------------------

// MutateRowsRequest

// string table_name = 1;
inline void MutateRowsRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MutateRowsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.table_name)
  return table_name_.GetNoArena();
}
inline void MutateRowsRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsRequest.table_name)
}
#if LANG_CXX11
inline void MutateRowsRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.MutateRowsRequest.table_name)
}
#endif
inline void MutateRowsRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.MutateRowsRequest.table_name)
}
inline void MutateRowsRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.MutateRowsRequest.table_name)
}
inline ::std::string* MutateRowsRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MutateRowsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MutateRowsRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsRequest.table_name)
}

// repeated .google.bigtable.v2.MutateRowsRequest.Entry entries = 2;
inline int MutateRowsRequest::entries_size() const {
  return entries_.size();
}
inline void MutateRowsRequest::clear_entries() {
  entries_.Clear();
}
inline const ::google::bigtable::v2::MutateRowsRequest_Entry& MutateRowsRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsRequest.entries)
  return entries_.Get(index);
}
inline ::google::bigtable::v2::MutateRowsRequest_Entry* MutateRowsRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsRequest.entries)
  return entries_.Mutable(index);
}
inline ::google::bigtable::v2::MutateRowsRequest_Entry* MutateRowsRequest::add_entries() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowsRequest.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >*
MutateRowsRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowsRequest.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsRequest_Entry >&
MutateRowsRequest::entries() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowsRequest.entries)
  return entries_;
}

// -------------------------------------------------------------------

// MutateRowsResponse_Entry

// int64 index = 1;
inline void MutateRowsResponse_Entry::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MutateRowsResponse_Entry::index() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsResponse.Entry.index)
  return index_;
}
inline void MutateRowsResponse_Entry::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.MutateRowsResponse.Entry.index)
}

// .google.rpc.Status status = 2;
inline bool MutateRowsResponse_Entry::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void MutateRowsResponse_Entry::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::google::rpc::Status& MutateRowsResponse_Entry::status() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsResponse.Entry.status)
  return status_ != NULL ? *status_
                         : *::google::rpc::Status::internal_default_instance();
}
inline ::google::rpc::Status* MutateRowsResponse_Entry::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsResponse.Entry.status)
  return status_;
}
inline ::google::rpc::Status* MutateRowsResponse_Entry::release_status() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.MutateRowsResponse.Entry.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void MutateRowsResponse_Entry::set_allocated_status(::google::rpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.MutateRowsResponse.Entry.status)
}

// -------------------------------------------------------------------

// MutateRowsResponse

// repeated .google.bigtable.v2.MutateRowsResponse.Entry entries = 1;
inline int MutateRowsResponse::entries_size() const {
  return entries_.size();
}
inline void MutateRowsResponse::clear_entries() {
  entries_.Clear();
}
inline const ::google::bigtable::v2::MutateRowsResponse_Entry& MutateRowsResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.MutateRowsResponse.entries)
  return entries_.Get(index);
}
inline ::google::bigtable::v2::MutateRowsResponse_Entry* MutateRowsResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.MutateRowsResponse.entries)
  return entries_.Mutable(index);
}
inline ::google::bigtable::v2::MutateRowsResponse_Entry* MutateRowsResponse::add_entries() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.MutateRowsResponse.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >*
MutateRowsResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.MutateRowsResponse.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::MutateRowsResponse_Entry >&
MutateRowsResponse::entries() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.MutateRowsResponse.entries)
  return entries_;
}

// -------------------------------------------------------------------

// CheckAndMutateRowRequest

// string table_name = 1;
inline void CheckAndMutateRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckAndMutateRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
  return table_name_.GetNoArena();
}
inline void CheckAndMutateRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}
#if LANG_CXX11
inline void CheckAndMutateRowRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}
#endif
inline void CheckAndMutateRowRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}
inline void CheckAndMutateRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}
inline ::std::string* CheckAndMutateRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckAndMutateRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAndMutateRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.table_name)
}

// bytes row_key = 2;
inline void CheckAndMutateRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckAndMutateRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
  return row_key_.GetNoArena();
}
inline void CheckAndMutateRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}
#if LANG_CXX11
inline void CheckAndMutateRowRequest::set_row_key(::std::string&& value) {
  
  row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}
#endif
inline void CheckAndMutateRowRequest::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}
inline void CheckAndMutateRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}
inline ::std::string* CheckAndMutateRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckAndMutateRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAndMutateRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.row_key)
}

// .google.bigtable.v2.RowFilter predicate_filter = 6;
inline bool CheckAndMutateRowRequest::has_predicate_filter() const {
  return this != internal_default_instance() && predicate_filter_ != NULL;
}
inline void CheckAndMutateRowRequest::clear_predicate_filter() {
  if (GetArenaNoVirtual() == NULL && predicate_filter_ != NULL) delete predicate_filter_;
  predicate_filter_ = NULL;
}
inline const ::google::bigtable::v2::RowFilter& CheckAndMutateRowRequest::predicate_filter() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
  return predicate_filter_ != NULL ? *predicate_filter_
                         : *::google::bigtable::v2::RowFilter::internal_default_instance();
}
inline ::google::bigtable::v2::RowFilter* CheckAndMutateRowRequest::mutable_predicate_filter() {
  
  if (predicate_filter_ == NULL) {
    predicate_filter_ = new ::google::bigtable::v2::RowFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
  return predicate_filter_;
}
inline ::google::bigtable::v2::RowFilter* CheckAndMutateRowRequest::release_predicate_filter() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
  
  ::google::bigtable::v2::RowFilter* temp = predicate_filter_;
  predicate_filter_ = NULL;
  return temp;
}
inline void CheckAndMutateRowRequest::set_allocated_predicate_filter(::google::bigtable::v2::RowFilter* predicate_filter) {
  delete predicate_filter_;
  predicate_filter_ = predicate_filter;
  if (predicate_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.CheckAndMutateRowRequest.predicate_filter)
}

// repeated .google.bigtable.v2.Mutation true_mutations = 4;
inline int CheckAndMutateRowRequest::true_mutations_size() const {
  return true_mutations_.size();
}
inline void CheckAndMutateRowRequest::clear_true_mutations() {
  true_mutations_.Clear();
}
inline const ::google::bigtable::v2::Mutation& CheckAndMutateRowRequest::true_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Get(index);
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::mutable_true_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Mutable(index);
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::add_true_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
CheckAndMutateRowRequest::mutable_true_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return &true_mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
CheckAndMutateRowRequest::true_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.CheckAndMutateRowRequest.true_mutations)
  return true_mutations_;
}

// repeated .google.bigtable.v2.Mutation false_mutations = 5;
inline int CheckAndMutateRowRequest::false_mutations_size() const {
  return false_mutations_.size();
}
inline void CheckAndMutateRowRequest::clear_false_mutations() {
  false_mutations_.Clear();
}
inline const ::google::bigtable::v2::Mutation& CheckAndMutateRowRequest::false_mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Get(index);
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::mutable_false_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Mutable(index);
}
inline ::google::bigtable::v2::Mutation* CheckAndMutateRowRequest::add_false_mutations() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >*
CheckAndMutateRowRequest::mutable_false_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return &false_mutations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::Mutation >&
CheckAndMutateRowRequest::false_mutations() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.CheckAndMutateRowRequest.false_mutations)
  return false_mutations_;
}

// -------------------------------------------------------------------

// CheckAndMutateRowResponse

// bool predicate_matched = 1;
inline void CheckAndMutateRowResponse::clear_predicate_matched() {
  predicate_matched_ = false;
}
inline bool CheckAndMutateRowResponse::predicate_matched() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.CheckAndMutateRowResponse.predicate_matched)
  return predicate_matched_;
}
inline void CheckAndMutateRowResponse::set_predicate_matched(bool value) {
  
  predicate_matched_ = value;
  // @@protoc_insertion_point(field_set:google.bigtable.v2.CheckAndMutateRowResponse.predicate_matched)
}

// -------------------------------------------------------------------

// ReadModifyWriteRowRequest

// string table_name = 1;
inline void ReadModifyWriteRowRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadModifyWriteRowRequest::table_name() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
  return table_name_.GetNoArena();
}
inline void ReadModifyWriteRowRequest::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}
#if LANG_CXX11
inline void ReadModifyWriteRowRequest::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}
#endif
inline void ReadModifyWriteRowRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}
inline void ReadModifyWriteRowRequest::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}
inline ::std::string* ReadModifyWriteRowRequest::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadModifyWriteRowRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadModifyWriteRowRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowRequest.table_name)
}

// bytes row_key = 2;
inline void ReadModifyWriteRowRequest::clear_row_key() {
  row_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadModifyWriteRowRequest::row_key() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
  return row_key_.GetNoArena();
}
inline void ReadModifyWriteRowRequest::set_row_key(const ::std::string& value) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}
#if LANG_CXX11
inline void ReadModifyWriteRowRequest::set_row_key(::std::string&& value) {
  
  row_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}
#endif
inline void ReadModifyWriteRowRequest::set_row_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}
inline void ReadModifyWriteRowRequest::set_row_key(const void* value, size_t size) {
  
  row_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}
inline ::std::string* ReadModifyWriteRowRequest::mutable_row_key() {
  
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
  return row_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadModifyWriteRowRequest::release_row_key() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
  
  return row_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadModifyWriteRowRequest::set_allocated_row_key(::std::string* row_key) {
  if (row_key != NULL) {
    
  } else {
    
  }
  row_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row_key);
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowRequest.row_key)
}

// repeated .google.bigtable.v2.ReadModifyWriteRule rules = 3;
inline int ReadModifyWriteRowRequest::rules_size() const {
  return rules_.size();
}
inline void ReadModifyWriteRowRequest::clear_rules() {
  rules_.Clear();
}
inline const ::google::bigtable::v2::ReadModifyWriteRule& ReadModifyWriteRowRequest::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return rules_.Get(index);
}
inline ::google::bigtable::v2::ReadModifyWriteRule* ReadModifyWriteRowRequest::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return rules_.Mutable(index);
}
inline ::google::bigtable::v2::ReadModifyWriteRule* ReadModifyWriteRowRequest::add_rules() {
  // @@protoc_insertion_point(field_add:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return rules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >*
ReadModifyWriteRowRequest::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return &rules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::bigtable::v2::ReadModifyWriteRule >&
ReadModifyWriteRowRequest::rules() const {
  // @@protoc_insertion_point(field_list:google.bigtable.v2.ReadModifyWriteRowRequest.rules)
  return rules_;
}

// -------------------------------------------------------------------

// ReadModifyWriteRowResponse

// .google.bigtable.v2.Row row = 1;
inline bool ReadModifyWriteRowResponse::has_row() const {
  return this != internal_default_instance() && row_ != NULL;
}
inline void ReadModifyWriteRowResponse::clear_row() {
  if (GetArenaNoVirtual() == NULL && row_ != NULL) delete row_;
  row_ = NULL;
}
inline const ::google::bigtable::v2::Row& ReadModifyWriteRowResponse::row() const {
  // @@protoc_insertion_point(field_get:google.bigtable.v2.ReadModifyWriteRowResponse.row)
  return row_ != NULL ? *row_
                         : *::google::bigtable::v2::Row::internal_default_instance();
}
inline ::google::bigtable::v2::Row* ReadModifyWriteRowResponse::mutable_row() {
  
  if (row_ == NULL) {
    row_ = new ::google::bigtable::v2::Row;
  }
  // @@protoc_insertion_point(field_mutable:google.bigtable.v2.ReadModifyWriteRowResponse.row)
  return row_;
}
inline ::google::bigtable::v2::Row* ReadModifyWriteRowResponse::release_row() {
  // @@protoc_insertion_point(field_release:google.bigtable.v2.ReadModifyWriteRowResponse.row)
  
  ::google::bigtable::v2::Row* temp = row_;
  row_ = NULL;
  return temp;
}
inline void ReadModifyWriteRowResponse::set_allocated_row(::google::bigtable::v2::Row* row) {
  delete row_;
  row_ = row;
  if (row) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.bigtable.v2.ReadModifyWriteRowResponse.row)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v2
}  // namespace bigtable
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fbigtable_2fv2_2fbigtable_2eproto__INCLUDED
