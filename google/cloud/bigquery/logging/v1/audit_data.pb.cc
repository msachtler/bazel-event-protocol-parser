// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/logging/v1/audit_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/cloud/bigquery/logging/v1/audit_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace cloud {
namespace bigquery {
namespace logging {
namespace v1 {
class AuditDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuditData> {
  public:
  const ::google::cloud::bigquery::logging::v1::TableInsertRequest* table_insert_request_;
  const ::google::cloud::bigquery::logging::v1::TableUpdateRequest* table_update_request_;
  const ::google::cloud::bigquery::logging::v1::DatasetListRequest* dataset_list_request_;
  const ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* dataset_insert_request_;
  const ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* dataset_update_request_;
  const ::google::cloud::bigquery::logging::v1::JobInsertRequest* job_insert_request_;
  const ::google::cloud::bigquery::logging::v1::JobQueryRequest* job_query_request_;
  const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* job_get_query_results_request_;
  const ::google::cloud::bigquery::logging::v1::TableDataListRequest* table_data_list_request_;
  const ::google::cloud::bigquery::logging::v1::TableInsertResponse* table_insert_response_;
  const ::google::cloud::bigquery::logging::v1::TableUpdateResponse* table_update_response_;
  const ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* dataset_insert_response_;
  const ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* dataset_update_response_;
  const ::google::cloud::bigquery::logging::v1::JobInsertResponse* job_insert_response_;
  const ::google::cloud::bigquery::logging::v1::JobQueryResponse* job_query_response_;
  const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* job_get_query_results_response_;
  const ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* job_query_done_response_;
} _AuditData_default_instance_;
class TableInsertRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableInsertRequest> {
} _TableInsertRequest_default_instance_;
class TableUpdateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableUpdateRequest> {
} _TableUpdateRequest_default_instance_;
class TableInsertResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableInsertResponse> {
} _TableInsertResponse_default_instance_;
class TableUpdateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableUpdateResponse> {
} _TableUpdateResponse_default_instance_;
class DatasetListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DatasetListRequest> {
} _DatasetListRequest_default_instance_;
class DatasetInsertRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DatasetInsertRequest> {
} _DatasetInsertRequest_default_instance_;
class DatasetInsertResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DatasetInsertResponse> {
} _DatasetInsertResponse_default_instance_;
class DatasetUpdateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DatasetUpdateRequest> {
} _DatasetUpdateRequest_default_instance_;
class DatasetUpdateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DatasetUpdateResponse> {
} _DatasetUpdateResponse_default_instance_;
class JobInsertRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobInsertRequest> {
} _JobInsertRequest_default_instance_;
class JobInsertResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobInsertResponse> {
} _JobInsertResponse_default_instance_;
class JobQueryRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobQueryRequest> {
} _JobQueryRequest_default_instance_;
class JobQueryResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobQueryResponse> {
} _JobQueryResponse_default_instance_;
class JobGetQueryResultsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobGetQueryResultsRequest> {
} _JobGetQueryResultsRequest_default_instance_;
class JobGetQueryResultsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobGetQueryResultsResponse> {
} _JobGetQueryResultsResponse_default_instance_;
class JobQueryDoneResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobQueryDoneResponse> {
} _JobQueryDoneResponse_default_instance_;
class JobCompletedEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobCompletedEvent> {
} _JobCompletedEvent_default_instance_;
class TableDataListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableDataListRequest> {
} _TableDataListRequest_default_instance_;
class TableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Table> {
} _Table_default_instance_;
class TableInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableInfo> {
} _TableInfo_default_instance_;
class TableViewDefinitionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableViewDefinition> {
} _TableViewDefinition_default_instance_;
class DatasetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dataset> {
} _Dataset_default_instance_;
class DatasetInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DatasetInfo> {
} _DatasetInfo_default_instance_;
class BigQueryAcl_EntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BigQueryAcl_Entry> {
} _BigQueryAcl_Entry_default_instance_;
class BigQueryAclDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BigQueryAcl> {
} _BigQueryAcl_default_instance_;
class JobDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Job> {
} _Job_default_instance_;
class JobConfiguration_QueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobConfiguration_Query> {
} _JobConfiguration_Query_default_instance_;
class JobConfiguration_LoadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobConfiguration_Load> {
} _JobConfiguration_Load_default_instance_;
class JobConfiguration_ExtractDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobConfiguration_Extract> {
} _JobConfiguration_Extract_default_instance_;
class JobConfiguration_TableCopyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobConfiguration_TableCopy> {
} _JobConfiguration_TableCopy_default_instance_;
class JobConfigurationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobConfiguration> {
  public:
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* query_;
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* load_;
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* extract_;
  const ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* table_copy_;
} _JobConfiguration_default_instance_;
class TableDefinitionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableDefinition> {
} _TableDefinition_default_instance_;
class JobStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobStatus> {
} _JobStatus_default_instance_;
class JobStatisticsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobStatistics> {
} _JobStatistics_default_instance_;
class DatasetNameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DatasetName> {
} _DatasetName_default_instance_;
class TableNameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableName> {
} _TableName_default_instance_;
class JobNameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JobName> {
} _JobName_default_instance_;

namespace protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[38];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditData, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), table_insert_request_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), table_update_request_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), dataset_list_request_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), dataset_insert_request_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), dataset_update_request_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), job_insert_request_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), job_query_request_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), job_get_query_results_request_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), table_data_list_request_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), table_insert_response_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), table_update_response_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), dataset_insert_response_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), dataset_update_response_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), job_insert_response_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), job_query_response_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), job_get_query_results_response_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AuditData_default_instance_), job_query_done_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditData, job_completed_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditData, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuditData, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInsertRequest, resource_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableUpdateRequest, resource_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInsertResponse, resource_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableUpdateResponse, resource_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetListRequest, list_all_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInsertRequest, resource_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInsertResponse, resource_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetUpdateRequest, resource_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetUpdateResponse, resource_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInsertRequest, resource_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInsertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobInsertResponse, resource_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobQueryRequest, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobQueryRequest, max_results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobQueryRequest, default_dataset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobQueryRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobQueryRequest, dry_run_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobQueryResponse, total_results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobQueryResponse, job_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobGetQueryResultsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobGetQueryResultsRequest, max_results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobGetQueryResultsRequest, start_row_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobGetQueryResultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobGetQueryResultsResponse, total_results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobGetQueryResultsResponse, job_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobQueryDoneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobQueryDoneResponse, job_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobCompletedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobCompletedEvent, event_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobCompletedEvent, job_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataListRequest, start_row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDataListRequest, max_results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, schema_json_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, expire_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, truncate_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfo, friendly_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfo, description_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableViewDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableViewDefinition, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, dataset_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, acl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, default_table_expire_duration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInfo, friendly_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInfo, description_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigQueryAcl_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigQueryAcl_Entry, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigQueryAcl_Entry, group_email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigQueryAcl_Entry, user_email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigQueryAcl_Entry, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigQueryAcl_Entry, special_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigQueryAcl_Entry, view_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigQueryAcl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigQueryAcl, entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, job_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, job_configuration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, job_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, job_statistics_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Query, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Query, destination_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Query, create_disposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Query, write_disposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Query, default_dataset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Query, table_definitions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Load, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Load, source_uris_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Load, schema_json_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Load, destination_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Load, create_disposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Load, write_disposition_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Extract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Extract, destination_uris_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_Extract, source_table_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_TableCopy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_TableCopy, source_tables_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_TableCopy, destination_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_TableCopy, create_disposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration_TableCopy, write_disposition_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_JobConfiguration_default_instance_), query_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_JobConfiguration_default_instance_), load_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_JobConfiguration_default_instance_), extract_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_JobConfiguration_default_instance_), table_copy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration, dry_run_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobConfiguration, configuration_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDefinition, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableDefinition, source_uris_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatistics, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatistics, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatistics, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatistics, total_processed_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatistics, total_billed_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatistics, billing_tier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetName, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetName, dataset_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, dataset_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, table_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobName, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobName, job_id_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(AuditData)},
  { 25, -1, sizeof(TableInsertRequest)},
  { 31, -1, sizeof(TableUpdateRequest)},
  { 37, -1, sizeof(TableInsertResponse)},
  { 43, -1, sizeof(TableUpdateResponse)},
  { 49, -1, sizeof(DatasetListRequest)},
  { 55, -1, sizeof(DatasetInsertRequest)},
  { 61, -1, sizeof(DatasetInsertResponse)},
  { 67, -1, sizeof(DatasetUpdateRequest)},
  { 73, -1, sizeof(DatasetUpdateResponse)},
  { 79, -1, sizeof(JobInsertRequest)},
  { 85, -1, sizeof(JobInsertResponse)},
  { 91, -1, sizeof(JobQueryRequest)},
  { 101, -1, sizeof(JobQueryResponse)},
  { 108, -1, sizeof(JobGetQueryResultsRequest)},
  { 115, -1, sizeof(JobGetQueryResultsResponse)},
  { 122, -1, sizeof(JobQueryDoneResponse)},
  { 128, -1, sizeof(JobCompletedEvent)},
  { 135, -1, sizeof(TableDataListRequest)},
  { 142, -1, sizeof(Table)},
  { 154, -1, sizeof(TableInfo)},
  { 161, -1, sizeof(TableViewDefinition)},
  { 167, -1, sizeof(Dataset)},
  { 178, -1, sizeof(DatasetInfo)},
  { 185, -1, sizeof(BigQueryAcl_Entry)},
  { 196, -1, sizeof(BigQueryAcl)},
  { 202, -1, sizeof(Job)},
  { 211, -1, sizeof(JobConfiguration_Query)},
  { 222, -1, sizeof(JobConfiguration_Load)},
  { 232, -1, sizeof(JobConfiguration_Extract)},
  { 239, -1, sizeof(JobConfiguration_TableCopy)},
  { 248, -1, sizeof(JobConfiguration)},
  { 259, -1, sizeof(TableDefinition)},
  { 266, -1, sizeof(JobStatus)},
  { 273, -1, sizeof(JobStatistics)},
  { 284, -1, sizeof(DatasetName)},
  { 291, -1, sizeof(TableName)},
  { 299, -1, sizeof(JobName)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AuditData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableInsertRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableInsertResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableUpdateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DatasetListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DatasetInsertRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DatasetInsertResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DatasetUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DatasetUpdateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobInsertRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobInsertResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobQueryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobQueryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobGetQueryResultsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobGetQueryResultsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobQueryDoneResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobCompletedEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableDataListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Table_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableViewDefinition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Dataset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DatasetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BigQueryAcl_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BigQueryAcl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Job_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobConfiguration_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobConfiguration_Load_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobConfiguration_Extract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobConfiguration_TableCopy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableDefinition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DatasetName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JobName_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/cloud/bigquery/logging/v1/audit_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 38);
}

}  // namespace

void TableStruct::Shutdown() {
  _AuditData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TableInsertRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TableUpdateRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TableInsertResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _TableUpdateResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _DatasetListRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _DatasetInsertRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _DatasetInsertResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _DatasetUpdateRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _DatasetUpdateResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _JobInsertRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _JobInsertResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _JobQueryRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _JobQueryResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _JobGetQueryResultsRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _JobGetQueryResultsResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _JobQueryDoneResponse_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _JobCompletedEvent_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _TableDataListRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _Table_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _TableInfo_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _TableViewDefinition_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _Dataset_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _DatasetInfo_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _BigQueryAcl_Entry_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _BigQueryAcl_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _Job_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _JobConfiguration_Query_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _JobConfiguration_Load_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _JobConfiguration_Extract_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _JobConfiguration_TableCopy_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _JobConfiguration_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _TableDefinition_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _JobStatus_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _JobStatistics_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _DatasetName_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _TableName_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _JobName_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::InitDefaults();
  _AuditData_default_instance_.DefaultConstruct();
  _TableInsertRequest_default_instance_.DefaultConstruct();
  _TableUpdateRequest_default_instance_.DefaultConstruct();
  _TableInsertResponse_default_instance_.DefaultConstruct();
  _TableUpdateResponse_default_instance_.DefaultConstruct();
  _DatasetListRequest_default_instance_.DefaultConstruct();
  _DatasetInsertRequest_default_instance_.DefaultConstruct();
  _DatasetInsertResponse_default_instance_.DefaultConstruct();
  _DatasetUpdateRequest_default_instance_.DefaultConstruct();
  _DatasetUpdateResponse_default_instance_.DefaultConstruct();
  _JobInsertRequest_default_instance_.DefaultConstruct();
  _JobInsertResponse_default_instance_.DefaultConstruct();
  _JobQueryRequest_default_instance_.DefaultConstruct();
  _JobQueryResponse_default_instance_.DefaultConstruct();
  _JobGetQueryResultsRequest_default_instance_.DefaultConstruct();
  _JobGetQueryResultsResponse_default_instance_.DefaultConstruct();
  _JobQueryDoneResponse_default_instance_.DefaultConstruct();
  _JobCompletedEvent_default_instance_.DefaultConstruct();
  _TableDataListRequest_default_instance_.DefaultConstruct();
  _Table_default_instance_.DefaultConstruct();
  _TableInfo_default_instance_.DefaultConstruct();
  _TableViewDefinition_default_instance_.DefaultConstruct();
  _Dataset_default_instance_.DefaultConstruct();
  _DatasetInfo_default_instance_.DefaultConstruct();
  _BigQueryAcl_Entry_default_instance_.DefaultConstruct();
  _BigQueryAcl_default_instance_.DefaultConstruct();
  _Job_default_instance_.DefaultConstruct();
  _JobConfiguration_Query_default_instance_.DefaultConstruct();
  _JobConfiguration_Load_default_instance_.DefaultConstruct();
  _JobConfiguration_Extract_default_instance_.DefaultConstruct();
  _JobConfiguration_TableCopy_default_instance_.DefaultConstruct();
  _JobConfiguration_default_instance_.DefaultConstruct();
  _TableDefinition_default_instance_.DefaultConstruct();
  _JobStatus_default_instance_.DefaultConstruct();
  _JobStatistics_default_instance_.DefaultConstruct();
  _DatasetName_default_instance_.DefaultConstruct();
  _TableName_default_instance_.DefaultConstruct();
  _JobName_default_instance_.DefaultConstruct();
  _AuditData_default_instance_.table_insert_request_ = const_cast< ::google::cloud::bigquery::logging::v1::TableInsertRequest*>(
      ::google::cloud::bigquery::logging::v1::TableInsertRequest::internal_default_instance());
  _AuditData_default_instance_.table_update_request_ = const_cast< ::google::cloud::bigquery::logging::v1::TableUpdateRequest*>(
      ::google::cloud::bigquery::logging::v1::TableUpdateRequest::internal_default_instance());
  _AuditData_default_instance_.dataset_list_request_ = const_cast< ::google::cloud::bigquery::logging::v1::DatasetListRequest*>(
      ::google::cloud::bigquery::logging::v1::DatasetListRequest::internal_default_instance());
  _AuditData_default_instance_.dataset_insert_request_ = const_cast< ::google::cloud::bigquery::logging::v1::DatasetInsertRequest*>(
      ::google::cloud::bigquery::logging::v1::DatasetInsertRequest::internal_default_instance());
  _AuditData_default_instance_.dataset_update_request_ = const_cast< ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest*>(
      ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest::internal_default_instance());
  _AuditData_default_instance_.job_insert_request_ = const_cast< ::google::cloud::bigquery::logging::v1::JobInsertRequest*>(
      ::google::cloud::bigquery::logging::v1::JobInsertRequest::internal_default_instance());
  _AuditData_default_instance_.job_query_request_ = const_cast< ::google::cloud::bigquery::logging::v1::JobQueryRequest*>(
      ::google::cloud::bigquery::logging::v1::JobQueryRequest::internal_default_instance());
  _AuditData_default_instance_.job_get_query_results_request_ = const_cast< ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest*>(
      ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest::internal_default_instance());
  _AuditData_default_instance_.table_data_list_request_ = const_cast< ::google::cloud::bigquery::logging::v1::TableDataListRequest*>(
      ::google::cloud::bigquery::logging::v1::TableDataListRequest::internal_default_instance());
  _AuditData_default_instance_.table_insert_response_ = const_cast< ::google::cloud::bigquery::logging::v1::TableInsertResponse*>(
      ::google::cloud::bigquery::logging::v1::TableInsertResponse::internal_default_instance());
  _AuditData_default_instance_.table_update_response_ = const_cast< ::google::cloud::bigquery::logging::v1::TableUpdateResponse*>(
      ::google::cloud::bigquery::logging::v1::TableUpdateResponse::internal_default_instance());
  _AuditData_default_instance_.dataset_insert_response_ = const_cast< ::google::cloud::bigquery::logging::v1::DatasetInsertResponse*>(
      ::google::cloud::bigquery::logging::v1::DatasetInsertResponse::internal_default_instance());
  _AuditData_default_instance_.dataset_update_response_ = const_cast< ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse*>(
      ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse::internal_default_instance());
  _AuditData_default_instance_.job_insert_response_ = const_cast< ::google::cloud::bigquery::logging::v1::JobInsertResponse*>(
      ::google::cloud::bigquery::logging::v1::JobInsertResponse::internal_default_instance());
  _AuditData_default_instance_.job_query_response_ = const_cast< ::google::cloud::bigquery::logging::v1::JobQueryResponse*>(
      ::google::cloud::bigquery::logging::v1::JobQueryResponse::internal_default_instance());
  _AuditData_default_instance_.job_get_query_results_response_ = const_cast< ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse*>(
      ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse::internal_default_instance());
  _AuditData_default_instance_.job_query_done_response_ = const_cast< ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse*>(
      ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse::internal_default_instance());
  _AuditData_default_instance_.get_mutable()->job_completed_event_ = const_cast< ::google::cloud::bigquery::logging::v1::JobCompletedEvent*>(
      ::google::cloud::bigquery::logging::v1::JobCompletedEvent::internal_default_instance());
  _TableInsertRequest_default_instance_.get_mutable()->resource_ = const_cast< ::google::cloud::bigquery::logging::v1::Table*>(
      ::google::cloud::bigquery::logging::v1::Table::internal_default_instance());
  _TableUpdateRequest_default_instance_.get_mutable()->resource_ = const_cast< ::google::cloud::bigquery::logging::v1::Table*>(
      ::google::cloud::bigquery::logging::v1::Table::internal_default_instance());
  _TableInsertResponse_default_instance_.get_mutable()->resource_ = const_cast< ::google::cloud::bigquery::logging::v1::Table*>(
      ::google::cloud::bigquery::logging::v1::Table::internal_default_instance());
  _TableUpdateResponse_default_instance_.get_mutable()->resource_ = const_cast< ::google::cloud::bigquery::logging::v1::Table*>(
      ::google::cloud::bigquery::logging::v1::Table::internal_default_instance());
  _DatasetInsertRequest_default_instance_.get_mutable()->resource_ = const_cast< ::google::cloud::bigquery::logging::v1::Dataset*>(
      ::google::cloud::bigquery::logging::v1::Dataset::internal_default_instance());
  _DatasetInsertResponse_default_instance_.get_mutable()->resource_ = const_cast< ::google::cloud::bigquery::logging::v1::Dataset*>(
      ::google::cloud::bigquery::logging::v1::Dataset::internal_default_instance());
  _DatasetUpdateRequest_default_instance_.get_mutable()->resource_ = const_cast< ::google::cloud::bigquery::logging::v1::Dataset*>(
      ::google::cloud::bigquery::logging::v1::Dataset::internal_default_instance());
  _DatasetUpdateResponse_default_instance_.get_mutable()->resource_ = const_cast< ::google::cloud::bigquery::logging::v1::Dataset*>(
      ::google::cloud::bigquery::logging::v1::Dataset::internal_default_instance());
  _JobInsertRequest_default_instance_.get_mutable()->resource_ = const_cast< ::google::cloud::bigquery::logging::v1::Job*>(
      ::google::cloud::bigquery::logging::v1::Job::internal_default_instance());
  _JobInsertResponse_default_instance_.get_mutable()->resource_ = const_cast< ::google::cloud::bigquery::logging::v1::Job*>(
      ::google::cloud::bigquery::logging::v1::Job::internal_default_instance());
  _JobQueryRequest_default_instance_.get_mutable()->default_dataset_ = const_cast< ::google::cloud::bigquery::logging::v1::DatasetName*>(
      ::google::cloud::bigquery::logging::v1::DatasetName::internal_default_instance());
  _JobQueryResponse_default_instance_.get_mutable()->job_ = const_cast< ::google::cloud::bigquery::logging::v1::Job*>(
      ::google::cloud::bigquery::logging::v1::Job::internal_default_instance());
  _JobGetQueryResultsResponse_default_instance_.get_mutable()->job_ = const_cast< ::google::cloud::bigquery::logging::v1::Job*>(
      ::google::cloud::bigquery::logging::v1::Job::internal_default_instance());
  _JobQueryDoneResponse_default_instance_.get_mutable()->job_ = const_cast< ::google::cloud::bigquery::logging::v1::Job*>(
      ::google::cloud::bigquery::logging::v1::Job::internal_default_instance());
  _JobCompletedEvent_default_instance_.get_mutable()->job_ = const_cast< ::google::cloud::bigquery::logging::v1::Job*>(
      ::google::cloud::bigquery::logging::v1::Job::internal_default_instance());
  _Table_default_instance_.get_mutable()->table_name_ = const_cast< ::google::cloud::bigquery::logging::v1::TableName*>(
      ::google::cloud::bigquery::logging::v1::TableName::internal_default_instance());
  _Table_default_instance_.get_mutable()->info_ = const_cast< ::google::cloud::bigquery::logging::v1::TableInfo*>(
      ::google::cloud::bigquery::logging::v1::TableInfo::internal_default_instance());
  _Table_default_instance_.get_mutable()->view_ = const_cast< ::google::cloud::bigquery::logging::v1::TableViewDefinition*>(
      ::google::cloud::bigquery::logging::v1::TableViewDefinition::internal_default_instance());
  _Table_default_instance_.get_mutable()->expire_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Table_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Table_default_instance_.get_mutable()->truncate_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Dataset_default_instance_.get_mutable()->dataset_name_ = const_cast< ::google::cloud::bigquery::logging::v1::DatasetName*>(
      ::google::cloud::bigquery::logging::v1::DatasetName::internal_default_instance());
  _Dataset_default_instance_.get_mutable()->info_ = const_cast< ::google::cloud::bigquery::logging::v1::DatasetInfo*>(
      ::google::cloud::bigquery::logging::v1::DatasetInfo::internal_default_instance());
  _Dataset_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Dataset_default_instance_.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Dataset_default_instance_.get_mutable()->acl_ = const_cast< ::google::cloud::bigquery::logging::v1::BigQueryAcl*>(
      ::google::cloud::bigquery::logging::v1::BigQueryAcl::internal_default_instance());
  _Dataset_default_instance_.get_mutable()->default_table_expire_duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _BigQueryAcl_Entry_default_instance_.get_mutable()->view_name_ = const_cast< ::google::cloud::bigquery::logging::v1::TableName*>(
      ::google::cloud::bigquery::logging::v1::TableName::internal_default_instance());
  _Job_default_instance_.get_mutable()->job_name_ = const_cast< ::google::cloud::bigquery::logging::v1::JobName*>(
      ::google::cloud::bigquery::logging::v1::JobName::internal_default_instance());
  _Job_default_instance_.get_mutable()->job_configuration_ = const_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration*>(
      ::google::cloud::bigquery::logging::v1::JobConfiguration::internal_default_instance());
  _Job_default_instance_.get_mutable()->job_status_ = const_cast< ::google::cloud::bigquery::logging::v1::JobStatus*>(
      ::google::cloud::bigquery::logging::v1::JobStatus::internal_default_instance());
  _Job_default_instance_.get_mutable()->job_statistics_ = const_cast< ::google::cloud::bigquery::logging::v1::JobStatistics*>(
      ::google::cloud::bigquery::logging::v1::JobStatistics::internal_default_instance());
  _JobConfiguration_Query_default_instance_.get_mutable()->destination_table_ = const_cast< ::google::cloud::bigquery::logging::v1::TableName*>(
      ::google::cloud::bigquery::logging::v1::TableName::internal_default_instance());
  _JobConfiguration_Query_default_instance_.get_mutable()->default_dataset_ = const_cast< ::google::cloud::bigquery::logging::v1::DatasetName*>(
      ::google::cloud::bigquery::logging::v1::DatasetName::internal_default_instance());
  _JobConfiguration_Load_default_instance_.get_mutable()->destination_table_ = const_cast< ::google::cloud::bigquery::logging::v1::TableName*>(
      ::google::cloud::bigquery::logging::v1::TableName::internal_default_instance());
  _JobConfiguration_Extract_default_instance_.get_mutable()->source_table_ = const_cast< ::google::cloud::bigquery::logging::v1::TableName*>(
      ::google::cloud::bigquery::logging::v1::TableName::internal_default_instance());
  _JobConfiguration_TableCopy_default_instance_.get_mutable()->destination_table_ = const_cast< ::google::cloud::bigquery::logging::v1::TableName*>(
      ::google::cloud::bigquery::logging::v1::TableName::internal_default_instance());
  _JobConfiguration_default_instance_.query_ = const_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration_Query*>(
      ::google::cloud::bigquery::logging::v1::JobConfiguration_Query::internal_default_instance());
  _JobConfiguration_default_instance_.load_ = const_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration_Load*>(
      ::google::cloud::bigquery::logging::v1::JobConfiguration_Load::internal_default_instance());
  _JobConfiguration_default_instance_.extract_ = const_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract*>(
      ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract::internal_default_instance());
  _JobConfiguration_default_instance_.table_copy_ = const_cast< ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy*>(
      ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy::internal_default_instance());
  _JobStatus_default_instance_.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  _JobStatistics_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _JobStatistics_default_instance_.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _JobStatistics_default_instance_.get_mutable()->end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n1google/cloud/bigquery/logging/v1/audit"
      "_data.proto\022 google.cloud.bigquery.loggi"
      "ng.v1\032\034google/api/annotations.proto\032\036goo"
      "gle/protobuf/duration.proto\032\037google/prot"
      "obuf/timestamp.proto\032\027google/rpc/status."
      "proto\"\336\014\n\tAuditData\022T\n\024table_insert_requ"
      "est\030\001 \001(\01324.google.cloud.bigquery.loggin"
      "g.v1.TableInsertRequestH\000\022T\n\024table_updat"
      "e_request\030\020 \001(\01324.google.cloud.bigquery."
      "logging.v1.TableUpdateRequestH\000\022T\n\024datas"
      "et_list_request\030\002 \001(\01324.google.cloud.big"
      "query.logging.v1.DatasetListRequestH\000\022X\n"
      "\026dataset_insert_request\030\003 \001(\01326.google.c"
      "loud.bigquery.logging.v1.DatasetInsertRe"
      "questH\000\022X\n\026dataset_update_request\030\004 \001(\0132"
      "6.google.cloud.bigquery.logging.v1.Datas"
      "etUpdateRequestH\000\022P\n\022job_insert_request\030"
      "\005 \001(\01322.google.cloud.bigquery.logging.v1"
      ".JobInsertRequestH\000\022N\n\021job_query_request"
      "\030\006 \001(\01321.google.cloud.bigquery.logging.v"
      "1.JobQueryRequestH\000\022d\n\035job_get_query_res"
      "ults_request\030\007 \001(\0132;.google.cloud.bigque"
      "ry.logging.v1.JobGetQueryResultsRequestH"
      "\000\022Y\n\027table_data_list_request\030\010 \001(\01326.goo"
      "gle.cloud.bigquery.logging.v1.TableDataL"
      "istRequestH\000\022V\n\025table_insert_response\030\t "
      "\001(\01325.google.cloud.bigquery.logging.v1.T"
      "ableInsertResponseH\001\022V\n\025table_update_res"
      "ponse\030\n \001(\01325.google.cloud.bigquery.logg"
      "ing.v1.TableUpdateResponseH\001\022Z\n\027dataset_"
      "insert_response\030\013 \001(\01327.google.cloud.big"
      "query.logging.v1.DatasetInsertResponseH\001"
      "\022Z\n\027dataset_update_response\030\014 \001(\01327.goog"
      "le.cloud.bigquery.logging.v1.DatasetUpda"
      "teResponseH\001\022R\n\023job_insert_response\030\022 \001("
      "\01323.google.cloud.bigquery.logging.v1.Job"
      "InsertResponseH\001\022P\n\022job_query_response\030\r"
      " \001(\01322.google.cloud.bigquery.logging.v1."
      "JobQueryResponseH\001\022f\n\036job_get_query_resu"
      "lts_response\030\016 \001(\0132<.google.cloud.bigque"
      "ry.logging.v1.JobGetQueryResultsResponse"
      "H\001\022Y\n\027job_query_done_response\030\017 \001(\01326.go"
      "ogle.cloud.bigquery.logging.v1.JobQueryD"
      "oneResponseH\001\022P\n\023job_completed_event\030\021 \001"
      "(\01323.google.cloud.bigquery.logging.v1.Jo"
      "bCompletedEventB\t\n\007requestB\n\n\010response\"O"
      "\n\022TableInsertRequest\0229\n\010resource\030\001 \001(\0132\'"
      ".google.cloud.bigquery.logging.v1.Table\""
      "O\n\022TableUpdateRequest\0229\n\010resource\030\001 \001(\0132"
      "\'.google.cloud.bigquery.logging.v1.Table"
      "\"P\n\023TableInsertResponse\0229\n\010resource\030\001 \001("
      "\0132\'.google.cloud.bigquery.logging.v1.Tab"
      "le\"P\n\023TableUpdateResponse\0229\n\010resource\030\001 "
      "\001(\0132\'.google.cloud.bigquery.logging.v1.T"
      "able\"&\n\022DatasetListRequest\022\020\n\010list_all\030\001"
      " \001(\010\"S\n\024DatasetInsertRequest\022;\n\010resource"
      "\030\001 \001(\0132).google.cloud.bigquery.logging.v"
      "1.Dataset\"T\n\025DatasetInsertResponse\022;\n\010re"
      "source\030\001 \001(\0132).google.cloud.bigquery.log"
      "ging.v1.Dataset\"S\n\024DatasetUpdateRequest\022"
      ";\n\010resource\030\001 \001(\0132).google.cloud.bigquer"
      "y.logging.v1.Dataset\"T\n\025DatasetUpdateRes"
      "ponse\022;\n\010resource\030\001 \001(\0132).google.cloud.b"
      "igquery.logging.v1.Dataset\"K\n\020JobInsertR"
      "equest\0227\n\010resource\030\001 \001(\0132%.google.cloud."
      "bigquery.logging.v1.Job\"L\n\021JobInsertResp"
      "onse\0227\n\010resource\030\001 \001(\0132%.google.cloud.bi"
      "gquery.logging.v1.Job\"\242\001\n\017JobQueryReques"
      "t\022\r\n\005query\030\001 \001(\t\022\023\n\013max_results\030\002 \001(\r\022F\n"
      "\017default_dataset\030\003 \001(\0132-.google.cloud.bi"
      "gquery.logging.v1.DatasetName\022\022\n\nproject"
      "_id\030\004 \001(\t\022\017\n\007dry_run\030\005 \001(\010\"]\n\020JobQueryRe"
      "sponse\022\025\n\rtotal_results\030\001 \001(\004\0222\n\003job\030\002 \001"
      "(\0132%.google.cloud.bigquery.logging.v1.Jo"
      "b\"C\n\031JobGetQueryResultsRequest\022\023\n\013max_re"
      "sults\030\001 \001(\r\022\021\n\tstart_row\030\002 \001(\004\"g\n\032JobGet"
      "QueryResultsResponse\022\025\n\rtotal_results\030\001 "
      "\001(\004\0222\n\003job\030\002 \001(\0132%.google.cloud.bigquery"
      ".logging.v1.Job\"J\n\024JobQueryDoneResponse\022"
      "2\n\003job\030\001 \001(\0132%.google.cloud.bigquery.log"
      "ging.v1.Job\"[\n\021JobCompletedEvent\022\022\n\neven"
      "t_name\030\001 \001(\t\0222\n\003job\030\002 \001(\0132%.google.cloud"
      ".bigquery.logging.v1.Job\">\n\024TableDataLis"
      "tRequest\022\021\n\tstart_row\030\001 \001(\004\022\023\n\013max_resul"
      "ts\030\002 \001(\r\"\362\002\n\005Table\022\?\n\ntable_name\030\001 \001(\0132+"
      ".google.cloud.bigquery.logging.v1.TableN"
      "ame\0229\n\004info\030\002 \001(\0132+.google.cloud.bigquer"
      "y.logging.v1.TableInfo\022\023\n\013schema_json\030\010 "
      "\001(\t\022C\n\004view\030\004 \001(\01325.google.cloud.bigquer"
      "y.logging.v1.TableViewDefinition\022/\n\013expi"
      "re_time\030\005 \001(\0132\032.google.protobuf.Timestam"
      "p\022/\n\013create_time\030\006 \001(\0132\032.google.protobuf"
      ".Timestamp\0221\n\rtruncate_time\030\007 \001(\0132\032.goog"
      "le.protobuf.Timestamp\"7\n\tTableInfo\022\025\n\rfr"
      "iendly_name\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\"$"
      "\n\023TableViewDefinition\022\r\n\005query\030\001 \001(\t\"\353\002\n"
      "\007Dataset\022C\n\014dataset_name\030\001 \001(\0132-.google."
      "cloud.bigquery.logging.v1.DatasetName\022;\n"
      "\004info\030\002 \001(\0132-.google.cloud.bigquery.logg"
      "ing.v1.DatasetInfo\022/\n\013create_time\030\004 \001(\0132"
      "\032.google.protobuf.Timestamp\022/\n\013update_ti"
      "me\030\005 \001(\0132\032.google.protobuf.Timestamp\022:\n\003"
      "acl\030\006 \001(\0132-.google.cloud.bigquery.loggin"
      "g.v1.BigQueryAcl\022@\n\035default_table_expire"
      "_duration\030\010 \001(\0132\031.google.protobuf.Durati"
      "on\"9\n\013DatasetInfo\022\025\n\rfriendly_name\030\001 \001(\t"
      "\022\023\n\013description\030\002 \001(\t\"\373\001\n\013BigQueryAcl\022D\n"
      "\007entries\030\001 \003(\01323.google.cloud.bigquery.l"
      "ogging.v1.BigQueryAcl.Entry\032\245\001\n\005Entry\022\014\n"
      "\004role\030\001 \001(\t\022\023\n\013group_email\030\002 \001(\t\022\022\n\nuser"
      "_email\030\003 \001(\t\022\016\n\006domain\030\004 \001(\t\022\025\n\rspecial_"
      "group\030\005 \001(\t\022>\n\tview_name\030\006 \001(\0132+.google."
      "cloud.bigquery.logging.v1.TableName\"\233\002\n\003"
      "Job\022;\n\010job_name\030\001 \001(\0132).google.cloud.big"
      "query.logging.v1.JobName\022M\n\021job_configur"
      "ation\030\002 \001(\01322.google.cloud.bigquery.logg"
      "ing.v1.JobConfiguration\022\?\n\njob_status\030\003 "
      "\001(\0132+.google.cloud.bigquery.logging.v1.J"
      "obStatus\022G\n\016job_statistics\030\004 \001(\0132/.googl"
      "e.cloud.bigquery.logging.v1.JobStatistic"
      "s\"\204\t\n\020JobConfiguration\022I\n\005query\030\005 \001(\01328."
      "google.cloud.bigquery.logging.v1.JobConf"
      "iguration.QueryH\000\022G\n\004load\030\006 \001(\01327.google"
      ".cloud.bigquery.logging.v1.JobConfigurat"
      "ion.LoadH\000\022M\n\007extract\030\007 \001(\0132:.google.clo"
      "ud.bigquery.logging.v1.JobConfiguration."
      "ExtractH\000\022R\n\ntable_copy\030\010 \001(\0132<.google.c"
      "loud.bigquery.logging.v1.JobConfiguratio"
      "n.TableCopyH\000\022\017\n\007dry_run\030\t \001(\010\032\253\002\n\005Query"
      "\022\r\n\005query\030\001 \001(\t\022F\n\021destination_table\030\002 \001"
      "(\0132+.google.cloud.bigquery.logging.v1.Ta"
      "bleName\022\032\n\022create_disposition\030\003 \001(\t\022\031\n\021w"
      "rite_disposition\030\004 \001(\t\022F\n\017default_datase"
      "t\030\005 \001(\0132-.google.cloud.bigquery.logging."
      "v1.DatasetName\022L\n\021table_definitions\030\006 \003("
      "\01321.google.cloud.bigquery.logging.v1.Tab"
      "leDefinition\032\257\001\n\004Load\022\023\n\013source_uris\030\001 \003"
      "(\t\022\023\n\013schema_json\030\006 \001(\t\022F\n\021destination_t"
      "able\030\003 \001(\0132+.google.cloud.bigquery.loggi"
      "ng.v1.TableName\022\032\n\022create_disposition\030\004 "
      "\001(\t\022\031\n\021write_disposition\030\005 \001(\t\032f\n\007Extrac"
      "t\022\030\n\020destination_uris\030\001 \003(\t\022A\n\014source_ta"
      "ble\030\002 \001(\0132+.google.cloud.bigquery.loggin"
      "g.v1.TableName\032\316\001\n\tTableCopy\022B\n\rsource_t"
      "ables\030\001 \003(\0132+.google.cloud.bigquery.logg"
      "ing.v1.TableName\022F\n\021destination_table\030\002 "
      "\001(\0132+.google.cloud.bigquery.logging.v1.T"
      "ableName\022\032\n\022create_disposition\030\003 \001(\t\022\031\n\021"
      "write_disposition\030\004 \001(\tB\017\n\rconfiguration"
      "\"4\n\017TableDefinition\022\014\n\004name\030\001 \001(\t\022\023\n\013sou"
      "rce_uris\030\002 \003(\t\"=\n\tJobStatus\022\r\n\005state\030\001 \001"
      "(\t\022!\n\005error\030\002 \001(\0132\022.google.rpc.Status\"\357\001"
      "\n\rJobStatistics\022/\n\013create_time\030\001 \001(\0132\032.g"
      "oogle.protobuf.Timestamp\022.\n\nstart_time\030\002"
      " \001(\0132\032.google.protobuf.Timestamp\022,\n\010end_"
      "time\030\003 \001(\0132\032.google.protobuf.Timestamp\022\035"
      "\n\025total_processed_bytes\030\004 \001(\003\022\032\n\022total_b"
      "illed_bytes\030\005 \001(\003\022\024\n\014billing_tier\030\007 \001(\005\""
      "5\n\013DatasetName\022\022\n\nproject_id\030\001 \001(\t\022\022\n\nda"
      "taset_id\030\002 \001(\t\"E\n\tTableName\022\022\n\nproject_i"
      "d\030\001 \001(\t\022\022\n\ndataset_id\030\002 \001(\t\022\020\n\010table_id\030"
      "\003 \001(\t\"-\n\007JobName\022\022\n\nproject_id\030\001 \001(\t\022\016\n\006"
      "job_id\030\002 \001(\tB\201\001\n$com.google.cloud.bigque"
      "ry.logging.v1B\016AuditDataProtoP\001ZGgoogle."
      "golang.org/genproto/googleapis/cloud/big"
      "query/logging/v1;loggingb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6632);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/bigquery/logging/v1/audit_data.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuditData::kTableInsertRequestFieldNumber;
const int AuditData::kTableUpdateRequestFieldNumber;
const int AuditData::kDatasetListRequestFieldNumber;
const int AuditData::kDatasetInsertRequestFieldNumber;
const int AuditData::kDatasetUpdateRequestFieldNumber;
const int AuditData::kJobInsertRequestFieldNumber;
const int AuditData::kJobQueryRequestFieldNumber;
const int AuditData::kJobGetQueryResultsRequestFieldNumber;
const int AuditData::kTableDataListRequestFieldNumber;
const int AuditData::kTableInsertResponseFieldNumber;
const int AuditData::kTableUpdateResponseFieldNumber;
const int AuditData::kDatasetInsertResponseFieldNumber;
const int AuditData::kDatasetUpdateResponseFieldNumber;
const int AuditData::kJobInsertResponseFieldNumber;
const int AuditData::kJobQueryResponseFieldNumber;
const int AuditData::kJobGetQueryResultsResponseFieldNumber;
const int AuditData::kJobQueryDoneResponseFieldNumber;
const int AuditData::kJobCompletedEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuditData::AuditData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.AuditData)
}
AuditData::AuditData(const AuditData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_job_completed_event()) {
    job_completed_event_ = new ::google::cloud::bigquery::logging::v1::JobCompletedEvent(*from.job_completed_event_);
  } else {
    job_completed_event_ = NULL;
  }
  clear_has_request();
  switch (from.request_case()) {
    case kTableInsertRequest: {
      mutable_table_insert_request()->::google::cloud::bigquery::logging::v1::TableInsertRequest::MergeFrom(from.table_insert_request());
      break;
    }
    case kTableUpdateRequest: {
      mutable_table_update_request()->::google::cloud::bigquery::logging::v1::TableUpdateRequest::MergeFrom(from.table_update_request());
      break;
    }
    case kDatasetListRequest: {
      mutable_dataset_list_request()->::google::cloud::bigquery::logging::v1::DatasetListRequest::MergeFrom(from.dataset_list_request());
      break;
    }
    case kDatasetInsertRequest: {
      mutable_dataset_insert_request()->::google::cloud::bigquery::logging::v1::DatasetInsertRequest::MergeFrom(from.dataset_insert_request());
      break;
    }
    case kDatasetUpdateRequest: {
      mutable_dataset_update_request()->::google::cloud::bigquery::logging::v1::DatasetUpdateRequest::MergeFrom(from.dataset_update_request());
      break;
    }
    case kJobInsertRequest: {
      mutable_job_insert_request()->::google::cloud::bigquery::logging::v1::JobInsertRequest::MergeFrom(from.job_insert_request());
      break;
    }
    case kJobQueryRequest: {
      mutable_job_query_request()->::google::cloud::bigquery::logging::v1::JobQueryRequest::MergeFrom(from.job_query_request());
      break;
    }
    case kJobGetQueryResultsRequest: {
      mutable_job_get_query_results_request()->::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest::MergeFrom(from.job_get_query_results_request());
      break;
    }
    case kTableDataListRequest: {
      mutable_table_data_list_request()->::google::cloud::bigquery::logging::v1::TableDataListRequest::MergeFrom(from.table_data_list_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  clear_has_response();
  switch (from.response_case()) {
    case kTableInsertResponse: {
      mutable_table_insert_response()->::google::cloud::bigquery::logging::v1::TableInsertResponse::MergeFrom(from.table_insert_response());
      break;
    }
    case kTableUpdateResponse: {
      mutable_table_update_response()->::google::cloud::bigquery::logging::v1::TableUpdateResponse::MergeFrom(from.table_update_response());
      break;
    }
    case kDatasetInsertResponse: {
      mutable_dataset_insert_response()->::google::cloud::bigquery::logging::v1::DatasetInsertResponse::MergeFrom(from.dataset_insert_response());
      break;
    }
    case kDatasetUpdateResponse: {
      mutable_dataset_update_response()->::google::cloud::bigquery::logging::v1::DatasetUpdateResponse::MergeFrom(from.dataset_update_response());
      break;
    }
    case kJobInsertResponse: {
      mutable_job_insert_response()->::google::cloud::bigquery::logging::v1::JobInsertResponse::MergeFrom(from.job_insert_response());
      break;
    }
    case kJobQueryResponse: {
      mutable_job_query_response()->::google::cloud::bigquery::logging::v1::JobQueryResponse::MergeFrom(from.job_query_response());
      break;
    }
    case kJobGetQueryResultsResponse: {
      mutable_job_get_query_results_response()->::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse::MergeFrom(from.job_get_query_results_response());
      break;
    }
    case kJobQueryDoneResponse: {
      mutable_job_query_done_response()->::google::cloud::bigquery::logging::v1::JobQueryDoneResponse::MergeFrom(from.job_query_done_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.AuditData)
}

void AuditData::SharedCtor() {
  job_completed_event_ = NULL;
  clear_has_request();
  clear_has_response();
  _cached_size_ = 0;
}

AuditData::~AuditData() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.AuditData)
  SharedDtor();
}

void AuditData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete job_completed_event_;
  }
  if (has_request()) {
    clear_request();
  }
  if (has_response()) {
    clear_response();
  }
}

void AuditData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuditData::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuditData& AuditData::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuditData* AuditData::New(::google::protobuf::Arena* arena) const {
  AuditData* n = new AuditData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuditData::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.bigquery.logging.v1.AuditData)
  switch (request_case()) {
    case kTableInsertRequest: {
      delete request_.table_insert_request_;
      break;
    }
    case kTableUpdateRequest: {
      delete request_.table_update_request_;
      break;
    }
    case kDatasetListRequest: {
      delete request_.dataset_list_request_;
      break;
    }
    case kDatasetInsertRequest: {
      delete request_.dataset_insert_request_;
      break;
    }
    case kDatasetUpdateRequest: {
      delete request_.dataset_update_request_;
      break;
    }
    case kJobInsertRequest: {
      delete request_.job_insert_request_;
      break;
    }
    case kJobQueryRequest: {
      delete request_.job_query_request_;
      break;
    }
    case kJobGetQueryResultsRequest: {
      delete request_.job_get_query_results_request_;
      break;
    }
    case kTableDataListRequest: {
      delete request_.table_data_list_request_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}

void AuditData::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.bigquery.logging.v1.AuditData)
  switch (response_case()) {
    case kTableInsertResponse: {
      delete response_.table_insert_response_;
      break;
    }
    case kTableUpdateResponse: {
      delete response_.table_update_response_;
      break;
    }
    case kDatasetInsertResponse: {
      delete response_.dataset_insert_response_;
      break;
    }
    case kDatasetUpdateResponse: {
      delete response_.dataset_update_response_;
      break;
    }
    case kJobInsertResponse: {
      delete response_.job_insert_response_;
      break;
    }
    case kJobQueryResponse: {
      delete response_.job_query_response_;
      break;
    }
    case kJobGetQueryResultsResponse: {
      delete response_.job_get_query_results_response_;
      break;
    }
    case kJobQueryDoneResponse: {
      delete response_.job_query_done_response_;
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = RESPONSE_NOT_SET;
}


void AuditData::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.AuditData)
  if (GetArenaNoVirtual() == NULL && job_completed_event_ != NULL) {
    delete job_completed_event_;
  }
  job_completed_event_ = NULL;
  clear_request();
  clear_response();
}

bool AuditData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.AuditData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.TableInsertRequest table_insert_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_insert_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.DatasetListRequest dataset_list_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset_list_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.DatasetInsertRequest dataset_insert_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset_insert_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.DatasetUpdateRequest dataset_update_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset_update_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobInsertRequest job_insert_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_insert_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobQueryRequest job_query_request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_query_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest job_get_query_results_request = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_get_query_results_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.TableDataListRequest table_data_list_request = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_data_list_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.TableInsertResponse table_insert_response = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_insert_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.TableUpdateResponse table_update_response = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_update_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.DatasetInsertResponse dataset_insert_response = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset_insert_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.DatasetUpdateResponse dataset_update_response = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset_update_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobQueryResponse job_query_response = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_query_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse job_get_query_results_response = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_get_query_results_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobQueryDoneResponse job_query_done_response = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_query_done_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.TableUpdateRequest table_update_request = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_update_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobCompletedEvent job_completed_event = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_completed_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobInsertResponse job_insert_response = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_insert_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.AuditData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.AuditData)
  return false;
#undef DO_
}

void AuditData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.AuditData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.TableInsertRequest table_insert_request = 1;
  if (has_table_insert_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *request_.table_insert_request_, output);
  }

  // .google.cloud.bigquery.logging.v1.DatasetListRequest dataset_list_request = 2;
  if (has_dataset_list_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *request_.dataset_list_request_, output);
  }

  // .google.cloud.bigquery.logging.v1.DatasetInsertRequest dataset_insert_request = 3;
  if (has_dataset_insert_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *request_.dataset_insert_request_, output);
  }

  // .google.cloud.bigquery.logging.v1.DatasetUpdateRequest dataset_update_request = 4;
  if (has_dataset_update_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *request_.dataset_update_request_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobInsertRequest job_insert_request = 5;
  if (has_job_insert_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *request_.job_insert_request_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobQueryRequest job_query_request = 6;
  if (has_job_query_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *request_.job_query_request_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest job_get_query_results_request = 7;
  if (has_job_get_query_results_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *request_.job_get_query_results_request_, output);
  }

  // .google.cloud.bigquery.logging.v1.TableDataListRequest table_data_list_request = 8;
  if (has_table_data_list_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *request_.table_data_list_request_, output);
  }

  // .google.cloud.bigquery.logging.v1.TableInsertResponse table_insert_response = 9;
  if (has_table_insert_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *response_.table_insert_response_, output);
  }

  // .google.cloud.bigquery.logging.v1.TableUpdateResponse table_update_response = 10;
  if (has_table_update_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *response_.table_update_response_, output);
  }

  // .google.cloud.bigquery.logging.v1.DatasetInsertResponse dataset_insert_response = 11;
  if (has_dataset_insert_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *response_.dataset_insert_response_, output);
  }

  // .google.cloud.bigquery.logging.v1.DatasetUpdateResponse dataset_update_response = 12;
  if (has_dataset_update_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *response_.dataset_update_response_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobQueryResponse job_query_response = 13;
  if (has_job_query_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *response_.job_query_response_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse job_get_query_results_response = 14;
  if (has_job_get_query_results_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *response_.job_get_query_results_response_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobQueryDoneResponse job_query_done_response = 15;
  if (has_job_query_done_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *response_.job_query_done_response_, output);
  }

  // .google.cloud.bigquery.logging.v1.TableUpdateRequest table_update_request = 16;
  if (has_table_update_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *request_.table_update_request_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobCompletedEvent job_completed_event = 17;
  if (this->has_job_completed_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->job_completed_event_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobInsertResponse job_insert_response = 18;
  if (has_job_insert_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *response_.job_insert_response_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.AuditData)
}

::google::protobuf::uint8* AuditData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.AuditData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.TableInsertRequest table_insert_request = 1;
  if (has_table_insert_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *request_.table_insert_request_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.DatasetListRequest dataset_list_request = 2;
  if (has_dataset_list_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *request_.dataset_list_request_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.DatasetInsertRequest dataset_insert_request = 3;
  if (has_dataset_insert_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *request_.dataset_insert_request_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.DatasetUpdateRequest dataset_update_request = 4;
  if (has_dataset_update_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *request_.dataset_update_request_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobInsertRequest job_insert_request = 5;
  if (has_job_insert_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *request_.job_insert_request_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobQueryRequest job_query_request = 6;
  if (has_job_query_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *request_.job_query_request_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest job_get_query_results_request = 7;
  if (has_job_get_query_results_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *request_.job_get_query_results_request_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.TableDataListRequest table_data_list_request = 8;
  if (has_table_data_list_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *request_.table_data_list_request_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.TableInsertResponse table_insert_response = 9;
  if (has_table_insert_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *response_.table_insert_response_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.TableUpdateResponse table_update_response = 10;
  if (has_table_update_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *response_.table_update_response_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.DatasetInsertResponse dataset_insert_response = 11;
  if (has_dataset_insert_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *response_.dataset_insert_response_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.DatasetUpdateResponse dataset_update_response = 12;
  if (has_dataset_update_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *response_.dataset_update_response_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobQueryResponse job_query_response = 13;
  if (has_job_query_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *response_.job_query_response_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse job_get_query_results_response = 14;
  if (has_job_get_query_results_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *response_.job_get_query_results_response_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobQueryDoneResponse job_query_done_response = 15;
  if (has_job_query_done_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *response_.job_query_done_response_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.TableUpdateRequest table_update_request = 16;
  if (has_table_update_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *request_.table_update_request_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobCompletedEvent job_completed_event = 17;
  if (this->has_job_completed_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->job_completed_event_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobInsertResponse job_insert_response = 18;
  if (has_job_insert_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *response_.job_insert_response_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.AuditData)
  return target;
}

size_t AuditData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.AuditData)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.JobCompletedEvent job_completed_event = 17;
  if (this->has_job_completed_event()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->job_completed_event_);
  }

  switch (request_case()) {
    // .google.cloud.bigquery.logging.v1.TableInsertRequest table_insert_request = 1;
    case kTableInsertRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.table_insert_request_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.TableUpdateRequest table_update_request = 16;
    case kTableUpdateRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.table_update_request_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.DatasetListRequest dataset_list_request = 2;
    case kDatasetListRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.dataset_list_request_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.DatasetInsertRequest dataset_insert_request = 3;
    case kDatasetInsertRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.dataset_insert_request_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.DatasetUpdateRequest dataset_update_request = 4;
    case kDatasetUpdateRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.dataset_update_request_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.JobInsertRequest job_insert_request = 5;
    case kJobInsertRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.job_insert_request_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.JobQueryRequest job_query_request = 6;
    case kJobQueryRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.job_query_request_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest job_get_query_results_request = 7;
    case kJobGetQueryResultsRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.job_get_query_results_request_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.TableDataListRequest table_data_list_request = 8;
    case kTableDataListRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.table_data_list_request_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  switch (response_case()) {
    // .google.cloud.bigquery.logging.v1.TableInsertResponse table_insert_response = 9;
    case kTableInsertResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.table_insert_response_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.TableUpdateResponse table_update_response = 10;
    case kTableUpdateResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.table_update_response_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.DatasetInsertResponse dataset_insert_response = 11;
    case kDatasetInsertResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.dataset_insert_response_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.DatasetUpdateResponse dataset_update_response = 12;
    case kDatasetUpdateResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.dataset_update_response_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.JobInsertResponse job_insert_response = 18;
    case kJobInsertResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.job_insert_response_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.JobQueryResponse job_query_response = 13;
    case kJobQueryResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.job_query_response_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse job_get_query_results_response = 14;
    case kJobGetQueryResultsResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.job_get_query_results_response_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.JobQueryDoneResponse job_query_done_response = 15;
    case kJobQueryDoneResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.job_query_done_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuditData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.AuditData)
  GOOGLE_DCHECK_NE(&from, this);
  const AuditData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuditData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.AuditData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.AuditData)
    MergeFrom(*source);
  }
}

void AuditData::MergeFrom(const AuditData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.AuditData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_job_completed_event()) {
    mutable_job_completed_event()->::google::cloud::bigquery::logging::v1::JobCompletedEvent::MergeFrom(from.job_completed_event());
  }
  switch (from.request_case()) {
    case kTableInsertRequest: {
      mutable_table_insert_request()->::google::cloud::bigquery::logging::v1::TableInsertRequest::MergeFrom(from.table_insert_request());
      break;
    }
    case kTableUpdateRequest: {
      mutable_table_update_request()->::google::cloud::bigquery::logging::v1::TableUpdateRequest::MergeFrom(from.table_update_request());
      break;
    }
    case kDatasetListRequest: {
      mutable_dataset_list_request()->::google::cloud::bigquery::logging::v1::DatasetListRequest::MergeFrom(from.dataset_list_request());
      break;
    }
    case kDatasetInsertRequest: {
      mutable_dataset_insert_request()->::google::cloud::bigquery::logging::v1::DatasetInsertRequest::MergeFrom(from.dataset_insert_request());
      break;
    }
    case kDatasetUpdateRequest: {
      mutable_dataset_update_request()->::google::cloud::bigquery::logging::v1::DatasetUpdateRequest::MergeFrom(from.dataset_update_request());
      break;
    }
    case kJobInsertRequest: {
      mutable_job_insert_request()->::google::cloud::bigquery::logging::v1::JobInsertRequest::MergeFrom(from.job_insert_request());
      break;
    }
    case kJobQueryRequest: {
      mutable_job_query_request()->::google::cloud::bigquery::logging::v1::JobQueryRequest::MergeFrom(from.job_query_request());
      break;
    }
    case kJobGetQueryResultsRequest: {
      mutable_job_get_query_results_request()->::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest::MergeFrom(from.job_get_query_results_request());
      break;
    }
    case kTableDataListRequest: {
      mutable_table_data_list_request()->::google::cloud::bigquery::logging::v1::TableDataListRequest::MergeFrom(from.table_data_list_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  switch (from.response_case()) {
    case kTableInsertResponse: {
      mutable_table_insert_response()->::google::cloud::bigquery::logging::v1::TableInsertResponse::MergeFrom(from.table_insert_response());
      break;
    }
    case kTableUpdateResponse: {
      mutable_table_update_response()->::google::cloud::bigquery::logging::v1::TableUpdateResponse::MergeFrom(from.table_update_response());
      break;
    }
    case kDatasetInsertResponse: {
      mutable_dataset_insert_response()->::google::cloud::bigquery::logging::v1::DatasetInsertResponse::MergeFrom(from.dataset_insert_response());
      break;
    }
    case kDatasetUpdateResponse: {
      mutable_dataset_update_response()->::google::cloud::bigquery::logging::v1::DatasetUpdateResponse::MergeFrom(from.dataset_update_response());
      break;
    }
    case kJobInsertResponse: {
      mutable_job_insert_response()->::google::cloud::bigquery::logging::v1::JobInsertResponse::MergeFrom(from.job_insert_response());
      break;
    }
    case kJobQueryResponse: {
      mutable_job_query_response()->::google::cloud::bigquery::logging::v1::JobQueryResponse::MergeFrom(from.job_query_response());
      break;
    }
    case kJobGetQueryResultsResponse: {
      mutable_job_get_query_results_response()->::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse::MergeFrom(from.job_get_query_results_response());
      break;
    }
    case kJobQueryDoneResponse: {
      mutable_job_query_done_response()->::google::cloud::bigquery::logging::v1::JobQueryDoneResponse::MergeFrom(from.job_query_done_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void AuditData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.AuditData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuditData::CopyFrom(const AuditData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.AuditData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuditData::IsInitialized() const {
  return true;
}

void AuditData::Swap(AuditData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuditData::InternalSwap(AuditData* other) {
  std::swap(job_completed_event_, other->job_completed_event_);
  std::swap(request_, other->request_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(response_, other->response_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuditData::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuditData

// .google.cloud.bigquery.logging.v1.TableInsertRequest table_insert_request = 1;
bool AuditData::has_table_insert_request() const {
  return request_case() == kTableInsertRequest;
}
void AuditData::set_has_table_insert_request() {
  _oneof_case_[0] = kTableInsertRequest;
}
void AuditData::clear_table_insert_request() {
  if (has_table_insert_request()) {
    delete request_.table_insert_request_;
    clear_has_request();
  }
}
 const ::google::cloud::bigquery::logging::v1::TableInsertRequest& AuditData::table_insert_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_insert_request)
  return has_table_insert_request()
      ? *request_.table_insert_request_
      : ::google::cloud::bigquery::logging::v1::TableInsertRequest::default_instance();
}
::google::cloud::bigquery::logging::v1::TableInsertRequest* AuditData::mutable_table_insert_request() {
  if (!has_table_insert_request()) {
    clear_request();
    set_has_table_insert_request();
    request_.table_insert_request_ = new ::google::cloud::bigquery::logging::v1::TableInsertRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_insert_request)
  return request_.table_insert_request_;
}
::google::cloud::bigquery::logging::v1::TableInsertRequest* AuditData::release_table_insert_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_insert_request)
  if (has_table_insert_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::TableInsertRequest* temp = request_.table_insert_request_;
    request_.table_insert_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_table_insert_request(::google::cloud::bigquery::logging::v1::TableInsertRequest* table_insert_request) {
  clear_request();
  if (table_insert_request) {
    set_has_table_insert_request();
    request_.table_insert_request_ = table_insert_request;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.table_insert_request)
}

// .google.cloud.bigquery.logging.v1.TableUpdateRequest table_update_request = 16;
bool AuditData::has_table_update_request() const {
  return request_case() == kTableUpdateRequest;
}
void AuditData::set_has_table_update_request() {
  _oneof_case_[0] = kTableUpdateRequest;
}
void AuditData::clear_table_update_request() {
  if (has_table_update_request()) {
    delete request_.table_update_request_;
    clear_has_request();
  }
}
 const ::google::cloud::bigquery::logging::v1::TableUpdateRequest& AuditData::table_update_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_update_request)
  return has_table_update_request()
      ? *request_.table_update_request_
      : ::google::cloud::bigquery::logging::v1::TableUpdateRequest::default_instance();
}
::google::cloud::bigquery::logging::v1::TableUpdateRequest* AuditData::mutable_table_update_request() {
  if (!has_table_update_request()) {
    clear_request();
    set_has_table_update_request();
    request_.table_update_request_ = new ::google::cloud::bigquery::logging::v1::TableUpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_update_request)
  return request_.table_update_request_;
}
::google::cloud::bigquery::logging::v1::TableUpdateRequest* AuditData::release_table_update_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_update_request)
  if (has_table_update_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::TableUpdateRequest* temp = request_.table_update_request_;
    request_.table_update_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_table_update_request(::google::cloud::bigquery::logging::v1::TableUpdateRequest* table_update_request) {
  clear_request();
  if (table_update_request) {
    set_has_table_update_request();
    request_.table_update_request_ = table_update_request;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.table_update_request)
}

// .google.cloud.bigquery.logging.v1.DatasetListRequest dataset_list_request = 2;
bool AuditData::has_dataset_list_request() const {
  return request_case() == kDatasetListRequest;
}
void AuditData::set_has_dataset_list_request() {
  _oneof_case_[0] = kDatasetListRequest;
}
void AuditData::clear_dataset_list_request() {
  if (has_dataset_list_request()) {
    delete request_.dataset_list_request_;
    clear_has_request();
  }
}
 const ::google::cloud::bigquery::logging::v1::DatasetListRequest& AuditData::dataset_list_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_list_request)
  return has_dataset_list_request()
      ? *request_.dataset_list_request_
      : ::google::cloud::bigquery::logging::v1::DatasetListRequest::default_instance();
}
::google::cloud::bigquery::logging::v1::DatasetListRequest* AuditData::mutable_dataset_list_request() {
  if (!has_dataset_list_request()) {
    clear_request();
    set_has_dataset_list_request();
    request_.dataset_list_request_ = new ::google::cloud::bigquery::logging::v1::DatasetListRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_list_request)
  return request_.dataset_list_request_;
}
::google::cloud::bigquery::logging::v1::DatasetListRequest* AuditData::release_dataset_list_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_list_request)
  if (has_dataset_list_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::DatasetListRequest* temp = request_.dataset_list_request_;
    request_.dataset_list_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_dataset_list_request(::google::cloud::bigquery::logging::v1::DatasetListRequest* dataset_list_request) {
  clear_request();
  if (dataset_list_request) {
    set_has_dataset_list_request();
    request_.dataset_list_request_ = dataset_list_request;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.dataset_list_request)
}

// .google.cloud.bigquery.logging.v1.DatasetInsertRequest dataset_insert_request = 3;
bool AuditData::has_dataset_insert_request() const {
  return request_case() == kDatasetInsertRequest;
}
void AuditData::set_has_dataset_insert_request() {
  _oneof_case_[0] = kDatasetInsertRequest;
}
void AuditData::clear_dataset_insert_request() {
  if (has_dataset_insert_request()) {
    delete request_.dataset_insert_request_;
    clear_has_request();
  }
}
 const ::google::cloud::bigquery::logging::v1::DatasetInsertRequest& AuditData::dataset_insert_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_request)
  return has_dataset_insert_request()
      ? *request_.dataset_insert_request_
      : ::google::cloud::bigquery::logging::v1::DatasetInsertRequest::default_instance();
}
::google::cloud::bigquery::logging::v1::DatasetInsertRequest* AuditData::mutable_dataset_insert_request() {
  if (!has_dataset_insert_request()) {
    clear_request();
    set_has_dataset_insert_request();
    request_.dataset_insert_request_ = new ::google::cloud::bigquery::logging::v1::DatasetInsertRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_request)
  return request_.dataset_insert_request_;
}
::google::cloud::bigquery::logging::v1::DatasetInsertRequest* AuditData::release_dataset_insert_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_request)
  if (has_dataset_insert_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::DatasetInsertRequest* temp = request_.dataset_insert_request_;
    request_.dataset_insert_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_dataset_insert_request(::google::cloud::bigquery::logging::v1::DatasetInsertRequest* dataset_insert_request) {
  clear_request();
  if (dataset_insert_request) {
    set_has_dataset_insert_request();
    request_.dataset_insert_request_ = dataset_insert_request;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_request)
}

// .google.cloud.bigquery.logging.v1.DatasetUpdateRequest dataset_update_request = 4;
bool AuditData::has_dataset_update_request() const {
  return request_case() == kDatasetUpdateRequest;
}
void AuditData::set_has_dataset_update_request() {
  _oneof_case_[0] = kDatasetUpdateRequest;
}
void AuditData::clear_dataset_update_request() {
  if (has_dataset_update_request()) {
    delete request_.dataset_update_request_;
    clear_has_request();
  }
}
 const ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest& AuditData::dataset_update_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_update_request)
  return has_dataset_update_request()
      ? *request_.dataset_update_request_
      : ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest::default_instance();
}
::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* AuditData::mutable_dataset_update_request() {
  if (!has_dataset_update_request()) {
    clear_request();
    set_has_dataset_update_request();
    request_.dataset_update_request_ = new ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_update_request)
  return request_.dataset_update_request_;
}
::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* AuditData::release_dataset_update_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_update_request)
  if (has_dataset_update_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* temp = request_.dataset_update_request_;
    request_.dataset_update_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_dataset_update_request(::google::cloud::bigquery::logging::v1::DatasetUpdateRequest* dataset_update_request) {
  clear_request();
  if (dataset_update_request) {
    set_has_dataset_update_request();
    request_.dataset_update_request_ = dataset_update_request;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.dataset_update_request)
}

// .google.cloud.bigquery.logging.v1.JobInsertRequest job_insert_request = 5;
bool AuditData::has_job_insert_request() const {
  return request_case() == kJobInsertRequest;
}
void AuditData::set_has_job_insert_request() {
  _oneof_case_[0] = kJobInsertRequest;
}
void AuditData::clear_job_insert_request() {
  if (has_job_insert_request()) {
    delete request_.job_insert_request_;
    clear_has_request();
  }
}
 const ::google::cloud::bigquery::logging::v1::JobInsertRequest& AuditData::job_insert_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_insert_request)
  return has_job_insert_request()
      ? *request_.job_insert_request_
      : ::google::cloud::bigquery::logging::v1::JobInsertRequest::default_instance();
}
::google::cloud::bigquery::logging::v1::JobInsertRequest* AuditData::mutable_job_insert_request() {
  if (!has_job_insert_request()) {
    clear_request();
    set_has_job_insert_request();
    request_.job_insert_request_ = new ::google::cloud::bigquery::logging::v1::JobInsertRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_insert_request)
  return request_.job_insert_request_;
}
::google::cloud::bigquery::logging::v1::JobInsertRequest* AuditData::release_job_insert_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_insert_request)
  if (has_job_insert_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::JobInsertRequest* temp = request_.job_insert_request_;
    request_.job_insert_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_job_insert_request(::google::cloud::bigquery::logging::v1::JobInsertRequest* job_insert_request) {
  clear_request();
  if (job_insert_request) {
    set_has_job_insert_request();
    request_.job_insert_request_ = job_insert_request;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_insert_request)
}

// .google.cloud.bigquery.logging.v1.JobQueryRequest job_query_request = 6;
bool AuditData::has_job_query_request() const {
  return request_case() == kJobQueryRequest;
}
void AuditData::set_has_job_query_request() {
  _oneof_case_[0] = kJobQueryRequest;
}
void AuditData::clear_job_query_request() {
  if (has_job_query_request()) {
    delete request_.job_query_request_;
    clear_has_request();
  }
}
 const ::google::cloud::bigquery::logging::v1::JobQueryRequest& AuditData::job_query_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_query_request)
  return has_job_query_request()
      ? *request_.job_query_request_
      : ::google::cloud::bigquery::logging::v1::JobQueryRequest::default_instance();
}
::google::cloud::bigquery::logging::v1::JobQueryRequest* AuditData::mutable_job_query_request() {
  if (!has_job_query_request()) {
    clear_request();
    set_has_job_query_request();
    request_.job_query_request_ = new ::google::cloud::bigquery::logging::v1::JobQueryRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_query_request)
  return request_.job_query_request_;
}
::google::cloud::bigquery::logging::v1::JobQueryRequest* AuditData::release_job_query_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_query_request)
  if (has_job_query_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::JobQueryRequest* temp = request_.job_query_request_;
    request_.job_query_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_job_query_request(::google::cloud::bigquery::logging::v1::JobQueryRequest* job_query_request) {
  clear_request();
  if (job_query_request) {
    set_has_job_query_request();
    request_.job_query_request_ = job_query_request;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_query_request)
}

// .google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest job_get_query_results_request = 7;
bool AuditData::has_job_get_query_results_request() const {
  return request_case() == kJobGetQueryResultsRequest;
}
void AuditData::set_has_job_get_query_results_request() {
  _oneof_case_[0] = kJobGetQueryResultsRequest;
}
void AuditData::clear_job_get_query_results_request() {
  if (has_job_get_query_results_request()) {
    delete request_.job_get_query_results_request_;
    clear_has_request();
  }
}
 const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest& AuditData::job_get_query_results_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_request)
  return has_job_get_query_results_request()
      ? *request_.job_get_query_results_request_
      : ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest::default_instance();
}
::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* AuditData::mutable_job_get_query_results_request() {
  if (!has_job_get_query_results_request()) {
    clear_request();
    set_has_job_get_query_results_request();
    request_.job_get_query_results_request_ = new ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_request)
  return request_.job_get_query_results_request_;
}
::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* AuditData::release_job_get_query_results_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_request)
  if (has_job_get_query_results_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* temp = request_.job_get_query_results_request_;
    request_.job_get_query_results_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_job_get_query_results_request(::google::cloud::bigquery::logging::v1::JobGetQueryResultsRequest* job_get_query_results_request) {
  clear_request();
  if (job_get_query_results_request) {
    set_has_job_get_query_results_request();
    request_.job_get_query_results_request_ = job_get_query_results_request;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_request)
}

// .google.cloud.bigquery.logging.v1.TableDataListRequest table_data_list_request = 8;
bool AuditData::has_table_data_list_request() const {
  return request_case() == kTableDataListRequest;
}
void AuditData::set_has_table_data_list_request() {
  _oneof_case_[0] = kTableDataListRequest;
}
void AuditData::clear_table_data_list_request() {
  if (has_table_data_list_request()) {
    delete request_.table_data_list_request_;
    clear_has_request();
  }
}
 const ::google::cloud::bigquery::logging::v1::TableDataListRequest& AuditData::table_data_list_request() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_data_list_request)
  return has_table_data_list_request()
      ? *request_.table_data_list_request_
      : ::google::cloud::bigquery::logging::v1::TableDataListRequest::default_instance();
}
::google::cloud::bigquery::logging::v1::TableDataListRequest* AuditData::mutable_table_data_list_request() {
  if (!has_table_data_list_request()) {
    clear_request();
    set_has_table_data_list_request();
    request_.table_data_list_request_ = new ::google::cloud::bigquery::logging::v1::TableDataListRequest;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_data_list_request)
  return request_.table_data_list_request_;
}
::google::cloud::bigquery::logging::v1::TableDataListRequest* AuditData::release_table_data_list_request() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_data_list_request)
  if (has_table_data_list_request()) {
    clear_has_request();
    ::google::cloud::bigquery::logging::v1::TableDataListRequest* temp = request_.table_data_list_request_;
    request_.table_data_list_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_table_data_list_request(::google::cloud::bigquery::logging::v1::TableDataListRequest* table_data_list_request) {
  clear_request();
  if (table_data_list_request) {
    set_has_table_data_list_request();
    request_.table_data_list_request_ = table_data_list_request;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.table_data_list_request)
}

// .google.cloud.bigquery.logging.v1.TableInsertResponse table_insert_response = 9;
bool AuditData::has_table_insert_response() const {
  return response_case() == kTableInsertResponse;
}
void AuditData::set_has_table_insert_response() {
  _oneof_case_[1] = kTableInsertResponse;
}
void AuditData::clear_table_insert_response() {
  if (has_table_insert_response()) {
    delete response_.table_insert_response_;
    clear_has_response();
  }
}
 const ::google::cloud::bigquery::logging::v1::TableInsertResponse& AuditData::table_insert_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_insert_response)
  return has_table_insert_response()
      ? *response_.table_insert_response_
      : ::google::cloud::bigquery::logging::v1::TableInsertResponse::default_instance();
}
::google::cloud::bigquery::logging::v1::TableInsertResponse* AuditData::mutable_table_insert_response() {
  if (!has_table_insert_response()) {
    clear_response();
    set_has_table_insert_response();
    response_.table_insert_response_ = new ::google::cloud::bigquery::logging::v1::TableInsertResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_insert_response)
  return response_.table_insert_response_;
}
::google::cloud::bigquery::logging::v1::TableInsertResponse* AuditData::release_table_insert_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_insert_response)
  if (has_table_insert_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::TableInsertResponse* temp = response_.table_insert_response_;
    response_.table_insert_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_table_insert_response(::google::cloud::bigquery::logging::v1::TableInsertResponse* table_insert_response) {
  clear_response();
  if (table_insert_response) {
    set_has_table_insert_response();
    response_.table_insert_response_ = table_insert_response;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.table_insert_response)
}

// .google.cloud.bigquery.logging.v1.TableUpdateResponse table_update_response = 10;
bool AuditData::has_table_update_response() const {
  return response_case() == kTableUpdateResponse;
}
void AuditData::set_has_table_update_response() {
  _oneof_case_[1] = kTableUpdateResponse;
}
void AuditData::clear_table_update_response() {
  if (has_table_update_response()) {
    delete response_.table_update_response_;
    clear_has_response();
  }
}
 const ::google::cloud::bigquery::logging::v1::TableUpdateResponse& AuditData::table_update_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.table_update_response)
  return has_table_update_response()
      ? *response_.table_update_response_
      : ::google::cloud::bigquery::logging::v1::TableUpdateResponse::default_instance();
}
::google::cloud::bigquery::logging::v1::TableUpdateResponse* AuditData::mutable_table_update_response() {
  if (!has_table_update_response()) {
    clear_response();
    set_has_table_update_response();
    response_.table_update_response_ = new ::google::cloud::bigquery::logging::v1::TableUpdateResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.table_update_response)
  return response_.table_update_response_;
}
::google::cloud::bigquery::logging::v1::TableUpdateResponse* AuditData::release_table_update_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.table_update_response)
  if (has_table_update_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::TableUpdateResponse* temp = response_.table_update_response_;
    response_.table_update_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_table_update_response(::google::cloud::bigquery::logging::v1::TableUpdateResponse* table_update_response) {
  clear_response();
  if (table_update_response) {
    set_has_table_update_response();
    response_.table_update_response_ = table_update_response;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.table_update_response)
}

// .google.cloud.bigquery.logging.v1.DatasetInsertResponse dataset_insert_response = 11;
bool AuditData::has_dataset_insert_response() const {
  return response_case() == kDatasetInsertResponse;
}
void AuditData::set_has_dataset_insert_response() {
  _oneof_case_[1] = kDatasetInsertResponse;
}
void AuditData::clear_dataset_insert_response() {
  if (has_dataset_insert_response()) {
    delete response_.dataset_insert_response_;
    clear_has_response();
  }
}
 const ::google::cloud::bigquery::logging::v1::DatasetInsertResponse& AuditData::dataset_insert_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_response)
  return has_dataset_insert_response()
      ? *response_.dataset_insert_response_
      : ::google::cloud::bigquery::logging::v1::DatasetInsertResponse::default_instance();
}
::google::cloud::bigquery::logging::v1::DatasetInsertResponse* AuditData::mutable_dataset_insert_response() {
  if (!has_dataset_insert_response()) {
    clear_response();
    set_has_dataset_insert_response();
    response_.dataset_insert_response_ = new ::google::cloud::bigquery::logging::v1::DatasetInsertResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_response)
  return response_.dataset_insert_response_;
}
::google::cloud::bigquery::logging::v1::DatasetInsertResponse* AuditData::release_dataset_insert_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_response)
  if (has_dataset_insert_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::DatasetInsertResponse* temp = response_.dataset_insert_response_;
    response_.dataset_insert_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_dataset_insert_response(::google::cloud::bigquery::logging::v1::DatasetInsertResponse* dataset_insert_response) {
  clear_response();
  if (dataset_insert_response) {
    set_has_dataset_insert_response();
    response_.dataset_insert_response_ = dataset_insert_response;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.dataset_insert_response)
}

// .google.cloud.bigquery.logging.v1.DatasetUpdateResponse dataset_update_response = 12;
bool AuditData::has_dataset_update_response() const {
  return response_case() == kDatasetUpdateResponse;
}
void AuditData::set_has_dataset_update_response() {
  _oneof_case_[1] = kDatasetUpdateResponse;
}
void AuditData::clear_dataset_update_response() {
  if (has_dataset_update_response()) {
    delete response_.dataset_update_response_;
    clear_has_response();
  }
}
 const ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse& AuditData::dataset_update_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.dataset_update_response)
  return has_dataset_update_response()
      ? *response_.dataset_update_response_
      : ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse::default_instance();
}
::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* AuditData::mutable_dataset_update_response() {
  if (!has_dataset_update_response()) {
    clear_response();
    set_has_dataset_update_response();
    response_.dataset_update_response_ = new ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.dataset_update_response)
  return response_.dataset_update_response_;
}
::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* AuditData::release_dataset_update_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.dataset_update_response)
  if (has_dataset_update_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* temp = response_.dataset_update_response_;
    response_.dataset_update_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_dataset_update_response(::google::cloud::bigquery::logging::v1::DatasetUpdateResponse* dataset_update_response) {
  clear_response();
  if (dataset_update_response) {
    set_has_dataset_update_response();
    response_.dataset_update_response_ = dataset_update_response;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.dataset_update_response)
}

// .google.cloud.bigquery.logging.v1.JobInsertResponse job_insert_response = 18;
bool AuditData::has_job_insert_response() const {
  return response_case() == kJobInsertResponse;
}
void AuditData::set_has_job_insert_response() {
  _oneof_case_[1] = kJobInsertResponse;
}
void AuditData::clear_job_insert_response() {
  if (has_job_insert_response()) {
    delete response_.job_insert_response_;
    clear_has_response();
  }
}
 const ::google::cloud::bigquery::logging::v1::JobInsertResponse& AuditData::job_insert_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_insert_response)
  return has_job_insert_response()
      ? *response_.job_insert_response_
      : ::google::cloud::bigquery::logging::v1::JobInsertResponse::default_instance();
}
::google::cloud::bigquery::logging::v1::JobInsertResponse* AuditData::mutable_job_insert_response() {
  if (!has_job_insert_response()) {
    clear_response();
    set_has_job_insert_response();
    response_.job_insert_response_ = new ::google::cloud::bigquery::logging::v1::JobInsertResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_insert_response)
  return response_.job_insert_response_;
}
::google::cloud::bigquery::logging::v1::JobInsertResponse* AuditData::release_job_insert_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_insert_response)
  if (has_job_insert_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::JobInsertResponse* temp = response_.job_insert_response_;
    response_.job_insert_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_job_insert_response(::google::cloud::bigquery::logging::v1::JobInsertResponse* job_insert_response) {
  clear_response();
  if (job_insert_response) {
    set_has_job_insert_response();
    response_.job_insert_response_ = job_insert_response;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_insert_response)
}

// .google.cloud.bigquery.logging.v1.JobQueryResponse job_query_response = 13;
bool AuditData::has_job_query_response() const {
  return response_case() == kJobQueryResponse;
}
void AuditData::set_has_job_query_response() {
  _oneof_case_[1] = kJobQueryResponse;
}
void AuditData::clear_job_query_response() {
  if (has_job_query_response()) {
    delete response_.job_query_response_;
    clear_has_response();
  }
}
 const ::google::cloud::bigquery::logging::v1::JobQueryResponse& AuditData::job_query_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_query_response)
  return has_job_query_response()
      ? *response_.job_query_response_
      : ::google::cloud::bigquery::logging::v1::JobQueryResponse::default_instance();
}
::google::cloud::bigquery::logging::v1::JobQueryResponse* AuditData::mutable_job_query_response() {
  if (!has_job_query_response()) {
    clear_response();
    set_has_job_query_response();
    response_.job_query_response_ = new ::google::cloud::bigquery::logging::v1::JobQueryResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_query_response)
  return response_.job_query_response_;
}
::google::cloud::bigquery::logging::v1::JobQueryResponse* AuditData::release_job_query_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_query_response)
  if (has_job_query_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::JobQueryResponse* temp = response_.job_query_response_;
    response_.job_query_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_job_query_response(::google::cloud::bigquery::logging::v1::JobQueryResponse* job_query_response) {
  clear_response();
  if (job_query_response) {
    set_has_job_query_response();
    response_.job_query_response_ = job_query_response;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_query_response)
}

// .google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse job_get_query_results_response = 14;
bool AuditData::has_job_get_query_results_response() const {
  return response_case() == kJobGetQueryResultsResponse;
}
void AuditData::set_has_job_get_query_results_response() {
  _oneof_case_[1] = kJobGetQueryResultsResponse;
}
void AuditData::clear_job_get_query_results_response() {
  if (has_job_get_query_results_response()) {
    delete response_.job_get_query_results_response_;
    clear_has_response();
  }
}
 const ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse& AuditData::job_get_query_results_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_response)
  return has_job_get_query_results_response()
      ? *response_.job_get_query_results_response_
      : ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse::default_instance();
}
::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* AuditData::mutable_job_get_query_results_response() {
  if (!has_job_get_query_results_response()) {
    clear_response();
    set_has_job_get_query_results_response();
    response_.job_get_query_results_response_ = new ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_response)
  return response_.job_get_query_results_response_;
}
::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* AuditData::release_job_get_query_results_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_response)
  if (has_job_get_query_results_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* temp = response_.job_get_query_results_response_;
    response_.job_get_query_results_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_job_get_query_results_response(::google::cloud::bigquery::logging::v1::JobGetQueryResultsResponse* job_get_query_results_response) {
  clear_response();
  if (job_get_query_results_response) {
    set_has_job_get_query_results_response();
    response_.job_get_query_results_response_ = job_get_query_results_response;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_get_query_results_response)
}

// .google.cloud.bigquery.logging.v1.JobQueryDoneResponse job_query_done_response = 15;
bool AuditData::has_job_query_done_response() const {
  return response_case() == kJobQueryDoneResponse;
}
void AuditData::set_has_job_query_done_response() {
  _oneof_case_[1] = kJobQueryDoneResponse;
}
void AuditData::clear_job_query_done_response() {
  if (has_job_query_done_response()) {
    delete response_.job_query_done_response_;
    clear_has_response();
  }
}
 const ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse& AuditData::job_query_done_response() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_query_done_response)
  return has_job_query_done_response()
      ? *response_.job_query_done_response_
      : ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse::default_instance();
}
::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* AuditData::mutable_job_query_done_response() {
  if (!has_job_query_done_response()) {
    clear_response();
    set_has_job_query_done_response();
    response_.job_query_done_response_ = new ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_query_done_response)
  return response_.job_query_done_response_;
}
::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* AuditData::release_job_query_done_response() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_query_done_response)
  if (has_job_query_done_response()) {
    clear_has_response();
    ::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* temp = response_.job_query_done_response_;
    response_.job_query_done_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AuditData::set_allocated_job_query_done_response(::google::cloud::bigquery::logging::v1::JobQueryDoneResponse* job_query_done_response) {
  clear_response();
  if (job_query_done_response) {
    set_has_job_query_done_response();
    response_.job_query_done_response_ = job_query_done_response;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_query_done_response)
}

// .google.cloud.bigquery.logging.v1.JobCompletedEvent job_completed_event = 17;
bool AuditData::has_job_completed_event() const {
  return this != internal_default_instance() && job_completed_event_ != NULL;
}
void AuditData::clear_job_completed_event() {
  if (GetArenaNoVirtual() == NULL && job_completed_event_ != NULL) delete job_completed_event_;
  job_completed_event_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::JobCompletedEvent& AuditData::job_completed_event() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
  return job_completed_event_ != NULL ? *job_completed_event_
                         : *::google::cloud::bigquery::logging::v1::JobCompletedEvent::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::JobCompletedEvent* AuditData::mutable_job_completed_event() {
  
  if (job_completed_event_ == NULL) {
    job_completed_event_ = new ::google::cloud::bigquery::logging::v1::JobCompletedEvent;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
  return job_completed_event_;
}
::google::cloud::bigquery::logging::v1::JobCompletedEvent* AuditData::release_job_completed_event() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
  
  ::google::cloud::bigquery::logging::v1::JobCompletedEvent* temp = job_completed_event_;
  job_completed_event_ = NULL;
  return temp;
}
void AuditData::set_allocated_job_completed_event(::google::cloud::bigquery::logging::v1::JobCompletedEvent* job_completed_event) {
  delete job_completed_event_;
  job_completed_event_ = job_completed_event;
  if (job_completed_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.AuditData.job_completed_event)
}

bool AuditData::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
void AuditData::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
bool AuditData::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
void AuditData::clear_has_response() {
  _oneof_case_[1] = RESPONSE_NOT_SET;
}
AuditData::RequestCase AuditData::request_case() const {
  return AuditData::RequestCase(_oneof_case_[0]);
}
AuditData::ResponseCase AuditData::response_case() const {
  return AuditData::ResponseCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableInsertRequest::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableInsertRequest::TableInsertRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.TableInsertRequest)
}
TableInsertRequest::TableInsertRequest(const TableInsertRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resource()) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Table(*from.resource_);
  } else {
    resource_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.TableInsertRequest)
}

void TableInsertRequest::SharedCtor() {
  resource_ = NULL;
  _cached_size_ = 0;
}

TableInsertRequest::~TableInsertRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.TableInsertRequest)
  SharedDtor();
}

void TableInsertRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete resource_;
  }
}

void TableInsertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableInsertRequest::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableInsertRequest& TableInsertRequest::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableInsertRequest* TableInsertRequest::New(::google::protobuf::Arena* arena) const {
  TableInsertRequest* n = new TableInsertRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableInsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.TableInsertRequest)
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}

bool TableInsertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.TableInsertRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.Table resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.TableInsertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.TableInsertRequest)
  return false;
#undef DO_
}

void TableInsertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.TableInsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->resource_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.TableInsertRequest)
}

::google::protobuf::uint8* TableInsertRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.TableInsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->resource_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.TableInsertRequest)
  return target;
}

size_t TableInsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.TableInsertRequest)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableInsertRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.TableInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TableInsertRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableInsertRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.TableInsertRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.TableInsertRequest)
    MergeFrom(*source);
  }
}

void TableInsertRequest::MergeFrom(const TableInsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.TableInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    mutable_resource()->::google::cloud::bigquery::logging::v1::Table::MergeFrom(from.resource());
  }
}

void TableInsertRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.TableInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInsertRequest::CopyFrom(const TableInsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.TableInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInsertRequest::IsInitialized() const {
  return true;
}

void TableInsertRequest::Swap(TableInsertRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableInsertRequest::InternalSwap(TableInsertRequest* other) {
  std::swap(resource_, other->resource_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableInsertRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableInsertRequest

// .google.cloud.bigquery.logging.v1.Table resource = 1;
bool TableInsertRequest::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
void TableInsertRequest::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Table& TableInsertRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
  return resource_ != NULL ? *resource_
                         : *::google::cloud::bigquery::logging::v1::Table::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Table* TableInsertRequest::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Table;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
  return resource_;
}
::google::cloud::bigquery::logging::v1::Table* TableInsertRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Table* temp = resource_;
  resource_ = NULL;
  return temp;
}
void TableInsertRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableInsertRequest.resource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableUpdateRequest::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableUpdateRequest::TableUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.TableUpdateRequest)
}
TableUpdateRequest::TableUpdateRequest(const TableUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resource()) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Table(*from.resource_);
  } else {
    resource_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.TableUpdateRequest)
}

void TableUpdateRequest::SharedCtor() {
  resource_ = NULL;
  _cached_size_ = 0;
}

TableUpdateRequest::~TableUpdateRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  SharedDtor();
}

void TableUpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete resource_;
  }
}

void TableUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableUpdateRequest::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableUpdateRequest& TableUpdateRequest::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableUpdateRequest* TableUpdateRequest::New(::google::protobuf::Arena* arena) const {
  TableUpdateRequest* n = new TableUpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}

bool TableUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.Table resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  return false;
#undef DO_
}

void TableUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->resource_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.TableUpdateRequest)
}

::google::protobuf::uint8* TableUpdateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->resource_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  return target;
}

size_t TableUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TableUpdateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableUpdateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.TableUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.TableUpdateRequest)
    MergeFrom(*source);
  }
}

void TableUpdateRequest::MergeFrom(const TableUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    mutable_resource()->::google::cloud::bigquery::logging::v1::Table::MergeFrom(from.resource());
  }
}

void TableUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableUpdateRequest::CopyFrom(const TableUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.TableUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableUpdateRequest::IsInitialized() const {
  return true;
}

void TableUpdateRequest::Swap(TableUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableUpdateRequest::InternalSwap(TableUpdateRequest* other) {
  std::swap(resource_, other->resource_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableUpdateRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableUpdateRequest

// .google.cloud.bigquery.logging.v1.Table resource = 1;
bool TableUpdateRequest::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
void TableUpdateRequest::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Table& TableUpdateRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
  return resource_ != NULL ? *resource_
                         : *::google::cloud::bigquery::logging::v1::Table::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Table* TableUpdateRequest::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Table;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
  return resource_;
}
::google::cloud::bigquery::logging::v1::Table* TableUpdateRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Table* temp = resource_;
  resource_ = NULL;
  return temp;
}
void TableUpdateRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableUpdateRequest.resource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableInsertResponse::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableInsertResponse::TableInsertResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.TableInsertResponse)
}
TableInsertResponse::TableInsertResponse(const TableInsertResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resource()) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Table(*from.resource_);
  } else {
    resource_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.TableInsertResponse)
}

void TableInsertResponse::SharedCtor() {
  resource_ = NULL;
  _cached_size_ = 0;
}

TableInsertResponse::~TableInsertResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.TableInsertResponse)
  SharedDtor();
}

void TableInsertResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete resource_;
  }
}

void TableInsertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableInsertResponse::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableInsertResponse& TableInsertResponse::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableInsertResponse* TableInsertResponse::New(::google::protobuf::Arena* arena) const {
  TableInsertResponse* n = new TableInsertResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableInsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.TableInsertResponse)
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}

bool TableInsertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.TableInsertResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.Table resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.TableInsertResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.TableInsertResponse)
  return false;
#undef DO_
}

void TableInsertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.TableInsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->resource_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.TableInsertResponse)
}

::google::protobuf::uint8* TableInsertResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.TableInsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->resource_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.TableInsertResponse)
  return target;
}

size_t TableInsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.TableInsertResponse)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableInsertResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.TableInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TableInsertResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableInsertResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.TableInsertResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.TableInsertResponse)
    MergeFrom(*source);
  }
}

void TableInsertResponse::MergeFrom(const TableInsertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.TableInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    mutable_resource()->::google::cloud::bigquery::logging::v1::Table::MergeFrom(from.resource());
  }
}

void TableInsertResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.TableInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInsertResponse::CopyFrom(const TableInsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.TableInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInsertResponse::IsInitialized() const {
  return true;
}

void TableInsertResponse::Swap(TableInsertResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableInsertResponse::InternalSwap(TableInsertResponse* other) {
  std::swap(resource_, other->resource_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableInsertResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableInsertResponse

// .google.cloud.bigquery.logging.v1.Table resource = 1;
bool TableInsertResponse::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
void TableInsertResponse::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Table& TableInsertResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
  return resource_ != NULL ? *resource_
                         : *::google::cloud::bigquery::logging::v1::Table::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Table* TableInsertResponse::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Table;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
  return resource_;
}
::google::cloud::bigquery::logging::v1::Table* TableInsertResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Table* temp = resource_;
  resource_ = NULL;
  return temp;
}
void TableInsertResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableInsertResponse.resource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableUpdateResponse::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableUpdateResponse::TableUpdateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.TableUpdateResponse)
}
TableUpdateResponse::TableUpdateResponse(const TableUpdateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resource()) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Table(*from.resource_);
  } else {
    resource_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.TableUpdateResponse)
}

void TableUpdateResponse::SharedCtor() {
  resource_ = NULL;
  _cached_size_ = 0;
}

TableUpdateResponse::~TableUpdateResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  SharedDtor();
}

void TableUpdateResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete resource_;
  }
}

void TableUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableUpdateResponse::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableUpdateResponse& TableUpdateResponse::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableUpdateResponse* TableUpdateResponse::New(::google::protobuf::Arena* arena) const {
  TableUpdateResponse* n = new TableUpdateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}

bool TableUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.Table resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  return false;
#undef DO_
}

void TableUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->resource_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.TableUpdateResponse)
}

::google::protobuf::uint8* TableUpdateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->resource_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  return target;
}

size_t TableUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Table resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TableUpdateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableUpdateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.TableUpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.TableUpdateResponse)
    MergeFrom(*source);
  }
}

void TableUpdateResponse::MergeFrom(const TableUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    mutable_resource()->::google::cloud::bigquery::logging::v1::Table::MergeFrom(from.resource());
  }
}

void TableUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableUpdateResponse::CopyFrom(const TableUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.TableUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableUpdateResponse::IsInitialized() const {
  return true;
}

void TableUpdateResponse::Swap(TableUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableUpdateResponse::InternalSwap(TableUpdateResponse* other) {
  std::swap(resource_, other->resource_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableUpdateResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableUpdateResponse

// .google.cloud.bigquery.logging.v1.Table resource = 1;
bool TableUpdateResponse::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
void TableUpdateResponse::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Table& TableUpdateResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
  return resource_ != NULL ? *resource_
                         : *::google::cloud::bigquery::logging::v1::Table::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Table* TableUpdateResponse::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Table;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
  return resource_;
}
::google::cloud::bigquery::logging::v1::Table* TableUpdateResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Table* temp = resource_;
  resource_ = NULL;
  return temp;
}
void TableUpdateResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Table* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableUpdateResponse.resource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetListRequest::kListAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetListRequest::DatasetListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.DatasetListRequest)
}
DatasetListRequest::DatasetListRequest(const DatasetListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  list_all_ = from.list_all_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.DatasetListRequest)
}

void DatasetListRequest::SharedCtor() {
  list_all_ = false;
  _cached_size_ = 0;
}

DatasetListRequest::~DatasetListRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.DatasetListRequest)
  SharedDtor();
}

void DatasetListRequest::SharedDtor() {
}

void DatasetListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetListRequest::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatasetListRequest& DatasetListRequest::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatasetListRequest* DatasetListRequest::New(::google::protobuf::Arena* arena) const {
  DatasetListRequest* n = new DatasetListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatasetListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.DatasetListRequest)
  list_all_ = false;
}

bool DatasetListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.DatasetListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool list_all = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &list_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.DatasetListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.DatasetListRequest)
  return false;
#undef DO_
}

void DatasetListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.DatasetListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool list_all = 1;
  if (this->list_all() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->list_all(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.DatasetListRequest)
}

::google::protobuf::uint8* DatasetListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.DatasetListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool list_all = 1;
  if (this->list_all() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->list_all(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.DatasetListRequest)
  return target;
}

size_t DatasetListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.DatasetListRequest)
  size_t total_size = 0;

  // bool list_all = 1;
  if (this->list_all() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.DatasetListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatasetListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.DatasetListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.DatasetListRequest)
    MergeFrom(*source);
  }
}

void DatasetListRequest::MergeFrom(const DatasetListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.DatasetListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.list_all() != 0) {
    set_list_all(from.list_all());
  }
}

void DatasetListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.DatasetListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetListRequest::CopyFrom(const DatasetListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.DatasetListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetListRequest::IsInitialized() const {
  return true;
}

void DatasetListRequest::Swap(DatasetListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetListRequest::InternalSwap(DatasetListRequest* other) {
  std::swap(list_all_, other->list_all_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatasetListRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatasetListRequest

// bool list_all = 1;
void DatasetListRequest::clear_list_all() {
  list_all_ = false;
}
bool DatasetListRequest::list_all() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetListRequest.list_all)
  return list_all_;
}
void DatasetListRequest::set_list_all(bool value) {
  
  list_all_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetListRequest.list_all)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetInsertRequest::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetInsertRequest::DatasetInsertRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
}
DatasetInsertRequest::DatasetInsertRequest(const DatasetInsertRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resource()) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Dataset(*from.resource_);
  } else {
    resource_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
}

void DatasetInsertRequest::SharedCtor() {
  resource_ = NULL;
  _cached_size_ = 0;
}

DatasetInsertRequest::~DatasetInsertRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  SharedDtor();
}

void DatasetInsertRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete resource_;
  }
}

void DatasetInsertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetInsertRequest::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatasetInsertRequest& DatasetInsertRequest::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatasetInsertRequest* DatasetInsertRequest::New(::google::protobuf::Arena* arena) const {
  DatasetInsertRequest* n = new DatasetInsertRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatasetInsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}

bool DatasetInsertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  return false;
#undef DO_
}

void DatasetInsertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->resource_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
}

::google::protobuf::uint8* DatasetInsertRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->resource_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  return target;
}

size_t DatasetInsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetInsertRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetInsertRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatasetInsertRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
    MergeFrom(*source);
  }
}

void DatasetInsertRequest::MergeFrom(const DatasetInsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    mutable_resource()->::google::cloud::bigquery::logging::v1::Dataset::MergeFrom(from.resource());
  }
}

void DatasetInsertRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetInsertRequest::CopyFrom(const DatasetInsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.DatasetInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetInsertRequest::IsInitialized() const {
  return true;
}

void DatasetInsertRequest::Swap(DatasetInsertRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetInsertRequest::InternalSwap(DatasetInsertRequest* other) {
  std::swap(resource_, other->resource_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatasetInsertRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatasetInsertRequest

// .google.cloud.bigquery.logging.v1.Dataset resource = 1;
bool DatasetInsertRequest::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
void DatasetInsertRequest::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Dataset& DatasetInsertRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
  return resource_ != NULL ? *resource_
                         : *::google::cloud::bigquery::logging::v1::Dataset::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertRequest::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Dataset;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
  return resource_;
}
::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = resource_;
  resource_ = NULL;
  return temp;
}
void DatasetInsertRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetInsertRequest.resource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetInsertResponse::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetInsertResponse::DatasetInsertResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
}
DatasetInsertResponse::DatasetInsertResponse(const DatasetInsertResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resource()) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Dataset(*from.resource_);
  } else {
    resource_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
}

void DatasetInsertResponse::SharedCtor() {
  resource_ = NULL;
  _cached_size_ = 0;
}

DatasetInsertResponse::~DatasetInsertResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  SharedDtor();
}

void DatasetInsertResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete resource_;
  }
}

void DatasetInsertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetInsertResponse::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatasetInsertResponse& DatasetInsertResponse::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatasetInsertResponse* DatasetInsertResponse::New(::google::protobuf::Arena* arena) const {
  DatasetInsertResponse* n = new DatasetInsertResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatasetInsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}

bool DatasetInsertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  return false;
#undef DO_
}

void DatasetInsertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->resource_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
}

::google::protobuf::uint8* DatasetInsertResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->resource_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  return target;
}

size_t DatasetInsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetInsertResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetInsertResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatasetInsertResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
    MergeFrom(*source);
  }
}

void DatasetInsertResponse::MergeFrom(const DatasetInsertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    mutable_resource()->::google::cloud::bigquery::logging::v1::Dataset::MergeFrom(from.resource());
  }
}

void DatasetInsertResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetInsertResponse::CopyFrom(const DatasetInsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.DatasetInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetInsertResponse::IsInitialized() const {
  return true;
}

void DatasetInsertResponse::Swap(DatasetInsertResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetInsertResponse::InternalSwap(DatasetInsertResponse* other) {
  std::swap(resource_, other->resource_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatasetInsertResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatasetInsertResponse

// .google.cloud.bigquery.logging.v1.Dataset resource = 1;
bool DatasetInsertResponse::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
void DatasetInsertResponse::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Dataset& DatasetInsertResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
  return resource_ != NULL ? *resource_
                         : *::google::cloud::bigquery::logging::v1::Dataset::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertResponse::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Dataset;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
  return resource_;
}
::google::cloud::bigquery::logging::v1::Dataset* DatasetInsertResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = resource_;
  resource_ = NULL;
  return temp;
}
void DatasetInsertResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetInsertResponse.resource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetUpdateRequest::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetUpdateRequest::DatasetUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
}
DatasetUpdateRequest::DatasetUpdateRequest(const DatasetUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resource()) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Dataset(*from.resource_);
  } else {
    resource_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
}

void DatasetUpdateRequest::SharedCtor() {
  resource_ = NULL;
  _cached_size_ = 0;
}

DatasetUpdateRequest::~DatasetUpdateRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  SharedDtor();
}

void DatasetUpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete resource_;
  }
}

void DatasetUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetUpdateRequest::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatasetUpdateRequest& DatasetUpdateRequest::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatasetUpdateRequest* DatasetUpdateRequest::New(::google::protobuf::Arena* arena) const {
  DatasetUpdateRequest* n = new DatasetUpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatasetUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}

bool DatasetUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  return false;
#undef DO_
}

void DatasetUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->resource_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
}

::google::protobuf::uint8* DatasetUpdateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->resource_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  return target;
}

size_t DatasetUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetUpdateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatasetUpdateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
    MergeFrom(*source);
  }
}

void DatasetUpdateRequest::MergeFrom(const DatasetUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    mutable_resource()->::google::cloud::bigquery::logging::v1::Dataset::MergeFrom(from.resource());
  }
}

void DatasetUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetUpdateRequest::CopyFrom(const DatasetUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.DatasetUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetUpdateRequest::IsInitialized() const {
  return true;
}

void DatasetUpdateRequest::Swap(DatasetUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetUpdateRequest::InternalSwap(DatasetUpdateRequest* other) {
  std::swap(resource_, other->resource_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatasetUpdateRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatasetUpdateRequest

// .google.cloud.bigquery.logging.v1.Dataset resource = 1;
bool DatasetUpdateRequest::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
void DatasetUpdateRequest::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Dataset& DatasetUpdateRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
  return resource_ != NULL ? *resource_
                         : *::google::cloud::bigquery::logging::v1::Dataset::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateRequest::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Dataset;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
  return resource_;
}
::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = resource_;
  resource_ = NULL;
  return temp;
}
void DatasetUpdateRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetUpdateRequest.resource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetUpdateResponse::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetUpdateResponse::DatasetUpdateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
}
DatasetUpdateResponse::DatasetUpdateResponse(const DatasetUpdateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resource()) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Dataset(*from.resource_);
  } else {
    resource_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
}

void DatasetUpdateResponse::SharedCtor() {
  resource_ = NULL;
  _cached_size_ = 0;
}

DatasetUpdateResponse::~DatasetUpdateResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  SharedDtor();
}

void DatasetUpdateResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete resource_;
  }
}

void DatasetUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetUpdateResponse::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatasetUpdateResponse& DatasetUpdateResponse::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatasetUpdateResponse* DatasetUpdateResponse::New(::google::protobuf::Arena* arena) const {
  DatasetUpdateResponse* n = new DatasetUpdateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatasetUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}

bool DatasetUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  return false;
#undef DO_
}

void DatasetUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->resource_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
}

::google::protobuf::uint8* DatasetUpdateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->resource_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  return target;
}

size_t DatasetUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Dataset resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetUpdateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatasetUpdateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
    MergeFrom(*source);
  }
}

void DatasetUpdateResponse::MergeFrom(const DatasetUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    mutable_resource()->::google::cloud::bigquery::logging::v1::Dataset::MergeFrom(from.resource());
  }
}

void DatasetUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetUpdateResponse::CopyFrom(const DatasetUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.DatasetUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetUpdateResponse::IsInitialized() const {
  return true;
}

void DatasetUpdateResponse::Swap(DatasetUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetUpdateResponse::InternalSwap(DatasetUpdateResponse* other) {
  std::swap(resource_, other->resource_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatasetUpdateResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatasetUpdateResponse

// .google.cloud.bigquery.logging.v1.Dataset resource = 1;
bool DatasetUpdateResponse::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
void DatasetUpdateResponse::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Dataset& DatasetUpdateResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
  return resource_ != NULL ? *resource_
                         : *::google::cloud::bigquery::logging::v1::Dataset::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateResponse::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Dataset;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
  return resource_;
}
::google::cloud::bigquery::logging::v1::Dataset* DatasetUpdateResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Dataset* temp = resource_;
  resource_ = NULL;
  return temp;
}
void DatasetUpdateResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Dataset* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetUpdateResponse.resource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobInsertRequest::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobInsertRequest::JobInsertRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobInsertRequest)
}
JobInsertRequest::JobInsertRequest(const JobInsertRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resource()) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Job(*from.resource_);
  } else {
    resource_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobInsertRequest)
}

void JobInsertRequest::SharedCtor() {
  resource_ = NULL;
  _cached_size_ = 0;
}

JobInsertRequest::~JobInsertRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobInsertRequest)
  SharedDtor();
}

void JobInsertRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete resource_;
  }
}

void JobInsertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobInsertRequest::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobInsertRequest& JobInsertRequest::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobInsertRequest* JobInsertRequest::New(::google::protobuf::Arena* arena) const {
  JobInsertRequest* n = new JobInsertRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobInsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobInsertRequest)
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}

bool JobInsertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobInsertRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.Job resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobInsertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobInsertRequest)
  return false;
#undef DO_
}

void JobInsertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobInsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Job resource = 1;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->resource_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobInsertRequest)
}

::google::protobuf::uint8* JobInsertRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobInsertRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Job resource = 1;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->resource_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobInsertRequest)
  return target;
}

size_t JobInsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobInsertRequest)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Job resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobInsertRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JobInsertRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobInsertRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobInsertRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobInsertRequest)
    MergeFrom(*source);
  }
}

void JobInsertRequest::MergeFrom(const JobInsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobInsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    mutable_resource()->::google::cloud::bigquery::logging::v1::Job::MergeFrom(from.resource());
  }
}

void JobInsertRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobInsertRequest::CopyFrom(const JobInsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobInsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobInsertRequest::IsInitialized() const {
  return true;
}

void JobInsertRequest::Swap(JobInsertRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobInsertRequest::InternalSwap(JobInsertRequest* other) {
  std::swap(resource_, other->resource_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobInsertRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobInsertRequest

// .google.cloud.bigquery.logging.v1.Job resource = 1;
bool JobInsertRequest::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
void JobInsertRequest::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Job& JobInsertRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
  return resource_ != NULL ? *resource_
                         : *::google::cloud::bigquery::logging::v1::Job::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Job* JobInsertRequest::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
  return resource_;
}
::google::cloud::bigquery::logging::v1::Job* JobInsertRequest::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = resource_;
  resource_ = NULL;
  return temp;
}
void JobInsertRequest::set_allocated_resource(::google::cloud::bigquery::logging::v1::Job* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobInsertRequest.resource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobInsertResponse::kResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobInsertResponse::JobInsertResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobInsertResponse)
}
JobInsertResponse::JobInsertResponse(const JobInsertResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resource()) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Job(*from.resource_);
  } else {
    resource_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobInsertResponse)
}

void JobInsertResponse::SharedCtor() {
  resource_ = NULL;
  _cached_size_ = 0;
}

JobInsertResponse::~JobInsertResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobInsertResponse)
  SharedDtor();
}

void JobInsertResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete resource_;
  }
}

void JobInsertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobInsertResponse::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobInsertResponse& JobInsertResponse::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobInsertResponse* JobInsertResponse::New(::google::protobuf::Arena* arena) const {
  JobInsertResponse* n = new JobInsertResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobInsertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobInsertResponse)
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
}

bool JobInsertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobInsertResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.Job resource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobInsertResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobInsertResponse)
  return false;
#undef DO_
}

void JobInsertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobInsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Job resource = 1;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->resource_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobInsertResponse)
}

::google::protobuf::uint8* JobInsertResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobInsertResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Job resource = 1;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->resource_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobInsertResponse)
  return target;
}

size_t JobInsertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobInsertResponse)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Job resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobInsertResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JobInsertResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobInsertResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobInsertResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobInsertResponse)
    MergeFrom(*source);
  }
}

void JobInsertResponse::MergeFrom(const JobInsertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobInsertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    mutable_resource()->::google::cloud::bigquery::logging::v1::Job::MergeFrom(from.resource());
  }
}

void JobInsertResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobInsertResponse::CopyFrom(const JobInsertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobInsertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobInsertResponse::IsInitialized() const {
  return true;
}

void JobInsertResponse::Swap(JobInsertResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobInsertResponse::InternalSwap(JobInsertResponse* other) {
  std::swap(resource_, other->resource_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobInsertResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobInsertResponse

// .google.cloud.bigquery.logging.v1.Job resource = 1;
bool JobInsertResponse::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
void JobInsertResponse::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Job& JobInsertResponse::resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
  return resource_ != NULL ? *resource_
                         : *::google::cloud::bigquery::logging::v1::Job::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Job* JobInsertResponse::mutable_resource() {
  
  if (resource_ == NULL) {
    resource_ = new ::google::cloud::bigquery::logging::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
  return resource_;
}
::google::cloud::bigquery::logging::v1::Job* JobInsertResponse::release_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = resource_;
  resource_ = NULL;
  return temp;
}
void JobInsertResponse::set_allocated_resource(::google::cloud::bigquery::logging::v1::Job* resource) {
  delete resource_;
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobInsertResponse.resource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobQueryRequest::kQueryFieldNumber;
const int JobQueryRequest::kMaxResultsFieldNumber;
const int JobQueryRequest::kDefaultDatasetFieldNumber;
const int JobQueryRequest::kProjectIdFieldNumber;
const int JobQueryRequest::kDryRunFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobQueryRequest::JobQueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobQueryRequest)
}
JobQueryRequest::JobQueryRequest(const JobQueryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.has_default_dataset()) {
    default_dataset_ = new ::google::cloud::bigquery::logging::v1::DatasetName(*from.default_dataset_);
  } else {
    default_dataset_ = NULL;
  }
  ::memcpy(&max_results_, &from.max_results_,
    reinterpret_cast<char*>(&dry_run_) -
    reinterpret_cast<char*>(&max_results_) + sizeof(dry_run_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobQueryRequest)
}

void JobQueryRequest::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&default_dataset_, 0, reinterpret_cast<char*>(&dry_run_) -
    reinterpret_cast<char*>(&default_dataset_) + sizeof(dry_run_));
  _cached_size_ = 0;
}

JobQueryRequest::~JobQueryRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobQueryRequest)
  SharedDtor();
}

void JobQueryRequest::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete default_dataset_;
  }
}

void JobQueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobQueryRequest::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobQueryRequest& JobQueryRequest::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobQueryRequest* JobQueryRequest::New(::google::protobuf::Arena* arena) const {
  JobQueryRequest* n = new JobQueryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobQueryRequest)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && default_dataset_ != NULL) {
    delete default_dataset_;
  }
  default_dataset_ = NULL;
  ::memset(&max_results_, 0, reinterpret_cast<char*>(&dry_run_) -
    reinterpret_cast<char*>(&max_results_) + sizeof(dry_run_));
}

bool JobQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobQueryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobQueryRequest.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_dataset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobQueryRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dry_run = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dry_run_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobQueryRequest)
  return false;
#undef DO_
}

void JobQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobQueryRequest.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // uint32 max_results = 2;
  if (this->max_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_results(), output);
  }

  // .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 3;
  if (this->has_default_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->default_dataset_, output);
  }

  // string project_id = 4;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobQueryRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->project_id(), output);
  }

  // bool dry_run = 5;
  if (this->dry_run() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->dry_run(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobQueryRequest)
}

::google::protobuf::uint8* JobQueryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobQueryRequest.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // uint32 max_results = 2;
  if (this->max_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_results(), target);
  }

  // .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 3;
  if (this->has_default_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->default_dataset_, deterministic, target);
  }

  // string project_id = 4;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobQueryRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->project_id(), target);
  }

  // bool dry_run = 5;
  if (this->dry_run() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->dry_run(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobQueryRequest)
  return target;
}

size_t JobQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobQueryRequest)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // string project_id = 4;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 3;
  if (this->has_default_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->default_dataset_);
  }

  // uint32 max_results = 2;
  if (this->max_results() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_results());
  }

  // bool dry_run = 5;
  if (this->dry_run() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JobQueryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobQueryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobQueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobQueryRequest)
    MergeFrom(*source);
  }
}

void JobQueryRequest::MergeFrom(const JobQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.has_default_dataset()) {
    mutable_default_dataset()->::google::cloud::bigquery::logging::v1::DatasetName::MergeFrom(from.default_dataset());
  }
  if (from.max_results() != 0) {
    set_max_results(from.max_results());
  }
  if (from.dry_run() != 0) {
    set_dry_run(from.dry_run());
  }
}

void JobQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobQueryRequest::CopyFrom(const JobQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobQueryRequest::IsInitialized() const {
  return true;
}

void JobQueryRequest::Swap(JobQueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobQueryRequest::InternalSwap(JobQueryRequest* other) {
  query_.Swap(&other->query_);
  project_id_.Swap(&other->project_id_);
  std::swap(default_dataset_, other->default_dataset_);
  std::swap(max_results_, other->max_results_);
  std::swap(dry_run_, other->dry_run_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobQueryRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobQueryRequest

// string query = 1;
void JobQueryRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobQueryRequest::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
  return query_.GetNoArena();
}
void JobQueryRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
}
#if LANG_CXX11
void JobQueryRequest::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
}
#endif
void JobQueryRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
}
void JobQueryRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
}
::std::string* JobQueryRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobQueryRequest::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobQueryRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryRequest.query)
}

// uint32 max_results = 2;
void JobQueryRequest::clear_max_results() {
  max_results_ = 0u;
}
::google::protobuf::uint32 JobQueryRequest::max_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.max_results)
  return max_results_;
}
void JobQueryRequest::set_max_results(::google::protobuf::uint32 value) {
  
  max_results_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryRequest.max_results)
}

// .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 3;
bool JobQueryRequest::has_default_dataset() const {
  return this != internal_default_instance() && default_dataset_ != NULL;
}
void JobQueryRequest::clear_default_dataset() {
  if (GetArenaNoVirtual() == NULL && default_dataset_ != NULL) delete default_dataset_;
  default_dataset_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::DatasetName& JobQueryRequest::default_dataset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
  return default_dataset_ != NULL ? *default_dataset_
                         : *::google::cloud::bigquery::logging::v1::DatasetName::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::DatasetName* JobQueryRequest::mutable_default_dataset() {
  
  if (default_dataset_ == NULL) {
    default_dataset_ = new ::google::cloud::bigquery::logging::v1::DatasetName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
  return default_dataset_;
}
::google::cloud::bigquery::logging::v1::DatasetName* JobQueryRequest::release_default_dataset() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
  
  ::google::cloud::bigquery::logging::v1::DatasetName* temp = default_dataset_;
  default_dataset_ = NULL;
  return temp;
}
void JobQueryRequest::set_allocated_default_dataset(::google::cloud::bigquery::logging::v1::DatasetName* default_dataset) {
  delete default_dataset_;
  default_dataset_ = default_dataset;
  if (default_dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryRequest.default_dataset)
}

// string project_id = 4;
void JobQueryRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobQueryRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
  return project_id_.GetNoArena();
}
void JobQueryRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
}
#if LANG_CXX11
void JobQueryRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
}
#endif
void JobQueryRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
}
void JobQueryRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
}
::std::string* JobQueryRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobQueryRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobQueryRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryRequest.project_id)
}

// bool dry_run = 5;
void JobQueryRequest::clear_dry_run() {
  dry_run_ = false;
}
bool JobQueryRequest::dry_run() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryRequest.dry_run)
  return dry_run_;
}
void JobQueryRequest::set_dry_run(bool value) {
  
  dry_run_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryRequest.dry_run)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobQueryResponse::kTotalResultsFieldNumber;
const int JobQueryResponse::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobQueryResponse::JobQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobQueryResponse)
}
JobQueryResponse::JobQueryResponse(const JobQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_job()) {
    job_ = new ::google::cloud::bigquery::logging::v1::Job(*from.job_);
  } else {
    job_ = NULL;
  }
  total_results_ = from.total_results_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobQueryResponse)
}

void JobQueryResponse::SharedCtor() {
  ::memset(&job_, 0, reinterpret_cast<char*>(&total_results_) -
    reinterpret_cast<char*>(&job_) + sizeof(total_results_));
  _cached_size_ = 0;
}

JobQueryResponse::~JobQueryResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobQueryResponse)
  SharedDtor();
}

void JobQueryResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete job_;
  }
}

void JobQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobQueryResponse::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobQueryResponse& JobQueryResponse::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobQueryResponse* JobQueryResponse::New(::google::protobuf::Arena* arena) const {
  JobQueryResponse* n = new JobQueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobQueryResponse)
  if (GetArenaNoVirtual() == NULL && job_ != NULL) {
    delete job_;
  }
  job_ = NULL;
  total_results_ = GOOGLE_ULONGLONG(0);
}

bool JobQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 total_results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.Job job = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobQueryResponse)
  return false;
#undef DO_
}

void JobQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total_results = 1;
  if (this->total_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->total_results(), output);
  }

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  if (this->has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->job_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobQueryResponse)
}

::google::protobuf::uint8* JobQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total_results = 1;
  if (this->total_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->total_results(), target);
  }

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  if (this->has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->job_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobQueryResponse)
  return target;
}

size_t JobQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobQueryResponse)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  if (this->has_job()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->job_);
  }

  // uint64 total_results = 1;
  if (this->total_results() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_results());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JobQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobQueryResponse)
    MergeFrom(*source);
  }
}

void JobQueryResponse::MergeFrom(const JobQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_job()) {
    mutable_job()->::google::cloud::bigquery::logging::v1::Job::MergeFrom(from.job());
  }
  if (from.total_results() != 0) {
    set_total_results(from.total_results());
  }
}

void JobQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobQueryResponse::CopyFrom(const JobQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobQueryResponse::IsInitialized() const {
  return true;
}

void JobQueryResponse::Swap(JobQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobQueryResponse::InternalSwap(JobQueryResponse* other) {
  std::swap(job_, other->job_);
  std::swap(total_results_, other->total_results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobQueryResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobQueryResponse

// uint64 total_results = 1;
void JobQueryResponse::clear_total_results() {
  total_results_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 JobQueryResponse::total_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryResponse.total_results)
  return total_results_;
}
void JobQueryResponse::set_total_results(::google::protobuf::uint64 value) {
  
  total_results_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobQueryResponse.total_results)
}

// .google.cloud.bigquery.logging.v1.Job job = 2;
bool JobQueryResponse::has_job() const {
  return this != internal_default_instance() && job_ != NULL;
}
void JobQueryResponse::clear_job() {
  if (GetArenaNoVirtual() == NULL && job_ != NULL) delete job_;
  job_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Job& JobQueryResponse::job() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
  return job_ != NULL ? *job_
                         : *::google::cloud::bigquery::logging::v1::Job::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Job* JobQueryResponse::mutable_job() {
  
  if (job_ == NULL) {
    job_ = new ::google::cloud::bigquery::logging::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
  return job_;
}
::google::cloud::bigquery::logging::v1::Job* JobQueryResponse::release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = job_;
  job_ = NULL;
  return temp;
}
void JobQueryResponse::set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job) {
  delete job_;
  job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryResponse.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobGetQueryResultsRequest::kMaxResultsFieldNumber;
const int JobGetQueryResultsRequest::kStartRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobGetQueryResultsRequest::JobGetQueryResultsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
}
JobGetQueryResultsRequest::JobGetQueryResultsRequest(const JobGetQueryResultsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_row_, &from.start_row_,
    reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&start_row_) + sizeof(max_results_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
}

void JobGetQueryResultsRequest::SharedCtor() {
  ::memset(&start_row_, 0, reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&start_row_) + sizeof(max_results_));
  _cached_size_ = 0;
}

JobGetQueryResultsRequest::~JobGetQueryResultsRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  SharedDtor();
}

void JobGetQueryResultsRequest::SharedDtor() {
}

void JobGetQueryResultsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobGetQueryResultsRequest::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobGetQueryResultsRequest& JobGetQueryResultsRequest::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobGetQueryResultsRequest* JobGetQueryResultsRequest::New(::google::protobuf::Arena* arena) const {
  JobGetQueryResultsRequest* n = new JobGetQueryResultsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobGetQueryResultsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  ::memset(&start_row_, 0, reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&start_row_) + sizeof(max_results_));
}

bool JobGetQueryResultsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 max_results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 start_row = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  return false;
#undef DO_
}

void JobGetQueryResultsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_results = 1;
  if (this->max_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_results(), output);
  }

  // uint64 start_row = 2;
  if (this->start_row() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_row(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
}

::google::protobuf::uint8* JobGetQueryResultsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_results = 1;
  if (this->max_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_results(), target);
  }

  // uint64 start_row = 2;
  if (this->start_row() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_row(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  return target;
}

size_t JobGetQueryResultsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  size_t total_size = 0;

  // uint64 start_row = 2;
  if (this->start_row() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_row());
  }

  // uint32 max_results = 1;
  if (this->max_results() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_results());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobGetQueryResultsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JobGetQueryResultsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobGetQueryResultsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
    MergeFrom(*source);
  }
}

void JobGetQueryResultsRequest::MergeFrom(const JobGetQueryResultsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_row() != 0) {
    set_start_row(from.start_row());
  }
  if (from.max_results() != 0) {
    set_max_results(from.max_results());
  }
}

void JobGetQueryResultsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobGetQueryResultsRequest::CopyFrom(const JobGetQueryResultsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobGetQueryResultsRequest::IsInitialized() const {
  return true;
}

void JobGetQueryResultsRequest::Swap(JobGetQueryResultsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobGetQueryResultsRequest::InternalSwap(JobGetQueryResultsRequest* other) {
  std::swap(start_row_, other->start_row_);
  std::swap(max_results_, other->max_results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobGetQueryResultsRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobGetQueryResultsRequest

// uint32 max_results = 1;
void JobGetQueryResultsRequest::clear_max_results() {
  max_results_ = 0u;
}
::google::protobuf::uint32 JobGetQueryResultsRequest::max_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.max_results)
  return max_results_;
}
void JobGetQueryResultsRequest::set_max_results(::google::protobuf::uint32 value) {
  
  max_results_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.max_results)
}

// uint64 start_row = 2;
void JobGetQueryResultsRequest::clear_start_row() {
  start_row_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 JobGetQueryResultsRequest::start_row() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.start_row)
  return start_row_;
}
void JobGetQueryResultsRequest::set_start_row(::google::protobuf::uint64 value) {
  
  start_row_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.start_row)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobGetQueryResultsResponse::kTotalResultsFieldNumber;
const int JobGetQueryResultsResponse::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobGetQueryResultsResponse::JobGetQueryResultsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
}
JobGetQueryResultsResponse::JobGetQueryResultsResponse(const JobGetQueryResultsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_job()) {
    job_ = new ::google::cloud::bigquery::logging::v1::Job(*from.job_);
  } else {
    job_ = NULL;
  }
  total_results_ = from.total_results_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
}

void JobGetQueryResultsResponse::SharedCtor() {
  ::memset(&job_, 0, reinterpret_cast<char*>(&total_results_) -
    reinterpret_cast<char*>(&job_) + sizeof(total_results_));
  _cached_size_ = 0;
}

JobGetQueryResultsResponse::~JobGetQueryResultsResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  SharedDtor();
}

void JobGetQueryResultsResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete job_;
  }
}

void JobGetQueryResultsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobGetQueryResultsResponse::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobGetQueryResultsResponse& JobGetQueryResultsResponse::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobGetQueryResultsResponse* JobGetQueryResultsResponse::New(::google::protobuf::Arena* arena) const {
  JobGetQueryResultsResponse* n = new JobGetQueryResultsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobGetQueryResultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  if (GetArenaNoVirtual() == NULL && job_ != NULL) {
    delete job_;
  }
  job_ = NULL;
  total_results_ = GOOGLE_ULONGLONG(0);
}

bool JobGetQueryResultsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 total_results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.Job job = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  return false;
#undef DO_
}

void JobGetQueryResultsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total_results = 1;
  if (this->total_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->total_results(), output);
  }

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  if (this->has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->job_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
}

::google::protobuf::uint8* JobGetQueryResultsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total_results = 1;
  if (this->total_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->total_results(), target);
  }

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  if (this->has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->job_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  return target;
}

size_t JobGetQueryResultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  if (this->has_job()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->job_);
  }

  // uint64 total_results = 1;
  if (this->total_results() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_results());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobGetQueryResultsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JobGetQueryResultsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobGetQueryResultsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
    MergeFrom(*source);
  }
}

void JobGetQueryResultsResponse::MergeFrom(const JobGetQueryResultsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_job()) {
    mutable_job()->::google::cloud::bigquery::logging::v1::Job::MergeFrom(from.job());
  }
  if (from.total_results() != 0) {
    set_total_results(from.total_results());
  }
}

void JobGetQueryResultsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobGetQueryResultsResponse::CopyFrom(const JobGetQueryResultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobGetQueryResultsResponse::IsInitialized() const {
  return true;
}

void JobGetQueryResultsResponse::Swap(JobGetQueryResultsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobGetQueryResultsResponse::InternalSwap(JobGetQueryResultsResponse* other) {
  std::swap(job_, other->job_);
  std::swap(total_results_, other->total_results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobGetQueryResultsResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobGetQueryResultsResponse

// uint64 total_results = 1;
void JobGetQueryResultsResponse::clear_total_results() {
  total_results_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 JobGetQueryResultsResponse::total_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.total_results)
  return total_results_;
}
void JobGetQueryResultsResponse::set_total_results(::google::protobuf::uint64 value) {
  
  total_results_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.total_results)
}

// .google.cloud.bigquery.logging.v1.Job job = 2;
bool JobGetQueryResultsResponse::has_job() const {
  return this != internal_default_instance() && job_ != NULL;
}
void JobGetQueryResultsResponse::clear_job() {
  if (GetArenaNoVirtual() == NULL && job_ != NULL) delete job_;
  job_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Job& JobGetQueryResultsResponse::job() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
  return job_ != NULL ? *job_
                         : *::google::cloud::bigquery::logging::v1::Job::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Job* JobGetQueryResultsResponse::mutable_job() {
  
  if (job_ == NULL) {
    job_ = new ::google::cloud::bigquery::logging::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
  return job_;
}
::google::cloud::bigquery::logging::v1::Job* JobGetQueryResultsResponse::release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = job_;
  job_ = NULL;
  return temp;
}
void JobGetQueryResultsResponse::set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job) {
  delete job_;
  job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobQueryDoneResponse::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobQueryDoneResponse::JobQueryDoneResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
}
JobQueryDoneResponse::JobQueryDoneResponse(const JobQueryDoneResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_job()) {
    job_ = new ::google::cloud::bigquery::logging::v1::Job(*from.job_);
  } else {
    job_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
}

void JobQueryDoneResponse::SharedCtor() {
  job_ = NULL;
  _cached_size_ = 0;
}

JobQueryDoneResponse::~JobQueryDoneResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  SharedDtor();
}

void JobQueryDoneResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete job_;
  }
}

void JobQueryDoneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobQueryDoneResponse::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobQueryDoneResponse& JobQueryDoneResponse::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobQueryDoneResponse* JobQueryDoneResponse::New(::google::protobuf::Arena* arena) const {
  JobQueryDoneResponse* n = new JobQueryDoneResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobQueryDoneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  if (GetArenaNoVirtual() == NULL && job_ != NULL) {
    delete job_;
  }
  job_ = NULL;
}

bool JobQueryDoneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.Job job = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  return false;
#undef DO_
}

void JobQueryDoneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Job job = 1;
  if (this->has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->job_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
}

::google::protobuf::uint8* JobQueryDoneResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.Job job = 1;
  if (this->has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->job_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  return target;
}

size_t JobQueryDoneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.Job job = 1;
  if (this->has_job()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->job_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobQueryDoneResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JobQueryDoneResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobQueryDoneResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
    MergeFrom(*source);
  }
}

void JobQueryDoneResponse::MergeFrom(const JobQueryDoneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_job()) {
    mutable_job()->::google::cloud::bigquery::logging::v1::Job::MergeFrom(from.job());
  }
}

void JobQueryDoneResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobQueryDoneResponse::CopyFrom(const JobQueryDoneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobQueryDoneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobQueryDoneResponse::IsInitialized() const {
  return true;
}

void JobQueryDoneResponse::Swap(JobQueryDoneResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobQueryDoneResponse::InternalSwap(JobQueryDoneResponse* other) {
  std::swap(job_, other->job_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobQueryDoneResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobQueryDoneResponse

// .google.cloud.bigquery.logging.v1.Job job = 1;
bool JobQueryDoneResponse::has_job() const {
  return this != internal_default_instance() && job_ != NULL;
}
void JobQueryDoneResponse::clear_job() {
  if (GetArenaNoVirtual() == NULL && job_ != NULL) delete job_;
  job_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Job& JobQueryDoneResponse::job() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
  return job_ != NULL ? *job_
                         : *::google::cloud::bigquery::logging::v1::Job::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Job* JobQueryDoneResponse::mutable_job() {
  
  if (job_ == NULL) {
    job_ = new ::google::cloud::bigquery::logging::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
  return job_;
}
::google::cloud::bigquery::logging::v1::Job* JobQueryDoneResponse::release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = job_;
  job_ = NULL;
  return temp;
}
void JobQueryDoneResponse::set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job) {
  delete job_;
  job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobQueryDoneResponse.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobCompletedEvent::kEventNameFieldNumber;
const int JobCompletedEvent::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobCompletedEvent::JobCompletedEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobCompletedEvent)
}
JobCompletedEvent::JobCompletedEvent(const JobCompletedEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.event_name().size() > 0) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  if (from.has_job()) {
    job_ = new ::google::cloud::bigquery::logging::v1::Job(*from.job_);
  } else {
    job_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobCompletedEvent)
}

void JobCompletedEvent::SharedCtor() {
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_ = NULL;
  _cached_size_ = 0;
}

JobCompletedEvent::~JobCompletedEvent() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  SharedDtor();
}

void JobCompletedEvent::SharedDtor() {
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete job_;
  }
}

void JobCompletedEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobCompletedEvent::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobCompletedEvent& JobCompletedEvent::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobCompletedEvent* JobCompletedEvent::New(::google::protobuf::Arena* arena) const {
  JobCompletedEvent* n = new JobCompletedEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobCompletedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && job_ != NULL) {
    delete job_;
  }
  job_ = NULL;
}

bool JobCompletedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string event_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.Job job = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  return false;
#undef DO_
}

void JobCompletedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_name = 1;
  if (this->event_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  if (this->has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->job_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobCompletedEvent)
}

::google::protobuf::uint8* JobCompletedEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_name = 1;
  if (this->event_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  if (this->has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->job_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  return target;
}

size_t JobCompletedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  size_t total_size = 0;

  // string event_name = 1;
  if (this->event_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_name());
  }

  // .google.cloud.bigquery.logging.v1.Job job = 2;
  if (this->has_job()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->job_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobCompletedEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const JobCompletedEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobCompletedEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobCompletedEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobCompletedEvent)
    MergeFrom(*source);
  }
}

void JobCompletedEvent::MergeFrom(const JobCompletedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_name().size() > 0) {

    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  if (from.has_job()) {
    mutable_job()->::google::cloud::bigquery::logging::v1::Job::MergeFrom(from.job());
  }
}

void JobCompletedEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobCompletedEvent::CopyFrom(const JobCompletedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobCompletedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobCompletedEvent::IsInitialized() const {
  return true;
}

void JobCompletedEvent::Swap(JobCompletedEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobCompletedEvent::InternalSwap(JobCompletedEvent* other) {
  event_name_.Swap(&other->event_name_);
  std::swap(job_, other->job_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobCompletedEvent::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobCompletedEvent

// string event_name = 1;
void JobCompletedEvent::clear_event_name() {
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobCompletedEvent::event_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
  return event_name_.GetNoArena();
}
void JobCompletedEvent::set_event_name(const ::std::string& value) {
  
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
}
#if LANG_CXX11
void JobCompletedEvent::set_event_name(::std::string&& value) {
  
  event_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
}
#endif
void JobCompletedEvent::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
}
void JobCompletedEvent::set_event_name(const char* value, size_t size) {
  
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
}
::std::string* JobCompletedEvent::mutable_event_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
  return event_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobCompletedEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
  
  return event_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobCompletedEvent::set_allocated_event_name(::std::string* event_name) {
  if (event_name != NULL) {
    
  } else {
    
  }
  event_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobCompletedEvent.event_name)
}

// .google.cloud.bigquery.logging.v1.Job job = 2;
bool JobCompletedEvent::has_job() const {
  return this != internal_default_instance() && job_ != NULL;
}
void JobCompletedEvent::clear_job() {
  if (GetArenaNoVirtual() == NULL && job_ != NULL) delete job_;
  job_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::Job& JobCompletedEvent::job() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
  return job_ != NULL ? *job_
                         : *::google::cloud::bigquery::logging::v1::Job::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::Job* JobCompletedEvent::mutable_job() {
  
  if (job_ == NULL) {
    job_ = new ::google::cloud::bigquery::logging::v1::Job;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
  return job_;
}
::google::cloud::bigquery::logging::v1::Job* JobCompletedEvent::release_job() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
  
  ::google::cloud::bigquery::logging::v1::Job* temp = job_;
  job_ = NULL;
  return temp;
}
void JobCompletedEvent::set_allocated_job(::google::cloud::bigquery::logging::v1::Job* job) {
  delete job_;
  job_ = job;
  if (job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobCompletedEvent.job)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableDataListRequest::kStartRowFieldNumber;
const int TableDataListRequest::kMaxResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableDataListRequest::TableDataListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.TableDataListRequest)
}
TableDataListRequest::TableDataListRequest(const TableDataListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_row_, &from.start_row_,
    reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&start_row_) + sizeof(max_results_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.TableDataListRequest)
}

void TableDataListRequest::SharedCtor() {
  ::memset(&start_row_, 0, reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&start_row_) + sizeof(max_results_));
  _cached_size_ = 0;
}

TableDataListRequest::~TableDataListRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.TableDataListRequest)
  SharedDtor();
}

void TableDataListRequest::SharedDtor() {
}

void TableDataListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableDataListRequest::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableDataListRequest& TableDataListRequest::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableDataListRequest* TableDataListRequest::New(::google::protobuf::Arena* arena) const {
  TableDataListRequest* n = new TableDataListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableDataListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.TableDataListRequest)
  ::memset(&start_row_, 0, reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&start_row_) + sizeof(max_results_));
}

bool TableDataListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.TableDataListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_row = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.TableDataListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.TableDataListRequest)
  return false;
#undef DO_
}

void TableDataListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.TableDataListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_row = 1;
  if (this->start_row() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_row(), output);
  }

  // uint32 max_results = 2;
  if (this->max_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_results(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.TableDataListRequest)
}

::google::protobuf::uint8* TableDataListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.TableDataListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_row = 1;
  if (this->start_row() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_row(), target);
  }

  // uint32 max_results = 2;
  if (this->max_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_results(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.TableDataListRequest)
  return target;
}

size_t TableDataListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.TableDataListRequest)
  size_t total_size = 0;

  // uint64 start_row = 1;
  if (this->start_row() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_row());
  }

  // uint32 max_results = 2;
  if (this->max_results() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_results());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableDataListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.TableDataListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TableDataListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableDataListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.TableDataListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.TableDataListRequest)
    MergeFrom(*source);
  }
}

void TableDataListRequest::MergeFrom(const TableDataListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.TableDataListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_row() != 0) {
    set_start_row(from.start_row());
  }
  if (from.max_results() != 0) {
    set_max_results(from.max_results());
  }
}

void TableDataListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.TableDataListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableDataListRequest::CopyFrom(const TableDataListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.TableDataListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDataListRequest::IsInitialized() const {
  return true;
}

void TableDataListRequest::Swap(TableDataListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableDataListRequest::InternalSwap(TableDataListRequest* other) {
  std::swap(start_row_, other->start_row_);
  std::swap(max_results_, other->max_results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableDataListRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableDataListRequest

// uint64 start_row = 1;
void TableDataListRequest::clear_start_row() {
  start_row_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TableDataListRequest::start_row() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDataListRequest.start_row)
  return start_row_;
}
void TableDataListRequest::set_start_row(::google::protobuf::uint64 value) {
  
  start_row_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDataListRequest.start_row)
}

// uint32 max_results = 2;
void TableDataListRequest::clear_max_results() {
  max_results_ = 0u;
}
::google::protobuf::uint32 TableDataListRequest::max_results() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDataListRequest.max_results)
  return max_results_;
}
void TableDataListRequest::set_max_results(::google::protobuf::uint32 value) {
  
  max_results_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDataListRequest.max_results)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kTableNameFieldNumber;
const int Table::kInfoFieldNumber;
const int Table::kSchemaJsonFieldNumber;
const int Table::kViewFieldNumber;
const int Table::kExpireTimeFieldNumber;
const int Table::kCreateTimeFieldNumber;
const int Table::kTruncateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.Table)
}
Table::Table(const Table& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schema_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.schema_json().size() > 0) {
    schema_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_json_);
  }
  if (from.has_table_name()) {
    table_name_ = new ::google::cloud::bigquery::logging::v1::TableName(*from.table_name_);
  } else {
    table_name_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::google::cloud::bigquery::logging::v1::TableInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  if (from.has_view()) {
    view_ = new ::google::cloud::bigquery::logging::v1::TableViewDefinition(*from.view_);
  } else {
    view_ = NULL;
  }
  if (from.has_expire_time()) {
    expire_time_ = new ::google::protobuf::Timestamp(*from.expire_time_);
  } else {
    expire_time_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_truncate_time()) {
    truncate_time_ = new ::google::protobuf::Timestamp(*from.truncate_time_);
  } else {
    truncate_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.Table)
}

void Table::SharedCtor() {
  schema_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&table_name_, 0, reinterpret_cast<char*>(&truncate_time_) -
    reinterpret_cast<char*>(&table_name_) + sizeof(truncate_time_));
  _cached_size_ = 0;
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.Table)
  SharedDtor();
}

void Table::SharedDtor() {
  schema_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete table_name_;
  }
  if (this != internal_default_instance()) {
    delete info_;
  }
  if (this != internal_default_instance()) {
    delete view_;
  }
  if (this != internal_default_instance()) {
    delete expire_time_;
  }
  if (this != internal_default_instance()) {
    delete create_time_;
  }
  if (this != internal_default_instance()) {
    delete truncate_time_;
  }
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Table& Table::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.Table)
  schema_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) {
    delete table_name_;
  }
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  if (GetArenaNoVirtual() == NULL && view_ != NULL) {
    delete view_;
  }
  view_ = NULL;
  if (GetArenaNoVirtual() == NULL && expire_time_ != NULL) {
    delete expire_time_;
  }
  expire_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && truncate_time_ != NULL) {
    delete truncate_time_;
  }
  truncate_time_ = NULL;
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.TableName table_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.TableInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.TableViewDefinition view = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp expire_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expire_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp truncate_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truncate_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string schema_json = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->schema_json().data(), this->schema_json().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.Table.schema_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // .google.cloud.bigquery.logging.v1.TableInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // .google.cloud.bigquery.logging.v1.TableViewDefinition view = 4;
  if (this->has_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->view_, output);
  }

  // .google.protobuf.Timestamp expire_time = 5;
  if (this->has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->expire_time_, output);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->create_time_, output);
  }

  // .google.protobuf.Timestamp truncate_time = 7;
  if (this->has_truncate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->truncate_time_, output);
  }

  // string schema_json = 8;
  if (this->schema_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schema_json().data(), this->schema_json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.Table.schema_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->schema_json(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->table_name_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.TableInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.TableViewDefinition view = 4;
  if (this->has_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->view_, deterministic, target);
  }

  // .google.protobuf.Timestamp expire_time = 5;
  if (this->has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->expire_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->create_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp truncate_time = 7;
  if (this->has_truncate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->truncate_time_, deterministic, target);
  }

  // string schema_json = 8;
  if (this->schema_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schema_json().data(), this->schema_json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.Table.schema_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->schema_json(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.Table)
  size_t total_size = 0;

  // string schema_json = 8;
  if (this->schema_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->schema_json());
  }

  // .google.cloud.bigquery.logging.v1.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // .google.cloud.bigquery.logging.v1.TableInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // .google.cloud.bigquery.logging.v1.TableViewDefinition view = 4;
  if (this->has_view()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->view_);
  }

  // .google.protobuf.Timestamp expire_time = 5;
  if (this->has_expire_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expire_time_);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // .google.protobuf.Timestamp truncate_time = 7;
  if (this->has_truncate_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->truncate_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.schema_json().size() > 0) {

    schema_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_json_);
  }
  if (from.has_table_name()) {
    mutable_table_name()->::google::cloud::bigquery::logging::v1::TableName::MergeFrom(from.table_name());
  }
  if (from.has_info()) {
    mutable_info()->::google::cloud::bigquery::logging::v1::TableInfo::MergeFrom(from.info());
  }
  if (from.has_view()) {
    mutable_view()->::google::cloud::bigquery::logging::v1::TableViewDefinition::MergeFrom(from.view());
  }
  if (from.has_expire_time()) {
    mutable_expire_time()->::google::protobuf::Timestamp::MergeFrom(from.expire_time());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_truncate_time()) {
    mutable_truncate_time()->::google::protobuf::Timestamp::MergeFrom(from.truncate_time());
  }
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  schema_json_.Swap(&other->schema_json_);
  std::swap(table_name_, other->table_name_);
  std::swap(info_, other->info_);
  std::swap(view_, other->view_);
  std::swap(expire_time_, other->expire_time_);
  std::swap(create_time_, other->create_time_);
  std::swap(truncate_time_, other->truncate_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Table

// .google.cloud.bigquery.logging.v1.TableName table_name = 1;
bool Table::has_table_name() const {
  return this != internal_default_instance() && table_name_ != NULL;
}
void Table::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::TableName& Table::table_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.table_name)
  return table_name_ != NULL ? *table_name_
                         : *::google::cloud::bigquery::logging::v1::TableName::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::TableName* Table::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::google::cloud::bigquery::logging::v1::TableName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.table_name)
  return table_name_;
}
::google::cloud::bigquery::logging::v1::TableName* Table::release_table_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.table_name)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void Table::set_allocated_table_name(::google::cloud::bigquery::logging::v1::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.table_name)
}

// .google.cloud.bigquery.logging.v1.TableInfo info = 2;
bool Table::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void Table::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::TableInfo& Table::info() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.info)
  return info_ != NULL ? *info_
                         : *::google::cloud::bigquery::logging::v1::TableInfo::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::TableInfo* Table::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::google::cloud::bigquery::logging::v1::TableInfo;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.info)
  return info_;
}
::google::cloud::bigquery::logging::v1::TableInfo* Table::release_info() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.info)
  
  ::google::cloud::bigquery::logging::v1::TableInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void Table::set_allocated_info(::google::cloud::bigquery::logging::v1::TableInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.info)
}

// string schema_json = 8;
void Table::clear_schema_json() {
  schema_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Table::schema_json() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.schema_json)
  return schema_json_.GetNoArena();
}
void Table::set_schema_json(const ::std::string& value) {
  
  schema_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.Table.schema_json)
}
#if LANG_CXX11
void Table::set_schema_json(::std::string&& value) {
  
  schema_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.Table.schema_json)
}
#endif
void Table::set_schema_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  schema_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.Table.schema_json)
}
void Table::set_schema_json(const char* value, size_t size) {
  
  schema_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.Table.schema_json)
}
::std::string* Table::mutable_schema_json() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.schema_json)
  return schema_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Table::release_schema_json() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.schema_json)
  
  return schema_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Table::set_allocated_schema_json(::std::string* schema_json) {
  if (schema_json != NULL) {
    
  } else {
    
  }
  schema_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema_json);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.schema_json)
}

// .google.cloud.bigquery.logging.v1.TableViewDefinition view = 4;
bool Table::has_view() const {
  return this != internal_default_instance() && view_ != NULL;
}
void Table::clear_view() {
  if (GetArenaNoVirtual() == NULL && view_ != NULL) delete view_;
  view_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::TableViewDefinition& Table::view() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.view)
  return view_ != NULL ? *view_
                         : *::google::cloud::bigquery::logging::v1::TableViewDefinition::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::TableViewDefinition* Table::mutable_view() {
  
  if (view_ == NULL) {
    view_ = new ::google::cloud::bigquery::logging::v1::TableViewDefinition;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.view)
  return view_;
}
::google::cloud::bigquery::logging::v1::TableViewDefinition* Table::release_view() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.view)
  
  ::google::cloud::bigquery::logging::v1::TableViewDefinition* temp = view_;
  view_ = NULL;
  return temp;
}
void Table::set_allocated_view(::google::cloud::bigquery::logging::v1::TableViewDefinition* view) {
  delete view_;
  view_ = view;
  if (view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.view)
}

// .google.protobuf.Timestamp expire_time = 5;
bool Table::has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != NULL;
}
void Table::clear_expire_time() {
  if (GetArenaNoVirtual() == NULL && expire_time_ != NULL) delete expire_time_;
  expire_time_ = NULL;
}
const ::google::protobuf::Timestamp& Table::expire_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.expire_time)
  return expire_time_ != NULL ? *expire_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Table::mutable_expire_time() {
  
  if (expire_time_ == NULL) {
    expire_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.expire_time)
  return expire_time_;
}
::google::protobuf::Timestamp* Table::release_expire_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.expire_time)
  
  ::google::protobuf::Timestamp* temp = expire_time_;
  expire_time_ = NULL;
  return temp;
}
void Table::set_allocated_expire_time(::google::protobuf::Timestamp* expire_time) {
  delete expire_time_;
  if (expire_time != NULL && expire_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_expire_time = new ::google::protobuf::Timestamp;
    new_expire_time->CopyFrom(*expire_time);
    expire_time = new_expire_time;
  }
  expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.expire_time)
}

// .google.protobuf.Timestamp create_time = 6;
bool Table::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void Table::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& Table::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Table::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* Table::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void Table::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.create_time)
}

// .google.protobuf.Timestamp truncate_time = 7;
bool Table::has_truncate_time() const {
  return this != internal_default_instance() && truncate_time_ != NULL;
}
void Table::clear_truncate_time() {
  if (GetArenaNoVirtual() == NULL && truncate_time_ != NULL) delete truncate_time_;
  truncate_time_ = NULL;
}
const ::google::protobuf::Timestamp& Table::truncate_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Table.truncate_time)
  return truncate_time_ != NULL ? *truncate_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Table::mutable_truncate_time() {
  
  if (truncate_time_ == NULL) {
    truncate_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Table.truncate_time)
  return truncate_time_;
}
::google::protobuf::Timestamp* Table::release_truncate_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Table.truncate_time)
  
  ::google::protobuf::Timestamp* temp = truncate_time_;
  truncate_time_ = NULL;
  return temp;
}
void Table::set_allocated_truncate_time(::google::protobuf::Timestamp* truncate_time) {
  delete truncate_time_;
  if (truncate_time != NULL && truncate_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_truncate_time = new ::google::protobuf::Timestamp;
    new_truncate_time->CopyFrom(*truncate_time);
    truncate_time = new_truncate_time;
  }
  truncate_time_ = truncate_time;
  if (truncate_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Table.truncate_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableInfo::kFriendlyNameFieldNumber;
const int TableInfo::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableInfo::TableInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.TableInfo)
}
TableInfo::TableInfo(const TableInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.friendly_name().size() > 0) {
    friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.TableInfo)
}

void TableInfo::SharedCtor() {
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TableInfo::~TableInfo() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.TableInfo)
  SharedDtor();
}

void TableInfo::SharedDtor() {
  friendly_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableInfo::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableInfo& TableInfo::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableInfo* TableInfo::New(::google::protobuf::Arena* arena) const {
  TableInfo* n = new TableInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.TableInfo)
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.TableInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string friendly_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendly_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->friendly_name().data(), this->friendly_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.TableInfo.friendly_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.TableInfo.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.TableInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.TableInfo)
  return false;
#undef DO_
}

void TableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.TableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string friendly_name = 1;
  if (this->friendly_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableInfo.friendly_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->friendly_name(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.TableInfo)
}

::google::protobuf::uint8* TableInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.TableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string friendly_name = 1;
  if (this->friendly_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableInfo.friendly_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->friendly_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.TableInfo)
  return target;
}

size_t TableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.TableInfo)
  size_t total_size = 0;

  // string friendly_name = 1;
  if (this->friendly_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->friendly_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.TableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TableInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.TableInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.TableInfo)
    MergeFrom(*source);
  }
}

void TableInfo::MergeFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.TableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.friendly_name().size() > 0) {

    friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void TableInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.TableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInfo::CopyFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.TableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfo::IsInitialized() const {
  return true;
}

void TableInfo::Swap(TableInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableInfo::InternalSwap(TableInfo* other) {
  friendly_name_.Swap(&other->friendly_name_);
  description_.Swap(&other->description_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableInfo::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableInfo

// string friendly_name = 1;
void TableInfo::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableInfo::friendly_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
  return friendly_name_.GetNoArena();
}
void TableInfo::set_friendly_name(const ::std::string& value) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
}
#if LANG_CXX11
void TableInfo::set_friendly_name(::std::string&& value) {
  
  friendly_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
}
#endif
void TableInfo::set_friendly_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
}
void TableInfo::set_friendly_name(const char* value, size_t size) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
}
::std::string* TableInfo::mutable_friendly_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableInfo::release_friendly_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
  
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableInfo::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != NULL) {
    
  } else {
    
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableInfo.friendly_name)
}

// string description = 2;
void TableInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableInfo::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableInfo.description)
  return description_.GetNoArena();
}
void TableInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableInfo.description)
}
#if LANG_CXX11
void TableInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableInfo.description)
}
#endif
void TableInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableInfo.description)
}
void TableInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableInfo.description)
}
::std::string* TableInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableInfo::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableInfo.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableViewDefinition::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableViewDefinition::TableViewDefinition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.TableViewDefinition)
}
TableViewDefinition::TableViewDefinition(const TableViewDefinition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.TableViewDefinition)
}

void TableViewDefinition::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TableViewDefinition::~TableViewDefinition() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.TableViewDefinition)
  SharedDtor();
}

void TableViewDefinition::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableViewDefinition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableViewDefinition::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableViewDefinition& TableViewDefinition::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableViewDefinition* TableViewDefinition::New(::google::protobuf::Arena* arena) const {
  TableViewDefinition* n = new TableViewDefinition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableViewDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.TableViewDefinition)
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TableViewDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.TableViewDefinition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.TableViewDefinition.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.TableViewDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.TableViewDefinition)
  return false;
#undef DO_
}

void TableViewDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.TableViewDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableViewDefinition.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.TableViewDefinition)
}

::google::protobuf::uint8* TableViewDefinition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.TableViewDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableViewDefinition.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.TableViewDefinition)
  return target;
}

size_t TableViewDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.TableViewDefinition)
  size_t total_size = 0;

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableViewDefinition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.TableViewDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const TableViewDefinition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableViewDefinition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.TableViewDefinition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.TableViewDefinition)
    MergeFrom(*source);
  }
}

void TableViewDefinition::MergeFrom(const TableViewDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.TableViewDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
}

void TableViewDefinition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.TableViewDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableViewDefinition::CopyFrom(const TableViewDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.TableViewDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableViewDefinition::IsInitialized() const {
  return true;
}

void TableViewDefinition::Swap(TableViewDefinition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableViewDefinition::InternalSwap(TableViewDefinition* other) {
  query_.Swap(&other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableViewDefinition::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableViewDefinition

// string query = 1;
void TableViewDefinition::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableViewDefinition::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
  return query_.GetNoArena();
}
void TableViewDefinition::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
}
#if LANG_CXX11
void TableViewDefinition::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
}
#endif
void TableViewDefinition::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
}
void TableViewDefinition::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
}
::std::string* TableViewDefinition::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableViewDefinition::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableViewDefinition::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableViewDefinition.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dataset::kDatasetNameFieldNumber;
const int Dataset::kInfoFieldNumber;
const int Dataset::kCreateTimeFieldNumber;
const int Dataset::kUpdateTimeFieldNumber;
const int Dataset::kAclFieldNumber;
const int Dataset::kDefaultTableExpireDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dataset::Dataset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.Dataset)
}
Dataset::Dataset(const Dataset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dataset_name()) {
    dataset_name_ = new ::google::cloud::bigquery::logging::v1::DatasetName(*from.dataset_name_);
  } else {
    dataset_name_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::google::cloud::bigquery::logging::v1::DatasetInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = NULL;
  }
  if (from.has_acl()) {
    acl_ = new ::google::cloud::bigquery::logging::v1::BigQueryAcl(*from.acl_);
  } else {
    acl_ = NULL;
  }
  if (from.has_default_table_expire_duration()) {
    default_table_expire_duration_ = new ::google::protobuf::Duration(*from.default_table_expire_duration_);
  } else {
    default_table_expire_duration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.Dataset)
}

void Dataset::SharedCtor() {
  ::memset(&dataset_name_, 0, reinterpret_cast<char*>(&default_table_expire_duration_) -
    reinterpret_cast<char*>(&dataset_name_) + sizeof(default_table_expire_duration_));
  _cached_size_ = 0;
}

Dataset::~Dataset() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.Dataset)
  SharedDtor();
}

void Dataset::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dataset_name_;
  }
  if (this != internal_default_instance()) {
    delete info_;
  }
  if (this != internal_default_instance()) {
    delete create_time_;
  }
  if (this != internal_default_instance()) {
    delete update_time_;
  }
  if (this != internal_default_instance()) {
    delete acl_;
  }
  if (this != internal_default_instance()) {
    delete default_table_expire_duration_;
  }
}

void Dataset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dataset::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Dataset& Dataset::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dataset* Dataset::New(::google::protobuf::Arena* arena) const {
  Dataset* n = new Dataset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dataset::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.Dataset)
  if (GetArenaNoVirtual() == NULL && dataset_name_ != NULL) {
    delete dataset_name_;
  }
  dataset_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && acl_ != NULL) {
    delete acl_;
  }
  acl_ = NULL;
  if (GetArenaNoVirtual() == NULL && default_table_expire_duration_ != NULL) {
    delete default_table_expire_duration_;
  }
  default_table_expire_duration_ = NULL;
}

bool Dataset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.Dataset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.DatasetName dataset_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.DatasetInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.BigQueryAcl acl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration default_table_expire_duration = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_table_expire_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.Dataset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.Dataset)
  return false;
#undef DO_
}

void Dataset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.Dataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.DatasetName dataset_name = 1;
  if (this->has_dataset_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dataset_name_, output);
  }

  // .google.cloud.bigquery.logging.v1.DatasetInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->create_time_, output);
  }

  // .google.protobuf.Timestamp update_time = 5;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->update_time_, output);
  }

  // .google.cloud.bigquery.logging.v1.BigQueryAcl acl = 6;
  if (this->has_acl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->acl_, output);
  }

  // .google.protobuf.Duration default_table_expire_duration = 8;
  if (this->has_default_table_expire_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->default_table_expire_duration_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.Dataset)
}

::google::protobuf::uint8* Dataset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.Dataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.DatasetName dataset_name = 1;
  if (this->has_dataset_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->dataset_name_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.DatasetInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->create_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp update_time = 5;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->update_time_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.BigQueryAcl acl = 6;
  if (this->has_acl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->acl_, deterministic, target);
  }

  // .google.protobuf.Duration default_table_expire_duration = 8;
  if (this->has_default_table_expire_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->default_table_expire_duration_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.Dataset)
  return target;
}

size_t Dataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.Dataset)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.DatasetName dataset_name = 1;
  if (this->has_dataset_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dataset_name_);
  }

  // .google.cloud.bigquery.logging.v1.DatasetInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // .google.protobuf.Timestamp create_time = 4;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // .google.protobuf.Timestamp update_time = 5;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_time_);
  }

  // .google.cloud.bigquery.logging.v1.BigQueryAcl acl = 6;
  if (this->has_acl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acl_);
  }

  // .google.protobuf.Duration default_table_expire_duration = 8;
  if (this->has_default_table_expire_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->default_table_expire_duration_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dataset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.Dataset)
  GOOGLE_DCHECK_NE(&from, this);
  const Dataset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Dataset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.Dataset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.Dataset)
    MergeFrom(*source);
  }
}

void Dataset::MergeFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.Dataset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dataset_name()) {
    mutable_dataset_name()->::google::cloud::bigquery::logging::v1::DatasetName::MergeFrom(from.dataset_name());
  }
  if (from.has_info()) {
    mutable_info()->::google::cloud::bigquery::logging::v1::DatasetInfo::MergeFrom(from.info());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.has_acl()) {
    mutable_acl()->::google::cloud::bigquery::logging::v1::BigQueryAcl::MergeFrom(from.acl());
  }
  if (from.has_default_table_expire_duration()) {
    mutable_default_table_expire_duration()->::google::protobuf::Duration::MergeFrom(from.default_table_expire_duration());
  }
}

void Dataset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dataset::CopyFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dataset::IsInitialized() const {
  return true;
}

void Dataset::Swap(Dataset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dataset::InternalSwap(Dataset* other) {
  std::swap(dataset_name_, other->dataset_name_);
  std::swap(info_, other->info_);
  std::swap(create_time_, other->create_time_);
  std::swap(update_time_, other->update_time_);
  std::swap(acl_, other->acl_);
  std::swap(default_table_expire_duration_, other->default_table_expire_duration_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dataset::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dataset

// .google.cloud.bigquery.logging.v1.DatasetName dataset_name = 1;
bool Dataset::has_dataset_name() const {
  return this != internal_default_instance() && dataset_name_ != NULL;
}
void Dataset::clear_dataset_name() {
  if (GetArenaNoVirtual() == NULL && dataset_name_ != NULL) delete dataset_name_;
  dataset_name_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::DatasetName& Dataset::dataset_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
  return dataset_name_ != NULL ? *dataset_name_
                         : *::google::cloud::bigquery::logging::v1::DatasetName::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::DatasetName* Dataset::mutable_dataset_name() {
  
  if (dataset_name_ == NULL) {
    dataset_name_ = new ::google::cloud::bigquery::logging::v1::DatasetName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
  return dataset_name_;
}
::google::cloud::bigquery::logging::v1::DatasetName* Dataset::release_dataset_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
  
  ::google::cloud::bigquery::logging::v1::DatasetName* temp = dataset_name_;
  dataset_name_ = NULL;
  return temp;
}
void Dataset::set_allocated_dataset_name(::google::cloud::bigquery::logging::v1::DatasetName* dataset_name) {
  delete dataset_name_;
  dataset_name_ = dataset_name;
  if (dataset_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.dataset_name)
}

// .google.cloud.bigquery.logging.v1.DatasetInfo info = 2;
bool Dataset::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void Dataset::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::DatasetInfo& Dataset::info() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.info)
  return info_ != NULL ? *info_
                         : *::google::cloud::bigquery::logging::v1::DatasetInfo::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::DatasetInfo* Dataset::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::google::cloud::bigquery::logging::v1::DatasetInfo;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.info)
  return info_;
}
::google::cloud::bigquery::logging::v1::DatasetInfo* Dataset::release_info() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.info)
  
  ::google::cloud::bigquery::logging::v1::DatasetInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void Dataset::set_allocated_info(::google::cloud::bigquery::logging::v1::DatasetInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.info)
}

// .google.protobuf.Timestamp create_time = 4;
bool Dataset::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void Dataset::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& Dataset::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Dataset::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* Dataset::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void Dataset::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.create_time)
}

// .google.protobuf.Timestamp update_time = 5;
bool Dataset::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
void Dataset::clear_update_time() {
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) delete update_time_;
  update_time_ = NULL;
}
const ::google::protobuf::Timestamp& Dataset::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.update_time)
  return update_time_ != NULL ? *update_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Dataset::mutable_update_time() {
  
  if (update_time_ == NULL) {
    update_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.update_time)
  return update_time_;
}
::google::protobuf::Timestamp* Dataset::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
void Dataset::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  delete update_time_;
  if (update_time != NULL && update_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_update_time = new ::google::protobuf::Timestamp;
    new_update_time->CopyFrom(*update_time);
    update_time = new_update_time;
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.update_time)
}

// .google.cloud.bigquery.logging.v1.BigQueryAcl acl = 6;
bool Dataset::has_acl() const {
  return this != internal_default_instance() && acl_ != NULL;
}
void Dataset::clear_acl() {
  if (GetArenaNoVirtual() == NULL && acl_ != NULL) delete acl_;
  acl_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::BigQueryAcl& Dataset::acl() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.acl)
  return acl_ != NULL ? *acl_
                         : *::google::cloud::bigquery::logging::v1::BigQueryAcl::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::BigQueryAcl* Dataset::mutable_acl() {
  
  if (acl_ == NULL) {
    acl_ = new ::google::cloud::bigquery::logging::v1::BigQueryAcl;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.acl)
  return acl_;
}
::google::cloud::bigquery::logging::v1::BigQueryAcl* Dataset::release_acl() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.acl)
  
  ::google::cloud::bigquery::logging::v1::BigQueryAcl* temp = acl_;
  acl_ = NULL;
  return temp;
}
void Dataset::set_allocated_acl(::google::cloud::bigquery::logging::v1::BigQueryAcl* acl) {
  delete acl_;
  acl_ = acl;
  if (acl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.acl)
}

// .google.protobuf.Duration default_table_expire_duration = 8;
bool Dataset::has_default_table_expire_duration() const {
  return this != internal_default_instance() && default_table_expire_duration_ != NULL;
}
void Dataset::clear_default_table_expire_duration() {
  if (GetArenaNoVirtual() == NULL && default_table_expire_duration_ != NULL) delete default_table_expire_duration_;
  default_table_expire_duration_ = NULL;
}
const ::google::protobuf::Duration& Dataset::default_table_expire_duration() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
  return default_table_expire_duration_ != NULL ? *default_table_expire_duration_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* Dataset::mutable_default_table_expire_duration() {
  
  if (default_table_expire_duration_ == NULL) {
    default_table_expire_duration_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
  return default_table_expire_duration_;
}
::google::protobuf::Duration* Dataset::release_default_table_expire_duration() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
  
  ::google::protobuf::Duration* temp = default_table_expire_duration_;
  default_table_expire_duration_ = NULL;
  return temp;
}
void Dataset::set_allocated_default_table_expire_duration(::google::protobuf::Duration* default_table_expire_duration) {
  delete default_table_expire_duration_;
  if (default_table_expire_duration != NULL && default_table_expire_duration->GetArena() != NULL) {
    ::google::protobuf::Duration* new_default_table_expire_duration = new ::google::protobuf::Duration;
    new_default_table_expire_duration->CopyFrom(*default_table_expire_duration);
    default_table_expire_duration = new_default_table_expire_duration;
  }
  default_table_expire_duration_ = default_table_expire_duration;
  if (default_table_expire_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Dataset.default_table_expire_duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetInfo::kFriendlyNameFieldNumber;
const int DatasetInfo::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetInfo::DatasetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.DatasetInfo)
}
DatasetInfo::DatasetInfo(const DatasetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.friendly_name().size() > 0) {
    friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.DatasetInfo)
}

void DatasetInfo::SharedCtor() {
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DatasetInfo::~DatasetInfo() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.DatasetInfo)
  SharedDtor();
}

void DatasetInfo::SharedDtor() {
  friendly_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DatasetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetInfo::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatasetInfo& DatasetInfo::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatasetInfo* DatasetInfo::New(::google::protobuf::Arena* arena) const {
  DatasetInfo* n = new DatasetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatasetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.DatasetInfo)
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DatasetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.DatasetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string friendly_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendly_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->friendly_name().data(), this->friendly_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.DatasetInfo.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.DatasetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.DatasetInfo)
  return false;
#undef DO_
}

void DatasetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.DatasetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string friendly_name = 1;
  if (this->friendly_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->friendly_name(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.DatasetInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.DatasetInfo)
}

::google::protobuf::uint8* DatasetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.DatasetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string friendly_name = 1;
  if (this->friendly_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->friendly_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.DatasetInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.DatasetInfo)
  return target;
}

size_t DatasetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.DatasetInfo)
  size_t total_size = 0;

  // string friendly_name = 1;
  if (this->friendly_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->friendly_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.DatasetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatasetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.DatasetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.DatasetInfo)
    MergeFrom(*source);
  }
}

void DatasetInfo::MergeFrom(const DatasetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.DatasetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.friendly_name().size() > 0) {

    friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void DatasetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.DatasetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetInfo::CopyFrom(const DatasetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.DatasetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetInfo::IsInitialized() const {
  return true;
}

void DatasetInfo::Swap(DatasetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetInfo::InternalSwap(DatasetInfo* other) {
  friendly_name_.Swap(&other->friendly_name_);
  description_.Swap(&other->description_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatasetInfo::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatasetInfo

// string friendly_name = 1;
void DatasetInfo::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DatasetInfo::friendly_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
  return friendly_name_.GetNoArena();
}
void DatasetInfo::set_friendly_name(const ::std::string& value) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
}
#if LANG_CXX11
void DatasetInfo::set_friendly_name(::std::string&& value) {
  
  friendly_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
}
#endif
void DatasetInfo::set_friendly_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
}
void DatasetInfo::set_friendly_name(const char* value, size_t size) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
}
::std::string* DatasetInfo::mutable_friendly_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DatasetInfo::release_friendly_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
  
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DatasetInfo::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != NULL) {
    
  } else {
    
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetInfo.friendly_name)
}

// string description = 2;
void DatasetInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DatasetInfo::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetInfo.description)
  return description_.GetNoArena();
}
void DatasetInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetInfo.description)
}
#if LANG_CXX11
void DatasetInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.DatasetInfo.description)
}
#endif
void DatasetInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.DatasetInfo.description)
}
void DatasetInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.DatasetInfo.description)
}
::std::string* DatasetInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DatasetInfo::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DatasetInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetInfo.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigQueryAcl_Entry::kRoleFieldNumber;
const int BigQueryAcl_Entry::kGroupEmailFieldNumber;
const int BigQueryAcl_Entry::kUserEmailFieldNumber;
const int BigQueryAcl_Entry::kDomainFieldNumber;
const int BigQueryAcl_Entry::kSpecialGroupFieldNumber;
const int BigQueryAcl_Entry::kViewNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigQueryAcl_Entry::BigQueryAcl_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
}
BigQueryAcl_Entry::BigQueryAcl_Entry(const BigQueryAcl_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role().size() > 0) {
    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  group_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_email().size() > 0) {
    group_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_email_);
  }
  user_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_email().size() > 0) {
    user_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_email_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  special_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.special_group().size() > 0) {
    special_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.special_group_);
  }
  if (from.has_view_name()) {
    view_name_ = new ::google::cloud::bigquery::logging::v1::TableName(*from.view_name_);
  } else {
    view_name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
}

void BigQueryAcl_Entry::SharedCtor() {
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_name_ = NULL;
  _cached_size_ = 0;
}

BigQueryAcl_Entry::~BigQueryAcl_Entry() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  SharedDtor();
}

void BigQueryAcl_Entry::SharedDtor() {
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete view_name_;
  }
}

void BigQueryAcl_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigQueryAcl_Entry::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigQueryAcl_Entry& BigQueryAcl_Entry::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

BigQueryAcl_Entry* BigQueryAcl_Entry::New(::google::protobuf::Arena* arena) const {
  BigQueryAcl_Entry* n = new BigQueryAcl_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BigQueryAcl_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  special_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && view_name_ != NULL) {
    delete view_name_;
  }
  view_name_ = NULL;
}

bool BigQueryAcl_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string role = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_email = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_email().data(), this->group_email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_email = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_email().data(), this->user_email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string special_group = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_special_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->special_group().data(), this->special_group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.TableName view_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  return false;
#undef DO_
}

void BigQueryAcl_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string role = 1;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->role(), output);
  }

  // string group_email = 2;
  if (this->group_email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_email().data(), this->group_email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_email(), output);
  }

  // string user_email = 3;
  if (this->user_email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_email().data(), this->user_email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_email(), output);
  }

  // string domain = 4;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // string special_group = 5;
  if (this->special_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->special_group().data(), this->special_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->special_group(), output);
  }

  // .google.cloud.bigquery.logging.v1.TableName view_name = 6;
  if (this->has_view_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->view_name_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
}

::google::protobuf::uint8* BigQueryAcl_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string role = 1;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role(), target);
  }

  // string group_email = 2;
  if (this->group_email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_email().data(), this->group_email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_email(), target);
  }

  // string user_email = 3;
  if (this->user_email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_email().data(), this->user_email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_email(), target);
  }

  // string domain = 4;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // string special_group = 5;
  if (this->special_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->special_group().data(), this->special_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->special_group(), target);
  }

  // .google.cloud.bigquery.logging.v1.TableName view_name = 6;
  if (this->has_view_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->view_name_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  return target;
}

size_t BigQueryAcl_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  size_t total_size = 0;

  // string role = 1;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role());
  }

  // string group_email = 2;
  if (this->group_email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_email());
  }

  // string user_email = 3;
  if (this->user_email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_email());
  }

  // string domain = 4;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string special_group = 5;
  if (this->special_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->special_group());
  }

  // .google.cloud.bigquery.logging.v1.TableName view_name = 6;
  if (this->has_view_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->view_name_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigQueryAcl_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const BigQueryAcl_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigQueryAcl_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
    MergeFrom(*source);
  }
}

void BigQueryAcl_Entry::MergeFrom(const BigQueryAcl_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  if (from.group_email().size() > 0) {

    group_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_email_);
  }
  if (from.user_email().size() > 0) {

    user_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_email_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.special_group().size() > 0) {

    special_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.special_group_);
  }
  if (from.has_view_name()) {
    mutable_view_name()->::google::cloud::bigquery::logging::v1::TableName::MergeFrom(from.view_name());
  }
}

void BigQueryAcl_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigQueryAcl_Entry::CopyFrom(const BigQueryAcl_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigQueryAcl_Entry::IsInitialized() const {
  return true;
}

void BigQueryAcl_Entry::Swap(BigQueryAcl_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigQueryAcl_Entry::InternalSwap(BigQueryAcl_Entry* other) {
  role_.Swap(&other->role_);
  group_email_.Swap(&other->group_email_);
  user_email_.Swap(&other->user_email_);
  domain_.Swap(&other->domain_);
  special_group_.Swap(&other->special_group_);
  std::swap(view_name_, other->view_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigQueryAcl_Entry::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BigQueryAcl_Entry

// string role = 1;
void BigQueryAcl_Entry::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BigQueryAcl_Entry::role() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
  return role_.GetNoArena();
}
void BigQueryAcl_Entry::set_role(const ::std::string& value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
}
#if LANG_CXX11
void BigQueryAcl_Entry::set_role(::std::string&& value) {
  
  role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
}
#endif
void BigQueryAcl_Entry::set_role(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
}
void BigQueryAcl_Entry::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
}
::std::string* BigQueryAcl_Entry::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BigQueryAcl_Entry::release_role() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
  
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BigQueryAcl_Entry::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.role)
}

// string group_email = 2;
void BigQueryAcl_Entry::clear_group_email() {
  group_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BigQueryAcl_Entry::group_email() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
  return group_email_.GetNoArena();
}
void BigQueryAcl_Entry::set_group_email(const ::std::string& value) {
  
  group_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
}
#if LANG_CXX11
void BigQueryAcl_Entry::set_group_email(::std::string&& value) {
  
  group_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
}
#endif
void BigQueryAcl_Entry::set_group_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
}
void BigQueryAcl_Entry::set_group_email(const char* value, size_t size) {
  
  group_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
}
::std::string* BigQueryAcl_Entry::mutable_group_email() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
  return group_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BigQueryAcl_Entry::release_group_email() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
  
  return group_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BigQueryAcl_Entry::set_allocated_group_email(::std::string* group_email) {
  if (group_email != NULL) {
    
  } else {
    
  }
  group_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_email);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.group_email)
}

// string user_email = 3;
void BigQueryAcl_Entry::clear_user_email() {
  user_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BigQueryAcl_Entry::user_email() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
  return user_email_.GetNoArena();
}
void BigQueryAcl_Entry::set_user_email(const ::std::string& value) {
  
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
}
#if LANG_CXX11
void BigQueryAcl_Entry::set_user_email(::std::string&& value) {
  
  user_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
}
#endif
void BigQueryAcl_Entry::set_user_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
}
void BigQueryAcl_Entry::set_user_email(const char* value, size_t size) {
  
  user_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
}
::std::string* BigQueryAcl_Entry::mutable_user_email() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
  return user_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BigQueryAcl_Entry::release_user_email() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
  
  return user_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BigQueryAcl_Entry::set_allocated_user_email(::std::string* user_email) {
  if (user_email != NULL) {
    
  } else {
    
  }
  user_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_email);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.user_email)
}

// string domain = 4;
void BigQueryAcl_Entry::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BigQueryAcl_Entry::domain() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
  return domain_.GetNoArena();
}
void BigQueryAcl_Entry::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
}
#if LANG_CXX11
void BigQueryAcl_Entry::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
}
#endif
void BigQueryAcl_Entry::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
}
void BigQueryAcl_Entry::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
}
::std::string* BigQueryAcl_Entry::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BigQueryAcl_Entry::release_domain() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BigQueryAcl_Entry::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.domain)
}

// string special_group = 5;
void BigQueryAcl_Entry::clear_special_group() {
  special_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BigQueryAcl_Entry::special_group() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
  return special_group_.GetNoArena();
}
void BigQueryAcl_Entry::set_special_group(const ::std::string& value) {
  
  special_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
}
#if LANG_CXX11
void BigQueryAcl_Entry::set_special_group(::std::string&& value) {
  
  special_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
}
#endif
void BigQueryAcl_Entry::set_special_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  special_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
}
void BigQueryAcl_Entry::set_special_group(const char* value, size_t size) {
  
  special_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
}
::std::string* BigQueryAcl_Entry::mutable_special_group() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
  return special_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BigQueryAcl_Entry::release_special_group() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
  
  return special_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BigQueryAcl_Entry::set_allocated_special_group(::std::string* special_group) {
  if (special_group != NULL) {
    
  } else {
    
  }
  special_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), special_group);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.special_group)
}

// .google.cloud.bigquery.logging.v1.TableName view_name = 6;
bool BigQueryAcl_Entry::has_view_name() const {
  return this != internal_default_instance() && view_name_ != NULL;
}
void BigQueryAcl_Entry::clear_view_name() {
  if (GetArenaNoVirtual() == NULL && view_name_ != NULL) delete view_name_;
  view_name_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::TableName& BigQueryAcl_Entry::view_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
  return view_name_ != NULL ? *view_name_
                         : *::google::cloud::bigquery::logging::v1::TableName::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::TableName* BigQueryAcl_Entry::mutable_view_name() {
  
  if (view_name_ == NULL) {
    view_name_ = new ::google::cloud::bigquery::logging::v1::TableName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
  return view_name_;
}
::google::cloud::bigquery::logging::v1::TableName* BigQueryAcl_Entry::release_view_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = view_name_;
  view_name_ = NULL;
  return temp;
}
void BigQueryAcl_Entry::set_allocated_view_name(::google::cloud::bigquery::logging::v1::TableName* view_name) {
  delete view_name_;
  view_name_ = view_name;
  if (view_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.view_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigQueryAcl::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigQueryAcl::BigQueryAcl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.BigQueryAcl)
}
BigQueryAcl::BigQueryAcl(const BigQueryAcl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.BigQueryAcl)
}

void BigQueryAcl::SharedCtor() {
  _cached_size_ = 0;
}

BigQueryAcl::~BigQueryAcl() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.BigQueryAcl)
  SharedDtor();
}

void BigQueryAcl::SharedDtor() {
}

void BigQueryAcl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigQueryAcl::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigQueryAcl& BigQueryAcl::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

BigQueryAcl* BigQueryAcl::New(::google::protobuf::Arena* arena) const {
  BigQueryAcl* n = new BigQueryAcl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BigQueryAcl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.BigQueryAcl)
  entries_.Clear();
}

bool BigQueryAcl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.BigQueryAcl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.bigquery.logging.v1.BigQueryAcl.Entry entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.BigQueryAcl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.BigQueryAcl)
  return false;
#undef DO_
}

void BigQueryAcl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.BigQueryAcl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.bigquery.logging.v1.BigQueryAcl.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.BigQueryAcl)
}

::google::protobuf::uint8* BigQueryAcl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.BigQueryAcl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.bigquery.logging.v1.BigQueryAcl.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entries(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.BigQueryAcl)
  return target;
}

size_t BigQueryAcl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.BigQueryAcl)
  size_t total_size = 0;

  // repeated .google.cloud.bigquery.logging.v1.BigQueryAcl.Entry entries = 1;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigQueryAcl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.BigQueryAcl)
  GOOGLE_DCHECK_NE(&from, this);
  const BigQueryAcl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigQueryAcl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.BigQueryAcl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.BigQueryAcl)
    MergeFrom(*source);
  }
}

void BigQueryAcl::MergeFrom(const BigQueryAcl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.BigQueryAcl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void BigQueryAcl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.BigQueryAcl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigQueryAcl::CopyFrom(const BigQueryAcl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.BigQueryAcl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigQueryAcl::IsInitialized() const {
  return true;
}

void BigQueryAcl::Swap(BigQueryAcl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigQueryAcl::InternalSwap(BigQueryAcl* other) {
  entries_.InternalSwap(&other->entries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigQueryAcl::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BigQueryAcl

// repeated .google.cloud.bigquery.logging.v1.BigQueryAcl.Entry entries = 1;
int BigQueryAcl::entries_size() const {
  return entries_.size();
}
void BigQueryAcl::clear_entries() {
  entries_.Clear();
}
const ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry& BigQueryAcl::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return entries_.Get(index);
}
::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* BigQueryAcl::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return entries_.Mutable(index);
}
::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry* BigQueryAcl::add_entries() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry >*
BigQueryAcl::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::BigQueryAcl_Entry >&
BigQueryAcl::entries() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.BigQueryAcl.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Job::kJobNameFieldNumber;
const int Job::kJobConfigurationFieldNumber;
const int Job::kJobStatusFieldNumber;
const int Job::kJobStatisticsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Job::Job()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.Job)
}
Job::Job(const Job& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_job_name()) {
    job_name_ = new ::google::cloud::bigquery::logging::v1::JobName(*from.job_name_);
  } else {
    job_name_ = NULL;
  }
  if (from.has_job_configuration()) {
    job_configuration_ = new ::google::cloud::bigquery::logging::v1::JobConfiguration(*from.job_configuration_);
  } else {
    job_configuration_ = NULL;
  }
  if (from.has_job_status()) {
    job_status_ = new ::google::cloud::bigquery::logging::v1::JobStatus(*from.job_status_);
  } else {
    job_status_ = NULL;
  }
  if (from.has_job_statistics()) {
    job_statistics_ = new ::google::cloud::bigquery::logging::v1::JobStatistics(*from.job_statistics_);
  } else {
    job_statistics_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.Job)
}

void Job::SharedCtor() {
  ::memset(&job_name_, 0, reinterpret_cast<char*>(&job_statistics_) -
    reinterpret_cast<char*>(&job_name_) + sizeof(job_statistics_));
  _cached_size_ = 0;
}

Job::~Job() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.Job)
  SharedDtor();
}

void Job::SharedDtor() {
  if (this != internal_default_instance()) {
    delete job_name_;
  }
  if (this != internal_default_instance()) {
    delete job_configuration_;
  }
  if (this != internal_default_instance()) {
    delete job_status_;
  }
  if (this != internal_default_instance()) {
    delete job_statistics_;
  }
}

void Job::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Job::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Job& Job::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Job* Job::New(::google::protobuf::Arena* arena) const {
  Job* n = new Job;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Job::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.Job)
  if (GetArenaNoVirtual() == NULL && job_name_ != NULL) {
    delete job_name_;
  }
  job_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && job_configuration_ != NULL) {
    delete job_configuration_;
  }
  job_configuration_ = NULL;
  if (GetArenaNoVirtual() == NULL && job_status_ != NULL) {
    delete job_status_;
  }
  job_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && job_statistics_ != NULL) {
    delete job_statistics_;
  }
  job_statistics_ = NULL;
}

bool Job::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.Job)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.JobName job_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobConfiguration job_configuration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobStatus job_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobStatistics job_statistics = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_statistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.Job)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.Job)
  return false;
#undef DO_
}

void Job::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.Job)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.JobName job_name = 1;
  if (this->has_job_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->job_name_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobConfiguration job_configuration = 2;
  if (this->has_job_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->job_configuration_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobStatus job_status = 3;
  if (this->has_job_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->job_status_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobStatistics job_statistics = 4;
  if (this->has_job_statistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->job_statistics_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.Job)
}

::google::protobuf::uint8* Job::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.Job)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.JobName job_name = 1;
  if (this->has_job_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->job_name_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobConfiguration job_configuration = 2;
  if (this->has_job_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->job_configuration_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobStatus job_status = 3;
  if (this->has_job_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->job_status_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobStatistics job_statistics = 4;
  if (this->has_job_statistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->job_statistics_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.Job)
  return target;
}

size_t Job::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.Job)
  size_t total_size = 0;

  // .google.cloud.bigquery.logging.v1.JobName job_name = 1;
  if (this->has_job_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->job_name_);
  }

  // .google.cloud.bigquery.logging.v1.JobConfiguration job_configuration = 2;
  if (this->has_job_configuration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->job_configuration_);
  }

  // .google.cloud.bigquery.logging.v1.JobStatus job_status = 3;
  if (this->has_job_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->job_status_);
  }

  // .google.cloud.bigquery.logging.v1.JobStatistics job_statistics = 4;
  if (this->has_job_statistics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->job_statistics_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Job::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.Job)
  GOOGLE_DCHECK_NE(&from, this);
  const Job* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Job>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.Job)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.Job)
    MergeFrom(*source);
  }
}

void Job::MergeFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.Job)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_job_name()) {
    mutable_job_name()->::google::cloud::bigquery::logging::v1::JobName::MergeFrom(from.job_name());
  }
  if (from.has_job_configuration()) {
    mutable_job_configuration()->::google::cloud::bigquery::logging::v1::JobConfiguration::MergeFrom(from.job_configuration());
  }
  if (from.has_job_status()) {
    mutable_job_status()->::google::cloud::bigquery::logging::v1::JobStatus::MergeFrom(from.job_status());
  }
  if (from.has_job_statistics()) {
    mutable_job_statistics()->::google::cloud::bigquery::logging::v1::JobStatistics::MergeFrom(from.job_statistics());
  }
}

void Job::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Job::CopyFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job::IsInitialized() const {
  return true;
}

void Job::Swap(Job* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Job::InternalSwap(Job* other) {
  std::swap(job_name_, other->job_name_);
  std::swap(job_configuration_, other->job_configuration_);
  std::swap(job_status_, other->job_status_);
  std::swap(job_statistics_, other->job_statistics_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Job::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Job

// .google.cloud.bigquery.logging.v1.JobName job_name = 1;
bool Job::has_job_name() const {
  return this != internal_default_instance() && job_name_ != NULL;
}
void Job::clear_job_name() {
  if (GetArenaNoVirtual() == NULL && job_name_ != NULL) delete job_name_;
  job_name_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::JobName& Job::job_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Job.job_name)
  return job_name_ != NULL ? *job_name_
                         : *::google::cloud::bigquery::logging::v1::JobName::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::JobName* Job::mutable_job_name() {
  
  if (job_name_ == NULL) {
    job_name_ = new ::google::cloud::bigquery::logging::v1::JobName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Job.job_name)
  return job_name_;
}
::google::cloud::bigquery::logging::v1::JobName* Job::release_job_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Job.job_name)
  
  ::google::cloud::bigquery::logging::v1::JobName* temp = job_name_;
  job_name_ = NULL;
  return temp;
}
void Job::set_allocated_job_name(::google::cloud::bigquery::logging::v1::JobName* job_name) {
  delete job_name_;
  job_name_ = job_name;
  if (job_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Job.job_name)
}

// .google.cloud.bigquery.logging.v1.JobConfiguration job_configuration = 2;
bool Job::has_job_configuration() const {
  return this != internal_default_instance() && job_configuration_ != NULL;
}
void Job::clear_job_configuration() {
  if (GetArenaNoVirtual() == NULL && job_configuration_ != NULL) delete job_configuration_;
  job_configuration_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::JobConfiguration& Job::job_configuration() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Job.job_configuration)
  return job_configuration_ != NULL ? *job_configuration_
                         : *::google::cloud::bigquery::logging::v1::JobConfiguration::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::JobConfiguration* Job::mutable_job_configuration() {
  
  if (job_configuration_ == NULL) {
    job_configuration_ = new ::google::cloud::bigquery::logging::v1::JobConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Job.job_configuration)
  return job_configuration_;
}
::google::cloud::bigquery::logging::v1::JobConfiguration* Job::release_job_configuration() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Job.job_configuration)
  
  ::google::cloud::bigquery::logging::v1::JobConfiguration* temp = job_configuration_;
  job_configuration_ = NULL;
  return temp;
}
void Job::set_allocated_job_configuration(::google::cloud::bigquery::logging::v1::JobConfiguration* job_configuration) {
  delete job_configuration_;
  job_configuration_ = job_configuration;
  if (job_configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Job.job_configuration)
}

// .google.cloud.bigquery.logging.v1.JobStatus job_status = 3;
bool Job::has_job_status() const {
  return this != internal_default_instance() && job_status_ != NULL;
}
void Job::clear_job_status() {
  if (GetArenaNoVirtual() == NULL && job_status_ != NULL) delete job_status_;
  job_status_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::JobStatus& Job::job_status() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Job.job_status)
  return job_status_ != NULL ? *job_status_
                         : *::google::cloud::bigquery::logging::v1::JobStatus::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::JobStatus* Job::mutable_job_status() {
  
  if (job_status_ == NULL) {
    job_status_ = new ::google::cloud::bigquery::logging::v1::JobStatus;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Job.job_status)
  return job_status_;
}
::google::cloud::bigquery::logging::v1::JobStatus* Job::release_job_status() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Job.job_status)
  
  ::google::cloud::bigquery::logging::v1::JobStatus* temp = job_status_;
  job_status_ = NULL;
  return temp;
}
void Job::set_allocated_job_status(::google::cloud::bigquery::logging::v1::JobStatus* job_status) {
  delete job_status_;
  job_status_ = job_status;
  if (job_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Job.job_status)
}

// .google.cloud.bigquery.logging.v1.JobStatistics job_statistics = 4;
bool Job::has_job_statistics() const {
  return this != internal_default_instance() && job_statistics_ != NULL;
}
void Job::clear_job_statistics() {
  if (GetArenaNoVirtual() == NULL && job_statistics_ != NULL) delete job_statistics_;
  job_statistics_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::JobStatistics& Job::job_statistics() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.Job.job_statistics)
  return job_statistics_ != NULL ? *job_statistics_
                         : *::google::cloud::bigquery::logging::v1::JobStatistics::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::JobStatistics* Job::mutable_job_statistics() {
  
  if (job_statistics_ == NULL) {
    job_statistics_ = new ::google::cloud::bigquery::logging::v1::JobStatistics;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.Job.job_statistics)
  return job_statistics_;
}
::google::cloud::bigquery::logging::v1::JobStatistics* Job::release_job_statistics() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.Job.job_statistics)
  
  ::google::cloud::bigquery::logging::v1::JobStatistics* temp = job_statistics_;
  job_statistics_ = NULL;
  return temp;
}
void Job::set_allocated_job_statistics(::google::cloud::bigquery::logging::v1::JobStatistics* job_statistics) {
  delete job_statistics_;
  job_statistics_ = job_statistics;
  if (job_statistics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.Job.job_statistics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobConfiguration_Query::kQueryFieldNumber;
const int JobConfiguration_Query::kDestinationTableFieldNumber;
const int JobConfiguration_Query::kCreateDispositionFieldNumber;
const int JobConfiguration_Query::kWriteDispositionFieldNumber;
const int JobConfiguration_Query::kDefaultDatasetFieldNumber;
const int JobConfiguration_Query::kTableDefinitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobConfiguration_Query::JobConfiguration_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
}
JobConfiguration_Query::JobConfiguration_Query(const JobConfiguration_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      table_definitions_(from.table_definitions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query().size() > 0) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  create_disposition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.create_disposition().size() > 0) {
    create_disposition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_disposition_);
  }
  write_disposition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.write_disposition().size() > 0) {
    write_disposition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.write_disposition_);
  }
  if (from.has_destination_table()) {
    destination_table_ = new ::google::cloud::bigquery::logging::v1::TableName(*from.destination_table_);
  } else {
    destination_table_ = NULL;
  }
  if (from.has_default_dataset()) {
    default_dataset_ = new ::google::cloud::bigquery::logging::v1::DatasetName(*from.default_dataset_);
  } else {
    default_dataset_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
}

void JobConfiguration_Query::SharedCtor() {
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_disposition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_disposition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&destination_table_, 0, reinterpret_cast<char*>(&default_dataset_) -
    reinterpret_cast<char*>(&destination_table_) + sizeof(default_dataset_));
  _cached_size_ = 0;
}

JobConfiguration_Query::~JobConfiguration_Query() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  SharedDtor();
}

void JobConfiguration_Query::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_disposition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_disposition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete destination_table_;
  }
  if (this != internal_default_instance()) {
    delete default_dataset_;
  }
}

void JobConfiguration_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobConfiguration_Query::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobConfiguration_Query& JobConfiguration_Query::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobConfiguration_Query* JobConfiguration_Query::New(::google::protobuf::Arena* arena) const {
  JobConfiguration_Query* n = new JobConfiguration_Query;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobConfiguration_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  table_definitions_.Clear();
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && destination_table_ != NULL) {
    delete destination_table_;
  }
  destination_table_ = NULL;
  if (GetArenaNoVirtual() == NULL && default_dataset_ != NULL) {
    delete default_dataset_;
  }
  default_dataset_ = NULL;
}

bool JobConfiguration_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobConfiguration.Query.query"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string create_disposition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_disposition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->create_disposition().data(), this->create_disposition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string write_disposition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_write_disposition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->write_disposition().data(), this->write_disposition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_dataset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.bigquery.logging.v1.TableDefinition table_definitions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_definitions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  return false;
#undef DO_
}

void JobConfiguration_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Query.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
  if (this->has_destination_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->destination_table_, output);
  }

  // string create_disposition = 3;
  if (this->create_disposition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->create_disposition().data(), this->create_disposition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->create_disposition(), output);
  }

  // string write_disposition = 4;
  if (this->write_disposition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->write_disposition().data(), this->write_disposition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->write_disposition(), output);
  }

  // .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 5;
  if (this->has_default_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->default_dataset_, output);
  }

  // repeated .google.cloud.bigquery.logging.v1.TableDefinition table_definitions = 6;
  for (unsigned int i = 0, n = this->table_definitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->table_definitions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
}

::google::protobuf::uint8* JobConfiguration_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1;
  if (this->query().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Query.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
  if (this->has_destination_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->destination_table_, deterministic, target);
  }

  // string create_disposition = 3;
  if (this->create_disposition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->create_disposition().data(), this->create_disposition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->create_disposition(), target);
  }

  // string write_disposition = 4;
  if (this->write_disposition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->write_disposition().data(), this->write_disposition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->write_disposition(), target);
  }

  // .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 5;
  if (this->has_default_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->default_dataset_, deterministic, target);
  }

  // repeated .google.cloud.bigquery.logging.v1.TableDefinition table_definitions = 6;
  for (unsigned int i = 0, n = this->table_definitions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->table_definitions(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  return target;
}

size_t JobConfiguration_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  size_t total_size = 0;

  // repeated .google.cloud.bigquery.logging.v1.TableDefinition table_definitions = 6;
  {
    unsigned int count = this->table_definitions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_definitions(i));
    }
  }

  // string query = 1;
  if (this->query().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  // string create_disposition = 3;
  if (this->create_disposition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->create_disposition());
  }

  // string write_disposition = 4;
  if (this->write_disposition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->write_disposition());
  }

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
  if (this->has_destination_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->destination_table_);
  }

  // .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 5;
  if (this->has_default_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->default_dataset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobConfiguration_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const JobConfiguration_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobConfiguration_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
    MergeFrom(*source);
  }
}

void JobConfiguration_Query::MergeFrom(const JobConfiguration_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_definitions_.MergeFrom(from.table_definitions_);
  if (from.query().size() > 0) {

    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  if (from.create_disposition().size() > 0) {

    create_disposition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_disposition_);
  }
  if (from.write_disposition().size() > 0) {

    write_disposition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.write_disposition_);
  }
  if (from.has_destination_table()) {
    mutable_destination_table()->::google::cloud::bigquery::logging::v1::TableName::MergeFrom(from.destination_table());
  }
  if (from.has_default_dataset()) {
    mutable_default_dataset()->::google::cloud::bigquery::logging::v1::DatasetName::MergeFrom(from.default_dataset());
  }
}

void JobConfiguration_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobConfiguration_Query::CopyFrom(const JobConfiguration_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobConfiguration_Query::IsInitialized() const {
  return true;
}

void JobConfiguration_Query::Swap(JobConfiguration_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobConfiguration_Query::InternalSwap(JobConfiguration_Query* other) {
  table_definitions_.InternalSwap(&other->table_definitions_);
  query_.Swap(&other->query_);
  create_disposition_.Swap(&other->create_disposition_);
  write_disposition_.Swap(&other->write_disposition_);
  std::swap(destination_table_, other->destination_table_);
  std::swap(default_dataset_, other->default_dataset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobConfiguration_Query::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobConfiguration_Query

// string query = 1;
void JobConfiguration_Query::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobConfiguration_Query::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
  return query_.GetNoArena();
}
void JobConfiguration_Query::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
}
#if LANG_CXX11
void JobConfiguration_Query::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
}
#endif
void JobConfiguration_Query::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
}
void JobConfiguration_Query::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
}
::std::string* JobConfiguration_Query::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobConfiguration_Query::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobConfiguration_Query::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.query)
}

// .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
bool JobConfiguration_Query::has_destination_table() const {
  return this != internal_default_instance() && destination_table_ != NULL;
}
void JobConfiguration_Query::clear_destination_table() {
  if (GetArenaNoVirtual() == NULL && destination_table_ != NULL) delete destination_table_;
  destination_table_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_Query::destination_table() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
  return destination_table_ != NULL ? *destination_table_
                         : *::google::cloud::bigquery::logging::v1::TableName::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Query::mutable_destination_table() {
  
  if (destination_table_ == NULL) {
    destination_table_ = new ::google::cloud::bigquery::logging::v1::TableName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
  return destination_table_;
}
::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Query::release_destination_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = destination_table_;
  destination_table_ = NULL;
  return temp;
}
void JobConfiguration_Query::set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table) {
  delete destination_table_;
  destination_table_ = destination_table;
  if (destination_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.destination_table)
}

// string create_disposition = 3;
void JobConfiguration_Query::clear_create_disposition() {
  create_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobConfiguration_Query::create_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
  return create_disposition_.GetNoArena();
}
void JobConfiguration_Query::set_create_disposition(const ::std::string& value) {
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
}
#if LANG_CXX11
void JobConfiguration_Query::set_create_disposition(::std::string&& value) {
  
  create_disposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
}
#endif
void JobConfiguration_Query::set_create_disposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
}
void JobConfiguration_Query::set_create_disposition(const char* value, size_t size) {
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
}
::std::string* JobConfiguration_Query::mutable_create_disposition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
  return create_disposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobConfiguration_Query::release_create_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
  
  return create_disposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobConfiguration_Query::set_allocated_create_disposition(::std::string* create_disposition) {
  if (create_disposition != NULL) {
    
  } else {
    
  }
  create_disposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_disposition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.create_disposition)
}

// string write_disposition = 4;
void JobConfiguration_Query::clear_write_disposition() {
  write_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobConfiguration_Query::write_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
  return write_disposition_.GetNoArena();
}
void JobConfiguration_Query::set_write_disposition(const ::std::string& value) {
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
}
#if LANG_CXX11
void JobConfiguration_Query::set_write_disposition(::std::string&& value) {
  
  write_disposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
}
#endif
void JobConfiguration_Query::set_write_disposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
}
void JobConfiguration_Query::set_write_disposition(const char* value, size_t size) {
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
}
::std::string* JobConfiguration_Query::mutable_write_disposition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
  return write_disposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobConfiguration_Query::release_write_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
  
  return write_disposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobConfiguration_Query::set_allocated_write_disposition(::std::string* write_disposition) {
  if (write_disposition != NULL) {
    
  } else {
    
  }
  write_disposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), write_disposition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.write_disposition)
}

// .google.cloud.bigquery.logging.v1.DatasetName default_dataset = 5;
bool JobConfiguration_Query::has_default_dataset() const {
  return this != internal_default_instance() && default_dataset_ != NULL;
}
void JobConfiguration_Query::clear_default_dataset() {
  if (GetArenaNoVirtual() == NULL && default_dataset_ != NULL) delete default_dataset_;
  default_dataset_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::DatasetName& JobConfiguration_Query::default_dataset() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
  return default_dataset_ != NULL ? *default_dataset_
                         : *::google::cloud::bigquery::logging::v1::DatasetName::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::DatasetName* JobConfiguration_Query::mutable_default_dataset() {
  
  if (default_dataset_ == NULL) {
    default_dataset_ = new ::google::cloud::bigquery::logging::v1::DatasetName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
  return default_dataset_;
}
::google::cloud::bigquery::logging::v1::DatasetName* JobConfiguration_Query::release_default_dataset() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
  
  ::google::cloud::bigquery::logging::v1::DatasetName* temp = default_dataset_;
  default_dataset_ = NULL;
  return temp;
}
void JobConfiguration_Query::set_allocated_default_dataset(::google::cloud::bigquery::logging::v1::DatasetName* default_dataset) {
  delete default_dataset_;
  default_dataset_ = default_dataset;
  if (default_dataset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Query.default_dataset)
}

// repeated .google.cloud.bigquery.logging.v1.TableDefinition table_definitions = 6;
int JobConfiguration_Query::table_definitions_size() const {
  return table_definitions_.size();
}
void JobConfiguration_Query::clear_table_definitions() {
  table_definitions_.Clear();
}
const ::google::cloud::bigquery::logging::v1::TableDefinition& JobConfiguration_Query::table_definitions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return table_definitions_.Get(index);
}
::google::cloud::bigquery::logging::v1::TableDefinition* JobConfiguration_Query::mutable_table_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return table_definitions_.Mutable(index);
}
::google::cloud::bigquery::logging::v1::TableDefinition* JobConfiguration_Query::add_table_definitions() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return table_definitions_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDefinition >*
JobConfiguration_Query::mutable_table_definitions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return &table_definitions_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableDefinition >&
JobConfiguration_Query::table_definitions() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobConfiguration.Query.table_definitions)
  return table_definitions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobConfiguration_Load::kSourceUrisFieldNumber;
const int JobConfiguration_Load::kSchemaJsonFieldNumber;
const int JobConfiguration_Load::kDestinationTableFieldNumber;
const int JobConfiguration_Load::kCreateDispositionFieldNumber;
const int JobConfiguration_Load::kWriteDispositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobConfiguration_Load::JobConfiguration_Load()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
}
JobConfiguration_Load::JobConfiguration_Load(const JobConfiguration_Load& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      source_uris_(from.source_uris_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  create_disposition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.create_disposition().size() > 0) {
    create_disposition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_disposition_);
  }
  write_disposition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.write_disposition().size() > 0) {
    write_disposition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.write_disposition_);
  }
  schema_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.schema_json().size() > 0) {
    schema_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_json_);
  }
  if (from.has_destination_table()) {
    destination_table_ = new ::google::cloud::bigquery::logging::v1::TableName(*from.destination_table_);
  } else {
    destination_table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
}

void JobConfiguration_Load::SharedCtor() {
  create_disposition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_disposition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_table_ = NULL;
  _cached_size_ = 0;
}

JobConfiguration_Load::~JobConfiguration_Load() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  SharedDtor();
}

void JobConfiguration_Load::SharedDtor() {
  create_disposition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_disposition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete destination_table_;
  }
}

void JobConfiguration_Load::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobConfiguration_Load::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobConfiguration_Load& JobConfiguration_Load::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobConfiguration_Load* JobConfiguration_Load::New(::google::protobuf::Arena* arena) const {
  JobConfiguration_Load* n = new JobConfiguration_Load;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobConfiguration_Load::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  source_uris_.Clear();
  create_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && destination_table_ != NULL) {
    delete destination_table_;
  }
  destination_table_ = NULL;
}

bool JobConfiguration_Load::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string source_uris = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source_uris()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_uris(this->source_uris_size() - 1).data(),
            this->source_uris(this->source_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.TableName destination_table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string create_disposition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_disposition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->create_disposition().data(), this->create_disposition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string write_disposition = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_write_disposition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->write_disposition().data(), this->write_disposition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string schema_json = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->schema_json().data(), this->schema_json().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  return false;
#undef DO_
}

void JobConfiguration_Load::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string source_uris = 1;
  for (int i = 0, n = this->source_uris_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uris(i).data(), this->source_uris(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->source_uris(i), output);
  }

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 3;
  if (this->has_destination_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->destination_table_, output);
  }

  // string create_disposition = 4;
  if (this->create_disposition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->create_disposition().data(), this->create_disposition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->create_disposition(), output);
  }

  // string write_disposition = 5;
  if (this->write_disposition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->write_disposition().data(), this->write_disposition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->write_disposition(), output);
  }

  // string schema_json = 6;
  if (this->schema_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schema_json().data(), this->schema_json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->schema_json(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
}

::google::protobuf::uint8* JobConfiguration_Load::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string source_uris = 1;
  for (int i = 0, n = this->source_uris_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uris(i).data(), this->source_uris(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->source_uris(i), target);
  }

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 3;
  if (this->has_destination_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->destination_table_, deterministic, target);
  }

  // string create_disposition = 4;
  if (this->create_disposition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->create_disposition().data(), this->create_disposition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->create_disposition(), target);
  }

  // string write_disposition = 5;
  if (this->write_disposition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->write_disposition().data(), this->write_disposition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->write_disposition(), target);
  }

  // string schema_json = 6;
  if (this->schema_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schema_json().data(), this->schema_json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->schema_json(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  return target;
}

size_t JobConfiguration_Load::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  size_t total_size = 0;

  // repeated string source_uris = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_uris_size());
  for (int i = 0, n = this->source_uris_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source_uris(i));
  }

  // string create_disposition = 4;
  if (this->create_disposition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->create_disposition());
  }

  // string write_disposition = 5;
  if (this->write_disposition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->write_disposition());
  }

  // string schema_json = 6;
  if (this->schema_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->schema_json());
  }

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 3;
  if (this->has_destination_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->destination_table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobConfiguration_Load::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  GOOGLE_DCHECK_NE(&from, this);
  const JobConfiguration_Load* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobConfiguration_Load>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
    MergeFrom(*source);
  }
}

void JobConfiguration_Load::MergeFrom(const JobConfiguration_Load& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_uris_.MergeFrom(from.source_uris_);
  if (from.create_disposition().size() > 0) {

    create_disposition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_disposition_);
  }
  if (from.write_disposition().size() > 0) {

    write_disposition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.write_disposition_);
  }
  if (from.schema_json().size() > 0) {

    schema_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_json_);
  }
  if (from.has_destination_table()) {
    mutable_destination_table()->::google::cloud::bigquery::logging::v1::TableName::MergeFrom(from.destination_table());
  }
}

void JobConfiguration_Load::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobConfiguration_Load::CopyFrom(const JobConfiguration_Load& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobConfiguration_Load::IsInitialized() const {
  return true;
}

void JobConfiguration_Load::Swap(JobConfiguration_Load* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobConfiguration_Load::InternalSwap(JobConfiguration_Load* other) {
  source_uris_.InternalSwap(&other->source_uris_);
  create_disposition_.Swap(&other->create_disposition_);
  write_disposition_.Swap(&other->write_disposition_);
  schema_json_.Swap(&other->schema_json_);
  std::swap(destination_table_, other->destination_table_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobConfiguration_Load::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobConfiguration_Load

// repeated string source_uris = 1;
int JobConfiguration_Load::source_uris_size() const {
  return source_uris_.size();
}
void JobConfiguration_Load::clear_source_uris() {
  source_uris_.Clear();
}
const ::std::string& JobConfiguration_Load::source_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return source_uris_.Get(index);
}
::std::string* JobConfiguration_Load::mutable_source_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return source_uris_.Mutable(index);
}
void JobConfiguration_Load::set_source_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  source_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void JobConfiguration_Load::set_source_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  source_uris_.Mutable(index)->assign(std::move(value));
}
#endif
void JobConfiguration_Load::set_source_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
void JobConfiguration_Load::set_source_uris(int index, const char* value, size_t size) {
  source_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
::std::string* JobConfiguration_Load::add_source_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return source_uris_.Add();
}
void JobConfiguration_Load::add_source_uris(const ::std::string& value) {
  source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
#if LANG_CXX11
void JobConfiguration_Load::add_source_uris(::std::string&& value) {
  source_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
#endif
void JobConfiguration_Load::add_source_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
void JobConfiguration_Load::add_source_uris(const char* value, size_t size) {
  source_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
JobConfiguration_Load::source_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return source_uris_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
JobConfiguration_Load::mutable_source_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobConfiguration.Load.source_uris)
  return &source_uris_;
}

// string schema_json = 6;
void JobConfiguration_Load::clear_schema_json() {
  schema_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobConfiguration_Load::schema_json() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
  return schema_json_.GetNoArena();
}
void JobConfiguration_Load::set_schema_json(const ::std::string& value) {
  
  schema_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
}
#if LANG_CXX11
void JobConfiguration_Load::set_schema_json(::std::string&& value) {
  
  schema_json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
}
#endif
void JobConfiguration_Load::set_schema_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  schema_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
}
void JobConfiguration_Load::set_schema_json(const char* value, size_t size) {
  
  schema_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
}
::std::string* JobConfiguration_Load::mutable_schema_json() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
  return schema_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobConfiguration_Load::release_schema_json() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
  
  return schema_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobConfiguration_Load::set_allocated_schema_json(::std::string* schema_json) {
  if (schema_json != NULL) {
    
  } else {
    
  }
  schema_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema_json);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.schema_json)
}

// .google.cloud.bigquery.logging.v1.TableName destination_table = 3;
bool JobConfiguration_Load::has_destination_table() const {
  return this != internal_default_instance() && destination_table_ != NULL;
}
void JobConfiguration_Load::clear_destination_table() {
  if (GetArenaNoVirtual() == NULL && destination_table_ != NULL) delete destination_table_;
  destination_table_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_Load::destination_table() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
  return destination_table_ != NULL ? *destination_table_
                         : *::google::cloud::bigquery::logging::v1::TableName::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Load::mutable_destination_table() {
  
  if (destination_table_ == NULL) {
    destination_table_ = new ::google::cloud::bigquery::logging::v1::TableName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
  return destination_table_;
}
::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Load::release_destination_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = destination_table_;
  destination_table_ = NULL;
  return temp;
}
void JobConfiguration_Load::set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table) {
  delete destination_table_;
  destination_table_ = destination_table;
  if (destination_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.destination_table)
}

// string create_disposition = 4;
void JobConfiguration_Load::clear_create_disposition() {
  create_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobConfiguration_Load::create_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
  return create_disposition_.GetNoArena();
}
void JobConfiguration_Load::set_create_disposition(const ::std::string& value) {
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
}
#if LANG_CXX11
void JobConfiguration_Load::set_create_disposition(::std::string&& value) {
  
  create_disposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
}
#endif
void JobConfiguration_Load::set_create_disposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
}
void JobConfiguration_Load::set_create_disposition(const char* value, size_t size) {
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
}
::std::string* JobConfiguration_Load::mutable_create_disposition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
  return create_disposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobConfiguration_Load::release_create_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
  
  return create_disposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobConfiguration_Load::set_allocated_create_disposition(::std::string* create_disposition) {
  if (create_disposition != NULL) {
    
  } else {
    
  }
  create_disposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_disposition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.create_disposition)
}

// string write_disposition = 5;
void JobConfiguration_Load::clear_write_disposition() {
  write_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobConfiguration_Load::write_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
  return write_disposition_.GetNoArena();
}
void JobConfiguration_Load::set_write_disposition(const ::std::string& value) {
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
}
#if LANG_CXX11
void JobConfiguration_Load::set_write_disposition(::std::string&& value) {
  
  write_disposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
}
#endif
void JobConfiguration_Load::set_write_disposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
}
void JobConfiguration_Load::set_write_disposition(const char* value, size_t size) {
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
}
::std::string* JobConfiguration_Load::mutable_write_disposition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
  return write_disposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobConfiguration_Load::release_write_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
  
  return write_disposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobConfiguration_Load::set_allocated_write_disposition(::std::string* write_disposition) {
  if (write_disposition != NULL) {
    
  } else {
    
  }
  write_disposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), write_disposition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Load.write_disposition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobConfiguration_Extract::kDestinationUrisFieldNumber;
const int JobConfiguration_Extract::kSourceTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobConfiguration_Extract::JobConfiguration_Extract()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
}
JobConfiguration_Extract::JobConfiguration_Extract(const JobConfiguration_Extract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      destination_uris_(from.destination_uris_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_table()) {
    source_table_ = new ::google::cloud::bigquery::logging::v1::TableName(*from.source_table_);
  } else {
    source_table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
}

void JobConfiguration_Extract::SharedCtor() {
  source_table_ = NULL;
  _cached_size_ = 0;
}

JobConfiguration_Extract::~JobConfiguration_Extract() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  SharedDtor();
}

void JobConfiguration_Extract::SharedDtor() {
  if (this != internal_default_instance()) {
    delete source_table_;
  }
}

void JobConfiguration_Extract::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobConfiguration_Extract::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobConfiguration_Extract& JobConfiguration_Extract::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobConfiguration_Extract* JobConfiguration_Extract::New(::google::protobuf::Arena* arena) const {
  JobConfiguration_Extract* n = new JobConfiguration_Extract;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobConfiguration_Extract::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  destination_uris_.Clear();
  if (GetArenaNoVirtual() == NULL && source_table_ != NULL) {
    delete source_table_;
  }
  source_table_ = NULL;
}

bool JobConfiguration_Extract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string destination_uris = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_destination_uris()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination_uris(this->destination_uris_size() - 1).data(),
            this->destination_uris(this->destination_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.TableName source_table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  return false;
#undef DO_
}

void JobConfiguration_Extract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string destination_uris = 1;
  for (int i = 0, n = this->destination_uris_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_uris(i).data(), this->destination_uris(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->destination_uris(i), output);
  }

  // .google.cloud.bigquery.logging.v1.TableName source_table = 2;
  if (this->has_source_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->source_table_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
}

::google::protobuf::uint8* JobConfiguration_Extract::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string destination_uris = 1;
  for (int i = 0, n = this->destination_uris_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_uris(i).data(), this->destination_uris(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->destination_uris(i), target);
  }

  // .google.cloud.bigquery.logging.v1.TableName source_table = 2;
  if (this->has_source_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->source_table_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  return target;
}

size_t JobConfiguration_Extract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  size_t total_size = 0;

  // repeated string destination_uris = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->destination_uris_size());
  for (int i = 0, n = this->destination_uris_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->destination_uris(i));
  }

  // .google.cloud.bigquery.logging.v1.TableName source_table = 2;
  if (this->has_source_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobConfiguration_Extract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  GOOGLE_DCHECK_NE(&from, this);
  const JobConfiguration_Extract* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobConfiguration_Extract>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
    MergeFrom(*source);
  }
}

void JobConfiguration_Extract::MergeFrom(const JobConfiguration_Extract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  destination_uris_.MergeFrom(from.destination_uris_);
  if (from.has_source_table()) {
    mutable_source_table()->::google::cloud::bigquery::logging::v1::TableName::MergeFrom(from.source_table());
  }
}

void JobConfiguration_Extract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobConfiguration_Extract::CopyFrom(const JobConfiguration_Extract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.Extract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobConfiguration_Extract::IsInitialized() const {
  return true;
}

void JobConfiguration_Extract::Swap(JobConfiguration_Extract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobConfiguration_Extract::InternalSwap(JobConfiguration_Extract* other) {
  destination_uris_.InternalSwap(&other->destination_uris_);
  std::swap(source_table_, other->source_table_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobConfiguration_Extract::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobConfiguration_Extract

// repeated string destination_uris = 1;
int JobConfiguration_Extract::destination_uris_size() const {
  return destination_uris_.size();
}
void JobConfiguration_Extract::clear_destination_uris() {
  destination_uris_.Clear();
}
const ::std::string& JobConfiguration_Extract::destination_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return destination_uris_.Get(index);
}
::std::string* JobConfiguration_Extract::mutable_destination_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return destination_uris_.Mutable(index);
}
void JobConfiguration_Extract::set_destination_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  destination_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void JobConfiguration_Extract::set_destination_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  destination_uris_.Mutable(index)->assign(std::move(value));
}
#endif
void JobConfiguration_Extract::set_destination_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  destination_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
void JobConfiguration_Extract::set_destination_uris(int index, const char* value, size_t size) {
  destination_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
::std::string* JobConfiguration_Extract::add_destination_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return destination_uris_.Add();
}
void JobConfiguration_Extract::add_destination_uris(const ::std::string& value) {
  destination_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
#if LANG_CXX11
void JobConfiguration_Extract::add_destination_uris(::std::string&& value) {
  destination_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
#endif
void JobConfiguration_Extract::add_destination_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  destination_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
void JobConfiguration_Extract::add_destination_uris(const char* value, size_t size) {
  destination_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
JobConfiguration_Extract::destination_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return destination_uris_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
JobConfiguration_Extract::mutable_destination_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.destination_uris)
  return &destination_uris_;
}

// .google.cloud.bigquery.logging.v1.TableName source_table = 2;
bool JobConfiguration_Extract::has_source_table() const {
  return this != internal_default_instance() && source_table_ != NULL;
}
void JobConfiguration_Extract::clear_source_table() {
  if (GetArenaNoVirtual() == NULL && source_table_ != NULL) delete source_table_;
  source_table_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_Extract::source_table() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
  return source_table_ != NULL ? *source_table_
                         : *::google::cloud::bigquery::logging::v1::TableName::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Extract::mutable_source_table() {
  
  if (source_table_ == NULL) {
    source_table_ = new ::google::cloud::bigquery::logging::v1::TableName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
  return source_table_;
}
::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_Extract::release_source_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = source_table_;
  source_table_ = NULL;
  return temp;
}
void JobConfiguration_Extract::set_allocated_source_table(::google::cloud::bigquery::logging::v1::TableName* source_table) {
  delete source_table_;
  source_table_ = source_table;
  if (source_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.Extract.source_table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobConfiguration_TableCopy::kSourceTablesFieldNumber;
const int JobConfiguration_TableCopy::kDestinationTableFieldNumber;
const int JobConfiguration_TableCopy::kCreateDispositionFieldNumber;
const int JobConfiguration_TableCopy::kWriteDispositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobConfiguration_TableCopy::JobConfiguration_TableCopy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
}
JobConfiguration_TableCopy::JobConfiguration_TableCopy(const JobConfiguration_TableCopy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      source_tables_(from.source_tables_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  create_disposition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.create_disposition().size() > 0) {
    create_disposition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_disposition_);
  }
  write_disposition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.write_disposition().size() > 0) {
    write_disposition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.write_disposition_);
  }
  if (from.has_destination_table()) {
    destination_table_ = new ::google::cloud::bigquery::logging::v1::TableName(*from.destination_table_);
  } else {
    destination_table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
}

void JobConfiguration_TableCopy::SharedCtor() {
  create_disposition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_disposition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_table_ = NULL;
  _cached_size_ = 0;
}

JobConfiguration_TableCopy::~JobConfiguration_TableCopy() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  SharedDtor();
}

void JobConfiguration_TableCopy::SharedDtor() {
  create_disposition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_disposition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete destination_table_;
  }
}

void JobConfiguration_TableCopy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobConfiguration_TableCopy::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobConfiguration_TableCopy& JobConfiguration_TableCopy::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobConfiguration_TableCopy* JobConfiguration_TableCopy::New(::google::protobuf::Arena* arena) const {
  JobConfiguration_TableCopy* n = new JobConfiguration_TableCopy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobConfiguration_TableCopy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  source_tables_.Clear();
  create_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && destination_table_ != NULL) {
    delete destination_table_;
  }
  destination_table_ = NULL;
}

bool JobConfiguration_TableCopy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.bigquery.logging.v1.TableName source_tables = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_source_tables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string create_disposition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_disposition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->create_disposition().data(), this->create_disposition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string write_disposition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_write_disposition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->write_disposition().data(), this->write_disposition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  return false;
#undef DO_
}

void JobConfiguration_TableCopy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.bigquery.logging.v1.TableName source_tables = 1;
  for (unsigned int i = 0, n = this->source_tables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->source_tables(i), output);
  }

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
  if (this->has_destination_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->destination_table_, output);
  }

  // string create_disposition = 3;
  if (this->create_disposition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->create_disposition().data(), this->create_disposition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->create_disposition(), output);
  }

  // string write_disposition = 4;
  if (this->write_disposition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->write_disposition().data(), this->write_disposition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->write_disposition(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
}

::google::protobuf::uint8* JobConfiguration_TableCopy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.bigquery.logging.v1.TableName source_tables = 1;
  for (unsigned int i = 0, n = this->source_tables_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->source_tables(i), deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
  if (this->has_destination_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->destination_table_, deterministic, target);
  }

  // string create_disposition = 3;
  if (this->create_disposition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->create_disposition().data(), this->create_disposition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->create_disposition(), target);
  }

  // string write_disposition = 4;
  if (this->write_disposition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->write_disposition().data(), this->write_disposition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->write_disposition(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  return target;
}

size_t JobConfiguration_TableCopy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  size_t total_size = 0;

  // repeated .google.cloud.bigquery.logging.v1.TableName source_tables = 1;
  {
    unsigned int count = this->source_tables_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source_tables(i));
    }
  }

  // string create_disposition = 3;
  if (this->create_disposition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->create_disposition());
  }

  // string write_disposition = 4;
  if (this->write_disposition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->write_disposition());
  }

  // .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
  if (this->has_destination_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->destination_table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobConfiguration_TableCopy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  GOOGLE_DCHECK_NE(&from, this);
  const JobConfiguration_TableCopy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobConfiguration_TableCopy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
    MergeFrom(*source);
  }
}

void JobConfiguration_TableCopy::MergeFrom(const JobConfiguration_TableCopy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_tables_.MergeFrom(from.source_tables_);
  if (from.create_disposition().size() > 0) {

    create_disposition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_disposition_);
  }
  if (from.write_disposition().size() > 0) {

    write_disposition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.write_disposition_);
  }
  if (from.has_destination_table()) {
    mutable_destination_table()->::google::cloud::bigquery::logging::v1::TableName::MergeFrom(from.destination_table());
  }
}

void JobConfiguration_TableCopy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobConfiguration_TableCopy::CopyFrom(const JobConfiguration_TableCopy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobConfiguration_TableCopy::IsInitialized() const {
  return true;
}

void JobConfiguration_TableCopy::Swap(JobConfiguration_TableCopy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobConfiguration_TableCopy::InternalSwap(JobConfiguration_TableCopy* other) {
  source_tables_.InternalSwap(&other->source_tables_);
  create_disposition_.Swap(&other->create_disposition_);
  write_disposition_.Swap(&other->write_disposition_);
  std::swap(destination_table_, other->destination_table_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobConfiguration_TableCopy::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobConfiguration_TableCopy

// repeated .google.cloud.bigquery.logging.v1.TableName source_tables = 1;
int JobConfiguration_TableCopy::source_tables_size() const {
  return source_tables_.size();
}
void JobConfiguration_TableCopy::clear_source_tables() {
  source_tables_.Clear();
}
const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_TableCopy::source_tables(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return source_tables_.Get(index);
}
::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::mutable_source_tables(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return source_tables_.Mutable(index);
}
::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::add_source_tables() {
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return source_tables_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >*
JobConfiguration_TableCopy::mutable_source_tables() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return &source_tables_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::bigquery::logging::v1::TableName >&
JobConfiguration_TableCopy::source_tables() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.source_tables)
  return source_tables_;
}

// .google.cloud.bigquery.logging.v1.TableName destination_table = 2;
bool JobConfiguration_TableCopy::has_destination_table() const {
  return this != internal_default_instance() && destination_table_ != NULL;
}
void JobConfiguration_TableCopy::clear_destination_table() {
  if (GetArenaNoVirtual() == NULL && destination_table_ != NULL) delete destination_table_;
  destination_table_ = NULL;
}
const ::google::cloud::bigquery::logging::v1::TableName& JobConfiguration_TableCopy::destination_table() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
  return destination_table_ != NULL ? *destination_table_
                         : *::google::cloud::bigquery::logging::v1::TableName::internal_default_instance();
}
::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::mutable_destination_table() {
  
  if (destination_table_ == NULL) {
    destination_table_ = new ::google::cloud::bigquery::logging::v1::TableName;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
  return destination_table_;
}
::google::cloud::bigquery::logging::v1::TableName* JobConfiguration_TableCopy::release_destination_table() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
  
  ::google::cloud::bigquery::logging::v1::TableName* temp = destination_table_;
  destination_table_ = NULL;
  return temp;
}
void JobConfiguration_TableCopy::set_allocated_destination_table(::google::cloud::bigquery::logging::v1::TableName* destination_table) {
  delete destination_table_;
  destination_table_ = destination_table;
  if (destination_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.destination_table)
}

// string create_disposition = 3;
void JobConfiguration_TableCopy::clear_create_disposition() {
  create_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobConfiguration_TableCopy::create_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
  return create_disposition_.GetNoArena();
}
void JobConfiguration_TableCopy::set_create_disposition(const ::std::string& value) {
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
}
#if LANG_CXX11
void JobConfiguration_TableCopy::set_create_disposition(::std::string&& value) {
  
  create_disposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
}
#endif
void JobConfiguration_TableCopy::set_create_disposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
}
void JobConfiguration_TableCopy::set_create_disposition(const char* value, size_t size) {
  
  create_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
}
::std::string* JobConfiguration_TableCopy::mutable_create_disposition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
  return create_disposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobConfiguration_TableCopy::release_create_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
  
  return create_disposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobConfiguration_TableCopy::set_allocated_create_disposition(::std::string* create_disposition) {
  if (create_disposition != NULL) {
    
  } else {
    
  }
  create_disposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_disposition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.create_disposition)
}

// string write_disposition = 4;
void JobConfiguration_TableCopy::clear_write_disposition() {
  write_disposition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobConfiguration_TableCopy::write_disposition() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
  return write_disposition_.GetNoArena();
}
void JobConfiguration_TableCopy::set_write_disposition(const ::std::string& value) {
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
}
#if LANG_CXX11
void JobConfiguration_TableCopy::set_write_disposition(::std::string&& value) {
  
  write_disposition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
}
#endif
void JobConfiguration_TableCopy::set_write_disposition(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
}
void JobConfiguration_TableCopy::set_write_disposition(const char* value, size_t size) {
  
  write_disposition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
}
::std::string* JobConfiguration_TableCopy::mutable_write_disposition() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
  return write_disposition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobConfiguration_TableCopy::release_write_disposition() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
  
  return write_disposition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobConfiguration_TableCopy::set_allocated_write_disposition(::std::string* write_disposition) {
  if (write_disposition != NULL) {
    
  } else {
    
  }
  write_disposition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), write_disposition);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.write_disposition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobConfiguration::kQueryFieldNumber;
const int JobConfiguration::kLoadFieldNumber;
const int JobConfiguration::kExtractFieldNumber;
const int JobConfiguration::kTableCopyFieldNumber;
const int JobConfiguration::kDryRunFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobConfiguration::JobConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobConfiguration)
}
JobConfiguration::JobConfiguration(const JobConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dry_run_ = from.dry_run_;
  clear_has_configuration();
  switch (from.configuration_case()) {
    case kQuery: {
      mutable_query()->::google::cloud::bigquery::logging::v1::JobConfiguration_Query::MergeFrom(from.query());
      break;
    }
    case kLoad: {
      mutable_load()->::google::cloud::bigquery::logging::v1::JobConfiguration_Load::MergeFrom(from.load());
      break;
    }
    case kExtract: {
      mutable_extract()->::google::cloud::bigquery::logging::v1::JobConfiguration_Extract::MergeFrom(from.extract());
      break;
    }
    case kTableCopy: {
      mutable_table_copy()->::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy::MergeFrom(from.table_copy());
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobConfiguration)
}

void JobConfiguration::SharedCtor() {
  dry_run_ = false;
  clear_has_configuration();
  _cached_size_ = 0;
}

JobConfiguration::~JobConfiguration() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobConfiguration)
  SharedDtor();
}

void JobConfiguration::SharedDtor() {
  if (has_configuration()) {
    clear_configuration();
  }
}

void JobConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobConfiguration::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobConfiguration& JobConfiguration::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobConfiguration* JobConfiguration::New(::google::protobuf::Arena* arena) const {
  JobConfiguration* n = new JobConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobConfiguration::clear_configuration() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.bigquery.logging.v1.JobConfiguration)
  switch (configuration_case()) {
    case kQuery: {
      delete configuration_.query_;
      break;
    }
    case kLoad: {
      delete configuration_.load_;
      break;
    }
    case kExtract: {
      delete configuration_.extract_;
      break;
    }
    case kTableCopy: {
      delete configuration_.table_copy_;
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIGURATION_NOT_SET;
}


void JobConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobConfiguration)
  dry_run_ = false;
  clear_configuration();
}

bool JobConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.bigquery.logging.v1.JobConfiguration.Query query = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobConfiguration.Load load = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobConfiguration.Extract extract = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy table_copy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_copy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dry_run = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dry_run_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobConfiguration)
  return false;
#undef DO_
}

void JobConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.JobConfiguration.Query query = 5;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *configuration_.query_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobConfiguration.Load load = 6;
  if (has_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *configuration_.load_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobConfiguration.Extract extract = 7;
  if (has_extract()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *configuration_.extract_, output);
  }

  // .google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy table_copy = 8;
  if (has_table_copy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *configuration_.table_copy_, output);
  }

  // bool dry_run = 9;
  if (this->dry_run() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->dry_run(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobConfiguration)
}

::google::protobuf::uint8* JobConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.bigquery.logging.v1.JobConfiguration.Query query = 5;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *configuration_.query_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobConfiguration.Load load = 6;
  if (has_load()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *configuration_.load_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobConfiguration.Extract extract = 7;
  if (has_extract()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *configuration_.extract_, deterministic, target);
  }

  // .google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy table_copy = 8;
  if (has_table_copy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *configuration_.table_copy_, deterministic, target);
  }

  // bool dry_run = 9;
  if (this->dry_run() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->dry_run(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobConfiguration)
  return target;
}

size_t JobConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobConfiguration)
  size_t total_size = 0;

  // bool dry_run = 9;
  if (this->dry_run() != 0) {
    total_size += 1 + 1;
  }

  switch (configuration_case()) {
    // .google.cloud.bigquery.logging.v1.JobConfiguration.Query query = 5;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *configuration_.query_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.JobConfiguration.Load load = 6;
    case kLoad: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *configuration_.load_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.JobConfiguration.Extract extract = 7;
    case kExtract: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *configuration_.extract_);
      break;
    }
    // .google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy table_copy = 8;
    case kTableCopy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *configuration_.table_copy_);
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const JobConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobConfiguration)
    MergeFrom(*source);
  }
}

void JobConfiguration::MergeFrom(const JobConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dry_run() != 0) {
    set_dry_run(from.dry_run());
  }
  switch (from.configuration_case()) {
    case kQuery: {
      mutable_query()->::google::cloud::bigquery::logging::v1::JobConfiguration_Query::MergeFrom(from.query());
      break;
    }
    case kLoad: {
      mutable_load()->::google::cloud::bigquery::logging::v1::JobConfiguration_Load::MergeFrom(from.load());
      break;
    }
    case kExtract: {
      mutable_extract()->::google::cloud::bigquery::logging::v1::JobConfiguration_Extract::MergeFrom(from.extract());
      break;
    }
    case kTableCopy: {
      mutable_table_copy()->::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy::MergeFrom(from.table_copy());
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
}

void JobConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobConfiguration::CopyFrom(const JobConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobConfiguration::IsInitialized() const {
  return true;
}

void JobConfiguration::Swap(JobConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobConfiguration::InternalSwap(JobConfiguration* other) {
  std::swap(dry_run_, other->dry_run_);
  std::swap(configuration_, other->configuration_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobConfiguration::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobConfiguration

// .google.cloud.bigquery.logging.v1.JobConfiguration.Query query = 5;
bool JobConfiguration::has_query() const {
  return configuration_case() == kQuery;
}
void JobConfiguration::set_has_query() {
  _oneof_case_[0] = kQuery;
}
void JobConfiguration::clear_query() {
  if (has_query()) {
    delete configuration_.query_;
    clear_has_configuration();
  }
}
 const ::google::cloud::bigquery::logging::v1::JobConfiguration_Query& JobConfiguration::query() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.query)
  return has_query()
      ? *configuration_.query_
      : ::google::cloud::bigquery::logging::v1::JobConfiguration_Query::default_instance();
}
::google::cloud::bigquery::logging::v1::JobConfiguration_Query* JobConfiguration::mutable_query() {
  if (!has_query()) {
    clear_configuration();
    set_has_query();
    configuration_.query_ = new ::google::cloud::bigquery::logging::v1::JobConfiguration_Query;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.query)
  return configuration_.query_;
}
::google::cloud::bigquery::logging::v1::JobConfiguration_Query* JobConfiguration::release_query() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.query)
  if (has_query()) {
    clear_has_configuration();
    ::google::cloud::bigquery::logging::v1::JobConfiguration_Query* temp = configuration_.query_;
    configuration_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void JobConfiguration::set_allocated_query(::google::cloud::bigquery::logging::v1::JobConfiguration_Query* query) {
  clear_configuration();
  if (query) {
    set_has_query();
    configuration_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.query)
}

// .google.cloud.bigquery.logging.v1.JobConfiguration.Load load = 6;
bool JobConfiguration::has_load() const {
  return configuration_case() == kLoad;
}
void JobConfiguration::set_has_load() {
  _oneof_case_[0] = kLoad;
}
void JobConfiguration::clear_load() {
  if (has_load()) {
    delete configuration_.load_;
    clear_has_configuration();
  }
}
 const ::google::cloud::bigquery::logging::v1::JobConfiguration_Load& JobConfiguration::load() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.load)
  return has_load()
      ? *configuration_.load_
      : ::google::cloud::bigquery::logging::v1::JobConfiguration_Load::default_instance();
}
::google::cloud::bigquery::logging::v1::JobConfiguration_Load* JobConfiguration::mutable_load() {
  if (!has_load()) {
    clear_configuration();
    set_has_load();
    configuration_.load_ = new ::google::cloud::bigquery::logging::v1::JobConfiguration_Load;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.load)
  return configuration_.load_;
}
::google::cloud::bigquery::logging::v1::JobConfiguration_Load* JobConfiguration::release_load() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.load)
  if (has_load()) {
    clear_has_configuration();
    ::google::cloud::bigquery::logging::v1::JobConfiguration_Load* temp = configuration_.load_;
    configuration_.load_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void JobConfiguration::set_allocated_load(::google::cloud::bigquery::logging::v1::JobConfiguration_Load* load) {
  clear_configuration();
  if (load) {
    set_has_load();
    configuration_.load_ = load;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.load)
}

// .google.cloud.bigquery.logging.v1.JobConfiguration.Extract extract = 7;
bool JobConfiguration::has_extract() const {
  return configuration_case() == kExtract;
}
void JobConfiguration::set_has_extract() {
  _oneof_case_[0] = kExtract;
}
void JobConfiguration::clear_extract() {
  if (has_extract()) {
    delete configuration_.extract_;
    clear_has_configuration();
  }
}
 const ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract& JobConfiguration::extract() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.extract)
  return has_extract()
      ? *configuration_.extract_
      : ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract::default_instance();
}
::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* JobConfiguration::mutable_extract() {
  if (!has_extract()) {
    clear_configuration();
    set_has_extract();
    configuration_.extract_ = new ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.extract)
  return configuration_.extract_;
}
::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* JobConfiguration::release_extract() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.extract)
  if (has_extract()) {
    clear_has_configuration();
    ::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* temp = configuration_.extract_;
    configuration_.extract_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void JobConfiguration::set_allocated_extract(::google::cloud::bigquery::logging::v1::JobConfiguration_Extract* extract) {
  clear_configuration();
  if (extract) {
    set_has_extract();
    configuration_.extract_ = extract;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.extract)
}

// .google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy table_copy = 8;
bool JobConfiguration::has_table_copy() const {
  return configuration_case() == kTableCopy;
}
void JobConfiguration::set_has_table_copy() {
  _oneof_case_[0] = kTableCopy;
}
void JobConfiguration::clear_table_copy() {
  if (has_table_copy()) {
    delete configuration_.table_copy_;
    clear_has_configuration();
  }
}
 const ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy& JobConfiguration::table_copy() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.table_copy)
  return has_table_copy()
      ? *configuration_.table_copy_
      : ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy::default_instance();
}
::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* JobConfiguration::mutable_table_copy() {
  if (!has_table_copy()) {
    clear_configuration();
    set_has_table_copy();
    configuration_.table_copy_ = new ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobConfiguration.table_copy)
  return configuration_.table_copy_;
}
::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* JobConfiguration::release_table_copy() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobConfiguration.table_copy)
  if (has_table_copy()) {
    clear_has_configuration();
    ::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* temp = configuration_.table_copy_;
    configuration_.table_copy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void JobConfiguration::set_allocated_table_copy(::google::cloud::bigquery::logging::v1::JobConfiguration_TableCopy* table_copy) {
  clear_configuration();
  if (table_copy) {
    set_has_table_copy();
    configuration_.table_copy_ = table_copy;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobConfiguration.table_copy)
}

// bool dry_run = 9;
void JobConfiguration::clear_dry_run() {
  dry_run_ = false;
}
bool JobConfiguration::dry_run() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobConfiguration.dry_run)
  return dry_run_;
}
void JobConfiguration::set_dry_run(bool value) {
  
  dry_run_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobConfiguration.dry_run)
}

bool JobConfiguration::has_configuration() const {
  return configuration_case() != CONFIGURATION_NOT_SET;
}
void JobConfiguration::clear_has_configuration() {
  _oneof_case_[0] = CONFIGURATION_NOT_SET;
}
JobConfiguration::ConfigurationCase JobConfiguration::configuration_case() const {
  return JobConfiguration::ConfigurationCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableDefinition::kNameFieldNumber;
const int TableDefinition::kSourceUrisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableDefinition::TableDefinition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.TableDefinition)
}
TableDefinition::TableDefinition(const TableDefinition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      source_uris_(from.source_uris_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.TableDefinition)
}

void TableDefinition::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TableDefinition::~TableDefinition() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.TableDefinition)
  SharedDtor();
}

void TableDefinition::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableDefinition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableDefinition::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableDefinition& TableDefinition::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableDefinition* TableDefinition::New(::google::protobuf::Arena* arena) const {
  TableDefinition* n = new TableDefinition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.TableDefinition)
  source_uris_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TableDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.TableDefinition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.TableDefinition.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string source_uris = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source_uris()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_uris(this->source_uris_size() - 1).data(),
            this->source_uris(this->source_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.TableDefinition.source_uris"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.TableDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.TableDefinition)
  return false;
#undef DO_
}

void TableDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.TableDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableDefinition.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string source_uris = 2;
  for (int i = 0, n = this->source_uris_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uris(i).data(), this->source_uris(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableDefinition.source_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->source_uris(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.TableDefinition)
}

::google::protobuf::uint8* TableDefinition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.TableDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableDefinition.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string source_uris = 2;
  for (int i = 0, n = this->source_uris_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_uris(i).data(), this->source_uris(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableDefinition.source_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->source_uris(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.TableDefinition)
  return target;
}

size_t TableDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.TableDefinition)
  size_t total_size = 0;

  // repeated string source_uris = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->source_uris_size());
  for (int i = 0, n = this->source_uris_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source_uris(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableDefinition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.TableDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const TableDefinition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableDefinition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.TableDefinition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.TableDefinition)
    MergeFrom(*source);
  }
}

void TableDefinition::MergeFrom(const TableDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.TableDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_uris_.MergeFrom(from.source_uris_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TableDefinition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.TableDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableDefinition::CopyFrom(const TableDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.TableDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDefinition::IsInitialized() const {
  return true;
}

void TableDefinition::Swap(TableDefinition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableDefinition::InternalSwap(TableDefinition* other) {
  source_uris_.InternalSwap(&other->source_uris_);
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableDefinition::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableDefinition

// string name = 1;
void TableDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableDefinition::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDefinition.name)
  return name_.GetNoArena();
}
void TableDefinition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDefinition.name)
}
#if LANG_CXX11
void TableDefinition::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableDefinition.name)
}
#endif
void TableDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableDefinition.name)
}
void TableDefinition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableDefinition.name)
}
::std::string* TableDefinition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableDefinition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableDefinition::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableDefinition.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableDefinition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableDefinition.name)
}

// repeated string source_uris = 2;
int TableDefinition::source_uris_size() const {
  return source_uris_.size();
}
void TableDefinition::clear_source_uris() {
  source_uris_.Clear();
}
const ::std::string& TableDefinition::source_uris(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return source_uris_.Get(index);
}
::std::string* TableDefinition::mutable_source_uris(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return source_uris_.Mutable(index);
}
void TableDefinition::set_source_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  source_uris_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TableDefinition::set_source_uris(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  source_uris_.Mutable(index)->assign(std::move(value));
}
#endif
void TableDefinition::set_source_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
void TableDefinition::set_source_uris(int index, const char* value, size_t size) {
  source_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
::std::string* TableDefinition::add_source_uris() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return source_uris_.Add();
}
void TableDefinition::add_source_uris(const ::std::string& value) {
  source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
#if LANG_CXX11
void TableDefinition::add_source_uris(::std::string&& value) {
  source_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
#endif
void TableDefinition::add_source_uris(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  source_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
void TableDefinition::add_source_uris(const char* value, size_t size) {
  source_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableDefinition::source_uris() const {
  // @@protoc_insertion_point(field_list:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return source_uris_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TableDefinition::mutable_source_uris() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.bigquery.logging.v1.TableDefinition.source_uris)
  return &source_uris_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobStatus::kStateFieldNumber;
const int JobStatus::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobStatus::JobStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobStatus)
}
JobStatus::JobStatus(const JobStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobStatus)
}

void JobStatus::SharedCtor() {
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  _cached_size_ = 0;
}

JobStatus::~JobStatus() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobStatus)
  SharedDtor();
}

void JobStatus::SharedDtor() {
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void JobStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobStatus::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobStatus& JobStatus::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobStatus* JobStatus::New(::google::protobuf::Arena* arena) const {
  JobStatus* n = new JobStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobStatus)
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}

bool JobStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobStatus.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.rpc.Status error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobStatus)
  return false;
#undef DO_
}

void JobStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string state = 1;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobStatus.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->state(), output);
  }

  // .google.rpc.Status error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobStatus)
}

::google::protobuf::uint8* JobStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string state = 1;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobStatus.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->state(), target);
  }

  // .google.rpc.Status error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobStatus)
  return target;
}

size_t JobStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobStatus)
  size_t total_size = 0;

  // string state = 1;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // .google.rpc.Status error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobStatus)
    MergeFrom(*source);
  }
}

void JobStatus::MergeFrom(const JobStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
}

void JobStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatus::CopyFrom(const JobStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatus::IsInitialized() const {
  return true;
}

void JobStatus::Swap(JobStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobStatus::InternalSwap(JobStatus* other) {
  state_.Swap(&other->state_);
  std::swap(error_, other->error_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobStatus::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobStatus

// string state = 1;
void JobStatus::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobStatus::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatus.state)
  return state_.GetNoArena();
}
void JobStatus::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatus.state)
}
#if LANG_CXX11
void JobStatus::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobStatus.state)
}
#endif
void JobStatus::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobStatus.state)
}
void JobStatus::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobStatus.state)
}
::std::string* JobStatus::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatus.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobStatus::release_state() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatus.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobStatus::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatus.state)
}

// .google.rpc.Status error = 2;
bool JobStatus::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void JobStatus::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::google::rpc::Status& JobStatus::error() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatus.error)
  return error_ != NULL ? *error_
                         : *::google::rpc::Status::internal_default_instance();
}
::google::rpc::Status* JobStatus::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatus.error)
  return error_;
}
::google::rpc::Status* JobStatus::release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatus.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = NULL;
  return temp;
}
void JobStatus::set_allocated_error(::google::rpc::Status* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatus.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobStatistics::kCreateTimeFieldNumber;
const int JobStatistics::kStartTimeFieldNumber;
const int JobStatistics::kEndTimeFieldNumber;
const int JobStatistics::kTotalProcessedBytesFieldNumber;
const int JobStatistics::kTotalBilledBytesFieldNumber;
const int JobStatistics::kBillingTierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobStatistics::JobStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobStatistics)
}
JobStatistics::JobStatistics(const JobStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Timestamp(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  ::memcpy(&total_processed_bytes_, &from.total_processed_bytes_,
    reinterpret_cast<char*>(&billing_tier_) -
    reinterpret_cast<char*>(&total_processed_bytes_) + sizeof(billing_tier_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobStatistics)
}

void JobStatistics::SharedCtor() {
  ::memset(&create_time_, 0, reinterpret_cast<char*>(&billing_tier_) -
    reinterpret_cast<char*>(&create_time_) + sizeof(billing_tier_));
  _cached_size_ = 0;
}

JobStatistics::~JobStatistics() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobStatistics)
  SharedDtor();
}

void JobStatistics::SharedDtor() {
  if (this != internal_default_instance()) {
    delete create_time_;
  }
  if (this != internal_default_instance()) {
    delete start_time_;
  }
  if (this != internal_default_instance()) {
    delete end_time_;
  }
}

void JobStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobStatistics::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobStatistics& JobStatistics::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobStatistics* JobStatistics::New(::google::protobuf::Arena* arena) const {
  JobStatistics* n = new JobStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobStatistics)
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  ::memset(&total_processed_bytes_, 0, reinterpret_cast<char*>(&billing_tier_) -
    reinterpret_cast<char*>(&total_processed_bytes_) + sizeof(billing_tier_));
}

bool JobStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp create_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_processed_bytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_processed_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_billed_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_billed_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 billing_tier = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &billing_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobStatistics)
  return false;
#undef DO_
}

void JobStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp create_time = 1;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->create_time_, output);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->start_time_, output);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->end_time_, output);
  }

  // int64 total_processed_bytes = 4;
  if (this->total_processed_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_processed_bytes(), output);
  }

  // int64 total_billed_bytes = 5;
  if (this->total_billed_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->total_billed_bytes(), output);
  }

  // int32 billing_tier = 7;
  if (this->billing_tier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->billing_tier(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobStatistics)
}

::google::protobuf::uint8* JobStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp create_time = 1;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->create_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->start_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->end_time_, deterministic, target);
  }

  // int64 total_processed_bytes = 4;
  if (this->total_processed_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_processed_bytes(), target);
  }

  // int64 total_billed_bytes = 5;
  if (this->total_billed_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->total_billed_bytes(), target);
  }

  // int32 billing_tier = 7;
  if (this->billing_tier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->billing_tier(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobStatistics)
  return target;
}

size_t JobStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobStatistics)
  size_t total_size = 0;

  // .google.protobuf.Timestamp create_time = 1;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // .google.protobuf.Timestamp start_time = 2;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_time_);
  }

  // .google.protobuf.Timestamp end_time = 3;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_time_);
  }

  // int64 total_processed_bytes = 4;
  if (this->total_processed_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_processed_bytes());
  }

  // int64 total_billed_bytes = 5;
  if (this->total_billed_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_billed_bytes());
  }

  // int32 billing_tier = 7;
  if (this->billing_tier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->billing_tier());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobStatistics)
    MergeFrom(*source);
  }
}

void JobStatistics::MergeFrom(const JobStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Timestamp::MergeFrom(from.end_time());
  }
  if (from.total_processed_bytes() != 0) {
    set_total_processed_bytes(from.total_processed_bytes());
  }
  if (from.total_billed_bytes() != 0) {
    set_total_billed_bytes(from.total_billed_bytes());
  }
  if (from.billing_tier() != 0) {
    set_billing_tier(from.billing_tier());
  }
}

void JobStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatistics::CopyFrom(const JobStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatistics::IsInitialized() const {
  return true;
}

void JobStatistics::Swap(JobStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobStatistics::InternalSwap(JobStatistics* other) {
  std::swap(create_time_, other->create_time_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(total_processed_bytes_, other->total_processed_bytes_);
  std::swap(total_billed_bytes_, other->total_billed_bytes_);
  std::swap(billing_tier_, other->billing_tier_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobStatistics::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobStatistics

// .google.protobuf.Timestamp create_time = 1;
bool JobStatistics::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void JobStatistics::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& JobStatistics::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* JobStatistics::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* JobStatistics::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void JobStatistics::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.create_time)
}

// .google.protobuf.Timestamp start_time = 2;
bool JobStatistics::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
void JobStatistics::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
}
const ::google::protobuf::Timestamp& JobStatistics::start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
  return start_time_ != NULL ? *start_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* JobStatistics::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
  return start_time_;
}
::google::protobuf::Timestamp* JobStatistics::release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
void JobStatistics::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  delete start_time_;
  if (start_time != NULL && start_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_start_time = new ::google::protobuf::Timestamp;
    new_start_time->CopyFrom(*start_time);
    start_time = new_start_time;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.start_time)
}

// .google.protobuf.Timestamp end_time = 3;
bool JobStatistics::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
void JobStatistics::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) delete end_time_;
  end_time_ = NULL;
}
const ::google::protobuf::Timestamp& JobStatistics::end_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
  return end_time_ != NULL ? *end_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* JobStatistics::mutable_end_time() {
  
  if (end_time_ == NULL) {
    end_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
  return end_time_;
}
::google::protobuf::Timestamp* JobStatistics::release_end_time() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
void JobStatistics::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  delete end_time_;
  if (end_time != NULL && end_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_end_time = new ::google::protobuf::Timestamp;
    new_end_time->CopyFrom(*end_time);
    end_time = new_end_time;
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobStatistics.end_time)
}

// int64 total_processed_bytes = 4;
void JobStatistics::clear_total_processed_bytes() {
  total_processed_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 JobStatistics::total_processed_bytes() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.total_processed_bytes)
  return total_processed_bytes_;
}
void JobStatistics::set_total_processed_bytes(::google::protobuf::int64 value) {
  
  total_processed_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.total_processed_bytes)
}

// int64 total_billed_bytes = 5;
void JobStatistics::clear_total_billed_bytes() {
  total_billed_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 JobStatistics::total_billed_bytes() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.total_billed_bytes)
  return total_billed_bytes_;
}
void JobStatistics::set_total_billed_bytes(::google::protobuf::int64 value) {
  
  total_billed_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.total_billed_bytes)
}

// int32 billing_tier = 7;
void JobStatistics::clear_billing_tier() {
  billing_tier_ = 0;
}
::google::protobuf::int32 JobStatistics::billing_tier() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobStatistics.billing_tier)
  return billing_tier_;
}
void JobStatistics::set_billing_tier(::google::protobuf::int32 value) {
  
  billing_tier_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobStatistics.billing_tier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetName::kProjectIdFieldNumber;
const int DatasetName::kDatasetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetName::DatasetName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.DatasetName)
}
DatasetName::DatasetName(const DatasetName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dataset_id().size() > 0) {
    dataset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.DatasetName)
}

void DatasetName::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DatasetName::~DatasetName() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.DatasetName)
  SharedDtor();
}

void DatasetName::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DatasetName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetName::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatasetName& DatasetName::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatasetName* DatasetName::New(::google::protobuf::Arena* arena) const {
  DatasetName* n = new DatasetName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatasetName::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.DatasetName)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DatasetName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.DatasetName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.DatasetName.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dataset_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_id().data(), this->dataset_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.DatasetName.dataset_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.DatasetName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.DatasetName)
  return false;
#undef DO_
}

void DatasetName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.DatasetName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.DatasetName.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.DatasetName.dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dataset_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.DatasetName)
}

::google::protobuf::uint8* DatasetName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.DatasetName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.DatasetName.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.DatasetName.dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dataset_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.DatasetName)
  return target;
}

size_t DatasetName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.DatasetName)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.DatasetName)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatasetName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.DatasetName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.DatasetName)
    MergeFrom(*source);
  }
}

void DatasetName::MergeFrom(const DatasetName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.DatasetName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.dataset_id().size() > 0) {

    dataset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_id_);
  }
}

void DatasetName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.DatasetName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetName::CopyFrom(const DatasetName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.DatasetName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetName::IsInitialized() const {
  return true;
}

void DatasetName::Swap(DatasetName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetName::InternalSwap(DatasetName* other) {
  project_id_.Swap(&other->project_id_);
  dataset_id_.Swap(&other->dataset_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatasetName::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatasetName

// string project_id = 1;
void DatasetName::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DatasetName::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetName.project_id)
  return project_id_.GetNoArena();
}
void DatasetName::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetName.project_id)
}
#if LANG_CXX11
void DatasetName::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.DatasetName.project_id)
}
#endif
void DatasetName::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.DatasetName.project_id)
}
void DatasetName::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.DatasetName.project_id)
}
::std::string* DatasetName::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetName.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DatasetName::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetName.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DatasetName::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetName.project_id)
}

// string dataset_id = 2;
void DatasetName::clear_dataset_id() {
  dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DatasetName::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
  return dataset_id_.GetNoArena();
}
void DatasetName::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
}
#if LANG_CXX11
void DatasetName::set_dataset_id(::std::string&& value) {
  
  dataset_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
}
#endif
void DatasetName::set_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
}
void DatasetName::set_dataset_id(const char* value, size_t size) {
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
}
::std::string* DatasetName::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
  return dataset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DatasetName::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
  
  return dataset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DatasetName::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.DatasetName.dataset_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableName::kProjectIdFieldNumber;
const int TableName::kDatasetIdFieldNumber;
const int TableName::kTableIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableName::TableName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.TableName)
}
TableName::TableName(const TableName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dataset_id().size() > 0) {
    dataset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_id_);
  }
  table_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_id().size() > 0) {
    table_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.TableName)
}

void TableName::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TableName::~TableName() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.TableName)
  SharedDtor();
}

void TableName::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableName::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableName& TableName::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableName* TableName::New(::google::protobuf::Arena* arena) const {
  TableName* n = new TableName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableName::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.TableName)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TableName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.TableName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.TableName.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dataset_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_id().data(), this->dataset_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.TableName.dataset_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_id().data(), this->table_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.TableName.table_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.TableName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.TableName)
  return false;
#undef DO_
}

void TableName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.TableName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableName.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableName.dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dataset_id(), output);
  }

  // string table_id = 3;
  if (this->table_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_id().data(), this->table_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableName.table_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.TableName)
}

::google::protobuf::uint8* TableName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.TableName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableName.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), this->dataset_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableName.dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dataset_id(), target);
  }

  // string table_id = 3;
  if (this->table_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_id().data(), this->table_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.TableName.table_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.TableName)
  return target;
}

size_t TableName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.TableName)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_id());
  }

  // string table_id = 3;
  if (this->table_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.TableName)
  GOOGLE_DCHECK_NE(&from, this);
  const TableName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.TableName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.TableName)
    MergeFrom(*source);
  }
}

void TableName::MergeFrom(const TableName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.TableName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.dataset_id().size() > 0) {

    dataset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_id_);
  }
  if (from.table_id().size() > 0) {

    table_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_id_);
  }
}

void TableName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.TableName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableName::CopyFrom(const TableName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.TableName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableName::IsInitialized() const {
  return true;
}

void TableName::Swap(TableName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableName::InternalSwap(TableName* other) {
  project_id_.Swap(&other->project_id_);
  dataset_id_.Swap(&other->dataset_id_);
  table_id_.Swap(&other->table_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableName::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableName

// string project_id = 1;
void TableName::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableName::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableName.project_id)
  return project_id_.GetNoArena();
}
void TableName::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableName.project_id)
}
#if LANG_CXX11
void TableName::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableName.project_id)
}
#endif
void TableName::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableName.project_id)
}
void TableName::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableName.project_id)
}
::std::string* TableName::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableName.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableName::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableName.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableName::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableName.project_id)
}

// string dataset_id = 2;
void TableName::clear_dataset_id() {
  dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableName::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableName.dataset_id)
  return dataset_id_.GetNoArena();
}
void TableName::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableName.dataset_id)
}
#if LANG_CXX11
void TableName::set_dataset_id(::std::string&& value) {
  
  dataset_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableName.dataset_id)
}
#endif
void TableName::set_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableName.dataset_id)
}
void TableName::set_dataset_id(const char* value, size_t size) {
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableName.dataset_id)
}
::std::string* TableName::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableName.dataset_id)
  return dataset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableName::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableName.dataset_id)
  
  return dataset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableName::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableName.dataset_id)
}

// string table_id = 3;
void TableName::clear_table_id() {
  table_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableName::table_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.TableName.table_id)
  return table_id_.GetNoArena();
}
void TableName::set_table_id(const ::std::string& value) {
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.TableName.table_id)
}
#if LANG_CXX11
void TableName::set_table_id(::std::string&& value) {
  
  table_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.TableName.table_id)
}
#endif
void TableName::set_table_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.TableName.table_id)
}
void TableName::set_table_id(const char* value, size_t size) {
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.TableName.table_id)
}
::std::string* TableName::mutable_table_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.TableName.table_id)
  return table_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableName::release_table_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.TableName.table_id)
  
  return table_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableName::set_allocated_table_id(::std::string* table_id) {
  if (table_id != NULL) {
    
  } else {
    
  }
  table_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.TableName.table_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobName::kProjectIdFieldNumber;
const int JobName::kJobIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobName::JobName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.bigquery.logging.v1.JobName)
}
JobName::JobName(const JobName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  job_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.job_id().size() > 0) {
    job_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.bigquery.logging.v1.JobName)
}

void JobName::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

JobName::~JobName() {
  // @@protoc_insertion_point(destructor:google.cloud.bigquery.logging.v1.JobName)
  SharedDtor();
}

void JobName::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JobName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobName::descriptor() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobName& JobName::default_instance() {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

JobName* JobName::New(::google::protobuf::Arena* arena) const {
  JobName* n = new JobName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobName::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.bigquery.logging.v1.JobName)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool JobName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.bigquery.logging.v1.JobName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobName.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string job_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job_id().data(), this->job_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.bigquery.logging.v1.JobName.job_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.bigquery.logging.v1.JobName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.bigquery.logging.v1.JobName)
  return false;
#undef DO_
}

void JobName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.bigquery.logging.v1.JobName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobName.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string job_id = 2;
  if (this->job_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobName.job_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->job_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.bigquery.logging.v1.JobName)
}

::google::protobuf::uint8* JobName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.bigquery.logging.v1.JobName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobName.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string job_id = 2;
  if (this->job_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.bigquery.logging.v1.JobName.job_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->job_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.bigquery.logging.v1.JobName)
  return target;
}

size_t JobName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.bigquery.logging.v1.JobName)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string job_id = 2;
  if (this->job_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.bigquery.logging.v1.JobName)
  GOOGLE_DCHECK_NE(&from, this);
  const JobName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.bigquery.logging.v1.JobName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.bigquery.logging.v1.JobName)
    MergeFrom(*source);
  }
}

void JobName::MergeFrom(const JobName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.bigquery.logging.v1.JobName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.job_id().size() > 0) {

    job_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_id_);
  }
}

void JobName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.bigquery.logging.v1.JobName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobName::CopyFrom(const JobName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.bigquery.logging.v1.JobName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobName::IsInitialized() const {
  return true;
}

void JobName::Swap(JobName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobName::InternalSwap(JobName* other) {
  project_id_.Swap(&other->project_id_);
  job_id_.Swap(&other->job_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobName::GetMetadata() const {
  protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fbigquery_2flogging_2fv1_2faudit_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobName

// string project_id = 1;
void JobName::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobName::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobName.project_id)
  return project_id_.GetNoArena();
}
void JobName::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobName.project_id)
}
#if LANG_CXX11
void JobName::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobName.project_id)
}
#endif
void JobName::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobName.project_id)
}
void JobName::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobName.project_id)
}
::std::string* JobName::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobName.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobName::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobName.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobName::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobName.project_id)
}

// string job_id = 2;
void JobName::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobName::job_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.bigquery.logging.v1.JobName.job_id)
  return job_id_.GetNoArena();
}
void JobName::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.bigquery.logging.v1.JobName.job_id)
}
#if LANG_CXX11
void JobName::set_job_id(::std::string&& value) {
  
  job_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.bigquery.logging.v1.JobName.job_id)
}
#endif
void JobName::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.bigquery.logging.v1.JobName.job_id)
}
void JobName::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.bigquery.logging.v1.JobName.job_id)
}
::std::string* JobName::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.bigquery.logging.v1.JobName.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobName::release_job_id() {
  // @@protoc_insertion_point(field_release:google.cloud.bigquery.logging.v1.JobName.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobName::set_allocated_job_id(::std::string* job_id) {
  if (job_id != NULL) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.bigquery.logging.v1.JobName.job_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace logging
}  // namespace bigquery
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)
