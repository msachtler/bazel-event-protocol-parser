// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dataproc/v1/clusters.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/cloud/dataproc/v1/clusters.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace cloud {
namespace dataproc {
namespace v1 {
class ClusterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Cluster> {
} _Cluster_default_instance_;
class ClusterConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClusterConfig> {
} _ClusterConfig_default_instance_;
class GceClusterConfig_MetadataEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GceClusterConfig::GceClusterConfig_MetadataEntry> {
} _GceClusterConfig_MetadataEntry_default_instance_;
class GceClusterConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GceClusterConfig> {
} _GceClusterConfig_default_instance_;
class InstanceGroupConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InstanceGroupConfig> {
} _InstanceGroupConfig_default_instance_;
class ManagedGroupConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManagedGroupConfig> {
} _ManagedGroupConfig_default_instance_;
class DiskConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DiskConfig> {
} _DiskConfig_default_instance_;
class NodeInitializationActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeInitializationAction> {
} _NodeInitializationAction_default_instance_;
class ClusterStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClusterStatus> {
} _ClusterStatus_default_instance_;
class SoftwareConfig_PropertiesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SoftwareConfig::SoftwareConfig_PropertiesEntry> {
} _SoftwareConfig_PropertiesEntry_default_instance_;
class SoftwareConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SoftwareConfig> {
} _SoftwareConfig_default_instance_;
class CreateClusterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateClusterRequest> {
} _CreateClusterRequest_default_instance_;
class UpdateClusterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateClusterRequest> {
} _UpdateClusterRequest_default_instance_;
class DeleteClusterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteClusterRequest> {
} _DeleteClusterRequest_default_instance_;
class GetClusterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetClusterRequest> {
} _GetClusterRequest_default_instance_;
class ListClustersRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListClustersRequest> {
} _ListClustersRequest_default_instance_;
class ListClustersResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListClustersResponse> {
} _ListClustersResponse_default_instance_;
class DiagnoseClusterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DiagnoseClusterRequest> {
} _DiagnoseClusterRequest_default_instance_;
class DiagnoseClusterResultsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DiagnoseClusterResults> {
} _DiagnoseClusterResults_default_instance_;

namespace protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, cluster_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, status_history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, cluster_uuid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, config_bucket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, gce_cluster_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, master_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, worker_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, secondary_worker_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, software_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterConfig, initialization_actions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GceClusterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GceClusterConfig, zone_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GceClusterConfig, network_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GceClusterConfig, subnetwork_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GceClusterConfig, internal_ip_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GceClusterConfig, service_account_scopes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GceClusterConfig, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GceClusterConfig, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupConfig, num_instances_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupConfig, instance_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupConfig, image_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupConfig, machine_type_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupConfig, disk_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupConfig, is_preemptible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupConfig, managed_group_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedGroupConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedGroupConfig, instance_template_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagedGroupConfig, instance_group_manager_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskConfig, boot_disk_size_gb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskConfig, num_local_ssds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInitializationAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInitializationAction, executable_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInitializationAction, execution_timeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, state_start_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareConfig, image_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareConfig, properties_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, cluster_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterRequest, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterRequest, cluster_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterRequest, cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterRequest, update_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteClusterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteClusterRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteClusterRequest, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteClusterRequest, cluster_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRequest, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRequest, cluster_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersRequest, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersRequest, page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersResponse, clusters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnoseClusterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnoseClusterRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnoseClusterRequest, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnoseClusterRequest, cluster_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnoseClusterResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnoseClusterResults, output_uri_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Cluster)},
  { 11, -1, sizeof(ClusterConfig)},
  { 23, -1, sizeof(GceClusterConfig)},
  { 35, -1, sizeof(InstanceGroupConfig)},
  { 47, -1, sizeof(ManagedGroupConfig)},
  { 54, -1, sizeof(DiskConfig)},
  { 61, -1, sizeof(NodeInitializationAction)},
  { 68, -1, sizeof(ClusterStatus)},
  { 76, -1, sizeof(SoftwareConfig)},
  { 83, -1, sizeof(CreateClusterRequest)},
  { 91, -1, sizeof(UpdateClusterRequest)},
  { 101, -1, sizeof(DeleteClusterRequest)},
  { 109, -1, sizeof(GetClusterRequest)},
  { 117, -1, sizeof(ListClustersRequest)},
  { 126, -1, sizeof(ListClustersResponse)},
  { 133, -1, sizeof(DiagnoseClusterRequest)},
  { 141, -1, sizeof(DiagnoseClusterResults)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GceClusterConfig_MetadataEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GceClusterConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InstanceGroupConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManagedGroupConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DiskConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeInitializationAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SoftwareConfig_PropertiesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SoftwareConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateClusterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateClusterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteClusterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetClusterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListClustersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListClustersResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DiagnoseClusterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DiagnoseClusterResults_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/cloud/dataproc/v1/clusters.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[2].reflection = GceClusterConfig::GceClusterConfig_MetadataEntry::CreateReflection(file_level_metadata[2].descriptor, _GceClusterConfig_MetadataEntry_default_instance_.get_mutable());
file_level_metadata[9].reflection = SoftwareConfig::SoftwareConfig_PropertiesEntry::CreateReflection(file_level_metadata[9].descriptor, _SoftwareConfig_PropertiesEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

}  // namespace

void TableStruct::Shutdown() {
  _Cluster_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ClusterConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GceClusterConfig_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _InstanceGroupConfig_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ManagedGroupConfig_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _DiskConfig_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _NodeInitializationAction_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ClusterStatus_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SoftwareConfig_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CreateClusterRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _UpdateClusterRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _DeleteClusterRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _GetClusterRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _ListClustersRequest_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _ListClustersResponse_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _DiagnoseClusterRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _DiagnoseClusterResults_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  delete file_level_metadata[2].reflection;
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::cloud::dataproc::v1::protobuf_google_2fcloud_2fdataproc_2fv1_2foperations_2eproto::InitDefaults();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _Cluster_default_instance_.DefaultConstruct();
  _ClusterConfig_default_instance_.DefaultConstruct();
  _GceClusterConfig_MetadataEntry_default_instance_.DefaultConstruct();
  _GceClusterConfig_default_instance_.DefaultConstruct();
  _InstanceGroupConfig_default_instance_.DefaultConstruct();
  _ManagedGroupConfig_default_instance_.DefaultConstruct();
  _DiskConfig_default_instance_.DefaultConstruct();
  _NodeInitializationAction_default_instance_.DefaultConstruct();
  _ClusterStatus_default_instance_.DefaultConstruct();
  _SoftwareConfig_PropertiesEntry_default_instance_.DefaultConstruct();
  _SoftwareConfig_default_instance_.DefaultConstruct();
  _CreateClusterRequest_default_instance_.DefaultConstruct();
  _UpdateClusterRequest_default_instance_.DefaultConstruct();
  _DeleteClusterRequest_default_instance_.DefaultConstruct();
  _GetClusterRequest_default_instance_.DefaultConstruct();
  _ListClustersRequest_default_instance_.DefaultConstruct();
  _ListClustersResponse_default_instance_.DefaultConstruct();
  _DiagnoseClusterRequest_default_instance_.DefaultConstruct();
  _DiagnoseClusterResults_default_instance_.DefaultConstruct();
  _Cluster_default_instance_.get_mutable()->config_ = const_cast< ::google::cloud::dataproc::v1::ClusterConfig*>(
      ::google::cloud::dataproc::v1::ClusterConfig::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->status_ = const_cast< ::google::cloud::dataproc::v1::ClusterStatus*>(
      ::google::cloud::dataproc::v1::ClusterStatus::internal_default_instance());
  _ClusterConfig_default_instance_.get_mutable()->gce_cluster_config_ = const_cast< ::google::cloud::dataproc::v1::GceClusterConfig*>(
      ::google::cloud::dataproc::v1::GceClusterConfig::internal_default_instance());
  _ClusterConfig_default_instance_.get_mutable()->master_config_ = const_cast< ::google::cloud::dataproc::v1::InstanceGroupConfig*>(
      ::google::cloud::dataproc::v1::InstanceGroupConfig::internal_default_instance());
  _ClusterConfig_default_instance_.get_mutable()->worker_config_ = const_cast< ::google::cloud::dataproc::v1::InstanceGroupConfig*>(
      ::google::cloud::dataproc::v1::InstanceGroupConfig::internal_default_instance());
  _ClusterConfig_default_instance_.get_mutable()->secondary_worker_config_ = const_cast< ::google::cloud::dataproc::v1::InstanceGroupConfig*>(
      ::google::cloud::dataproc::v1::InstanceGroupConfig::internal_default_instance());
  _ClusterConfig_default_instance_.get_mutable()->software_config_ = const_cast< ::google::cloud::dataproc::v1::SoftwareConfig*>(
      ::google::cloud::dataproc::v1::SoftwareConfig::internal_default_instance());
  _GceClusterConfig_MetadataEntry_default_instance_.get_mutable()->set_default_instance(_GceClusterConfig_MetadataEntry_default_instance_.get_mutable());
  _GceClusterConfig_MetadataEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _InstanceGroupConfig_default_instance_.get_mutable()->disk_config_ = const_cast< ::google::cloud::dataproc::v1::DiskConfig*>(
      ::google::cloud::dataproc::v1::DiskConfig::internal_default_instance());
  _InstanceGroupConfig_default_instance_.get_mutable()->managed_group_config_ = const_cast< ::google::cloud::dataproc::v1::ManagedGroupConfig*>(
      ::google::cloud::dataproc::v1::ManagedGroupConfig::internal_default_instance());
  _NodeInitializationAction_default_instance_.get_mutable()->execution_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _ClusterStatus_default_instance_.get_mutable()->state_start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _SoftwareConfig_PropertiesEntry_default_instance_.get_mutable()->set_default_instance(_SoftwareConfig_PropertiesEntry_default_instance_.get_mutable());
  _SoftwareConfig_PropertiesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _CreateClusterRequest_default_instance_.get_mutable()->cluster_ = const_cast< ::google::cloud::dataproc::v1::Cluster*>(
      ::google::cloud::dataproc::v1::Cluster::internal_default_instance());
  _UpdateClusterRequest_default_instance_.get_mutable()->cluster_ = const_cast< ::google::cloud::dataproc::v1::Cluster*>(
      ::google::cloud::dataproc::v1::Cluster::internal_default_instance());
  _UpdateClusterRequest_default_instance_.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'google/cloud/dataproc/v1/clusters.prot"
      "o\022\030google.cloud.dataproc.v1\032\034google/api/"
      "annotations.proto\032)google/cloud/dataproc"
      "/v1/operations.proto\032#google/longrunning"
      "/operations.proto\032\036google/protobuf/durat"
      "ion.proto\032 google/protobuf/field_mask.pr"
      "oto\032\037google/protobuf/timestamp.proto\"\374\001\n"
      "\007Cluster\022\022\n\nproject_id\030\001 \001(\t\022\024\n\014cluster_"
      "name\030\002 \001(\t\0227\n\006config\030\003 \001(\0132\'.google.clou"
      "d.dataproc.v1.ClusterConfig\0227\n\006status\030\004 "
      "\001(\0132\'.google.cloud.dataproc.v1.ClusterSt"
      "atus\022\?\n\016status_history\030\007 \003(\0132\'.google.cl"
      "oud.dataproc.v1.ClusterStatus\022\024\n\014cluster"
      "_uuid\030\006 \001(\t\"\341\003\n\rClusterConfig\022\025\n\rconfig_"
      "bucket\030\001 \001(\t\022F\n\022gce_cluster_config\030\010 \001(\013"
      "2*.google.cloud.dataproc.v1.GceClusterCo"
      "nfig\022D\n\rmaster_config\030\t \001(\0132-.google.clo"
      "ud.dataproc.v1.InstanceGroupConfig\022D\n\rwo"
      "rker_config\030\n \001(\0132-.google.cloud.datapro"
      "c.v1.InstanceGroupConfig\022N\n\027secondary_wo"
      "rker_config\030\014 \001(\0132-.google.cloud.datapro"
      "c.v1.InstanceGroupConfig\022A\n\017software_con"
      "fig\030\r \001(\0132(.google.cloud.dataproc.v1.Sof"
      "twareConfig\022R\n\026initialization_actions\030\013 "
      "\003(\01322.google.cloud.dataproc.v1.NodeIniti"
      "alizationAction\"\226\002\n\020GceClusterConfig\022\020\n\010"
      "zone_uri\030\001 \001(\t\022\023\n\013network_uri\030\002 \001(\t\022\026\n\016s"
      "ubnetwork_uri\030\006 \001(\t\022\030\n\020internal_ip_only\030"
      "\007 \001(\010\022\036\n\026service_account_scopes\030\003 \003(\t\022\014\n"
      "\004tags\030\004 \003(\t\022J\n\010metadata\030\005 \003(\01328.google.c"
      "loud.dataproc.v1.GceClusterConfig.Metada"
      "taEntry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
      "\005value\030\002 \001(\t:\0028\001\"\220\002\n\023InstanceGroupConfig"
      "\022\025\n\rnum_instances\030\001 \001(\005\022\026\n\016instance_name"
      "s\030\002 \003(\t\022\021\n\timage_uri\030\003 \001(\t\022\030\n\020machine_ty"
      "pe_uri\030\004 \001(\t\0229\n\013disk_config\030\005 \001(\0132$.goog"
      "le.cloud.dataproc.v1.DiskConfig\022\026\n\016is_pr"
      "eemptible\030\006 \001(\010\022J\n\024managed_group_config\030"
      "\007 \001(\0132,.google.cloud.dataproc.v1.Managed"
      "GroupConfig\"Y\n\022ManagedGroupConfig\022\036\n\026ins"
      "tance_template_name\030\001 \001(\t\022#\n\033instance_gr"
      "oup_manager_name\030\002 \001(\t\"\?\n\nDiskConfig\022\031\n\021"
      "boot_disk_size_gb\030\001 \001(\005\022\026\n\016num_local_ssd"
      "s\030\002 \001(\005\"i\n\030NodeInitializationAction\022\027\n\017e"
      "xecutable_file\030\001 \001(\t\0224\n\021execution_timeou"
      "t\030\002 \001(\0132\031.google.protobuf.Duration\"\353\001\n\rC"
      "lusterStatus\022<\n\005state\030\001 \001(\0162-.google.clo"
      "ud.dataproc.v1.ClusterStatus.State\022\016\n\006de"
      "tail\030\002 \001(\t\0224\n\020state_start_time\030\003 \001(\0132\032.g"
      "oogle.protobuf.Timestamp\"V\n\005State\022\013\n\007UNK"
      "NOWN\020\000\022\014\n\010CREATING\020\001\022\013\n\007RUNNING\020\002\022\t\n\005ERR"
      "OR\020\003\022\014\n\010DELETING\020\004\022\014\n\010UPDATING\020\005\"\250\001\n\016Sof"
      "twareConfig\022\025\n\rimage_version\030\001 \001(\t\022L\n\npr"
      "operties\030\002 \003(\01328.google.cloud.dataproc.v"
      "1.SoftwareConfig.PropertiesEntry\0321\n\017Prop"
      "ertiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
      "\0028\001\"n\n\024CreateClusterRequest\022\022\n\nproject_i"
      "d\030\001 \001(\t\022\016\n\006region\030\003 \001(\t\0222\n\007cluster\030\002 \001(\013"
      "2!.google.cloud.dataproc.v1.Cluster\"\265\001\n\024"
      "UpdateClusterRequest\022\022\n\nproject_id\030\001 \001(\t"
      "\022\016\n\006region\030\005 \001(\t\022\024\n\014cluster_name\030\002 \001(\t\0222"
      "\n\007cluster\030\003 \001(\0132!.google.cloud.dataproc."
      "v1.Cluster\022/\n\013update_mask\030\004 \001(\0132\032.google"
      ".protobuf.FieldMask\"P\n\024DeleteClusterRequ"
      "est\022\022\n\nproject_id\030\001 \001(\t\022\016\n\006region\030\003 \001(\t\022"
      "\024\n\014cluster_name\030\002 \001(\t\"M\n\021GetClusterReque"
      "st\022\022\n\nproject_id\030\001 \001(\t\022\016\n\006region\030\003 \001(\t\022\024"
      "\n\014cluster_name\030\002 \001(\t\"`\n\023ListClustersRequ"
      "est\022\022\n\nproject_id\030\001 \001(\t\022\016\n\006region\030\004 \001(\t\022"
      "\021\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"d"
      "\n\024ListClustersResponse\0223\n\010clusters\030\001 \003(\013"
      "2!.google.cloud.dataproc.v1.Cluster\022\027\n\017n"
      "ext_page_token\030\002 \001(\t\"R\n\026DiagnoseClusterR"
      "equest\022\022\n\nproject_id\030\001 \001(\t\022\016\n\006region\030\003 \001"
      "(\t\022\024\n\014cluster_name\030\002 \001(\t\",\n\026DiagnoseClus"
      "terResults\022\022\n\noutput_uri\030\001 \001(\t2\262\010\n\021Clust"
      "erController\022\244\001\n\rCreateCluster\022..google."
      "cloud.dataproc.v1.CreateClusterRequest\032\035"
      ".google.longrunning.Operation\"D\202\323\344\223\002>\"3/"
      "v1/projects/{project_id}/regions/{region"
      "}/clusters:\007cluster\022\263\001\n\rUpdateCluster\022.."
      "google.cloud.dataproc.v1.UpdateClusterRe"
      "quest\032\035.google.longrunning.Operation\"S\202\323"
      "\344\223\002M2B/v1/projects/{project_id}/regions/"
      "{region}/clusters/{cluster_name}:\007cluste"
      "r\022\252\001\n\rDeleteCluster\022..google.cloud.datap"
      "roc.v1.DeleteClusterRequest\032\035.google.lon"
      "grunning.Operation\"J\202\323\344\223\002D*B/v1/projects"
      "/{project_id}/regions/{region}/clusters/"
      "{cluster_name}\022\250\001\n\nGetCluster\022+.google.c"
      "loud.dataproc.v1.GetClusterRequest\032!.goo"
      "gle.cloud.dataproc.v1.Cluster\"J\202\323\344\223\002D\022B/"
      "v1/projects/{project_id}/regions/{region"
      "}/clusters/{cluster_name}\022\252\001\n\014ListCluste"
      "rs\022-.google.cloud.dataproc.v1.ListCluste"
      "rsRequest\032..google.cloud.dataproc.v1.Lis"
      "tClustersResponse\";\202\323\344\223\0025\0223/v1/projects/"
      "{project_id}/regions/{region}/clusters\022\272"
      "\001\n\017DiagnoseCluster\0220.google.cloud.datapr"
      "oc.v1.DiagnoseClusterRequest\032\035.google.lo"
      "ngrunning.Operation\"V\202\323\344\223\002P\"K/v1/project"
      "s/{project_id}/regions/{region}/clusters"
      "/{cluster_name}:diagnose:\001*Bq\n\034com.googl"
      "e.cloud.dataproc.v1B\rClustersProtoP\001Z@go"
      "ogle.golang.org/genproto/googleapis/clou"
      "d/dataproc/v1;dataprocb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4230);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/dataproc/v1/clusters.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::cloud::dataproc::v1::protobuf_google_2fcloud_2fdataproc_2fv1_2foperations_2eproto::AddDescriptors();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto

const ::google::protobuf::EnumDescriptor* ClusterStatus_State_descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_enum_descriptors[0];
}
bool ClusterStatus_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ClusterStatus_State ClusterStatus::UNKNOWN;
const ClusterStatus_State ClusterStatus::CREATING;
const ClusterStatus_State ClusterStatus::RUNNING;
const ClusterStatus_State ClusterStatus::ERROR;
const ClusterStatus_State ClusterStatus::DELETING;
const ClusterStatus_State ClusterStatus::UPDATING;
const ClusterStatus_State ClusterStatus::State_MIN;
const ClusterStatus_State ClusterStatus::State_MAX;
const int ClusterStatus::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cluster::kProjectIdFieldNumber;
const int Cluster::kClusterNameFieldNumber;
const int Cluster::kConfigFieldNumber;
const int Cluster::kStatusFieldNumber;
const int Cluster::kStatusHistoryFieldNumber;
const int Cluster::kClusterUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cluster::Cluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.Cluster)
}
Cluster::Cluster(const Cluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      status_history_(from.status_history_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  cluster_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_uuid().size() > 0) {
    cluster_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_uuid_);
  }
  if (from.has_config()) {
    config_ = new ::google::cloud::dataproc::v1::ClusterConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::google::cloud::dataproc::v1::ClusterStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.Cluster)
}

void Cluster::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&config_) + sizeof(status_));
  _cached_size_ = 0;
}

Cluster::~Cluster() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.Cluster)
  SharedDtor();
}

void Cluster::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete config_;
  }
  if (this != internal_default_instance()) {
    delete status_;
  }
}

void Cluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cluster& Cluster::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cluster* Cluster::New(::google::protobuf::Arena* arena) const {
  Cluster* n = new Cluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cluster::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.Cluster)
  status_history_.Clear();
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}

bool Cluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.Cluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.Cluster.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.Cluster.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.dataproc.v1.ClusterConfig config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.dataproc.v1.ClusterStatus status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_uuid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.Cluster.cluster_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.dataproc.v1.ClusterStatus status_history = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.Cluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.Cluster)
  return false;
#undef DO_
}

void Cluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.Cluster.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.Cluster.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_name(), output);
  }

  // .google.cloud.dataproc.v1.ClusterConfig config = 3;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->config_, output);
  }

  // .google.cloud.dataproc.v1.ClusterStatus status = 4;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->status_, output);
  }

  // string cluster_uuid = 6;
  if (this->cluster_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.Cluster.cluster_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cluster_uuid(), output);
  }

  // repeated .google.cloud.dataproc.v1.ClusterStatus status_history = 7;
  for (unsigned int i = 0, n = this->status_history_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->status_history(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.Cluster)
}

::google::protobuf::uint8* Cluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.Cluster.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.Cluster.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_name(), target);
  }

  // .google.cloud.dataproc.v1.ClusterConfig config = 3;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->config_, deterministic, target);
  }

  // .google.cloud.dataproc.v1.ClusterStatus status = 4;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->status_, deterministic, target);
  }

  // string cluster_uuid = 6;
  if (this->cluster_uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.Cluster.cluster_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cluster_uuid(), target);
  }

  // repeated .google.cloud.dataproc.v1.ClusterStatus status_history = 7;
  for (unsigned int i = 0, n = this->status_history_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->status_history(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.Cluster)
  return target;
}

size_t Cluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.Cluster)
  size_t total_size = 0;

  // repeated .google.cloud.dataproc.v1.ClusterStatus status_history = 7;
  {
    unsigned int count = this->status_history_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status_history(i));
    }
  }

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  // string cluster_uuid = 6;
  if (this->cluster_uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_uuid());
  }

  // .google.cloud.dataproc.v1.ClusterConfig config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // .google.cloud.dataproc.v1.ClusterStatus status = 4;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  const Cluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.Cluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.Cluster)
    MergeFrom(*source);
  }
}

void Cluster::MergeFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_history_.MergeFrom(from.status_history_);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  if (from.cluster_uuid().size() > 0) {

    cluster_uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_uuid_);
  }
  if (from.has_config()) {
    mutable_config()->::google::cloud::dataproc::v1::ClusterConfig::MergeFrom(from.config());
  }
  if (from.has_status()) {
    mutable_status()->::google::cloud::dataproc::v1::ClusterStatus::MergeFrom(from.status());
  }
}

void Cluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {
  return true;
}

void Cluster::Swap(Cluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cluster::InternalSwap(Cluster* other) {
  status_history_.InternalSwap(&other->status_history_);
  project_id_.Swap(&other->project_id_);
  cluster_name_.Swap(&other->cluster_name_);
  cluster_uuid_.Swap(&other->cluster_uuid_);
  std::swap(config_, other->config_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cluster::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cluster

// string project_id = 1;
void Cluster::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Cluster.project_id)
  return project_id_.GetNoArena();
}
void Cluster::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.Cluster.project_id)
}
#if LANG_CXX11
void Cluster::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.Cluster.project_id)
}
#endif
void Cluster::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.Cluster.project_id)
}
void Cluster::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.Cluster.project_id)
}
::std::string* Cluster::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Cluster.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Cluster.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Cluster.project_id)
}

// string cluster_name = 2;
void Cluster::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::cluster_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Cluster.cluster_name)
  return cluster_name_.GetNoArena();
}
void Cluster::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.Cluster.cluster_name)
}
#if LANG_CXX11
void Cluster::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.Cluster.cluster_name)
}
#endif
void Cluster::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.Cluster.cluster_name)
}
void Cluster::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.Cluster.cluster_name)
}
::std::string* Cluster::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Cluster.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_cluster_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Cluster.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Cluster.cluster_name)
}

// .google.cloud.dataproc.v1.ClusterConfig config = 3;
bool Cluster::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void Cluster::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::google::cloud::dataproc::v1::ClusterConfig& Cluster::config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Cluster.config)
  return config_ != NULL ? *config_
                         : *::google::cloud::dataproc::v1::ClusterConfig::internal_default_instance();
}
::google::cloud::dataproc::v1::ClusterConfig* Cluster::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::cloud::dataproc::v1::ClusterConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Cluster.config)
  return config_;
}
::google::cloud::dataproc::v1::ClusterConfig* Cluster::release_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Cluster.config)
  
  ::google::cloud::dataproc::v1::ClusterConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void Cluster::set_allocated_config(::google::cloud::dataproc::v1::ClusterConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Cluster.config)
}

// .google.cloud.dataproc.v1.ClusterStatus status = 4;
bool Cluster::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void Cluster::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::google::cloud::dataproc::v1::ClusterStatus& Cluster::status() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Cluster.status)
  return status_ != NULL ? *status_
                         : *::google::cloud::dataproc::v1::ClusterStatus::internal_default_instance();
}
::google::cloud::dataproc::v1::ClusterStatus* Cluster::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::cloud::dataproc::v1::ClusterStatus;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Cluster.status)
  return status_;
}
::google::cloud::dataproc::v1::ClusterStatus* Cluster::release_status() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Cluster.status)
  
  ::google::cloud::dataproc::v1::ClusterStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void Cluster::set_allocated_status(::google::cloud::dataproc::v1::ClusterStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Cluster.status)
}

// repeated .google.cloud.dataproc.v1.ClusterStatus status_history = 7;
int Cluster::status_history_size() const {
  return status_history_.size();
}
void Cluster::clear_status_history() {
  status_history_.Clear();
}
const ::google::cloud::dataproc::v1::ClusterStatus& Cluster::status_history(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Cluster.status_history)
  return status_history_.Get(index);
}
::google::cloud::dataproc::v1::ClusterStatus* Cluster::mutable_status_history(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Cluster.status_history)
  return status_history_.Mutable(index);
}
::google::cloud::dataproc::v1::ClusterStatus* Cluster::add_status_history() {
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.Cluster.status_history)
  return status_history_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::ClusterStatus >*
Cluster::mutable_status_history() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.Cluster.status_history)
  return &status_history_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::ClusterStatus >&
Cluster::status_history() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.Cluster.status_history)
  return status_history_;
}

// string cluster_uuid = 6;
void Cluster::clear_cluster_uuid() {
  cluster_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::cluster_uuid() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.Cluster.cluster_uuid)
  return cluster_uuid_.GetNoArena();
}
void Cluster::set_cluster_uuid(const ::std::string& value) {
  
  cluster_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.Cluster.cluster_uuid)
}
#if LANG_CXX11
void Cluster::set_cluster_uuid(::std::string&& value) {
  
  cluster_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.Cluster.cluster_uuid)
}
#endif
void Cluster::set_cluster_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.Cluster.cluster_uuid)
}
void Cluster::set_cluster_uuid(const char* value, size_t size) {
  
  cluster_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.Cluster.cluster_uuid)
}
::std::string* Cluster::mutable_cluster_uuid() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.Cluster.cluster_uuid)
  return cluster_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_cluster_uuid() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.Cluster.cluster_uuid)
  
  return cluster_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_cluster_uuid(::std::string* cluster_uuid) {
  if (cluster_uuid != NULL) {
    
  } else {
    
  }
  cluster_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_uuid);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.Cluster.cluster_uuid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterConfig::kConfigBucketFieldNumber;
const int ClusterConfig::kGceClusterConfigFieldNumber;
const int ClusterConfig::kMasterConfigFieldNumber;
const int ClusterConfig::kWorkerConfigFieldNumber;
const int ClusterConfig::kSecondaryWorkerConfigFieldNumber;
const int ClusterConfig::kSoftwareConfigFieldNumber;
const int ClusterConfig::kInitializationActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterConfig::ClusterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.ClusterConfig)
}
ClusterConfig::ClusterConfig(const ClusterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      initialization_actions_(from.initialization_actions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config_bucket().size() > 0) {
    config_bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_bucket_);
  }
  if (from.has_gce_cluster_config()) {
    gce_cluster_config_ = new ::google::cloud::dataproc::v1::GceClusterConfig(*from.gce_cluster_config_);
  } else {
    gce_cluster_config_ = NULL;
  }
  if (from.has_master_config()) {
    master_config_ = new ::google::cloud::dataproc::v1::InstanceGroupConfig(*from.master_config_);
  } else {
    master_config_ = NULL;
  }
  if (from.has_worker_config()) {
    worker_config_ = new ::google::cloud::dataproc::v1::InstanceGroupConfig(*from.worker_config_);
  } else {
    worker_config_ = NULL;
  }
  if (from.has_secondary_worker_config()) {
    secondary_worker_config_ = new ::google::cloud::dataproc::v1::InstanceGroupConfig(*from.secondary_worker_config_);
  } else {
    secondary_worker_config_ = NULL;
  }
  if (from.has_software_config()) {
    software_config_ = new ::google::cloud::dataproc::v1::SoftwareConfig(*from.software_config_);
  } else {
    software_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.ClusterConfig)
}

void ClusterConfig::SharedCtor() {
  config_bucket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gce_cluster_config_, 0, reinterpret_cast<char*>(&software_config_) -
    reinterpret_cast<char*>(&gce_cluster_config_) + sizeof(software_config_));
  _cached_size_ = 0;
}

ClusterConfig::~ClusterConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.ClusterConfig)
  SharedDtor();
}

void ClusterConfig::SharedDtor() {
  config_bucket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete gce_cluster_config_;
  }
  if (this != internal_default_instance()) {
    delete master_config_;
  }
  if (this != internal_default_instance()) {
    delete worker_config_;
  }
  if (this != internal_default_instance()) {
    delete secondary_worker_config_;
  }
  if (this != internal_default_instance()) {
    delete software_config_;
  }
}

void ClusterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterConfig::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterConfig& ClusterConfig::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterConfig* ClusterConfig::New(::google::protobuf::Arena* arena) const {
  ClusterConfig* n = new ClusterConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.ClusterConfig)
  initialization_actions_.Clear();
  config_bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && gce_cluster_config_ != NULL) {
    delete gce_cluster_config_;
  }
  gce_cluster_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && master_config_ != NULL) {
    delete master_config_;
  }
  master_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && worker_config_ != NULL) {
    delete worker_config_;
  }
  worker_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && secondary_worker_config_ != NULL) {
    delete secondary_worker_config_;
  }
  secondary_worker_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && software_config_ != NULL) {
    delete software_config_;
  }
  software_config_ = NULL;
}

bool ClusterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.ClusterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string config_bucket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_bucket()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->config_bucket().data(), this->config_bucket().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.ClusterConfig.config_bucket"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.dataproc.v1.GceClusterConfig gce_cluster_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gce_cluster_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.dataproc.v1.InstanceGroupConfig master_config = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.dataproc.v1.InstanceGroupConfig worker_config = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worker_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.dataproc.v1.NodeInitializationAction initialization_actions = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialization_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.dataproc.v1.InstanceGroupConfig secondary_worker_config = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secondary_worker_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.dataproc.v1.SoftwareConfig software_config = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_software_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.ClusterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.ClusterConfig)
  return false;
#undef DO_
}

void ClusterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.ClusterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string config_bucket = 1;
  if (this->config_bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_bucket().data(), this->config_bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ClusterConfig.config_bucket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->config_bucket(), output);
  }

  // .google.cloud.dataproc.v1.GceClusterConfig gce_cluster_config = 8;
  if (this->has_gce_cluster_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->gce_cluster_config_, output);
  }

  // .google.cloud.dataproc.v1.InstanceGroupConfig master_config = 9;
  if (this->has_master_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->master_config_, output);
  }

  // .google.cloud.dataproc.v1.InstanceGroupConfig worker_config = 10;
  if (this->has_worker_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->worker_config_, output);
  }

  // repeated .google.cloud.dataproc.v1.NodeInitializationAction initialization_actions = 11;
  for (unsigned int i = 0, n = this->initialization_actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->initialization_actions(i), output);
  }

  // .google.cloud.dataproc.v1.InstanceGroupConfig secondary_worker_config = 12;
  if (this->has_secondary_worker_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->secondary_worker_config_, output);
  }

  // .google.cloud.dataproc.v1.SoftwareConfig software_config = 13;
  if (this->has_software_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->software_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.ClusterConfig)
}

::google::protobuf::uint8* ClusterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.ClusterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string config_bucket = 1;
  if (this->config_bucket().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_bucket().data(), this->config_bucket().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ClusterConfig.config_bucket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->config_bucket(), target);
  }

  // .google.cloud.dataproc.v1.GceClusterConfig gce_cluster_config = 8;
  if (this->has_gce_cluster_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->gce_cluster_config_, deterministic, target);
  }

  // .google.cloud.dataproc.v1.InstanceGroupConfig master_config = 9;
  if (this->has_master_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->master_config_, deterministic, target);
  }

  // .google.cloud.dataproc.v1.InstanceGroupConfig worker_config = 10;
  if (this->has_worker_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->worker_config_, deterministic, target);
  }

  // repeated .google.cloud.dataproc.v1.NodeInitializationAction initialization_actions = 11;
  for (unsigned int i = 0, n = this->initialization_actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->initialization_actions(i), deterministic, target);
  }

  // .google.cloud.dataproc.v1.InstanceGroupConfig secondary_worker_config = 12;
  if (this->has_secondary_worker_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->secondary_worker_config_, deterministic, target);
  }

  // .google.cloud.dataproc.v1.SoftwareConfig software_config = 13;
  if (this->has_software_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->software_config_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.ClusterConfig)
  return target;
}

size_t ClusterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.ClusterConfig)
  size_t total_size = 0;

  // repeated .google.cloud.dataproc.v1.NodeInitializationAction initialization_actions = 11;
  {
    unsigned int count = this->initialization_actions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initialization_actions(i));
    }
  }

  // string config_bucket = 1;
  if (this->config_bucket().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_bucket());
  }

  // .google.cloud.dataproc.v1.GceClusterConfig gce_cluster_config = 8;
  if (this->has_gce_cluster_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gce_cluster_config_);
  }

  // .google.cloud.dataproc.v1.InstanceGroupConfig master_config = 9;
  if (this->has_master_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->master_config_);
  }

  // .google.cloud.dataproc.v1.InstanceGroupConfig worker_config = 10;
  if (this->has_worker_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->worker_config_);
  }

  // .google.cloud.dataproc.v1.InstanceGroupConfig secondary_worker_config = 12;
  if (this->has_secondary_worker_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->secondary_worker_config_);
  }

  // .google.cloud.dataproc.v1.SoftwareConfig software_config = 13;
  if (this->has_software_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->software_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.ClusterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.ClusterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.ClusterConfig)
    MergeFrom(*source);
  }
}

void ClusterConfig::MergeFrom(const ClusterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.ClusterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  initialization_actions_.MergeFrom(from.initialization_actions_);
  if (from.config_bucket().size() > 0) {

    config_bucket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_bucket_);
  }
  if (from.has_gce_cluster_config()) {
    mutable_gce_cluster_config()->::google::cloud::dataproc::v1::GceClusterConfig::MergeFrom(from.gce_cluster_config());
  }
  if (from.has_master_config()) {
    mutable_master_config()->::google::cloud::dataproc::v1::InstanceGroupConfig::MergeFrom(from.master_config());
  }
  if (from.has_worker_config()) {
    mutable_worker_config()->::google::cloud::dataproc::v1::InstanceGroupConfig::MergeFrom(from.worker_config());
  }
  if (from.has_secondary_worker_config()) {
    mutable_secondary_worker_config()->::google::cloud::dataproc::v1::InstanceGroupConfig::MergeFrom(from.secondary_worker_config());
  }
  if (from.has_software_config()) {
    mutable_software_config()->::google::cloud::dataproc::v1::SoftwareConfig::MergeFrom(from.software_config());
  }
}

void ClusterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.ClusterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterConfig::CopyFrom(const ClusterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.ClusterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterConfig::IsInitialized() const {
  return true;
}

void ClusterConfig::Swap(ClusterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterConfig::InternalSwap(ClusterConfig* other) {
  initialization_actions_.InternalSwap(&other->initialization_actions_);
  config_bucket_.Swap(&other->config_bucket_);
  std::swap(gce_cluster_config_, other->gce_cluster_config_);
  std::swap(master_config_, other->master_config_);
  std::swap(worker_config_, other->worker_config_);
  std::swap(secondary_worker_config_, other->secondary_worker_config_);
  std::swap(software_config_, other->software_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterConfig

// string config_bucket = 1;
void ClusterConfig::clear_config_bucket() {
  config_bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterConfig::config_bucket() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
  return config_bucket_.GetNoArena();
}
void ClusterConfig::set_config_bucket(const ::std::string& value) {
  
  config_bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
}
#if LANG_CXX11
void ClusterConfig::set_config_bucket(::std::string&& value) {
  
  config_bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
}
#endif
void ClusterConfig::set_config_bucket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
}
void ClusterConfig::set_config_bucket(const char* value, size_t size) {
  
  config_bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
}
::std::string* ClusterConfig::mutable_config_bucket() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
  return config_bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterConfig::release_config_bucket() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
  
  return config_bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterConfig::set_allocated_config_bucket(::std::string* config_bucket) {
  if (config_bucket != NULL) {
    
  } else {
    
  }
  config_bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_bucket);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterConfig.config_bucket)
}

// .google.cloud.dataproc.v1.GceClusterConfig gce_cluster_config = 8;
bool ClusterConfig::has_gce_cluster_config() const {
  return this != internal_default_instance() && gce_cluster_config_ != NULL;
}
void ClusterConfig::clear_gce_cluster_config() {
  if (GetArenaNoVirtual() == NULL && gce_cluster_config_ != NULL) delete gce_cluster_config_;
  gce_cluster_config_ = NULL;
}
const ::google::cloud::dataproc::v1::GceClusterConfig& ClusterConfig::gce_cluster_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.gce_cluster_config)
  return gce_cluster_config_ != NULL ? *gce_cluster_config_
                         : *::google::cloud::dataproc::v1::GceClusterConfig::internal_default_instance();
}
::google::cloud::dataproc::v1::GceClusterConfig* ClusterConfig::mutable_gce_cluster_config() {
  
  if (gce_cluster_config_ == NULL) {
    gce_cluster_config_ = new ::google::cloud::dataproc::v1::GceClusterConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.gce_cluster_config)
  return gce_cluster_config_;
}
::google::cloud::dataproc::v1::GceClusterConfig* ClusterConfig::release_gce_cluster_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterConfig.gce_cluster_config)
  
  ::google::cloud::dataproc::v1::GceClusterConfig* temp = gce_cluster_config_;
  gce_cluster_config_ = NULL;
  return temp;
}
void ClusterConfig::set_allocated_gce_cluster_config(::google::cloud::dataproc::v1::GceClusterConfig* gce_cluster_config) {
  delete gce_cluster_config_;
  gce_cluster_config_ = gce_cluster_config;
  if (gce_cluster_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterConfig.gce_cluster_config)
}

// .google.cloud.dataproc.v1.InstanceGroupConfig master_config = 9;
bool ClusterConfig::has_master_config() const {
  return this != internal_default_instance() && master_config_ != NULL;
}
void ClusterConfig::clear_master_config() {
  if (GetArenaNoVirtual() == NULL && master_config_ != NULL) delete master_config_;
  master_config_ = NULL;
}
const ::google::cloud::dataproc::v1::InstanceGroupConfig& ClusterConfig::master_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.master_config)
  return master_config_ != NULL ? *master_config_
                         : *::google::cloud::dataproc::v1::InstanceGroupConfig::internal_default_instance();
}
::google::cloud::dataproc::v1::InstanceGroupConfig* ClusterConfig::mutable_master_config() {
  
  if (master_config_ == NULL) {
    master_config_ = new ::google::cloud::dataproc::v1::InstanceGroupConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.master_config)
  return master_config_;
}
::google::cloud::dataproc::v1::InstanceGroupConfig* ClusterConfig::release_master_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterConfig.master_config)
  
  ::google::cloud::dataproc::v1::InstanceGroupConfig* temp = master_config_;
  master_config_ = NULL;
  return temp;
}
void ClusterConfig::set_allocated_master_config(::google::cloud::dataproc::v1::InstanceGroupConfig* master_config) {
  delete master_config_;
  master_config_ = master_config;
  if (master_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterConfig.master_config)
}

// .google.cloud.dataproc.v1.InstanceGroupConfig worker_config = 10;
bool ClusterConfig::has_worker_config() const {
  return this != internal_default_instance() && worker_config_ != NULL;
}
void ClusterConfig::clear_worker_config() {
  if (GetArenaNoVirtual() == NULL && worker_config_ != NULL) delete worker_config_;
  worker_config_ = NULL;
}
const ::google::cloud::dataproc::v1::InstanceGroupConfig& ClusterConfig::worker_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.worker_config)
  return worker_config_ != NULL ? *worker_config_
                         : *::google::cloud::dataproc::v1::InstanceGroupConfig::internal_default_instance();
}
::google::cloud::dataproc::v1::InstanceGroupConfig* ClusterConfig::mutable_worker_config() {
  
  if (worker_config_ == NULL) {
    worker_config_ = new ::google::cloud::dataproc::v1::InstanceGroupConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.worker_config)
  return worker_config_;
}
::google::cloud::dataproc::v1::InstanceGroupConfig* ClusterConfig::release_worker_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterConfig.worker_config)
  
  ::google::cloud::dataproc::v1::InstanceGroupConfig* temp = worker_config_;
  worker_config_ = NULL;
  return temp;
}
void ClusterConfig::set_allocated_worker_config(::google::cloud::dataproc::v1::InstanceGroupConfig* worker_config) {
  delete worker_config_;
  worker_config_ = worker_config;
  if (worker_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterConfig.worker_config)
}

// .google.cloud.dataproc.v1.InstanceGroupConfig secondary_worker_config = 12;
bool ClusterConfig::has_secondary_worker_config() const {
  return this != internal_default_instance() && secondary_worker_config_ != NULL;
}
void ClusterConfig::clear_secondary_worker_config() {
  if (GetArenaNoVirtual() == NULL && secondary_worker_config_ != NULL) delete secondary_worker_config_;
  secondary_worker_config_ = NULL;
}
const ::google::cloud::dataproc::v1::InstanceGroupConfig& ClusterConfig::secondary_worker_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.secondary_worker_config)
  return secondary_worker_config_ != NULL ? *secondary_worker_config_
                         : *::google::cloud::dataproc::v1::InstanceGroupConfig::internal_default_instance();
}
::google::cloud::dataproc::v1::InstanceGroupConfig* ClusterConfig::mutable_secondary_worker_config() {
  
  if (secondary_worker_config_ == NULL) {
    secondary_worker_config_ = new ::google::cloud::dataproc::v1::InstanceGroupConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.secondary_worker_config)
  return secondary_worker_config_;
}
::google::cloud::dataproc::v1::InstanceGroupConfig* ClusterConfig::release_secondary_worker_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterConfig.secondary_worker_config)
  
  ::google::cloud::dataproc::v1::InstanceGroupConfig* temp = secondary_worker_config_;
  secondary_worker_config_ = NULL;
  return temp;
}
void ClusterConfig::set_allocated_secondary_worker_config(::google::cloud::dataproc::v1::InstanceGroupConfig* secondary_worker_config) {
  delete secondary_worker_config_;
  secondary_worker_config_ = secondary_worker_config;
  if (secondary_worker_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterConfig.secondary_worker_config)
}

// .google.cloud.dataproc.v1.SoftwareConfig software_config = 13;
bool ClusterConfig::has_software_config() const {
  return this != internal_default_instance() && software_config_ != NULL;
}
void ClusterConfig::clear_software_config() {
  if (GetArenaNoVirtual() == NULL && software_config_ != NULL) delete software_config_;
  software_config_ = NULL;
}
const ::google::cloud::dataproc::v1::SoftwareConfig& ClusterConfig::software_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.software_config)
  return software_config_ != NULL ? *software_config_
                         : *::google::cloud::dataproc::v1::SoftwareConfig::internal_default_instance();
}
::google::cloud::dataproc::v1::SoftwareConfig* ClusterConfig::mutable_software_config() {
  
  if (software_config_ == NULL) {
    software_config_ = new ::google::cloud::dataproc::v1::SoftwareConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.software_config)
  return software_config_;
}
::google::cloud::dataproc::v1::SoftwareConfig* ClusterConfig::release_software_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterConfig.software_config)
  
  ::google::cloud::dataproc::v1::SoftwareConfig* temp = software_config_;
  software_config_ = NULL;
  return temp;
}
void ClusterConfig::set_allocated_software_config(::google::cloud::dataproc::v1::SoftwareConfig* software_config) {
  delete software_config_;
  software_config_ = software_config;
  if (software_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterConfig.software_config)
}

// repeated .google.cloud.dataproc.v1.NodeInitializationAction initialization_actions = 11;
int ClusterConfig::initialization_actions_size() const {
  return initialization_actions_.size();
}
void ClusterConfig::clear_initialization_actions() {
  initialization_actions_.Clear();
}
const ::google::cloud::dataproc::v1::NodeInitializationAction& ClusterConfig::initialization_actions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterConfig.initialization_actions)
  return initialization_actions_.Get(index);
}
::google::cloud::dataproc::v1::NodeInitializationAction* ClusterConfig::mutable_initialization_actions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterConfig.initialization_actions)
  return initialization_actions_.Mutable(index);
}
::google::cloud::dataproc::v1::NodeInitializationAction* ClusterConfig::add_initialization_actions() {
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.ClusterConfig.initialization_actions)
  return initialization_actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::NodeInitializationAction >*
ClusterConfig::mutable_initialization_actions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.ClusterConfig.initialization_actions)
  return &initialization_actions_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::NodeInitializationAction >&
ClusterConfig::initialization_actions() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.ClusterConfig.initialization_actions)
  return initialization_actions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GceClusterConfig::GceClusterConfig_MetadataEntry::GceClusterConfig_MetadataEntry() {}
GceClusterConfig::GceClusterConfig_MetadataEntry::GceClusterConfig_MetadataEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GceClusterConfig::GceClusterConfig_MetadataEntry::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[2];
}
void GceClusterConfig::GceClusterConfig_MetadataEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GceClusterConfig::GceClusterConfig_MetadataEntry::MergeFrom(const GceClusterConfig_MetadataEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GceClusterConfig::kZoneUriFieldNumber;
const int GceClusterConfig::kNetworkUriFieldNumber;
const int GceClusterConfig::kSubnetworkUriFieldNumber;
const int GceClusterConfig::kInternalIpOnlyFieldNumber;
const int GceClusterConfig::kServiceAccountScopesFieldNumber;
const int GceClusterConfig::kTagsFieldNumber;
const int GceClusterConfig::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GceClusterConfig::GceClusterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.GceClusterConfig)
}
GceClusterConfig::GceClusterConfig(const GceClusterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      service_account_scopes_(from.service_account_scopes_),
      tags_(from.tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  zone_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone_uri().size() > 0) {
    zone_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_uri_);
  }
  network_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.network_uri().size() > 0) {
    network_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_uri_);
  }
  subnetwork_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subnetwork_uri().size() > 0) {
    subnetwork_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subnetwork_uri_);
  }
  internal_ip_only_ = from.internal_ip_only_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.GceClusterConfig)
}

void GceClusterConfig::SharedCtor() {
  zone_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subnetwork_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_ip_only_ = false;
  _cached_size_ = 0;
}

GceClusterConfig::~GceClusterConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.GceClusterConfig)
  SharedDtor();
}

void GceClusterConfig::SharedDtor() {
  zone_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subnetwork_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GceClusterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GceClusterConfig::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GceClusterConfig& GceClusterConfig::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

GceClusterConfig* GceClusterConfig::New(::google::protobuf::Arena* arena) const {
  GceClusterConfig* n = new GceClusterConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GceClusterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.GceClusterConfig)
  service_account_scopes_.Clear();
  tags_.Clear();
  metadata_.Clear();
  zone_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subnetwork_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_ip_only_ = false;
}

bool GceClusterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.GceClusterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string zone_uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone_uri().data(), this->zone_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.GceClusterConfig.zone_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string network_uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network_uri().data(), this->network_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.GceClusterConfig.network_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string service_account_scopes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_service_account_scopes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_account_scopes(this->service_account_scopes_size() - 1).data(),
            this->service_account_scopes(this->service_account_scopes_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.GceClusterConfig.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> metadata = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          GceClusterConfig_MetadataEntry::Parser< ::google::protobuf::internal::MapField<
              GceClusterConfig_MetadataEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&metadata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.GceClusterConfig.MetadataEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.GceClusterConfig.MetadataEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subnetwork_uri = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subnetwork_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subnetwork_uri().data(), this->subnetwork_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool internal_ip_only = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &internal_ip_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.GceClusterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.GceClusterConfig)
  return false;
#undef DO_
}

void GceClusterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.GceClusterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string zone_uri = 1;
  if (this->zone_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone_uri().data(), this->zone_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GceClusterConfig.zone_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->zone_uri(), output);
  }

  // string network_uri = 2;
  if (this->network_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_uri().data(), this->network_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GceClusterConfig.network_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->network_uri(), output);
  }

  // repeated string service_account_scopes = 3;
  for (int i = 0, n = this->service_account_scopes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_account_scopes(i).data(), this->service_account_scopes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->service_account_scopes(i), output);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GceClusterConfig.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  // map<string, string> metadata = 5;
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.dataproc.v1.GceClusterConfig.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.dataproc.v1.GceClusterConfig.MetadataEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GceClusterConfig_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GceClusterConfig_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string subnetwork_uri = 6;
  if (this->subnetwork_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subnetwork_uri().data(), this->subnetwork_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->subnetwork_uri(), output);
  }

  // bool internal_ip_only = 7;
  if (this->internal_ip_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->internal_ip_only(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.GceClusterConfig)
}

::google::protobuf::uint8* GceClusterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.GceClusterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string zone_uri = 1;
  if (this->zone_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone_uri().data(), this->zone_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GceClusterConfig.zone_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->zone_uri(), target);
  }

  // string network_uri = 2;
  if (this->network_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_uri().data(), this->network_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GceClusterConfig.network_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network_uri(), target);
  }

  // repeated string service_account_scopes = 3;
  for (int i = 0, n = this->service_account_scopes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_account_scopes(i).data(), this->service_account_scopes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->service_account_scopes(i), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GceClusterConfig.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->tags(i), target);
  }

  // map<string, string> metadata = 5;
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.dataproc.v1.GceClusterConfig.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.dataproc.v1.GceClusterConfig.MetadataEntry.value");
      }
    };

    if (deterministic &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GceClusterConfig_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GceClusterConfig_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string subnetwork_uri = 6;
  if (this->subnetwork_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subnetwork_uri().data(), this->subnetwork_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->subnetwork_uri(), target);
  }

  // bool internal_ip_only = 7;
  if (this->internal_ip_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->internal_ip_only(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.GceClusterConfig)
  return target;
}

size_t GceClusterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.GceClusterConfig)
  size_t total_size = 0;

  // repeated string service_account_scopes = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->service_account_scopes_size());
  for (int i = 0, n = this->service_account_scopes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->service_account_scopes(i));
  }

  // repeated string tags = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // map<string, string> metadata = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metadata_size());
  {
    ::google::protobuf::scoped_ptr<GceClusterConfig_MetadataEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->metadata().begin();
        it != this->metadata().end(); ++it) {
      entry.reset(metadata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string zone_uri = 1;
  if (this->zone_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone_uri());
  }

  // string network_uri = 2;
  if (this->network_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network_uri());
  }

  // string subnetwork_uri = 6;
  if (this->subnetwork_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subnetwork_uri());
  }

  // bool internal_ip_only = 7;
  if (this->internal_ip_only() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GceClusterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.GceClusterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GceClusterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GceClusterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.GceClusterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.GceClusterConfig)
    MergeFrom(*source);
  }
}

void GceClusterConfig::MergeFrom(const GceClusterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.GceClusterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_account_scopes_.MergeFrom(from.service_account_scopes_);
  tags_.MergeFrom(from.tags_);
  metadata_.MergeFrom(from.metadata_);
  if (from.zone_uri().size() > 0) {

    zone_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_uri_);
  }
  if (from.network_uri().size() > 0) {

    network_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_uri_);
  }
  if (from.subnetwork_uri().size() > 0) {

    subnetwork_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subnetwork_uri_);
  }
  if (from.internal_ip_only() != 0) {
    set_internal_ip_only(from.internal_ip_only());
  }
}

void GceClusterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.GceClusterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GceClusterConfig::CopyFrom(const GceClusterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.GceClusterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GceClusterConfig::IsInitialized() const {
  return true;
}

void GceClusterConfig::Swap(GceClusterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GceClusterConfig::InternalSwap(GceClusterConfig* other) {
  service_account_scopes_.InternalSwap(&other->service_account_scopes_);
  tags_.InternalSwap(&other->tags_);
  metadata_.Swap(&other->metadata_);
  zone_uri_.Swap(&other->zone_uri_);
  network_uri_.Swap(&other->network_uri_);
  subnetwork_uri_.Swap(&other->subnetwork_uri_);
  std::swap(internal_ip_only_, other->internal_ip_only_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GceClusterConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GceClusterConfig

// string zone_uri = 1;
void GceClusterConfig::clear_zone_uri() {
  zone_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GceClusterConfig::zone_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
  return zone_uri_.GetNoArena();
}
void GceClusterConfig::set_zone_uri(const ::std::string& value) {
  
  zone_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
}
#if LANG_CXX11
void GceClusterConfig::set_zone_uri(::std::string&& value) {
  
  zone_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
}
#endif
void GceClusterConfig::set_zone_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
}
void GceClusterConfig::set_zone_uri(const char* value, size_t size) {
  
  zone_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
}
::std::string* GceClusterConfig::mutable_zone_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
  return zone_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GceClusterConfig::release_zone_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
  
  return zone_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GceClusterConfig::set_allocated_zone_uri(::std::string* zone_uri) {
  if (zone_uri != NULL) {
    
  } else {
    
  }
  zone_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GceClusterConfig.zone_uri)
}

// string network_uri = 2;
void GceClusterConfig::clear_network_uri() {
  network_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GceClusterConfig::network_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
  return network_uri_.GetNoArena();
}
void GceClusterConfig::set_network_uri(const ::std::string& value) {
  
  network_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
}
#if LANG_CXX11
void GceClusterConfig::set_network_uri(::std::string&& value) {
  
  network_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
}
#endif
void GceClusterConfig::set_network_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  network_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
}
void GceClusterConfig::set_network_uri(const char* value, size_t size) {
  
  network_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
}
::std::string* GceClusterConfig::mutable_network_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
  return network_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GceClusterConfig::release_network_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
  
  return network_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GceClusterConfig::set_allocated_network_uri(::std::string* network_uri) {
  if (network_uri != NULL) {
    
  } else {
    
  }
  network_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GceClusterConfig.network_uri)
}

// string subnetwork_uri = 6;
void GceClusterConfig::clear_subnetwork_uri() {
  subnetwork_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GceClusterConfig::subnetwork_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
  return subnetwork_uri_.GetNoArena();
}
void GceClusterConfig::set_subnetwork_uri(const ::std::string& value) {
  
  subnetwork_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
}
#if LANG_CXX11
void GceClusterConfig::set_subnetwork_uri(::std::string&& value) {
  
  subnetwork_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
}
#endif
void GceClusterConfig::set_subnetwork_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subnetwork_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
}
void GceClusterConfig::set_subnetwork_uri(const char* value, size_t size) {
  
  subnetwork_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
}
::std::string* GceClusterConfig::mutable_subnetwork_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
  return subnetwork_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GceClusterConfig::release_subnetwork_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
  
  return subnetwork_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GceClusterConfig::set_allocated_subnetwork_uri(::std::string* subnetwork_uri) {
  if (subnetwork_uri != NULL) {
    
  } else {
    
  }
  subnetwork_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetwork_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GceClusterConfig.subnetwork_uri)
}

// bool internal_ip_only = 7;
void GceClusterConfig::clear_internal_ip_only() {
  internal_ip_only_ = false;
}
bool GceClusterConfig::internal_ip_only() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GceClusterConfig.internal_ip_only)
  return internal_ip_only_;
}
void GceClusterConfig::set_internal_ip_only(bool value) {
  
  internal_ip_only_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.internal_ip_only)
}

// repeated string service_account_scopes = 3;
int GceClusterConfig::service_account_scopes_size() const {
  return service_account_scopes_.size();
}
void GceClusterConfig::clear_service_account_scopes() {
  service_account_scopes_.Clear();
}
const ::std::string& GceClusterConfig::service_account_scopes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  return service_account_scopes_.Get(index);
}
::std::string* GceClusterConfig::mutable_service_account_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  return service_account_scopes_.Mutable(index);
}
void GceClusterConfig::set_service_account_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  service_account_scopes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void GceClusterConfig::set_service_account_scopes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  service_account_scopes_.Mutable(index)->assign(std::move(value));
}
#endif
void GceClusterConfig::set_service_account_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  service_account_scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
}
void GceClusterConfig::set_service_account_scopes(int index, const char* value, size_t size) {
  service_account_scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
}
::std::string* GceClusterConfig::add_service_account_scopes() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  return service_account_scopes_.Add();
}
void GceClusterConfig::add_service_account_scopes(const ::std::string& value) {
  service_account_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
}
#if LANG_CXX11
void GceClusterConfig::add_service_account_scopes(::std::string&& value) {
  service_account_scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
}
#endif
void GceClusterConfig::add_service_account_scopes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  service_account_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
}
void GceClusterConfig::add_service_account_scopes(const char* value, size_t size) {
  service_account_scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GceClusterConfig::service_account_scopes() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  return service_account_scopes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GceClusterConfig::mutable_service_account_scopes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.GceClusterConfig.service_account_scopes)
  return &service_account_scopes_;
}

// repeated string tags = 4;
int GceClusterConfig::tags_size() const {
  return tags_.size();
}
void GceClusterConfig::clear_tags() {
  tags_.Clear();
}
const ::std::string& GceClusterConfig::tags(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GceClusterConfig.tags)
  return tags_.Get(index);
}
::std::string* GceClusterConfig::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GceClusterConfig.tags)
  return tags_.Mutable(index);
}
void GceClusterConfig::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void GceClusterConfig::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GceClusterConfig.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void GceClusterConfig::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GceClusterConfig.tags)
}
void GceClusterConfig::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GceClusterConfig.tags)
}
::std::string* GceClusterConfig::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.GceClusterConfig.tags)
  return tags_.Add();
}
void GceClusterConfig::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.GceClusterConfig.tags)
}
#if LANG_CXX11
void GceClusterConfig::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.GceClusterConfig.tags)
}
#endif
void GceClusterConfig::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.GceClusterConfig.tags)
}
void GceClusterConfig::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.GceClusterConfig.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GceClusterConfig::tags() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.GceClusterConfig.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GceClusterConfig::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.GceClusterConfig.tags)
  return &tags_;
}

// map<string, string> metadata = 5;
int GceClusterConfig::metadata_size() const {
  return metadata_.size();
}
void GceClusterConfig::clear_metadata() {
  metadata_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
GceClusterConfig::metadata() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.GceClusterConfig.metadata)
  return metadata_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
GceClusterConfig::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.GceClusterConfig.metadata)
  return metadata_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstanceGroupConfig::kNumInstancesFieldNumber;
const int InstanceGroupConfig::kInstanceNamesFieldNumber;
const int InstanceGroupConfig::kImageUriFieldNumber;
const int InstanceGroupConfig::kMachineTypeUriFieldNumber;
const int InstanceGroupConfig::kDiskConfigFieldNumber;
const int InstanceGroupConfig::kIsPreemptibleFieldNumber;
const int InstanceGroupConfig::kManagedGroupConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstanceGroupConfig::InstanceGroupConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.InstanceGroupConfig)
}
InstanceGroupConfig::InstanceGroupConfig(const InstanceGroupConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      instance_names_(from.instance_names_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_uri().size() > 0) {
    image_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_uri_);
  }
  machine_type_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.machine_type_uri().size() > 0) {
    machine_type_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_type_uri_);
  }
  if (from.has_disk_config()) {
    disk_config_ = new ::google::cloud::dataproc::v1::DiskConfig(*from.disk_config_);
  } else {
    disk_config_ = NULL;
  }
  if (from.has_managed_group_config()) {
    managed_group_config_ = new ::google::cloud::dataproc::v1::ManagedGroupConfig(*from.managed_group_config_);
  } else {
    managed_group_config_ = NULL;
  }
  ::memcpy(&num_instances_, &from.num_instances_,
    reinterpret_cast<char*>(&is_preemptible_) -
    reinterpret_cast<char*>(&num_instances_) + sizeof(is_preemptible_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.InstanceGroupConfig)
}

void InstanceGroupConfig::SharedCtor() {
  image_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_type_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&disk_config_, 0, reinterpret_cast<char*>(&is_preemptible_) -
    reinterpret_cast<char*>(&disk_config_) + sizeof(is_preemptible_));
  _cached_size_ = 0;
}

InstanceGroupConfig::~InstanceGroupConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.InstanceGroupConfig)
  SharedDtor();
}

void InstanceGroupConfig::SharedDtor() {
  image_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_type_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete disk_config_;
  }
  if (this != internal_default_instance()) {
    delete managed_group_config_;
  }
}

void InstanceGroupConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceGroupConfig::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstanceGroupConfig& InstanceGroupConfig::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

InstanceGroupConfig* InstanceGroupConfig::New(::google::protobuf::Arena* arena) const {
  InstanceGroupConfig* n = new InstanceGroupConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstanceGroupConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.InstanceGroupConfig)
  instance_names_.Clear();
  image_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_type_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && disk_config_ != NULL) {
    delete disk_config_;
  }
  disk_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && managed_group_config_ != NULL) {
    delete managed_group_config_;
  }
  managed_group_config_ = NULL;
  ::memset(&num_instances_, 0, reinterpret_cast<char*>(&is_preemptible_) -
    reinterpret_cast<char*>(&num_instances_) + sizeof(is_preemptible_));
}

bool InstanceGroupConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.InstanceGroupConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_instances = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_instances_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string instance_names = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_instance_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_names(this->instance_names_size() - 1).data(),
            this->instance_names(this->instance_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.InstanceGroupConfig.instance_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image_uri = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_uri().data(), this->image_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.InstanceGroupConfig.image_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string machine_type_uri = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_type_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_type_uri().data(), this->machine_type_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.dataproc.v1.DiskConfig disk_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disk_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_preemptible = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_preemptible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.dataproc.v1.ManagedGroupConfig managed_group_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_managed_group_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.InstanceGroupConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.InstanceGroupConfig)
  return false;
#undef DO_
}

void InstanceGroupConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.InstanceGroupConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_instances = 1;
  if (this->num_instances() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_instances(), output);
  }

  // repeated string instance_names = 2;
  for (int i = 0, n = this->instance_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_names(i).data(), this->instance_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.InstanceGroupConfig.instance_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instance_names(i), output);
  }

  // string image_uri = 3;
  if (this->image_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_uri().data(), this->image_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.InstanceGroupConfig.image_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image_uri(), output);
  }

  // string machine_type_uri = 4;
  if (this->machine_type_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_type_uri().data(), this->machine_type_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->machine_type_uri(), output);
  }

  // .google.cloud.dataproc.v1.DiskConfig disk_config = 5;
  if (this->has_disk_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->disk_config_, output);
  }

  // bool is_preemptible = 6;
  if (this->is_preemptible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_preemptible(), output);
  }

  // .google.cloud.dataproc.v1.ManagedGroupConfig managed_group_config = 7;
  if (this->has_managed_group_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->managed_group_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.InstanceGroupConfig)
}

::google::protobuf::uint8* InstanceGroupConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.InstanceGroupConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_instances = 1;
  if (this->num_instances() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_instances(), target);
  }

  // repeated string instance_names = 2;
  for (int i = 0, n = this->instance_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_names(i).data(), this->instance_names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.InstanceGroupConfig.instance_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->instance_names(i), target);
  }

  // string image_uri = 3;
  if (this->image_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_uri().data(), this->image_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.InstanceGroupConfig.image_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image_uri(), target);
  }

  // string machine_type_uri = 4;
  if (this->machine_type_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_type_uri().data(), this->machine_type_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->machine_type_uri(), target);
  }

  // .google.cloud.dataproc.v1.DiskConfig disk_config = 5;
  if (this->has_disk_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->disk_config_, deterministic, target);
  }

  // bool is_preemptible = 6;
  if (this->is_preemptible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_preemptible(), target);
  }

  // .google.cloud.dataproc.v1.ManagedGroupConfig managed_group_config = 7;
  if (this->has_managed_group_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->managed_group_config_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.InstanceGroupConfig)
  return target;
}

size_t InstanceGroupConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.InstanceGroupConfig)
  size_t total_size = 0;

  // repeated string instance_names = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->instance_names_size());
  for (int i = 0, n = this->instance_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->instance_names(i));
  }

  // string image_uri = 3;
  if (this->image_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_uri());
  }

  // string machine_type_uri = 4;
  if (this->machine_type_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_type_uri());
  }

  // .google.cloud.dataproc.v1.DiskConfig disk_config = 5;
  if (this->has_disk_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->disk_config_);
  }

  // .google.cloud.dataproc.v1.ManagedGroupConfig managed_group_config = 7;
  if (this->has_managed_group_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->managed_group_config_);
  }

  // int32 num_instances = 1;
  if (this->num_instances() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_instances());
  }

  // bool is_preemptible = 6;
  if (this->is_preemptible() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceGroupConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.InstanceGroupConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InstanceGroupConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstanceGroupConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.InstanceGroupConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.InstanceGroupConfig)
    MergeFrom(*source);
  }
}

void InstanceGroupConfig::MergeFrom(const InstanceGroupConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.InstanceGroupConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instance_names_.MergeFrom(from.instance_names_);
  if (from.image_uri().size() > 0) {

    image_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_uri_);
  }
  if (from.machine_type_uri().size() > 0) {

    machine_type_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_type_uri_);
  }
  if (from.has_disk_config()) {
    mutable_disk_config()->::google::cloud::dataproc::v1::DiskConfig::MergeFrom(from.disk_config());
  }
  if (from.has_managed_group_config()) {
    mutable_managed_group_config()->::google::cloud::dataproc::v1::ManagedGroupConfig::MergeFrom(from.managed_group_config());
  }
  if (from.num_instances() != 0) {
    set_num_instances(from.num_instances());
  }
  if (from.is_preemptible() != 0) {
    set_is_preemptible(from.is_preemptible());
  }
}

void InstanceGroupConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.InstanceGroupConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceGroupConfig::CopyFrom(const InstanceGroupConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.InstanceGroupConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceGroupConfig::IsInitialized() const {
  return true;
}

void InstanceGroupConfig::Swap(InstanceGroupConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstanceGroupConfig::InternalSwap(InstanceGroupConfig* other) {
  instance_names_.InternalSwap(&other->instance_names_);
  image_uri_.Swap(&other->image_uri_);
  machine_type_uri_.Swap(&other->machine_type_uri_);
  std::swap(disk_config_, other->disk_config_);
  std::swap(managed_group_config_, other->managed_group_config_);
  std::swap(num_instances_, other->num_instances_);
  std::swap(is_preemptible_, other->is_preemptible_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstanceGroupConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstanceGroupConfig

// int32 num_instances = 1;
void InstanceGroupConfig::clear_num_instances() {
  num_instances_ = 0;
}
::google::protobuf::int32 InstanceGroupConfig::num_instances() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.num_instances)
  return num_instances_;
}
void InstanceGroupConfig::set_num_instances(::google::protobuf::int32 value) {
  
  num_instances_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.InstanceGroupConfig.num_instances)
}

// repeated string instance_names = 2;
int InstanceGroupConfig::instance_names_size() const {
  return instance_names_.size();
}
void InstanceGroupConfig::clear_instance_names() {
  instance_names_.Clear();
}
const ::std::string& InstanceGroupConfig::instance_names(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  return instance_names_.Get(index);
}
::std::string* InstanceGroupConfig::mutable_instance_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  return instance_names_.Mutable(index);
}
void InstanceGroupConfig::set_instance_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  instance_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void InstanceGroupConfig::set_instance_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  instance_names_.Mutable(index)->assign(std::move(value));
}
#endif
void InstanceGroupConfig::set_instance_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instance_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
}
void InstanceGroupConfig::set_instance_names(int index, const char* value, size_t size) {
  instance_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
}
::std::string* InstanceGroupConfig::add_instance_names() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  return instance_names_.Add();
}
void InstanceGroupConfig::add_instance_names(const ::std::string& value) {
  instance_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
}
#if LANG_CXX11
void InstanceGroupConfig::add_instance_names(::std::string&& value) {
  instance_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
}
#endif
void InstanceGroupConfig::add_instance_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instance_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
}
void InstanceGroupConfig::add_instance_names(const char* value, size_t size) {
  instance_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
InstanceGroupConfig::instance_names() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  return instance_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
InstanceGroupConfig::mutable_instance_names() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.InstanceGroupConfig.instance_names)
  return &instance_names_;
}

// string image_uri = 3;
void InstanceGroupConfig::clear_image_uri() {
  image_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InstanceGroupConfig::image_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
  return image_uri_.GetNoArena();
}
void InstanceGroupConfig::set_image_uri(const ::std::string& value) {
  
  image_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
}
#if LANG_CXX11
void InstanceGroupConfig::set_image_uri(::std::string&& value) {
  
  image_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
}
#endif
void InstanceGroupConfig::set_image_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
}
void InstanceGroupConfig::set_image_uri(const char* value, size_t size) {
  
  image_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
}
::std::string* InstanceGroupConfig::mutable_image_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
  return image_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstanceGroupConfig::release_image_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
  
  return image_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstanceGroupConfig::set_allocated_image_uri(::std::string* image_uri) {
  if (image_uri != NULL) {
    
  } else {
    
  }
  image_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.InstanceGroupConfig.image_uri)
}

// string machine_type_uri = 4;
void InstanceGroupConfig::clear_machine_type_uri() {
  machine_type_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InstanceGroupConfig::machine_type_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
  return machine_type_uri_.GetNoArena();
}
void InstanceGroupConfig::set_machine_type_uri(const ::std::string& value) {
  
  machine_type_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
}
#if LANG_CXX11
void InstanceGroupConfig::set_machine_type_uri(::std::string&& value) {
  
  machine_type_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
}
#endif
void InstanceGroupConfig::set_machine_type_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  machine_type_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
}
void InstanceGroupConfig::set_machine_type_uri(const char* value, size_t size) {
  
  machine_type_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
}
::std::string* InstanceGroupConfig::mutable_machine_type_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
  return machine_type_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstanceGroupConfig::release_machine_type_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
  
  return machine_type_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstanceGroupConfig::set_allocated_machine_type_uri(::std::string* machine_type_uri) {
  if (machine_type_uri != NULL) {
    
  } else {
    
  }
  machine_type_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_type_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.InstanceGroupConfig.machine_type_uri)
}

// .google.cloud.dataproc.v1.DiskConfig disk_config = 5;
bool InstanceGroupConfig::has_disk_config() const {
  return this != internal_default_instance() && disk_config_ != NULL;
}
void InstanceGroupConfig::clear_disk_config() {
  if (GetArenaNoVirtual() == NULL && disk_config_ != NULL) delete disk_config_;
  disk_config_ = NULL;
}
const ::google::cloud::dataproc::v1::DiskConfig& InstanceGroupConfig::disk_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.disk_config)
  return disk_config_ != NULL ? *disk_config_
                         : *::google::cloud::dataproc::v1::DiskConfig::internal_default_instance();
}
::google::cloud::dataproc::v1::DiskConfig* InstanceGroupConfig::mutable_disk_config() {
  
  if (disk_config_ == NULL) {
    disk_config_ = new ::google::cloud::dataproc::v1::DiskConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.InstanceGroupConfig.disk_config)
  return disk_config_;
}
::google::cloud::dataproc::v1::DiskConfig* InstanceGroupConfig::release_disk_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.InstanceGroupConfig.disk_config)
  
  ::google::cloud::dataproc::v1::DiskConfig* temp = disk_config_;
  disk_config_ = NULL;
  return temp;
}
void InstanceGroupConfig::set_allocated_disk_config(::google::cloud::dataproc::v1::DiskConfig* disk_config) {
  delete disk_config_;
  disk_config_ = disk_config;
  if (disk_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.InstanceGroupConfig.disk_config)
}

// bool is_preemptible = 6;
void InstanceGroupConfig::clear_is_preemptible() {
  is_preemptible_ = false;
}
bool InstanceGroupConfig::is_preemptible() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.is_preemptible)
  return is_preemptible_;
}
void InstanceGroupConfig::set_is_preemptible(bool value) {
  
  is_preemptible_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.InstanceGroupConfig.is_preemptible)
}

// .google.cloud.dataproc.v1.ManagedGroupConfig managed_group_config = 7;
bool InstanceGroupConfig::has_managed_group_config() const {
  return this != internal_default_instance() && managed_group_config_ != NULL;
}
void InstanceGroupConfig::clear_managed_group_config() {
  if (GetArenaNoVirtual() == NULL && managed_group_config_ != NULL) delete managed_group_config_;
  managed_group_config_ = NULL;
}
const ::google::cloud::dataproc::v1::ManagedGroupConfig& InstanceGroupConfig::managed_group_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.InstanceGroupConfig.managed_group_config)
  return managed_group_config_ != NULL ? *managed_group_config_
                         : *::google::cloud::dataproc::v1::ManagedGroupConfig::internal_default_instance();
}
::google::cloud::dataproc::v1::ManagedGroupConfig* InstanceGroupConfig::mutable_managed_group_config() {
  
  if (managed_group_config_ == NULL) {
    managed_group_config_ = new ::google::cloud::dataproc::v1::ManagedGroupConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.InstanceGroupConfig.managed_group_config)
  return managed_group_config_;
}
::google::cloud::dataproc::v1::ManagedGroupConfig* InstanceGroupConfig::release_managed_group_config() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.InstanceGroupConfig.managed_group_config)
  
  ::google::cloud::dataproc::v1::ManagedGroupConfig* temp = managed_group_config_;
  managed_group_config_ = NULL;
  return temp;
}
void InstanceGroupConfig::set_allocated_managed_group_config(::google::cloud::dataproc::v1::ManagedGroupConfig* managed_group_config) {
  delete managed_group_config_;
  managed_group_config_ = managed_group_config;
  if (managed_group_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.InstanceGroupConfig.managed_group_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManagedGroupConfig::kInstanceTemplateNameFieldNumber;
const int ManagedGroupConfig::kInstanceGroupManagerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManagedGroupConfig::ManagedGroupConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.ManagedGroupConfig)
}
ManagedGroupConfig::ManagedGroupConfig(const ManagedGroupConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance_template_name().size() > 0) {
    instance_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_template_name_);
  }
  instance_group_manager_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance_group_manager_name().size() > 0) {
    instance_group_manager_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_group_manager_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.ManagedGroupConfig)
}

void ManagedGroupConfig::SharedCtor() {
  instance_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_group_manager_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ManagedGroupConfig::~ManagedGroupConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.ManagedGroupConfig)
  SharedDtor();
}

void ManagedGroupConfig::SharedDtor() {
  instance_template_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_group_manager_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManagedGroupConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManagedGroupConfig::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManagedGroupConfig& ManagedGroupConfig::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManagedGroupConfig* ManagedGroupConfig::New(::google::protobuf::Arena* arena) const {
  ManagedGroupConfig* n = new ManagedGroupConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManagedGroupConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.ManagedGroupConfig)
  instance_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_group_manager_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ManagedGroupConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.ManagedGroupConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string instance_template_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_template_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_template_name().data(), this->instance_template_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instance_group_manager_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_group_manager_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_group_manager_name().data(), this->instance_group_manager_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.ManagedGroupConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.ManagedGroupConfig)
  return false;
#undef DO_
}

void ManagedGroupConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.ManagedGroupConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_template_name = 1;
  if (this->instance_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_template_name().data(), this->instance_template_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instance_template_name(), output);
  }

  // string instance_group_manager_name = 2;
  if (this->instance_group_manager_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_group_manager_name().data(), this->instance_group_manager_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instance_group_manager_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.ManagedGroupConfig)
}

::google::protobuf::uint8* ManagedGroupConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.ManagedGroupConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_template_name = 1;
  if (this->instance_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_template_name().data(), this->instance_template_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instance_template_name(), target);
  }

  // string instance_group_manager_name = 2;
  if (this->instance_group_manager_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_group_manager_name().data(), this->instance_group_manager_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instance_group_manager_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.ManagedGroupConfig)
  return target;
}

size_t ManagedGroupConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.ManagedGroupConfig)
  size_t total_size = 0;

  // string instance_template_name = 1;
  if (this->instance_template_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_template_name());
  }

  // string instance_group_manager_name = 2;
  if (this->instance_group_manager_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_group_manager_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagedGroupConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.ManagedGroupConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ManagedGroupConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManagedGroupConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.ManagedGroupConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.ManagedGroupConfig)
    MergeFrom(*source);
  }
}

void ManagedGroupConfig::MergeFrom(const ManagedGroupConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.ManagedGroupConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_template_name().size() > 0) {

    instance_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_template_name_);
  }
  if (from.instance_group_manager_name().size() > 0) {

    instance_group_manager_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_group_manager_name_);
  }
}

void ManagedGroupConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.ManagedGroupConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagedGroupConfig::CopyFrom(const ManagedGroupConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.ManagedGroupConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagedGroupConfig::IsInitialized() const {
  return true;
}

void ManagedGroupConfig::Swap(ManagedGroupConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManagedGroupConfig::InternalSwap(ManagedGroupConfig* other) {
  instance_template_name_.Swap(&other->instance_template_name_);
  instance_group_manager_name_.Swap(&other->instance_group_manager_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManagedGroupConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManagedGroupConfig

// string instance_template_name = 1;
void ManagedGroupConfig::clear_instance_template_name() {
  instance_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagedGroupConfig::instance_template_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
  return instance_template_name_.GetNoArena();
}
void ManagedGroupConfig::set_instance_template_name(const ::std::string& value) {
  
  instance_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
}
#if LANG_CXX11
void ManagedGroupConfig::set_instance_template_name(::std::string&& value) {
  
  instance_template_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
}
#endif
void ManagedGroupConfig::set_instance_template_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
}
void ManagedGroupConfig::set_instance_template_name(const char* value, size_t size) {
  
  instance_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
}
::std::string* ManagedGroupConfig::mutable_instance_template_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
  return instance_template_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedGroupConfig::release_instance_template_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
  
  return instance_template_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedGroupConfig::set_allocated_instance_template_name(::std::string* instance_template_name) {
  if (instance_template_name != NULL) {
    
  } else {
    
  }
  instance_template_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_template_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ManagedGroupConfig.instance_template_name)
}

// string instance_group_manager_name = 2;
void ManagedGroupConfig::clear_instance_group_manager_name() {
  instance_group_manager_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ManagedGroupConfig::instance_group_manager_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
  return instance_group_manager_name_.GetNoArena();
}
void ManagedGroupConfig::set_instance_group_manager_name(const ::std::string& value) {
  
  instance_group_manager_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
}
#if LANG_CXX11
void ManagedGroupConfig::set_instance_group_manager_name(::std::string&& value) {
  
  instance_group_manager_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
}
#endif
void ManagedGroupConfig::set_instance_group_manager_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_group_manager_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
}
void ManagedGroupConfig::set_instance_group_manager_name(const char* value, size_t size) {
  
  instance_group_manager_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
}
::std::string* ManagedGroupConfig::mutable_instance_group_manager_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
  return instance_group_manager_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedGroupConfig::release_instance_group_manager_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
  
  return instance_group_manager_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedGroupConfig::set_allocated_instance_group_manager_name(::std::string* instance_group_manager_name) {
  if (instance_group_manager_name != NULL) {
    
  } else {
    
  }
  instance_group_manager_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_group_manager_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ManagedGroupConfig.instance_group_manager_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiskConfig::kBootDiskSizeGbFieldNumber;
const int DiskConfig::kNumLocalSsdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiskConfig::DiskConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.DiskConfig)
}
DiskConfig::DiskConfig(const DiskConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&boot_disk_size_gb_, &from.boot_disk_size_gb_,
    reinterpret_cast<char*>(&num_local_ssds_) -
    reinterpret_cast<char*>(&boot_disk_size_gb_) + sizeof(num_local_ssds_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.DiskConfig)
}

void DiskConfig::SharedCtor() {
  ::memset(&boot_disk_size_gb_, 0, reinterpret_cast<char*>(&num_local_ssds_) -
    reinterpret_cast<char*>(&boot_disk_size_gb_) + sizeof(num_local_ssds_));
  _cached_size_ = 0;
}

DiskConfig::~DiskConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.DiskConfig)
  SharedDtor();
}

void DiskConfig::SharedDtor() {
}

void DiskConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskConfig::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DiskConfig& DiskConfig::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

DiskConfig* DiskConfig::New(::google::protobuf::Arena* arena) const {
  DiskConfig* n = new DiskConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.DiskConfig)
  ::memset(&boot_disk_size_gb_, 0, reinterpret_cast<char*>(&num_local_ssds_) -
    reinterpret_cast<char*>(&boot_disk_size_gb_) + sizeof(num_local_ssds_));
}

bool DiskConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.DiskConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 boot_disk_size_gb = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boot_disk_size_gb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_local_ssds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_local_ssds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.DiskConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.DiskConfig)
  return false;
#undef DO_
}

void DiskConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.DiskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boot_disk_size_gb = 1;
  if (this->boot_disk_size_gb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boot_disk_size_gb(), output);
  }

  // int32 num_local_ssds = 2;
  if (this->num_local_ssds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_local_ssds(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.DiskConfig)
}

::google::protobuf::uint8* DiskConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.DiskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 boot_disk_size_gb = 1;
  if (this->boot_disk_size_gb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boot_disk_size_gb(), target);
  }

  // int32 num_local_ssds = 2;
  if (this->num_local_ssds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_local_ssds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.DiskConfig)
  return target;
}

size_t DiskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.DiskConfig)
  size_t total_size = 0;

  // int32 boot_disk_size_gb = 1;
  if (this->boot_disk_size_gb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boot_disk_size_gb());
  }

  // int32 num_local_ssds = 2;
  if (this->num_local_ssds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_local_ssds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.DiskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DiskConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DiskConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.DiskConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.DiskConfig)
    MergeFrom(*source);
  }
}

void DiskConfig::MergeFrom(const DiskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.DiskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.boot_disk_size_gb() != 0) {
    set_boot_disk_size_gb(from.boot_disk_size_gb());
  }
  if (from.num_local_ssds() != 0) {
    set_num_local_ssds(from.num_local_ssds());
  }
}

void DiskConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.DiskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskConfig::CopyFrom(const DiskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.DiskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskConfig::IsInitialized() const {
  return true;
}

void DiskConfig::Swap(DiskConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiskConfig::InternalSwap(DiskConfig* other) {
  std::swap(boot_disk_size_gb_, other->boot_disk_size_gb_);
  std::swap(num_local_ssds_, other->num_local_ssds_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiskConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiskConfig

// int32 boot_disk_size_gb = 1;
void DiskConfig::clear_boot_disk_size_gb() {
  boot_disk_size_gb_ = 0;
}
::google::protobuf::int32 DiskConfig::boot_disk_size_gb() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DiskConfig.boot_disk_size_gb)
  return boot_disk_size_gb_;
}
void DiskConfig::set_boot_disk_size_gb(::google::protobuf::int32 value) {
  
  boot_disk_size_gb_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DiskConfig.boot_disk_size_gb)
}

// int32 num_local_ssds = 2;
void DiskConfig::clear_num_local_ssds() {
  num_local_ssds_ = 0;
}
::google::protobuf::int32 DiskConfig::num_local_ssds() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DiskConfig.num_local_ssds)
  return num_local_ssds_;
}
void DiskConfig::set_num_local_ssds(::google::protobuf::int32 value) {
  
  num_local_ssds_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DiskConfig.num_local_ssds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInitializationAction::kExecutableFileFieldNumber;
const int NodeInitializationAction::kExecutionTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInitializationAction::NodeInitializationAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.NodeInitializationAction)
}
NodeInitializationAction::NodeInitializationAction(const NodeInitializationAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  executable_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.executable_file().size() > 0) {
    executable_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.executable_file_);
  }
  if (from.has_execution_timeout()) {
    execution_timeout_ = new ::google::protobuf::Duration(*from.execution_timeout_);
  } else {
    execution_timeout_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.NodeInitializationAction)
}

void NodeInitializationAction::SharedCtor() {
  executable_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  execution_timeout_ = NULL;
  _cached_size_ = 0;
}

NodeInitializationAction::~NodeInitializationAction() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.NodeInitializationAction)
  SharedDtor();
}

void NodeInitializationAction::SharedDtor() {
  executable_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete execution_timeout_;
  }
}

void NodeInitializationAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInitializationAction::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeInitializationAction& NodeInitializationAction::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeInitializationAction* NodeInitializationAction::New(::google::protobuf::Arena* arena) const {
  NodeInitializationAction* n = new NodeInitializationAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeInitializationAction::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.NodeInitializationAction)
  executable_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && execution_timeout_ != NULL) {
    delete execution_timeout_;
  }
  execution_timeout_ = NULL;
}

bool NodeInitializationAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.NodeInitializationAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string executable_file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->executable_file().data(), this->executable_file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.NodeInitializationAction.executable_file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration execution_timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_execution_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.NodeInitializationAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.NodeInitializationAction)
  return false;
#undef DO_
}

void NodeInitializationAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.NodeInitializationAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string executable_file = 1;
  if (this->executable_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->executable_file().data(), this->executable_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.NodeInitializationAction.executable_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->executable_file(), output);
  }

  // .google.protobuf.Duration execution_timeout = 2;
  if (this->has_execution_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->execution_timeout_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.NodeInitializationAction)
}

::google::protobuf::uint8* NodeInitializationAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.NodeInitializationAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string executable_file = 1;
  if (this->executable_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->executable_file().data(), this->executable_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.NodeInitializationAction.executable_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->executable_file(), target);
  }

  // .google.protobuf.Duration execution_timeout = 2;
  if (this->has_execution_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->execution_timeout_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.NodeInitializationAction)
  return target;
}

size_t NodeInitializationAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.NodeInitializationAction)
  size_t total_size = 0;

  // string executable_file = 1;
  if (this->executable_file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->executable_file());
  }

  // .google.protobuf.Duration execution_timeout = 2;
  if (this->has_execution_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->execution_timeout_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInitializationAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.NodeInitializationAction)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInitializationAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInitializationAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.NodeInitializationAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.NodeInitializationAction)
    MergeFrom(*source);
  }
}

void NodeInitializationAction::MergeFrom(const NodeInitializationAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.NodeInitializationAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.executable_file().size() > 0) {

    executable_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.executable_file_);
  }
  if (from.has_execution_timeout()) {
    mutable_execution_timeout()->::google::protobuf::Duration::MergeFrom(from.execution_timeout());
  }
}

void NodeInitializationAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.NodeInitializationAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInitializationAction::CopyFrom(const NodeInitializationAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.NodeInitializationAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInitializationAction::IsInitialized() const {
  return true;
}

void NodeInitializationAction::Swap(NodeInitializationAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInitializationAction::InternalSwap(NodeInitializationAction* other) {
  executable_file_.Swap(&other->executable_file_);
  std::swap(execution_timeout_, other->execution_timeout_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeInitializationAction::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeInitializationAction

// string executable_file = 1;
void NodeInitializationAction::clear_executable_file() {
  executable_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeInitializationAction::executable_file() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
  return executable_file_.GetNoArena();
}
void NodeInitializationAction::set_executable_file(const ::std::string& value) {
  
  executable_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
}
#if LANG_CXX11
void NodeInitializationAction::set_executable_file(::std::string&& value) {
  
  executable_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
}
#endif
void NodeInitializationAction::set_executable_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  executable_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
}
void NodeInitializationAction::set_executable_file(const char* value, size_t size) {
  
  executable_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
}
::std::string* NodeInitializationAction::mutable_executable_file() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
  return executable_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeInitializationAction::release_executable_file() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
  
  return executable_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeInitializationAction::set_allocated_executable_file(::std::string* executable_file) {
  if (executable_file != NULL) {
    
  } else {
    
  }
  executable_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), executable_file);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.NodeInitializationAction.executable_file)
}

// .google.protobuf.Duration execution_timeout = 2;
bool NodeInitializationAction::has_execution_timeout() const {
  return this != internal_default_instance() && execution_timeout_ != NULL;
}
void NodeInitializationAction::clear_execution_timeout() {
  if (GetArenaNoVirtual() == NULL && execution_timeout_ != NULL) delete execution_timeout_;
  execution_timeout_ = NULL;
}
const ::google::protobuf::Duration& NodeInitializationAction::execution_timeout() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.NodeInitializationAction.execution_timeout)
  return execution_timeout_ != NULL ? *execution_timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* NodeInitializationAction::mutable_execution_timeout() {
  
  if (execution_timeout_ == NULL) {
    execution_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.NodeInitializationAction.execution_timeout)
  return execution_timeout_;
}
::google::protobuf::Duration* NodeInitializationAction::release_execution_timeout() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.NodeInitializationAction.execution_timeout)
  
  ::google::protobuf::Duration* temp = execution_timeout_;
  execution_timeout_ = NULL;
  return temp;
}
void NodeInitializationAction::set_allocated_execution_timeout(::google::protobuf::Duration* execution_timeout) {
  delete execution_timeout_;
  if (execution_timeout != NULL && execution_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_execution_timeout = new ::google::protobuf::Duration;
    new_execution_timeout->CopyFrom(*execution_timeout);
    execution_timeout = new_execution_timeout;
  }
  execution_timeout_ = execution_timeout;
  if (execution_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.NodeInitializationAction.execution_timeout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterStatus::kStateFieldNumber;
const int ClusterStatus::kDetailFieldNumber;
const int ClusterStatus::kStateStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterStatus::ClusterStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.ClusterStatus)
}
ClusterStatus::ClusterStatus(const ClusterStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.detail().size() > 0) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.has_state_start_time()) {
    state_start_time_ = new ::google::protobuf::Timestamp(*from.state_start_time_);
  } else {
    state_start_time_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.ClusterStatus)
}

void ClusterStatus::SharedCtor() {
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_start_time_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&state_start_time_) + sizeof(state_));
  _cached_size_ = 0;
}

ClusterStatus::~ClusterStatus() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.ClusterStatus)
  SharedDtor();
}

void ClusterStatus::SharedDtor() {
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete state_start_time_;
  }
}

void ClusterStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterStatus::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterStatus& ClusterStatus::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterStatus* ClusterStatus::New(::google::protobuf::Arena* arena) const {
  ClusterStatus* n = new ClusterStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.ClusterStatus)
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && state_start_time_ != NULL) {
    delete state_start_time_;
  }
  state_start_time_ = NULL;
  state_ = 0;
}

bool ClusterStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.ClusterStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.dataproc.v1.ClusterStatus.State state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::cloud::dataproc::v1::ClusterStatus_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detail = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detail().data(), this->detail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.ClusterStatus.detail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp state_start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.ClusterStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.ClusterStatus)
  return false;
#undef DO_
}

void ClusterStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.ClusterStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.dataproc.v1.ClusterStatus.State state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // string detail = 2;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ClusterStatus.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->detail(), output);
  }

  // .google.protobuf.Timestamp state_start_time = 3;
  if (this->has_state_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->state_start_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.ClusterStatus)
}

::google::protobuf::uint8* ClusterStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.ClusterStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.dataproc.v1.ClusterStatus.State state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // string detail = 2;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ClusterStatus.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->detail(), target);
  }

  // .google.protobuf.Timestamp state_start_time = 3;
  if (this->has_state_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->state_start_time_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.ClusterStatus)
  return target;
}

size_t ClusterStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.ClusterStatus)
  size_t total_size = 0;

  // string detail = 2;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detail());
  }

  // .google.protobuf.Timestamp state_start_time = 3;
  if (this->has_state_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->state_start_time_);
  }

  // .google.cloud.dataproc.v1.ClusterStatus.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.ClusterStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.ClusterStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.ClusterStatus)
    MergeFrom(*source);
  }
}

void ClusterStatus::MergeFrom(const ClusterStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.ClusterStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.detail().size() > 0) {

    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.has_state_start_time()) {
    mutable_state_start_time()->::google::protobuf::Timestamp::MergeFrom(from.state_start_time());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ClusterStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.ClusterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterStatus::CopyFrom(const ClusterStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.ClusterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterStatus::IsInitialized() const {
  return true;
}

void ClusterStatus::Swap(ClusterStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterStatus::InternalSwap(ClusterStatus* other) {
  detail_.Swap(&other->detail_);
  std::swap(state_start_time_, other->state_start_time_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterStatus::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterStatus

// .google.cloud.dataproc.v1.ClusterStatus.State state = 1;
void ClusterStatus::clear_state() {
  state_ = 0;
}
::google::cloud::dataproc::v1::ClusterStatus_State ClusterStatus::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterStatus.state)
  return static_cast< ::google::cloud::dataproc::v1::ClusterStatus_State >(state_);
}
void ClusterStatus::set_state(::google::cloud::dataproc::v1::ClusterStatus_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ClusterStatus.state)
}

// string detail = 2;
void ClusterStatus::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterStatus::detail() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterStatus.detail)
  return detail_.GetNoArena();
}
void ClusterStatus::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ClusterStatus.detail)
}
#if LANG_CXX11
void ClusterStatus::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ClusterStatus.detail)
}
#endif
void ClusterStatus::set_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ClusterStatus.detail)
}
void ClusterStatus::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ClusterStatus.detail)
}
::std::string* ClusterStatus::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterStatus.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterStatus::release_detail() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterStatus.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterStatus::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterStatus.detail)
}

// .google.protobuf.Timestamp state_start_time = 3;
bool ClusterStatus::has_state_start_time() const {
  return this != internal_default_instance() && state_start_time_ != NULL;
}
void ClusterStatus::clear_state_start_time() {
  if (GetArenaNoVirtual() == NULL && state_start_time_ != NULL) delete state_start_time_;
  state_start_time_ = NULL;
}
const ::google::protobuf::Timestamp& ClusterStatus::state_start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ClusterStatus.state_start_time)
  return state_start_time_ != NULL ? *state_start_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* ClusterStatus::mutable_state_start_time() {
  
  if (state_start_time_ == NULL) {
    state_start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ClusterStatus.state_start_time)
  return state_start_time_;
}
::google::protobuf::Timestamp* ClusterStatus::release_state_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ClusterStatus.state_start_time)
  
  ::google::protobuf::Timestamp* temp = state_start_time_;
  state_start_time_ = NULL;
  return temp;
}
void ClusterStatus::set_allocated_state_start_time(::google::protobuf::Timestamp* state_start_time) {
  delete state_start_time_;
  if (state_start_time != NULL && state_start_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_state_start_time = new ::google::protobuf::Timestamp;
    new_state_start_time->CopyFrom(*state_start_time);
    state_start_time = new_state_start_time;
  }
  state_start_time_ = state_start_time;
  if (state_start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ClusterStatus.state_start_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SoftwareConfig::SoftwareConfig_PropertiesEntry::SoftwareConfig_PropertiesEntry() {}
SoftwareConfig::SoftwareConfig_PropertiesEntry::SoftwareConfig_PropertiesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SoftwareConfig::SoftwareConfig_PropertiesEntry::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[9];
}
void SoftwareConfig::SoftwareConfig_PropertiesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SoftwareConfig::SoftwareConfig_PropertiesEntry::MergeFrom(const SoftwareConfig_PropertiesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftwareConfig::kImageVersionFieldNumber;
const int SoftwareConfig::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftwareConfig::SoftwareConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.SoftwareConfig)
}
SoftwareConfig::SoftwareConfig(const SoftwareConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  image_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_version().size() > 0) {
    image_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_version_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.SoftwareConfig)
}

void SoftwareConfig::SharedCtor() {
  image_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SoftwareConfig::~SoftwareConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.SoftwareConfig)
  SharedDtor();
}

void SoftwareConfig::SharedDtor() {
  image_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SoftwareConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftwareConfig::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SoftwareConfig& SoftwareConfig::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

SoftwareConfig* SoftwareConfig::New(::google::protobuf::Arena* arena) const {
  SoftwareConfig* n = new SoftwareConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftwareConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.SoftwareConfig)
  properties_.Clear();
  image_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SoftwareConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.SoftwareConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string image_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_version().data(), this->image_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.SoftwareConfig.image_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> properties = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          SoftwareConfig_PropertiesEntry::Parser< ::google::protobuf::internal::MapField<
              SoftwareConfig_PropertiesEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&properties_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.SoftwareConfig.PropertiesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.SoftwareConfig.PropertiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.SoftwareConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.SoftwareConfig)
  return false;
#undef DO_
}

void SoftwareConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.SoftwareConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_version = 1;
  if (this->image_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_version().data(), this->image_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.SoftwareConfig.image_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image_version(), output);
  }

  // map<string, string> properties = 2;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.dataproc.v1.SoftwareConfig.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.dataproc.v1.SoftwareConfig.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SoftwareConfig_PropertiesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SoftwareConfig_PropertiesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.SoftwareConfig)
}

::google::protobuf::uint8* SoftwareConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.SoftwareConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_version = 1;
  if (this->image_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_version().data(), this->image_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.SoftwareConfig.image_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_version(), target);
  }

  // map<string, string> properties = 2;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.dataproc.v1.SoftwareConfig.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.dataproc.v1.SoftwareConfig.PropertiesEntry.value");
      }
    };

    if (deterministic &&
        this->properties().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SoftwareConfig_PropertiesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SoftwareConfig_PropertiesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.SoftwareConfig)
  return target;
}

size_t SoftwareConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.SoftwareConfig)
  size_t total_size = 0;

  // map<string, string> properties = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->properties_size());
  {
    ::google::protobuf::scoped_ptr<SoftwareConfig_PropertiesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->properties().begin();
        it != this->properties().end(); ++it) {
      entry.reset(properties_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string image_version = 1;
  if (this->image_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftwareConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.SoftwareConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftwareConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftwareConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.SoftwareConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.SoftwareConfig)
    MergeFrom(*source);
  }
}

void SoftwareConfig::MergeFrom(const SoftwareConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.SoftwareConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.image_version().size() > 0) {

    image_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_version_);
  }
}

void SoftwareConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.SoftwareConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareConfig::CopyFrom(const SoftwareConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.SoftwareConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareConfig::IsInitialized() const {
  return true;
}

void SoftwareConfig::Swap(SoftwareConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftwareConfig::InternalSwap(SoftwareConfig* other) {
  properties_.Swap(&other->properties_);
  image_version_.Swap(&other->image_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftwareConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftwareConfig

// string image_version = 1;
void SoftwareConfig::clear_image_version() {
  image_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SoftwareConfig::image_version() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.SoftwareConfig.image_version)
  return image_version_.GetNoArena();
}
void SoftwareConfig::set_image_version(const ::std::string& value) {
  
  image_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.SoftwareConfig.image_version)
}
#if LANG_CXX11
void SoftwareConfig::set_image_version(::std::string&& value) {
  
  image_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.SoftwareConfig.image_version)
}
#endif
void SoftwareConfig::set_image_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.SoftwareConfig.image_version)
}
void SoftwareConfig::set_image_version(const char* value, size_t size) {
  
  image_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.SoftwareConfig.image_version)
}
::std::string* SoftwareConfig::mutable_image_version() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.SoftwareConfig.image_version)
  return image_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SoftwareConfig::release_image_version() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.SoftwareConfig.image_version)
  
  return image_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SoftwareConfig::set_allocated_image_version(::std::string* image_version) {
  if (image_version != NULL) {
    
  } else {
    
  }
  image_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_version);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.SoftwareConfig.image_version)
}

// map<string, string> properties = 2;
int SoftwareConfig::properties_size() const {
  return properties_.size();
}
void SoftwareConfig::clear_properties() {
  properties_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
SoftwareConfig::properties() const {
  // @@protoc_insertion_point(field_map:google.cloud.dataproc.v1.SoftwareConfig.properties)
  return properties_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
SoftwareConfig::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.dataproc.v1.SoftwareConfig.properties)
  return properties_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateClusterRequest::kProjectIdFieldNumber;
const int CreateClusterRequest::kRegionFieldNumber;
const int CreateClusterRequest::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateClusterRequest::CreateClusterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.CreateClusterRequest)
}
CreateClusterRequest::CreateClusterRequest(const CreateClusterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.has_cluster()) {
    cluster_ = new ::google::cloud::dataproc::v1::Cluster(*from.cluster_);
  } else {
    cluster_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.CreateClusterRequest)
}

void CreateClusterRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ = NULL;
  _cached_size_ = 0;
}

CreateClusterRequest::~CreateClusterRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.CreateClusterRequest)
  SharedDtor();
}

void CreateClusterRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete cluster_;
  }
}

void CreateClusterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateClusterRequest::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateClusterRequest& CreateClusterRequest::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateClusterRequest* CreateClusterRequest::New(::google::protobuf::Arena* arena) const {
  CreateClusterRequest* n = new CreateClusterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.CreateClusterRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) {
    delete cluster_;
  }
  cluster_ = NULL;
}

bool CreateClusterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.CreateClusterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.CreateClusterRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.dataproc.v1.Cluster cluster = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.CreateClusterRequest.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.CreateClusterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.CreateClusterRequest)
  return false;
#undef DO_
}

void CreateClusterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.CreateClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.CreateClusterRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // .google.cloud.dataproc.v1.Cluster cluster = 2;
  if (this->has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cluster_, output);
  }

  // string region = 3;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.CreateClusterRequest.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->region(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.CreateClusterRequest)
}

::google::protobuf::uint8* CreateClusterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.CreateClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.CreateClusterRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // .google.cloud.dataproc.v1.Cluster cluster = 2;
  if (this->has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cluster_, deterministic, target);
  }

  // string region = 3;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.CreateClusterRequest.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->region(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.CreateClusterRequest)
  return target;
}

size_t CreateClusterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.CreateClusterRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string region = 3;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  // .google.cloud.dataproc.v1.Cluster cluster = 2;
  if (this->has_cluster()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cluster_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateClusterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.CreateClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateClusterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateClusterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.CreateClusterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.CreateClusterRequest)
    MergeFrom(*source);
  }
}

void CreateClusterRequest::MergeFrom(const CreateClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.CreateClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.has_cluster()) {
    mutable_cluster()->::google::cloud::dataproc::v1::Cluster::MergeFrom(from.cluster());
  }
}

void CreateClusterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.CreateClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateClusterRequest::CopyFrom(const CreateClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.CreateClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateClusterRequest::IsInitialized() const {
  return true;
}

void CreateClusterRequest::Swap(CreateClusterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateClusterRequest::InternalSwap(CreateClusterRequest* other) {
  project_id_.Swap(&other->project_id_);
  region_.Swap(&other->region_);
  std::swap(cluster_, other->cluster_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateClusterRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateClusterRequest

// string project_id = 1;
void CreateClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
  return project_id_.GetNoArena();
}
void CreateClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
}
#if LANG_CXX11
void CreateClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
}
#endif
void CreateClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
}
void CreateClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
}
::std::string* CreateClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.CreateClusterRequest.project_id)
}

// string region = 3;
void CreateClusterRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateClusterRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.CreateClusterRequest.region)
  return region_.GetNoArena();
}
void CreateClusterRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.CreateClusterRequest.region)
}
#if LANG_CXX11
void CreateClusterRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.CreateClusterRequest.region)
}
#endif
void CreateClusterRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.CreateClusterRequest.region)
}
void CreateClusterRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.CreateClusterRequest.region)
}
::std::string* CreateClusterRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.CreateClusterRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateClusterRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.CreateClusterRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateClusterRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.CreateClusterRequest.region)
}

// .google.cloud.dataproc.v1.Cluster cluster = 2;
bool CreateClusterRequest::has_cluster() const {
  return this != internal_default_instance() && cluster_ != NULL;
}
void CreateClusterRequest::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) delete cluster_;
  cluster_ = NULL;
}
const ::google::cloud::dataproc::v1::Cluster& CreateClusterRequest::cluster() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.CreateClusterRequest.cluster)
  return cluster_ != NULL ? *cluster_
                         : *::google::cloud::dataproc::v1::Cluster::internal_default_instance();
}
::google::cloud::dataproc::v1::Cluster* CreateClusterRequest::mutable_cluster() {
  
  if (cluster_ == NULL) {
    cluster_ = new ::google::cloud::dataproc::v1::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.CreateClusterRequest.cluster)
  return cluster_;
}
::google::cloud::dataproc::v1::Cluster* CreateClusterRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.CreateClusterRequest.cluster)
  
  ::google::cloud::dataproc::v1::Cluster* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
void CreateClusterRequest::set_allocated_cluster(::google::cloud::dataproc::v1::Cluster* cluster) {
  delete cluster_;
  cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.CreateClusterRequest.cluster)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateClusterRequest::kProjectIdFieldNumber;
const int UpdateClusterRequest::kRegionFieldNumber;
const int UpdateClusterRequest::kClusterNameFieldNumber;
const int UpdateClusterRequest::kClusterFieldNumber;
const int UpdateClusterRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateClusterRequest::UpdateClusterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.UpdateClusterRequest)
}
UpdateClusterRequest::UpdateClusterRequest(const UpdateClusterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.has_cluster()) {
    cluster_ = new ::google::cloud::dataproc::v1::Cluster(*from.cluster_);
  } else {
    cluster_ = NULL;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.UpdateClusterRequest)
}

void UpdateClusterRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cluster_, 0, reinterpret_cast<char*>(&update_mask_) -
    reinterpret_cast<char*>(&cluster_) + sizeof(update_mask_));
  _cached_size_ = 0;
}

UpdateClusterRequest::~UpdateClusterRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.UpdateClusterRequest)
  SharedDtor();
}

void UpdateClusterRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete cluster_;
  }
  if (this != internal_default_instance()) {
    delete update_mask_;
  }
}

void UpdateClusterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateClusterRequest::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateClusterRequest& UpdateClusterRequest::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateClusterRequest* UpdateClusterRequest::New(::google::protobuf::Arena* arena) const {
  UpdateClusterRequest* n = new UpdateClusterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.UpdateClusterRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) {
    delete cluster_;
  }
  cluster_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
}

bool UpdateClusterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.UpdateClusterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.UpdateClusterRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.dataproc.v1.Cluster cluster = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.UpdateClusterRequest.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.UpdateClusterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.UpdateClusterRequest)
  return false;
#undef DO_
}

void UpdateClusterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.UpdateClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.UpdateClusterRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_name(), output);
  }

  // .google.cloud.dataproc.v1.Cluster cluster = 3;
  if (this->has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cluster_, output);
  }

  // .google.protobuf.FieldMask update_mask = 4;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->update_mask_, output);
  }

  // string region = 5;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.UpdateClusterRequest.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->region(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.UpdateClusterRequest)
}

::google::protobuf::uint8* UpdateClusterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.UpdateClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.UpdateClusterRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_name(), target);
  }

  // .google.cloud.dataproc.v1.Cluster cluster = 3;
  if (this->has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cluster_, deterministic, target);
  }

  // .google.protobuf.FieldMask update_mask = 4;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->update_mask_, deterministic, target);
  }

  // string region = 5;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.UpdateClusterRequest.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->region(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.UpdateClusterRequest)
  return target;
}

size_t UpdateClusterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.UpdateClusterRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  // string region = 5;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  // .google.cloud.dataproc.v1.Cluster cluster = 3;
  if (this->has_cluster()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cluster_);
  }

  // .google.protobuf.FieldMask update_mask = 4;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateClusterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.UpdateClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateClusterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateClusterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.UpdateClusterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.UpdateClusterRequest)
    MergeFrom(*source);
  }
}

void UpdateClusterRequest::MergeFrom(const UpdateClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.UpdateClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.has_cluster()) {
    mutable_cluster()->::google::cloud::dataproc::v1::Cluster::MergeFrom(from.cluster());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateClusterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.UpdateClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateClusterRequest::CopyFrom(const UpdateClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.UpdateClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateClusterRequest::IsInitialized() const {
  return true;
}

void UpdateClusterRequest::Swap(UpdateClusterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateClusterRequest::InternalSwap(UpdateClusterRequest* other) {
  project_id_.Swap(&other->project_id_);
  cluster_name_.Swap(&other->cluster_name_);
  region_.Swap(&other->region_);
  std::swap(cluster_, other->cluster_);
  std::swap(update_mask_, other->update_mask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateClusterRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateClusterRequest

// string project_id = 1;
void UpdateClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
  return project_id_.GetNoArena();
}
void UpdateClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
}
#if LANG_CXX11
void UpdateClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
}
#endif
void UpdateClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
}
void UpdateClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
}
::std::string* UpdateClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.UpdateClusterRequest.project_id)
}

// string region = 5;
void UpdateClusterRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateClusterRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.UpdateClusterRequest.region)
  return region_.GetNoArena();
}
void UpdateClusterRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.UpdateClusterRequest.region)
}
#if LANG_CXX11
void UpdateClusterRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.UpdateClusterRequest.region)
}
#endif
void UpdateClusterRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.UpdateClusterRequest.region)
}
void UpdateClusterRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.UpdateClusterRequest.region)
}
::std::string* UpdateClusterRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.UpdateClusterRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateClusterRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.UpdateClusterRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateClusterRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.UpdateClusterRequest.region)
}

// string cluster_name = 2;
void UpdateClusterRequest::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateClusterRequest::cluster_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
  return cluster_name_.GetNoArena();
}
void UpdateClusterRequest::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
}
#if LANG_CXX11
void UpdateClusterRequest::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
}
#endif
void UpdateClusterRequest::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
}
void UpdateClusterRequest::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
}
::std::string* UpdateClusterRequest::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateClusterRequest::release_cluster_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateClusterRequest::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.UpdateClusterRequest.cluster_name)
}

// .google.cloud.dataproc.v1.Cluster cluster = 3;
bool UpdateClusterRequest::has_cluster() const {
  return this != internal_default_instance() && cluster_ != NULL;
}
void UpdateClusterRequest::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) delete cluster_;
  cluster_ = NULL;
}
const ::google::cloud::dataproc::v1::Cluster& UpdateClusterRequest::cluster() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.UpdateClusterRequest.cluster)
  return cluster_ != NULL ? *cluster_
                         : *::google::cloud::dataproc::v1::Cluster::internal_default_instance();
}
::google::cloud::dataproc::v1::Cluster* UpdateClusterRequest::mutable_cluster() {
  
  if (cluster_ == NULL) {
    cluster_ = new ::google::cloud::dataproc::v1::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.UpdateClusterRequest.cluster)
  return cluster_;
}
::google::cloud::dataproc::v1::Cluster* UpdateClusterRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.UpdateClusterRequest.cluster)
  
  ::google::cloud::dataproc::v1::Cluster* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
void UpdateClusterRequest::set_allocated_cluster(::google::cloud::dataproc::v1::Cluster* cluster) {
  delete cluster_;
  cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.UpdateClusterRequest.cluster)
}

// .google.protobuf.FieldMask update_mask = 4;
bool UpdateClusterRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
void UpdateClusterRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}
const ::google::protobuf::FieldMask& UpdateClusterRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.UpdateClusterRequest.update_mask)
  return update_mask_ != NULL ? *update_mask_
                         : *::google::protobuf::FieldMask::internal_default_instance();
}
::google::protobuf::FieldMask* UpdateClusterRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    update_mask_ = new ::google::protobuf::FieldMask;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.UpdateClusterRequest.update_mask)
  return update_mask_;
}
::google::protobuf::FieldMask* UpdateClusterRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.UpdateClusterRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
void UpdateClusterRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  delete update_mask_;
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.UpdateClusterRequest.update_mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteClusterRequest::kProjectIdFieldNumber;
const int DeleteClusterRequest::kRegionFieldNumber;
const int DeleteClusterRequest::kClusterNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteClusterRequest::DeleteClusterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.DeleteClusterRequest)
}
DeleteClusterRequest::DeleteClusterRequest(const DeleteClusterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.DeleteClusterRequest)
}

void DeleteClusterRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteClusterRequest::~DeleteClusterRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.DeleteClusterRequest)
  SharedDtor();
}

void DeleteClusterRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteClusterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteClusterRequest::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteClusterRequest& DeleteClusterRequest::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteClusterRequest* DeleteClusterRequest::New(::google::protobuf::Arena* arena) const {
  DeleteClusterRequest* n = new DeleteClusterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.DeleteClusterRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteClusterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.DeleteClusterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.DeleteClusterRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.DeleteClusterRequest.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.DeleteClusterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.DeleteClusterRequest)
  return false;
#undef DO_
}

void DeleteClusterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.DeleteClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DeleteClusterRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_name(), output);
  }

  // string region = 3;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DeleteClusterRequest.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->region(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.DeleteClusterRequest)
}

::google::protobuf::uint8* DeleteClusterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.DeleteClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DeleteClusterRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_name(), target);
  }

  // string region = 3;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DeleteClusterRequest.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->region(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.DeleteClusterRequest)
  return target;
}

size_t DeleteClusterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.DeleteClusterRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  // string region = 3;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteClusterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.DeleteClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteClusterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteClusterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.DeleteClusterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.DeleteClusterRequest)
    MergeFrom(*source);
  }
}

void DeleteClusterRequest::MergeFrom(const DeleteClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.DeleteClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
}

void DeleteClusterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.DeleteClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteClusterRequest::CopyFrom(const DeleteClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.DeleteClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteClusterRequest::IsInitialized() const {
  return true;
}

void DeleteClusterRequest::Swap(DeleteClusterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteClusterRequest::InternalSwap(DeleteClusterRequest* other) {
  project_id_.Swap(&other->project_id_);
  cluster_name_.Swap(&other->cluster_name_);
  region_.Swap(&other->region_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteClusterRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteClusterRequest

// string project_id = 1;
void DeleteClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
  return project_id_.GetNoArena();
}
void DeleteClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
}
#if LANG_CXX11
void DeleteClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
}
#endif
void DeleteClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
}
void DeleteClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
}
::std::string* DeleteClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DeleteClusterRequest.project_id)
}

// string region = 3;
void DeleteClusterRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteClusterRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DeleteClusterRequest.region)
  return region_.GetNoArena();
}
void DeleteClusterRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DeleteClusterRequest.region)
}
#if LANG_CXX11
void DeleteClusterRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DeleteClusterRequest.region)
}
#endif
void DeleteClusterRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DeleteClusterRequest.region)
}
void DeleteClusterRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DeleteClusterRequest.region)
}
::std::string* DeleteClusterRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DeleteClusterRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteClusterRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DeleteClusterRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteClusterRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DeleteClusterRequest.region)
}

// string cluster_name = 2;
void DeleteClusterRequest::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteClusterRequest::cluster_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
  return cluster_name_.GetNoArena();
}
void DeleteClusterRequest::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
}
#if LANG_CXX11
void DeleteClusterRequest::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
}
#endif
void DeleteClusterRequest::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
}
void DeleteClusterRequest::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
}
::std::string* DeleteClusterRequest::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteClusterRequest::release_cluster_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteClusterRequest::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DeleteClusterRequest.cluster_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterRequest::kProjectIdFieldNumber;
const int GetClusterRequest::kRegionFieldNumber;
const int GetClusterRequest::kClusterNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterRequest::GetClusterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.GetClusterRequest)
}
GetClusterRequest::GetClusterRequest(const GetClusterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.GetClusterRequest)
}

void GetClusterRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetClusterRequest::~GetClusterRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.GetClusterRequest)
  SharedDtor();
}

void GetClusterRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetClusterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterRequest::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetClusterRequest& GetClusterRequest::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetClusterRequest* GetClusterRequest::New(::google::protobuf::Arena* arena) const {
  GetClusterRequest* n = new GetClusterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.GetClusterRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetClusterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.GetClusterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.GetClusterRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.GetClusterRequest.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.GetClusterRequest.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.GetClusterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.GetClusterRequest)
  return false;
#undef DO_
}

void GetClusterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.GetClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GetClusterRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GetClusterRequest.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_name(), output);
  }

  // string region = 3;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GetClusterRequest.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->region(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.GetClusterRequest)
}

::google::protobuf::uint8* GetClusterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.GetClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GetClusterRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GetClusterRequest.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_name(), target);
  }

  // string region = 3;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.GetClusterRequest.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->region(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.GetClusterRequest)
  return target;
}

size_t GetClusterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.GetClusterRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  // string region = 3;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.GetClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.GetClusterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.GetClusterRequest)
    MergeFrom(*source);
  }
}

void GetClusterRequest::MergeFrom(const GetClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.GetClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
}

void GetClusterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.GetClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterRequest::CopyFrom(const GetClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.GetClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterRequest::IsInitialized() const {
  return true;
}

void GetClusterRequest::Swap(GetClusterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterRequest::InternalSwap(GetClusterRequest* other) {
  project_id_.Swap(&other->project_id_);
  cluster_name_.Swap(&other->cluster_name_);
  region_.Swap(&other->region_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterRequest

// string project_id = 1;
void GetClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GetClusterRequest.project_id)
  return project_id_.GetNoArena();
}
void GetClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GetClusterRequest.project_id)
}
#if LANG_CXX11
void GetClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GetClusterRequest.project_id)
}
#endif
void GetClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GetClusterRequest.project_id)
}
void GetClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GetClusterRequest.project_id)
}
::std::string* GetClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GetClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GetClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GetClusterRequest.project_id)
}

// string region = 3;
void GetClusterRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetClusterRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GetClusterRequest.region)
  return region_.GetNoArena();
}
void GetClusterRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GetClusterRequest.region)
}
#if LANG_CXX11
void GetClusterRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GetClusterRequest.region)
}
#endif
void GetClusterRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GetClusterRequest.region)
}
void GetClusterRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GetClusterRequest.region)
}
::std::string* GetClusterRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GetClusterRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetClusterRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GetClusterRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetClusterRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GetClusterRequest.region)
}

// string cluster_name = 2;
void GetClusterRequest::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetClusterRequest::cluster_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
  return cluster_name_.GetNoArena();
}
void GetClusterRequest::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
}
#if LANG_CXX11
void GetClusterRequest::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
}
#endif
void GetClusterRequest::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
}
void GetClusterRequest::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
}
::std::string* GetClusterRequest::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetClusterRequest::release_cluster_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetClusterRequest::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.GetClusterRequest.cluster_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListClustersRequest::kProjectIdFieldNumber;
const int ListClustersRequest::kRegionFieldNumber;
const int ListClustersRequest::kPageSizeFieldNumber;
const int ListClustersRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListClustersRequest::ListClustersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.ListClustersRequest)
}
ListClustersRequest::ListClustersRequest(const ListClustersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.ListClustersRequest)
}

void ListClustersRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListClustersRequest::~ListClustersRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.ListClustersRequest)
  SharedDtor();
}

void ListClustersRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListClustersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListClustersRequest::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListClustersRequest& ListClustersRequest::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListClustersRequest* ListClustersRequest::New(::google::protobuf::Arena* arena) const {
  ListClustersRequest* n = new ListClustersRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListClustersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.ListClustersRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

bool ListClustersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.ListClustersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.ListClustersRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.ListClustersRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.ListClustersRequest.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.ListClustersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.ListClustersRequest)
  return false;
#undef DO_
}

void ListClustersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.ListClustersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ListClustersRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ListClustersRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // string region = 4;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ListClustersRequest.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->region(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.ListClustersRequest)
}

::google::protobuf::uint8* ListClustersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.ListClustersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ListClustersRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ListClustersRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // string region = 4;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ListClustersRequest.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->region(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.ListClustersRequest)
  return target;
}

size_t ListClustersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.ListClustersRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string region = 4;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListClustersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.ListClustersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListClustersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListClustersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.ListClustersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.ListClustersRequest)
    MergeFrom(*source);
  }
}

void ListClustersRequest::MergeFrom(const ListClustersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.ListClustersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListClustersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.ListClustersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListClustersRequest::CopyFrom(const ListClustersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.ListClustersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListClustersRequest::IsInitialized() const {
  return true;
}

void ListClustersRequest::Swap(ListClustersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListClustersRequest::InternalSwap(ListClustersRequest* other) {
  project_id_.Swap(&other->project_id_);
  page_token_.Swap(&other->page_token_);
  region_.Swap(&other->region_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListClustersRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListClustersRequest

// string project_id = 1;
void ListClustersRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListClustersRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListClustersRequest.project_id)
  return project_id_.GetNoArena();
}
void ListClustersRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListClustersRequest.project_id)
}
#if LANG_CXX11
void ListClustersRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListClustersRequest.project_id)
}
#endif
void ListClustersRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListClustersRequest.project_id)
}
void ListClustersRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListClustersRequest.project_id)
}
::std::string* ListClustersRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListClustersRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListClustersRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListClustersRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListClustersRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListClustersRequest.project_id)
}

// string region = 4;
void ListClustersRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListClustersRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListClustersRequest.region)
  return region_.GetNoArena();
}
void ListClustersRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListClustersRequest.region)
}
#if LANG_CXX11
void ListClustersRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListClustersRequest.region)
}
#endif
void ListClustersRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListClustersRequest.region)
}
void ListClustersRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListClustersRequest.region)
}
::std::string* ListClustersRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListClustersRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListClustersRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListClustersRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListClustersRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListClustersRequest.region)
}

// int32 page_size = 2;
void ListClustersRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListClustersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListClustersRequest.page_size)
  return page_size_;
}
void ListClustersRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListClustersRequest.page_size)
}

// string page_token = 3;
void ListClustersRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListClustersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListClustersRequest.page_token)
  return page_token_.GetNoArena();
}
void ListClustersRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListClustersRequest.page_token)
}
#if LANG_CXX11
void ListClustersRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListClustersRequest.page_token)
}
#endif
void ListClustersRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListClustersRequest.page_token)
}
void ListClustersRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListClustersRequest.page_token)
}
::std::string* ListClustersRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListClustersRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListClustersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListClustersRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListClustersRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListClustersRequest.page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListClustersResponse::kClustersFieldNumber;
const int ListClustersResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListClustersResponse::ListClustersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.ListClustersResponse)
}
ListClustersResponse::ListClustersResponse(const ListClustersResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      clusters_(from.clusters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.ListClustersResponse)
}

void ListClustersResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListClustersResponse::~ListClustersResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.ListClustersResponse)
  SharedDtor();
}

void ListClustersResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListClustersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListClustersResponse::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListClustersResponse& ListClustersResponse::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListClustersResponse* ListClustersResponse::New(::google::protobuf::Arena* arena) const {
  ListClustersResponse* n = new ListClustersResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListClustersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.ListClustersResponse)
  clusters_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListClustersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.ListClustersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.dataproc.v1.Cluster clusters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.ListClustersResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.ListClustersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.ListClustersResponse)
  return false;
#undef DO_
}

void ListClustersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.ListClustersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.dataproc.v1.Cluster clusters = 1;
  for (unsigned int i = 0, n = this->clusters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clusters(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ListClustersResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.ListClustersResponse)
}

::google::protobuf::uint8* ListClustersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.ListClustersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.dataproc.v1.Cluster clusters = 1;
  for (unsigned int i = 0, n = this->clusters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->clusters(i), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.ListClustersResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.ListClustersResponse)
  return target;
}

size_t ListClustersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.ListClustersResponse)
  size_t total_size = 0;

  // repeated .google.cloud.dataproc.v1.Cluster clusters = 1;
  {
    unsigned int count = this->clusters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clusters(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListClustersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.ListClustersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListClustersResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListClustersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.ListClustersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.ListClustersResponse)
    MergeFrom(*source);
  }
}

void ListClustersResponse::MergeFrom(const ListClustersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.ListClustersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clusters_.MergeFrom(from.clusters_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListClustersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.ListClustersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListClustersResponse::CopyFrom(const ListClustersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.ListClustersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListClustersResponse::IsInitialized() const {
  return true;
}

void ListClustersResponse::Swap(ListClustersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListClustersResponse::InternalSwap(ListClustersResponse* other) {
  clusters_.InternalSwap(&other->clusters_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListClustersResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListClustersResponse

// repeated .google.cloud.dataproc.v1.Cluster clusters = 1;
int ListClustersResponse::clusters_size() const {
  return clusters_.size();
}
void ListClustersResponse::clear_clusters() {
  clusters_.Clear();
}
const ::google::cloud::dataproc::v1::Cluster& ListClustersResponse::clusters(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListClustersResponse.clusters)
  return clusters_.Get(index);
}
::google::cloud::dataproc::v1::Cluster* ListClustersResponse::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListClustersResponse.clusters)
  return clusters_.Mutable(index);
}
::google::cloud::dataproc::v1::Cluster* ListClustersResponse::add_clusters() {
  // @@protoc_insertion_point(field_add:google.cloud.dataproc.v1.ListClustersResponse.clusters)
  return clusters_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::Cluster >*
ListClustersResponse::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.dataproc.v1.ListClustersResponse.clusters)
  return &clusters_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::dataproc::v1::Cluster >&
ListClustersResponse::clusters() const {
  // @@protoc_insertion_point(field_list:google.cloud.dataproc.v1.ListClustersResponse.clusters)
  return clusters_;
}

// string next_page_token = 2;
void ListClustersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListClustersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
void ListClustersResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
}
#if LANG_CXX11
void ListClustersResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
}
#endif
void ListClustersResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
}
void ListClustersResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
}
::std::string* ListClustersResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListClustersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListClustersResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.ListClustersResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnoseClusterRequest::kProjectIdFieldNumber;
const int DiagnoseClusterRequest::kRegionFieldNumber;
const int DiagnoseClusterRequest::kClusterNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnoseClusterRequest::DiagnoseClusterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.DiagnoseClusterRequest)
}
DiagnoseClusterRequest::DiagnoseClusterRequest(const DiagnoseClusterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.DiagnoseClusterRequest)
}

void DiagnoseClusterRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DiagnoseClusterRequest::~DiagnoseClusterRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  SharedDtor();
}

void DiagnoseClusterRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DiagnoseClusterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiagnoseClusterRequest::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DiagnoseClusterRequest& DiagnoseClusterRequest::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

DiagnoseClusterRequest* DiagnoseClusterRequest::New(::google::protobuf::Arena* arena) const {
  DiagnoseClusterRequest* n = new DiagnoseClusterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiagnoseClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DiagnoseClusterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.DiagnoseClusterRequest.region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  return false;
#undef DO_
}

void DiagnoseClusterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_name(), output);
  }

  // string region = 3;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DiagnoseClusterRequest.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->region(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.DiagnoseClusterRequest)
}

::google::protobuf::uint8* DiagnoseClusterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_name(), target);
  }

  // string region = 3;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DiagnoseClusterRequest.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->region(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  return target;
}

size_t DiagnoseClusterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string cluster_name = 2;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  // string region = 3;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiagnoseClusterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnoseClusterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DiagnoseClusterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.DiagnoseClusterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.DiagnoseClusterRequest)
    MergeFrom(*source);
  }
}

void DiagnoseClusterRequest::MergeFrom(const DiagnoseClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
}

void DiagnoseClusterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnoseClusterRequest::CopyFrom(const DiagnoseClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.DiagnoseClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnoseClusterRequest::IsInitialized() const {
  return true;
}

void DiagnoseClusterRequest::Swap(DiagnoseClusterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnoseClusterRequest::InternalSwap(DiagnoseClusterRequest* other) {
  project_id_.Swap(&other->project_id_);
  cluster_name_.Swap(&other->cluster_name_);
  region_.Swap(&other->region_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiagnoseClusterRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiagnoseClusterRequest

// string project_id = 1;
void DiagnoseClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DiagnoseClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
  return project_id_.GetNoArena();
}
void DiagnoseClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
}
#if LANG_CXX11
void DiagnoseClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
}
#endif
void DiagnoseClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
}
void DiagnoseClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
}
::std::string* DiagnoseClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DiagnoseClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DiagnoseClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DiagnoseClusterRequest.project_id)
}

// string region = 3;
void DiagnoseClusterRequest::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DiagnoseClusterRequest::region() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
  return region_.GetNoArena();
}
void DiagnoseClusterRequest::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
}
#if LANG_CXX11
void DiagnoseClusterRequest::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
}
#endif
void DiagnoseClusterRequest::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
}
void DiagnoseClusterRequest::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
}
::std::string* DiagnoseClusterRequest::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DiagnoseClusterRequest::release_region() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DiagnoseClusterRequest::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DiagnoseClusterRequest.region)
}

// string cluster_name = 2;
void DiagnoseClusterRequest::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DiagnoseClusterRequest::cluster_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
  return cluster_name_.GetNoArena();
}
void DiagnoseClusterRequest::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
}
#if LANG_CXX11
void DiagnoseClusterRequest::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
}
#endif
void DiagnoseClusterRequest::set_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
}
void DiagnoseClusterRequest::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
}
::std::string* DiagnoseClusterRequest::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DiagnoseClusterRequest::release_cluster_name() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DiagnoseClusterRequest::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DiagnoseClusterRequest.cluster_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnoseClusterResults::kOutputUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnoseClusterResults::DiagnoseClusterResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.dataproc.v1.DiagnoseClusterResults)
}
DiagnoseClusterResults::DiagnoseClusterResults(const DiagnoseClusterResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output_uri().size() > 0) {
    output_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_uri_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.dataproc.v1.DiagnoseClusterResults)
}

void DiagnoseClusterResults::SharedCtor() {
  output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DiagnoseClusterResults::~DiagnoseClusterResults() {
  // @@protoc_insertion_point(destructor:google.cloud.dataproc.v1.DiagnoseClusterResults)
  SharedDtor();
}

void DiagnoseClusterResults::SharedDtor() {
  output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DiagnoseClusterResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiagnoseClusterResults::descriptor() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DiagnoseClusterResults& DiagnoseClusterResults::default_instance() {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::InitDefaults();
  return *internal_default_instance();
}

DiagnoseClusterResults* DiagnoseClusterResults::New(::google::protobuf::Arena* arena) const {
  DiagnoseClusterResults* n = new DiagnoseClusterResults;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiagnoseClusterResults::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.dataproc.v1.DiagnoseClusterResults)
  output_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DiagnoseClusterResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.dataproc.v1.DiagnoseClusterResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string output_uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_uri().data(), this->output_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.dataproc.v1.DiagnoseClusterResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.dataproc.v1.DiagnoseClusterResults)
  return false;
#undef DO_
}

void DiagnoseClusterResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.dataproc.v1.DiagnoseClusterResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_uri = 1;
  if (this->output_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), this->output_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->output_uri(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.dataproc.v1.DiagnoseClusterResults)
}

::google::protobuf::uint8* DiagnoseClusterResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.dataproc.v1.DiagnoseClusterResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_uri = 1;
  if (this->output_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), this->output_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->output_uri(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.dataproc.v1.DiagnoseClusterResults)
  return target;
}

size_t DiagnoseClusterResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.dataproc.v1.DiagnoseClusterResults)
  size_t total_size = 0;

  // string output_uri = 1;
  if (this->output_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_uri());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiagnoseClusterResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.dataproc.v1.DiagnoseClusterResults)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnoseClusterResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DiagnoseClusterResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.dataproc.v1.DiagnoseClusterResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.dataproc.v1.DiagnoseClusterResults)
    MergeFrom(*source);
  }
}

void DiagnoseClusterResults::MergeFrom(const DiagnoseClusterResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.dataproc.v1.DiagnoseClusterResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.output_uri().size() > 0) {

    output_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_uri_);
  }
}

void DiagnoseClusterResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.dataproc.v1.DiagnoseClusterResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnoseClusterResults::CopyFrom(const DiagnoseClusterResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.dataproc.v1.DiagnoseClusterResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnoseClusterResults::IsInitialized() const {
  return true;
}

void DiagnoseClusterResults::Swap(DiagnoseClusterResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnoseClusterResults::InternalSwap(DiagnoseClusterResults* other) {
  output_uri_.Swap(&other->output_uri_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiagnoseClusterResults::GetMetadata() const {
  protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fdataproc_2fv1_2fclusters_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiagnoseClusterResults

// string output_uri = 1;
void DiagnoseClusterResults::clear_output_uri() {
  output_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DiagnoseClusterResults::output_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
  return output_uri_.GetNoArena();
}
void DiagnoseClusterResults::set_output_uri(const ::std::string& value) {
  
  output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
}
#if LANG_CXX11
void DiagnoseClusterResults::set_output_uri(::std::string&& value) {
  
  output_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
}
#endif
void DiagnoseClusterResults::set_output_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
}
void DiagnoseClusterResults::set_output_uri(const char* value, size_t size) {
  
  output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
}
::std::string* DiagnoseClusterResults::mutable_output_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
  return output_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DiagnoseClusterResults::release_output_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
  
  return output_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DiagnoseClusterResults::set_allocated_output_uri(::std::string* output_uri) {
  if (output_uri != NULL) {
    
  } else {
    
  }
  output_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.dataproc.v1.DiagnoseClusterResults.output_uri)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace dataproc
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)
