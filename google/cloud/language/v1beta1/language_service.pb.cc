// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/language/v1beta1/language_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/cloud/language/v1beta1/language_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace cloud {
namespace language {
namespace v1beta1 {
class DocumentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Document> {
  public:
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr gcs_content_uri_;
} _Document_default_instance_;
class SentenceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Sentence> {
} _Sentence_default_instance_;
class Entity_MetadataEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Entity::Entity_MetadataEntry> {
} _Entity_MetadataEntry_default_instance_;
class EntityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Entity> {
} _Entity_default_instance_;
class TokenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Token> {
} _Token_default_instance_;
class SentimentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Sentiment> {
} _Sentiment_default_instance_;
class PartOfSpeechDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PartOfSpeech> {
} _PartOfSpeech_default_instance_;
class DependencyEdgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DependencyEdge> {
} _DependencyEdge_default_instance_;
class EntityMentionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EntityMention> {
} _EntityMention_default_instance_;
class TextSpanDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TextSpan> {
} _TextSpan_default_instance_;
class AnalyzeSentimentRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeSentimentRequest> {
} _AnalyzeSentimentRequest_default_instance_;
class AnalyzeSentimentResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeSentimentResponse> {
} _AnalyzeSentimentResponse_default_instance_;
class AnalyzeEntitiesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeEntitiesRequest> {
} _AnalyzeEntitiesRequest_default_instance_;
class AnalyzeEntitiesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeEntitiesResponse> {
} _AnalyzeEntitiesResponse_default_instance_;
class AnalyzeSyntaxRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeSyntaxRequest> {
} _AnalyzeSyntaxRequest_default_instance_;
class AnalyzeSyntaxResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeSyntaxResponse> {
} _AnalyzeSyntaxResponse_default_instance_;
class AnnotateTextRequest_FeaturesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnnotateTextRequest_Features> {
} _AnnotateTextRequest_Features_default_instance_;
class AnnotateTextRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnnotateTextRequest> {
} _AnnotateTextRequest_default_instance_;
class AnnotateTextResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnnotateTextResponse> {
} _AnnotateTextResponse_default_instance_;

namespace protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[17];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, type_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Document_default_instance_), content_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Document_default_instance_), gcs_content_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, source_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, sentiment_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, salience_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, mentions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, part_of_speech_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, dependency_edge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, lemma_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentiment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentiment, polarity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentiment, magnitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentiment, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, aspect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, case__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, form_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, mood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, person_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, proper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, reciprocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, tense_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartOfSpeech, voice_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DependencyEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DependencyEdge, head_token_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DependencyEdge, label_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityMention, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityMention, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityMention, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextSpan, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextSpan, begin_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentRequest, document_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentRequest, encoding_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentResponse, document_sentiment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentResponse, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSentimentResponse, sentences_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeEntitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeEntitiesRequest, document_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeEntitiesRequest, encoding_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeEntitiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeEntitiesResponse, entities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeEntitiesResponse, language_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxRequest, document_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxRequest, encoding_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxResponse, sentences_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxResponse, tokens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalyzeSyntaxResponse, language_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest_Features, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest_Features, extract_syntax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest_Features, extract_entities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest_Features, extract_document_sentiment_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest, document_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextRequest, encoding_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextResponse, sentences_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextResponse, tokens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextResponse, entities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextResponse, document_sentiment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateTextResponse, language_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Document)},
  { 10, -1, sizeof(Sentence)},
  { 17, -1, sizeof(Entity)},
  { 27, -1, sizeof(Token)},
  { 36, -1, sizeof(Sentiment)},
  { 44, -1, sizeof(PartOfSpeech)},
  { 61, -1, sizeof(DependencyEdge)},
  { 68, -1, sizeof(EntityMention)},
  { 75, -1, sizeof(TextSpan)},
  { 82, -1, sizeof(AnalyzeSentimentRequest)},
  { 89, -1, sizeof(AnalyzeSentimentResponse)},
  { 97, -1, sizeof(AnalyzeEntitiesRequest)},
  { 104, -1, sizeof(AnalyzeEntitiesResponse)},
  { 111, -1, sizeof(AnalyzeSyntaxRequest)},
  { 118, -1, sizeof(AnalyzeSyntaxResponse)},
  { 126, -1, sizeof(AnnotateTextRequest_Features)},
  { 134, -1, sizeof(AnnotateTextRequest)},
  { 142, -1, sizeof(AnnotateTextResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Document_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sentence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Entity_MetadataEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Entity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Token_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sentiment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PartOfSpeech_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DependencyEdge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EntityMention_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TextSpan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnalyzeSentimentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnalyzeSentimentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnalyzeEntitiesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnalyzeEntitiesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnalyzeSyntaxRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnalyzeSyntaxResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnnotateTextRequest_Features_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnnotateTextRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnnotateTextResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/cloud/language/v1beta1/language_service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[2].reflection = Entity::Entity_MetadataEntry::CreateReflection(file_level_metadata[2].descriptor, _Entity_MetadataEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

}  // namespace

void TableStruct::Shutdown() {
  _Document_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Sentence_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Entity_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Token_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Sentiment_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _PartOfSpeech_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _DependencyEdge_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _EntityMention_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _TextSpan_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _AnalyzeSentimentRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _AnalyzeSentimentResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _AnalyzeEntitiesRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _AnalyzeEntitiesResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _AnalyzeSyntaxRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _AnalyzeSyntaxResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _AnnotateTextRequest_Features_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _AnnotateTextRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _AnnotateTextResponse_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  _Document_default_instance_.DefaultConstruct();
  _Sentence_default_instance_.DefaultConstruct();
  _Entity_MetadataEntry_default_instance_.DefaultConstruct();
  _Entity_default_instance_.DefaultConstruct();
  _Token_default_instance_.DefaultConstruct();
  _Sentiment_default_instance_.DefaultConstruct();
  _PartOfSpeech_default_instance_.DefaultConstruct();
  _DependencyEdge_default_instance_.DefaultConstruct();
  _EntityMention_default_instance_.DefaultConstruct();
  _TextSpan_default_instance_.DefaultConstruct();
  _AnalyzeSentimentRequest_default_instance_.DefaultConstruct();
  _AnalyzeSentimentResponse_default_instance_.DefaultConstruct();
  _AnalyzeEntitiesRequest_default_instance_.DefaultConstruct();
  _AnalyzeEntitiesResponse_default_instance_.DefaultConstruct();
  _AnalyzeSyntaxRequest_default_instance_.DefaultConstruct();
  _AnalyzeSyntaxResponse_default_instance_.DefaultConstruct();
  _AnnotateTextRequest_Features_default_instance_.DefaultConstruct();
  _AnnotateTextRequest_default_instance_.DefaultConstruct();
  _AnnotateTextResponse_default_instance_.DefaultConstruct();
  _Document_default_instance_.content_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Document_default_instance_.gcs_content_uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Sentence_default_instance_.get_mutable()->text_ = const_cast< ::google::cloud::language::v1beta1::TextSpan*>(
      ::google::cloud::language::v1beta1::TextSpan::internal_default_instance());
  _Sentence_default_instance_.get_mutable()->sentiment_ = const_cast< ::google::cloud::language::v1beta1::Sentiment*>(
      ::google::cloud::language::v1beta1::Sentiment::internal_default_instance());
  _Entity_MetadataEntry_default_instance_.get_mutable()->set_default_instance(_Entity_MetadataEntry_default_instance_.get_mutable());
  _Entity_MetadataEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Token_default_instance_.get_mutable()->text_ = const_cast< ::google::cloud::language::v1beta1::TextSpan*>(
      ::google::cloud::language::v1beta1::TextSpan::internal_default_instance());
  _Token_default_instance_.get_mutable()->part_of_speech_ = const_cast< ::google::cloud::language::v1beta1::PartOfSpeech*>(
      ::google::cloud::language::v1beta1::PartOfSpeech::internal_default_instance());
  _Token_default_instance_.get_mutable()->dependency_edge_ = const_cast< ::google::cloud::language::v1beta1::DependencyEdge*>(
      ::google::cloud::language::v1beta1::DependencyEdge::internal_default_instance());
  _EntityMention_default_instance_.get_mutable()->text_ = const_cast< ::google::cloud::language::v1beta1::TextSpan*>(
      ::google::cloud::language::v1beta1::TextSpan::internal_default_instance());
  _AnalyzeSentimentRequest_default_instance_.get_mutable()->document_ = const_cast< ::google::cloud::language::v1beta1::Document*>(
      ::google::cloud::language::v1beta1::Document::internal_default_instance());
  _AnalyzeSentimentResponse_default_instance_.get_mutable()->document_sentiment_ = const_cast< ::google::cloud::language::v1beta1::Sentiment*>(
      ::google::cloud::language::v1beta1::Sentiment::internal_default_instance());
  _AnalyzeEntitiesRequest_default_instance_.get_mutable()->document_ = const_cast< ::google::cloud::language::v1beta1::Document*>(
      ::google::cloud::language::v1beta1::Document::internal_default_instance());
  _AnalyzeSyntaxRequest_default_instance_.get_mutable()->document_ = const_cast< ::google::cloud::language::v1beta1::Document*>(
      ::google::cloud::language::v1beta1::Document::internal_default_instance());
  _AnnotateTextRequest_default_instance_.get_mutable()->document_ = const_cast< ::google::cloud::language::v1beta1::Document*>(
      ::google::cloud::language::v1beta1::Document::internal_default_instance());
  _AnnotateTextRequest_default_instance_.get_mutable()->features_ = const_cast< ::google::cloud::language::v1beta1::AnnotateTextRequest_Features*>(
      ::google::cloud::language::v1beta1::AnnotateTextRequest_Features::internal_default_instance());
  _AnnotateTextResponse_default_instance_.get_mutable()->document_sentiment_ = const_cast< ::google::cloud::language::v1beta1::Sentiment*>(
      ::google::cloud::language::v1beta1::Sentiment::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n4google/cloud/language/v1beta1/language"
      "_service.proto\022\035google.cloud.language.v1"
      "beta1\032\034google/api/annotations.proto\"\310\001\n\010"
      "Document\022:\n\004type\030\001 \001(\0162,.google.cloud.la"
      "nguage.v1beta1.Document.Type\022\021\n\007content\030"
      "\002 \001(\tH\000\022\031\n\017gcs_content_uri\030\003 \001(\tH\000\022\020\n\010la"
      "nguage\030\004 \001(\t\"6\n\004Type\022\024\n\020TYPE_UNSPECIFIED"
      "\020\000\022\016\n\nPLAIN_TEXT\020\001\022\010\n\004HTML\020\002B\010\n\006source\"~"
      "\n\010Sentence\0225\n\004text\030\001 \001(\0132\'.google.cloud."
      "language.v1beta1.TextSpan\022;\n\tsentiment\030\002"
      " \001(\0132(.google.cloud.language.v1beta1.Sen"
      "timent\"\225\003\n\006Entity\022\014\n\004name\030\001 \001(\t\0228\n\004type\030"
      "\002 \001(\0162*.google.cloud.language.v1beta1.En"
      "tity.Type\022E\n\010metadata\030\003 \003(\01323.google.clo"
      "ud.language.v1beta1.Entity.MetadataEntry"
      "\022\020\n\010salience\030\004 \001(\002\022>\n\010mentions\030\005 \003(\0132,.g"
      "oogle.cloud.language.v1beta1.EntityMenti"
      "on\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
      "e\030\002 \001(\t:\0028\001\"y\n\004Type\022\013\n\007UNKNOWN\020\000\022\n\n\006PERS"
      "ON\020\001\022\014\n\010LOCATION\020\002\022\020\n\014ORGANIZATION\020\003\022\t\n\005"
      "EVENT\020\004\022\017\n\013WORK_OF_ART\020\005\022\021\n\rCONSUMER_GOO"
      "D\020\006\022\t\n\005OTHER\020\007\"\332\001\n\005Token\0225\n\004text\030\001 \001(\0132\'"
      ".google.cloud.language.v1beta1.TextSpan\022"
      "C\n\016part_of_speech\030\002 \001(\0132+.google.cloud.l"
      "anguage.v1beta1.PartOfSpeech\022F\n\017dependen"
      "cy_edge\030\003 \001(\0132-.google.cloud.language.v1"
      "beta1.DependencyEdge\022\r\n\005lemma\030\004 \001(\t\"\?\n\tS"
      "entiment\022\020\n\010polarity\030\001 \001(\002\022\021\n\tmagnitude\030"
      "\002 \001(\002\022\r\n\005score\030\003 \001(\002\"\337\020\n\014PartOfSpeech\022<\n"
      "\003tag\030\001 \001(\0162/.google.cloud.language.v1bet"
      "a1.PartOfSpeech.Tag\022B\n\006aspect\030\002 \001(\01622.go"
      "ogle.cloud.language.v1beta1.PartOfSpeech"
      ".Aspect\022>\n\004case\030\003 \001(\01620.google.cloud.lan"
      "guage.v1beta1.PartOfSpeech.Case\022>\n\004form\030"
      "\004 \001(\01620.google.cloud.language.v1beta1.Pa"
      "rtOfSpeech.Form\022B\n\006gender\030\005 \001(\01622.google"
      ".cloud.language.v1beta1.PartOfSpeech.Gen"
      "der\022>\n\004mood\030\006 \001(\01620.google.cloud.languag"
      "e.v1beta1.PartOfSpeech.Mood\022B\n\006number\030\007 "
      "\001(\01622.google.cloud.language.v1beta1.Part"
      "OfSpeech.Number\022B\n\006person\030\010 \001(\01622.google"
      ".cloud.language.v1beta1.PartOfSpeech.Per"
      "son\022B\n\006proper\030\t \001(\01622.google.cloud.langu"
      "age.v1beta1.PartOfSpeech.Proper\022L\n\013recip"
      "rocity\030\n \001(\01627.google.cloud.language.v1b"
      "eta1.PartOfSpeech.Reciprocity\022@\n\005tense\030\013"
      " \001(\01621.google.cloud.language.v1beta1.Par"
      "tOfSpeech.Tense\022@\n\005voice\030\014 \001(\01621.google."
      "cloud.language.v1beta1.PartOfSpeech.Voic"
      "e\"\215\001\n\003Tag\022\013\n\007UNKNOWN\020\000\022\007\n\003ADJ\020\001\022\007\n\003ADP\020\002"
      "\022\007\n\003ADV\020\003\022\010\n\004CONJ\020\004\022\007\n\003DET\020\005\022\010\n\004NOUN\020\006\022\007"
      "\n\003NUM\020\007\022\010\n\004PRON\020\010\022\007\n\003PRT\020\t\022\t\n\005PUNCT\020\n\022\010\n"
      "\004VERB\020\013\022\005\n\001X\020\014\022\t\n\005AFFIX\020\r\"O\n\006Aspect\022\022\n\016A"
      "SPECT_UNKNOWN\020\000\022\016\n\nPERFECTIVE\020\001\022\020\n\014IMPER"
      "FECTIVE\020\002\022\017\n\013PROGRESSIVE\020\003\"\370\001\n\004Case\022\020\n\014C"
      "ASE_UNKNOWN\020\000\022\016\n\nACCUSATIVE\020\001\022\r\n\tADVERBI"
      "AL\020\002\022\021\n\rCOMPLEMENTIVE\020\003\022\n\n\006DATIVE\020\004\022\014\n\010G"
      "ENITIVE\020\005\022\020\n\014INSTRUMENTAL\020\006\022\014\n\010LOCATIVE\020"
      "\007\022\016\n\nNOMINATIVE\020\010\022\013\n\007OBLIQUE\020\t\022\r\n\tPARTIT"
      "IVE\020\n\022\021\n\rPREPOSITIONAL\020\013\022\022\n\016REFLEXIVE_CA"
      "SE\020\014\022\021\n\rRELATIVE_CASE\020\r\022\014\n\010VOCATIVE\020\016\"\257\001"
      "\n\004Form\022\020\n\014FORM_UNKNOWN\020\000\022\014\n\010ADNOMIAL\020\001\022\r"
      "\n\tAUXILIARY\020\002\022\022\n\016COMPLEMENTIZER\020\003\022\020\n\014FIN"
      "AL_ENDING\020\004\022\n\n\006GERUND\020\005\022\n\n\006REALIS\020\006\022\014\n\010I"
      "RREALIS\020\007\022\t\n\005SHORT\020\010\022\010\n\004LONG\020\t\022\t\n\005ORDER\020"
      "\n\022\014\n\010SPECIFIC\020\013\"E\n\006Gender\022\022\n\016GENDER_UNKN"
      "OWN\020\000\022\014\n\010FEMININE\020\001\022\r\n\tMASCULINE\020\002\022\n\n\006NE"
      "UTER\020\003\"\177\n\004Mood\022\020\n\014MOOD_UNKNOWN\020\000\022\024\n\020COND"
      "ITIONAL_MOOD\020\001\022\016\n\nIMPERATIVE\020\002\022\016\n\nINDICA"
      "TIVE\020\003\022\021\n\rINTERROGATIVE\020\004\022\013\n\007JUSSIVE\020\005\022\017"
      "\n\013SUBJUNCTIVE\020\006\"@\n\006Number\022\022\n\016NUMBER_UNKN"
      "OWN\020\000\022\014\n\010SINGULAR\020\001\022\n\n\006PLURAL\020\002\022\010\n\004DUAL\020"
      "\003\"T\n\006Person\022\022\n\016PERSON_UNKNOWN\020\000\022\t\n\005FIRST"
      "\020\001\022\n\n\006SECOND\020\002\022\t\n\005THIRD\020\003\022\024\n\020REFLEXIVE_P"
      "ERSON\020\004\"8\n\006Proper\022\022\n\016PROPER_UNKNOWN\020\000\022\n\n"
      "\006PROPER\020\001\022\016\n\nNOT_PROPER\020\002\"J\n\013Reciprocity"
      "\022\027\n\023RECIPROCITY_UNKNOWN\020\000\022\016\n\nRECIPROCAL\020"
      "\001\022\022\n\016NON_RECIPROCAL\020\002\"s\n\005Tense\022\021\n\rTENSE_"
      "UNKNOWN\020\000\022\025\n\021CONDITIONAL_TENSE\020\001\022\n\n\006FUTU"
      "RE\020\002\022\010\n\004PAST\020\003\022\013\n\007PRESENT\020\004\022\r\n\tIMPERFECT"
      "\020\005\022\016\n\nPLUPERFECT\020\006\"B\n\005Voice\022\021\n\rVOICE_UNK"
      "NOWN\020\000\022\n\n\006ACTIVE\020\001\022\r\n\tCAUSATIVE\020\002\022\013\n\007PAS"
      "SIVE\020\003\"\335\007\n\016DependencyEdge\022\030\n\020head_token_"
      "index\030\001 \001(\005\022B\n\005label\030\002 \001(\01623.google.clou"
      "d.language.v1beta1.DependencyEdge.Label\""
      "\354\006\n\005Label\022\013\n\007UNKNOWN\020\000\022\n\n\006ABBREV\020\001\022\t\n\005AC"
      "OMP\020\002\022\t\n\005ADVCL\020\003\022\n\n\006ADVMOD\020\004\022\010\n\004AMOD\020\005\022\t"
      "\n\005APPOS\020\006\022\010\n\004ATTR\020\007\022\007\n\003AUX\020\010\022\013\n\007AUXPASS\020"
      "\t\022\006\n\002CC\020\n\022\t\n\005CCOMP\020\013\022\010\n\004CONJ\020\014\022\t\n\005CSUBJ\020"
      "\r\022\r\n\tCSUBJPASS\020\016\022\007\n\003DEP\020\017\022\007\n\003DET\020\020\022\r\n\tDI"
      "SCOURSE\020\021\022\010\n\004DOBJ\020\022\022\010\n\004EXPL\020\023\022\014\n\010GOESWIT"
      "H\020\024\022\010\n\004IOBJ\020\025\022\010\n\004MARK\020\026\022\007\n\003MWE\020\027\022\007\n\003MWV\020"
      "\030\022\007\n\003NEG\020\031\022\006\n\002NN\020\032\022\014\n\010NPADVMOD\020\033\022\t\n\005NSUB"
      "J\020\034\022\r\n\tNSUBJPASS\020\035\022\007\n\003NUM\020\036\022\n\n\006NUMBER\020\037\022"
      "\005\n\001P\020 \022\r\n\tPARATAXIS\020!\022\013\n\007PARTMOD\020\"\022\t\n\005PC"
      "OMP\020#\022\010\n\004POBJ\020$\022\010\n\004POSS\020%\022\013\n\007POSTNEG\020&\022\013"
      "\n\007PRECOMP\020\'\022\013\n\007PRECONJ\020(\022\n\n\006PREDET\020)\022\010\n\004"
      "PREF\020*\022\010\n\004PREP\020+\022\t\n\005PRONL\020,\022\007\n\003PRT\020-\022\006\n\002"
      "PS\020.\022\014\n\010QUANTMOD\020/\022\t\n\005RCMOD\0200\022\014\n\010RCMODRE"
      "L\0201\022\t\n\005RDROP\0202\022\007\n\003REF\0203\022\013\n\007REMNANT\0204\022\016\n\n"
      "REPARANDUM\0205\022\010\n\004ROOT\0206\022\010\n\004SNUM\0207\022\010\n\004SUFF"
      "\0208\022\010\n\004TMOD\0209\022\t\n\005TOPIC\020:\022\010\n\004VMOD\020;\022\014\n\010VOC"
      "ATIVE\020<\022\t\n\005XCOMP\020=\022\n\n\006SUFFIX\020>\022\t\n\005TITLE\020"
      "\?\022\014\n\010ADVPHMOD\020@\022\013\n\007AUXCAUS\020A\022\t\n\005AUXVV\020B\022"
      "\t\n\005DTMOD\020C\022\013\n\007FOREIGN\020D\022\006\n\002KW\020E\022\010\n\004LIST\020"
      "F\022\010\n\004NOMC\020G\022\014\n\010NOMCSUBJ\020H\022\020\n\014NOMCSUBJPAS"
      "S\020I\022\010\n\004NUMC\020J\022\007\n\003COP\020K\022\016\n\nDISLOCATED\020L\"\271"
      "\001\n\rEntityMention\0225\n\004text\030\001 \001(\0132\'.google."
      "cloud.language.v1beta1.TextSpan\022\?\n\004type\030"
      "\002 \001(\01621.google.cloud.language.v1beta1.En"
      "tityMention.Type\"0\n\004Type\022\020\n\014TYPE_UNKNOWN"
      "\020\000\022\n\n\006PROPER\020\001\022\n\n\006COMMON\020\002\"1\n\010TextSpan\022\017"
      "\n\007content\030\001 \001(\t\022\024\n\014begin_offset\030\002 \001(\005\"\230\001"
      "\n\027AnalyzeSentimentRequest\0229\n\010document\030\001 "
      "\001(\0132\'.google.cloud.language.v1beta1.Docu"
      "ment\022B\n\rencoding_type\030\002 \001(\0162+.google.clo"
      "ud.language.v1beta1.EncodingType\"\256\001\n\030Ana"
      "lyzeSentimentResponse\022D\n\022document_sentim"
      "ent\030\001 \001(\0132(.google.cloud.language.v1beta"
      "1.Sentiment\022\020\n\010language\030\002 \001(\t\022:\n\tsentenc"
      "es\030\003 \003(\0132\'.google.cloud.language.v1beta1"
      ".Sentence\"\227\001\n\026AnalyzeEntitiesRequest\0229\n\010"
      "document\030\001 \001(\0132\'.google.cloud.language.v"
      "1beta1.Document\022B\n\rencoding_type\030\002 \001(\0162+"
      ".google.cloud.language.v1beta1.EncodingT"
      "ype\"d\n\027AnalyzeEntitiesResponse\0227\n\010entiti"
      "es\030\001 \003(\0132%.google.cloud.language.v1beta1"
      ".Entity\022\020\n\010language\030\002 \001(\t\"\225\001\n\024AnalyzeSyn"
      "taxRequest\0229\n\010document\030\001 \001(\0132\'.google.cl"
      "oud.language.v1beta1.Document\022B\n\rencodin"
      "g_type\030\002 \001(\0162+.google.cloud.language.v1b"
      "eta1.EncodingType\"\233\001\n\025AnalyzeSyntaxRespo"
      "nse\022:\n\tsentences\030\001 \003(\0132\'.google.cloud.la"
      "nguage.v1beta1.Sentence\0224\n\006tokens\030\002 \003(\0132"
      "$.google.cloud.language.v1beta1.Token\022\020\n"
      "\010language\030\003 \001(\t\"\305\002\n\023AnnotateTextRequest\022"
      "9\n\010document\030\001 \001(\0132\'.google.cloud.languag"
      "e.v1beta1.Document\022M\n\010features\030\002 \001(\0132;.g"
      "oogle.cloud.language.v1beta1.AnnotateTex"
      "tRequest.Features\022B\n\rencoding_type\030\003 \001(\016"
      "2+.google.cloud.language.v1beta1.Encodin"
      "gType\032`\n\010Features\022\026\n\016extract_syntax\030\001 \001("
      "\010\022\030\n\020extract_entities\030\002 \001(\010\022\"\n\032extract_d"
      "ocument_sentiment\030\003 \001(\010\"\231\002\n\024AnnotateText"
      "Response\022:\n\tsentences\030\001 \003(\0132\'.google.clo"
      "ud.language.v1beta1.Sentence\0224\n\006tokens\030\002"
      " \003(\0132$.google.cloud.language.v1beta1.Tok"
      "en\0227\n\010entities\030\003 \003(\0132%.google.cloud.lang"
      "uage.v1beta1.Entity\022D\n\022document_sentimen"
      "t\030\004 \001(\0132(.google.cloud.language.v1beta1."
      "Sentiment\022\020\n\010language\030\005 \001(\t*8\n\014EncodingT"
      "ype\022\010\n\004NONE\020\000\022\010\n\004UTF8\020\001\022\t\n\005UTF16\020\002\022\t\n\005UT"
      "F32\020\0032\311\005\n\017LanguageService\022\263\001\n\020AnalyzeSen"
      "timent\0226.google.cloud.language.v1beta1.A"
      "nalyzeSentimentRequest\0327.google.cloud.la"
      "nguage.v1beta1.AnalyzeSentimentResponse\""
      ".\202\323\344\223\002(\"#/v1beta1/documents:analyzeSenti"
      "ment:\001*\022\257\001\n\017AnalyzeEntities\0225.google.clo"
      "ud.language.v1beta1.AnalyzeEntitiesReque"
      "st\0326.google.cloud.language.v1beta1.Analy"
      "zeEntitiesResponse\"-\202\323\344\223\002\'\"\"/v1beta1/doc"
      "uments:analyzeEntities:\001*\022\247\001\n\rAnalyzeSyn"
      "tax\0223.google.cloud.language.v1beta1.Anal"
      "yzeSyntaxRequest\0324.google.cloud.language"
      ".v1beta1.AnalyzeSyntaxResponse\"+\202\323\344\223\002%\" "
      "/v1beta1/documents:analyzeSyntax:\001*\022\243\001\n\014"
      "AnnotateText\0222.google.cloud.language.v1b"
      "eta1.AnnotateTextRequest\0323.google.cloud."
      "language.v1beta1.AnnotateTextResponse\"*\202"
      "\323\344\223\002$\"\037/v1beta1/documents:annotateText:\001"
      "*B\202\001\n!com.google.cloud.language.v1beta1B"
      "\024LanguageServiceProtoP\001ZEgoogle.golang.o"
      "rg/genproto/googleapis/cloud/language/v1"
      "beta1;languageb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6942);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/language/v1beta1/language_service.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto

const ::google::protobuf::EnumDescriptor* Document_Type_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[0];
}
bool Document_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Document_Type Document::TYPE_UNSPECIFIED;
const Document_Type Document::PLAIN_TEXT;
const Document_Type Document::HTML;
const Document_Type Document::Type_MIN;
const Document_Type Document::Type_MAX;
const int Document::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Entity_Type_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[1];
}
bool Entity_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Entity_Type Entity::UNKNOWN;
const Entity_Type Entity::PERSON;
const Entity_Type Entity::LOCATION;
const Entity_Type Entity::ORGANIZATION;
const Entity_Type Entity::EVENT;
const Entity_Type Entity::WORK_OF_ART;
const Entity_Type Entity::CONSUMER_GOOD;
const Entity_Type Entity::OTHER;
const Entity_Type Entity::Type_MIN;
const Entity_Type Entity::Type_MAX;
const int Entity::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Tag_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[2];
}
bool PartOfSpeech_Tag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Tag PartOfSpeech::UNKNOWN;
const PartOfSpeech_Tag PartOfSpeech::ADJ;
const PartOfSpeech_Tag PartOfSpeech::ADP;
const PartOfSpeech_Tag PartOfSpeech::ADV;
const PartOfSpeech_Tag PartOfSpeech::CONJ;
const PartOfSpeech_Tag PartOfSpeech::DET;
const PartOfSpeech_Tag PartOfSpeech::NOUN;
const PartOfSpeech_Tag PartOfSpeech::NUM;
const PartOfSpeech_Tag PartOfSpeech::PRON;
const PartOfSpeech_Tag PartOfSpeech::PRT;
const PartOfSpeech_Tag PartOfSpeech::PUNCT;
const PartOfSpeech_Tag PartOfSpeech::VERB;
const PartOfSpeech_Tag PartOfSpeech::X;
const PartOfSpeech_Tag PartOfSpeech::AFFIX;
const PartOfSpeech_Tag PartOfSpeech::Tag_MIN;
const PartOfSpeech_Tag PartOfSpeech::Tag_MAX;
const int PartOfSpeech::Tag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Aspect_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[3];
}
bool PartOfSpeech_Aspect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Aspect PartOfSpeech::ASPECT_UNKNOWN;
const PartOfSpeech_Aspect PartOfSpeech::PERFECTIVE;
const PartOfSpeech_Aspect PartOfSpeech::IMPERFECTIVE;
const PartOfSpeech_Aspect PartOfSpeech::PROGRESSIVE;
const PartOfSpeech_Aspect PartOfSpeech::Aspect_MIN;
const PartOfSpeech_Aspect PartOfSpeech::Aspect_MAX;
const int PartOfSpeech::Aspect_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Case_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[4];
}
bool PartOfSpeech_Case_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Case PartOfSpeech::CASE_UNKNOWN;
const PartOfSpeech_Case PartOfSpeech::ACCUSATIVE;
const PartOfSpeech_Case PartOfSpeech::ADVERBIAL;
const PartOfSpeech_Case PartOfSpeech::COMPLEMENTIVE;
const PartOfSpeech_Case PartOfSpeech::DATIVE;
const PartOfSpeech_Case PartOfSpeech::GENITIVE;
const PartOfSpeech_Case PartOfSpeech::INSTRUMENTAL;
const PartOfSpeech_Case PartOfSpeech::LOCATIVE;
const PartOfSpeech_Case PartOfSpeech::NOMINATIVE;
const PartOfSpeech_Case PartOfSpeech::OBLIQUE;
const PartOfSpeech_Case PartOfSpeech::PARTITIVE;
const PartOfSpeech_Case PartOfSpeech::PREPOSITIONAL;
const PartOfSpeech_Case PartOfSpeech::REFLEXIVE_CASE;
const PartOfSpeech_Case PartOfSpeech::RELATIVE_CASE;
const PartOfSpeech_Case PartOfSpeech::VOCATIVE;
const PartOfSpeech_Case PartOfSpeech::Case_MIN;
const PartOfSpeech_Case PartOfSpeech::Case_MAX;
const int PartOfSpeech::Case_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Form_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[5];
}
bool PartOfSpeech_Form_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Form PartOfSpeech::FORM_UNKNOWN;
const PartOfSpeech_Form PartOfSpeech::ADNOMIAL;
const PartOfSpeech_Form PartOfSpeech::AUXILIARY;
const PartOfSpeech_Form PartOfSpeech::COMPLEMENTIZER;
const PartOfSpeech_Form PartOfSpeech::FINAL_ENDING;
const PartOfSpeech_Form PartOfSpeech::GERUND;
const PartOfSpeech_Form PartOfSpeech::REALIS;
const PartOfSpeech_Form PartOfSpeech::IRREALIS;
const PartOfSpeech_Form PartOfSpeech::SHORT;
const PartOfSpeech_Form PartOfSpeech::LONG;
const PartOfSpeech_Form PartOfSpeech::ORDER;
const PartOfSpeech_Form PartOfSpeech::SPECIFIC;
const PartOfSpeech_Form PartOfSpeech::Form_MIN;
const PartOfSpeech_Form PartOfSpeech::Form_MAX;
const int PartOfSpeech::Form_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Gender_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[6];
}
bool PartOfSpeech_Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Gender PartOfSpeech::GENDER_UNKNOWN;
const PartOfSpeech_Gender PartOfSpeech::FEMININE;
const PartOfSpeech_Gender PartOfSpeech::MASCULINE;
const PartOfSpeech_Gender PartOfSpeech::NEUTER;
const PartOfSpeech_Gender PartOfSpeech::Gender_MIN;
const PartOfSpeech_Gender PartOfSpeech::Gender_MAX;
const int PartOfSpeech::Gender_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Mood_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[7];
}
bool PartOfSpeech_Mood_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Mood PartOfSpeech::MOOD_UNKNOWN;
const PartOfSpeech_Mood PartOfSpeech::CONDITIONAL_MOOD;
const PartOfSpeech_Mood PartOfSpeech::IMPERATIVE;
const PartOfSpeech_Mood PartOfSpeech::INDICATIVE;
const PartOfSpeech_Mood PartOfSpeech::INTERROGATIVE;
const PartOfSpeech_Mood PartOfSpeech::JUSSIVE;
const PartOfSpeech_Mood PartOfSpeech::SUBJUNCTIVE;
const PartOfSpeech_Mood PartOfSpeech::Mood_MIN;
const PartOfSpeech_Mood PartOfSpeech::Mood_MAX;
const int PartOfSpeech::Mood_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Number_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[8];
}
bool PartOfSpeech_Number_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Number PartOfSpeech::NUMBER_UNKNOWN;
const PartOfSpeech_Number PartOfSpeech::SINGULAR;
const PartOfSpeech_Number PartOfSpeech::PLURAL;
const PartOfSpeech_Number PartOfSpeech::DUAL;
const PartOfSpeech_Number PartOfSpeech::Number_MIN;
const PartOfSpeech_Number PartOfSpeech::Number_MAX;
const int PartOfSpeech::Number_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Person_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[9];
}
bool PartOfSpeech_Person_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Person PartOfSpeech::PERSON_UNKNOWN;
const PartOfSpeech_Person PartOfSpeech::FIRST;
const PartOfSpeech_Person PartOfSpeech::SECOND;
const PartOfSpeech_Person PartOfSpeech::THIRD;
const PartOfSpeech_Person PartOfSpeech::REFLEXIVE_PERSON;
const PartOfSpeech_Person PartOfSpeech::Person_MIN;
const PartOfSpeech_Person PartOfSpeech::Person_MAX;
const int PartOfSpeech::Person_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Proper_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[10];
}
bool PartOfSpeech_Proper_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Proper PartOfSpeech::PROPER_UNKNOWN;
const PartOfSpeech_Proper PartOfSpeech::PROPER;
const PartOfSpeech_Proper PartOfSpeech::NOT_PROPER;
const PartOfSpeech_Proper PartOfSpeech::Proper_MIN;
const PartOfSpeech_Proper PartOfSpeech::Proper_MAX;
const int PartOfSpeech::Proper_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Reciprocity_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[11];
}
bool PartOfSpeech_Reciprocity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Reciprocity PartOfSpeech::RECIPROCITY_UNKNOWN;
const PartOfSpeech_Reciprocity PartOfSpeech::RECIPROCAL;
const PartOfSpeech_Reciprocity PartOfSpeech::NON_RECIPROCAL;
const PartOfSpeech_Reciprocity PartOfSpeech::Reciprocity_MIN;
const PartOfSpeech_Reciprocity PartOfSpeech::Reciprocity_MAX;
const int PartOfSpeech::Reciprocity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Tense_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[12];
}
bool PartOfSpeech_Tense_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Tense PartOfSpeech::TENSE_UNKNOWN;
const PartOfSpeech_Tense PartOfSpeech::CONDITIONAL_TENSE;
const PartOfSpeech_Tense PartOfSpeech::FUTURE;
const PartOfSpeech_Tense PartOfSpeech::PAST;
const PartOfSpeech_Tense PartOfSpeech::PRESENT;
const PartOfSpeech_Tense PartOfSpeech::IMPERFECT;
const PartOfSpeech_Tense PartOfSpeech::PLUPERFECT;
const PartOfSpeech_Tense PartOfSpeech::Tense_MIN;
const PartOfSpeech_Tense PartOfSpeech::Tense_MAX;
const int PartOfSpeech::Tense_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PartOfSpeech_Voice_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[13];
}
bool PartOfSpeech_Voice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PartOfSpeech_Voice PartOfSpeech::VOICE_UNKNOWN;
const PartOfSpeech_Voice PartOfSpeech::ACTIVE;
const PartOfSpeech_Voice PartOfSpeech::CAUSATIVE;
const PartOfSpeech_Voice PartOfSpeech::PASSIVE;
const PartOfSpeech_Voice PartOfSpeech::Voice_MIN;
const PartOfSpeech_Voice PartOfSpeech::Voice_MAX;
const int PartOfSpeech::Voice_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DependencyEdge_Label_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[14];
}
bool DependencyEdge_Label_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DependencyEdge_Label DependencyEdge::UNKNOWN;
const DependencyEdge_Label DependencyEdge::ABBREV;
const DependencyEdge_Label DependencyEdge::ACOMP;
const DependencyEdge_Label DependencyEdge::ADVCL;
const DependencyEdge_Label DependencyEdge::ADVMOD;
const DependencyEdge_Label DependencyEdge::AMOD;
const DependencyEdge_Label DependencyEdge::APPOS;
const DependencyEdge_Label DependencyEdge::ATTR;
const DependencyEdge_Label DependencyEdge::AUX;
const DependencyEdge_Label DependencyEdge::AUXPASS;
const DependencyEdge_Label DependencyEdge::CC;
const DependencyEdge_Label DependencyEdge::CCOMP;
const DependencyEdge_Label DependencyEdge::CONJ;
const DependencyEdge_Label DependencyEdge::CSUBJ;
const DependencyEdge_Label DependencyEdge::CSUBJPASS;
const DependencyEdge_Label DependencyEdge::DEP;
const DependencyEdge_Label DependencyEdge::DET;
const DependencyEdge_Label DependencyEdge::DISCOURSE;
const DependencyEdge_Label DependencyEdge::DOBJ;
const DependencyEdge_Label DependencyEdge::EXPL;
const DependencyEdge_Label DependencyEdge::GOESWITH;
const DependencyEdge_Label DependencyEdge::IOBJ;
const DependencyEdge_Label DependencyEdge::MARK;
const DependencyEdge_Label DependencyEdge::MWE;
const DependencyEdge_Label DependencyEdge::MWV;
const DependencyEdge_Label DependencyEdge::NEG;
const DependencyEdge_Label DependencyEdge::NN;
const DependencyEdge_Label DependencyEdge::NPADVMOD;
const DependencyEdge_Label DependencyEdge::NSUBJ;
const DependencyEdge_Label DependencyEdge::NSUBJPASS;
const DependencyEdge_Label DependencyEdge::NUM;
const DependencyEdge_Label DependencyEdge::NUMBER;
const DependencyEdge_Label DependencyEdge::P;
const DependencyEdge_Label DependencyEdge::PARATAXIS;
const DependencyEdge_Label DependencyEdge::PARTMOD;
const DependencyEdge_Label DependencyEdge::PCOMP;
const DependencyEdge_Label DependencyEdge::POBJ;
const DependencyEdge_Label DependencyEdge::POSS;
const DependencyEdge_Label DependencyEdge::POSTNEG;
const DependencyEdge_Label DependencyEdge::PRECOMP;
const DependencyEdge_Label DependencyEdge::PRECONJ;
const DependencyEdge_Label DependencyEdge::PREDET;
const DependencyEdge_Label DependencyEdge::PREF;
const DependencyEdge_Label DependencyEdge::PREP;
const DependencyEdge_Label DependencyEdge::PRONL;
const DependencyEdge_Label DependencyEdge::PRT;
const DependencyEdge_Label DependencyEdge::PS;
const DependencyEdge_Label DependencyEdge::QUANTMOD;
const DependencyEdge_Label DependencyEdge::RCMOD;
const DependencyEdge_Label DependencyEdge::RCMODREL;
const DependencyEdge_Label DependencyEdge::RDROP;
const DependencyEdge_Label DependencyEdge::REF;
const DependencyEdge_Label DependencyEdge::REMNANT;
const DependencyEdge_Label DependencyEdge::REPARANDUM;
const DependencyEdge_Label DependencyEdge::ROOT;
const DependencyEdge_Label DependencyEdge::SNUM;
const DependencyEdge_Label DependencyEdge::SUFF;
const DependencyEdge_Label DependencyEdge::TMOD;
const DependencyEdge_Label DependencyEdge::TOPIC;
const DependencyEdge_Label DependencyEdge::VMOD;
const DependencyEdge_Label DependencyEdge::VOCATIVE;
const DependencyEdge_Label DependencyEdge::XCOMP;
const DependencyEdge_Label DependencyEdge::SUFFIX;
const DependencyEdge_Label DependencyEdge::TITLE;
const DependencyEdge_Label DependencyEdge::ADVPHMOD;
const DependencyEdge_Label DependencyEdge::AUXCAUS;
const DependencyEdge_Label DependencyEdge::AUXVV;
const DependencyEdge_Label DependencyEdge::DTMOD;
const DependencyEdge_Label DependencyEdge::FOREIGN;
const DependencyEdge_Label DependencyEdge::KW;
const DependencyEdge_Label DependencyEdge::LIST;
const DependencyEdge_Label DependencyEdge::NOMC;
const DependencyEdge_Label DependencyEdge::NOMCSUBJ;
const DependencyEdge_Label DependencyEdge::NOMCSUBJPASS;
const DependencyEdge_Label DependencyEdge::NUMC;
const DependencyEdge_Label DependencyEdge::COP;
const DependencyEdge_Label DependencyEdge::DISLOCATED;
const DependencyEdge_Label DependencyEdge::Label_MIN;
const DependencyEdge_Label DependencyEdge::Label_MAX;
const int DependencyEdge::Label_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EntityMention_Type_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[15];
}
bool EntityMention_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EntityMention_Type EntityMention::TYPE_UNKNOWN;
const EntityMention_Type EntityMention::PROPER;
const EntityMention_Type EntityMention::COMMON;
const EntityMention_Type EntityMention::Type_MIN;
const EntityMention_Type EntityMention::Type_MAX;
const int EntityMention::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EncodingType_descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_enum_descriptors[16];
}
bool EncodingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document::kTypeFieldNumber;
const int Document::kContentFieldNumber;
const int Document::kGcsContentUriFieldNumber;
const int Document::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document::Document()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.Document)
}
Document::Document(const Document& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language().size() > 0) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  type_ = from.type_;
  clear_has_source();
  switch (from.source_case()) {
    case kContent: {
      set_content(from.content());
      break;
    }
    case kGcsContentUri: {
      set_gcs_content_uri(from.gcs_content_uri());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.Document)
}

void Document::SharedCtor() {
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_has_source();
  _cached_size_ = 0;
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.Document)
  SharedDtor();
}

void Document::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_source()) {
    clear_source();
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Document& Document::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

Document* Document::New(::google::protobuf::Arena* arena) const {
  Document* n = new Document;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document::clear_source() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.language.v1beta1.Document)
  switch (source_case()) {
    case kContent: {
      source_.content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kGcsContentUri: {
      source_.gcs_content_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOURCE_NOT_SET;
}


void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.Document)
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_source();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.Document)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.language.v1beta1.Document.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::cloud::language::v1beta1::Document_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1beta1.Document.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gcs_content_uri = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcs_content_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gcs_content_uri().data(), this->gcs_content_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1beta1.Document.gcs_content_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1beta1.Document.language"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.Document)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.Document)
  return false;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.Document.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.Document.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // string gcs_content_uri = 3;
  if (has_gcs_content_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gcs_content_uri().data(), this->gcs_content_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.Document.gcs_content_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gcs_content_uri(), output);
  }

  // string language = 4;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.Document.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.Document)
}

::google::protobuf::uint8* Document::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.Document.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.Document.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // string gcs_content_uri = 3;
  if (has_gcs_content_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gcs_content_uri().data(), this->gcs_content_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.Document.gcs_content_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gcs_content_uri(), target);
  }

  // string language = 4;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.Document.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.Document)
  return target;
}

size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.Document)
  size_t total_size = 0;

  // string language = 4;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  // .google.cloud.language.v1beta1.Document.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (source_case()) {
    // string content = 2;
    case kContent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
      break;
    }
    // string gcs_content_uri = 3;
    case kGcsContentUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gcs_content_uri());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.Document)
  GOOGLE_DCHECK_NE(&from, this);
  const Document* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Document>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.Document)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.Document)
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.Document)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.source_case()) {
    case kContent: {
      set_content(from.content());
      break;
    }
    case kGcsContentUri: {
      set_gcs_content_uri(from.gcs_content_uri());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  return true;
}

void Document::Swap(Document* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document::InternalSwap(Document* other) {
  language_.Swap(&other->language_);
  std::swap(type_, other->type_);
  std::swap(source_, other->source_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Document

// .google.cloud.language.v1beta1.Document.Type type = 1;
void Document::clear_type() {
  type_ = 0;
}
::google::cloud::language::v1beta1::Document_Type Document::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Document.type)
  return static_cast< ::google::cloud::language::v1beta1::Document_Type >(type_);
}
void Document::set_type(::google::cloud::language::v1beta1::Document_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Document.type)
}

// string content = 2;
bool Document::has_content() const {
  return source_case() == kContent;
}
void Document::set_has_content() {
  _oneof_case_[0] = kContent;
}
void Document::clear_content() {
  if (has_content()) {
    source_.content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_source();
  }
}
const ::std::string& Document::content() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Document.content)
  if (has_content()) {
    return source_.content_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Document::set_content(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Document.content)
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Document.content)
}
#if LANG_CXX11
void Document::set_content(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Document.content)
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.language.v1beta1.Document.content)
}
#endif
void Document::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1beta1.Document.content)
}
void Document::set_content(const char* value, size_t size) {
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1beta1.Document.content)
}
::std::string* Document::mutable_content() {
  if (!has_content()) {
    clear_source();
    set_has_content();
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.Document.content)
  return source_.content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_content() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.Document.content)
  if (has_content()) {
    clear_has_source();
    return source_.content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Document::set_allocated_content(::std::string* content) {
  if (!has_content()) {
    source_.content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_source();
  if (content != NULL) {
    set_has_content();
    source_.content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        content);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.Document.content)
}

// string gcs_content_uri = 3;
bool Document::has_gcs_content_uri() const {
  return source_case() == kGcsContentUri;
}
void Document::set_has_gcs_content_uri() {
  _oneof_case_[0] = kGcsContentUri;
}
void Document::clear_gcs_content_uri() {
  if (has_gcs_content_uri()) {
    source_.gcs_content_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_source();
  }
}
const ::std::string& Document::gcs_content_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Document.gcs_content_uri)
  if (has_gcs_content_uri()) {
    return source_.gcs_content_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Document::set_gcs_content_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Document.gcs_content_uri)
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.gcs_content_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Document.gcs_content_uri)
}
#if LANG_CXX11
void Document::set_gcs_content_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Document.gcs_content_uri)
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.gcs_content_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.language.v1beta1.Document.gcs_content_uri)
}
#endif
void Document::set_gcs_content_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.gcs_content_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1beta1.Document.gcs_content_uri)
}
void Document::set_gcs_content_uri(const char* value, size_t size) {
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.gcs_content_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1beta1.Document.gcs_content_uri)
}
::std::string* Document::mutable_gcs_content_uri() {
  if (!has_gcs_content_uri()) {
    clear_source();
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.Document.gcs_content_uri)
  return source_.gcs_content_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_gcs_content_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.Document.gcs_content_uri)
  if (has_gcs_content_uri()) {
    clear_has_source();
    return source_.gcs_content_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Document::set_allocated_gcs_content_uri(::std::string* gcs_content_uri) {
  if (!has_gcs_content_uri()) {
    source_.gcs_content_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_source();
  if (gcs_content_uri != NULL) {
    set_has_gcs_content_uri();
    source_.gcs_content_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        gcs_content_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.Document.gcs_content_uri)
}

// string language = 4;
void Document::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Document::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Document.language)
  return language_.GetNoArena();
}
void Document::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Document.language)
}
#if LANG_CXX11
void Document::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.language.v1beta1.Document.language)
}
#endif
void Document::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1beta1.Document.language)
}
void Document::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1beta1.Document.language)
}
::std::string* Document::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.Document.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.Document.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.Document.language)
}

bool Document::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
void Document::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
Document::SourceCase Document::source_case() const {
  return Document::SourceCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sentence::kTextFieldNumber;
const int Sentence::kSentimentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sentence::Sentence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.Sentence)
}
Sentence::Sentence(const Sentence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_text()) {
    text_ = new ::google::cloud::language::v1beta1::TextSpan(*from.text_);
  } else {
    text_ = NULL;
  }
  if (from.has_sentiment()) {
    sentiment_ = new ::google::cloud::language::v1beta1::Sentiment(*from.sentiment_);
  } else {
    sentiment_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.Sentence)
}

void Sentence::SharedCtor() {
  ::memset(&text_, 0, reinterpret_cast<char*>(&sentiment_) -
    reinterpret_cast<char*>(&text_) + sizeof(sentiment_));
  _cached_size_ = 0;
}

Sentence::~Sentence() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.Sentence)
  SharedDtor();
}

void Sentence::SharedDtor() {
  if (this != internal_default_instance()) {
    delete text_;
  }
  if (this != internal_default_instance()) {
    delete sentiment_;
  }
}

void Sentence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sentence::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sentence& Sentence::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sentence* Sentence::New(::google::protobuf::Arena* arena) const {
  Sentence* n = new Sentence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sentence::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.Sentence)
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
  if (GetArenaNoVirtual() == NULL && sentiment_ != NULL) {
    delete sentiment_;
  }
  sentiment_ = NULL;
}

bool Sentence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.Sentence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.language.v1beta1.TextSpan text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.Sentiment sentiment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sentiment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.Sentence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.Sentence)
  return false;
#undef DO_
}

void Sentence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.Sentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.TextSpan text = 1;
  if (this->has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->text_, output);
  }

  // .google.cloud.language.v1beta1.Sentiment sentiment = 2;
  if (this->has_sentiment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sentiment_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.Sentence)
}

::google::protobuf::uint8* Sentence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.Sentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.TextSpan text = 1;
  if (this->has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->text_, deterministic, target);
  }

  // .google.cloud.language.v1beta1.Sentiment sentiment = 2;
  if (this->has_sentiment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sentiment_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.Sentence)
  return target;
}

size_t Sentence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.Sentence)
  size_t total_size = 0;

  // .google.cloud.language.v1beta1.TextSpan text = 1;
  if (this->has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->text_);
  }

  // .google.cloud.language.v1beta1.Sentiment sentiment = 2;
  if (this->has_sentiment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sentiment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sentence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.Sentence)
  GOOGLE_DCHECK_NE(&from, this);
  const Sentence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sentence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.Sentence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.Sentence)
    MergeFrom(*source);
  }
}

void Sentence::MergeFrom(const Sentence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.Sentence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    mutable_text()->::google::cloud::language::v1beta1::TextSpan::MergeFrom(from.text());
  }
  if (from.has_sentiment()) {
    mutable_sentiment()->::google::cloud::language::v1beta1::Sentiment::MergeFrom(from.sentiment());
  }
}

void Sentence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.Sentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sentence::CopyFrom(const Sentence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.Sentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sentence::IsInitialized() const {
  return true;
}

void Sentence::Swap(Sentence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sentence::InternalSwap(Sentence* other) {
  std::swap(text_, other->text_);
  std::swap(sentiment_, other->sentiment_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sentence::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sentence

// .google.cloud.language.v1beta1.TextSpan text = 1;
bool Sentence::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
void Sentence::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
const ::google::cloud::language::v1beta1::TextSpan& Sentence::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Sentence.text)
  return text_ != NULL ? *text_
                         : *::google::cloud::language::v1beta1::TextSpan::internal_default_instance();
}
::google::cloud::language::v1beta1::TextSpan* Sentence::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::google::cloud::language::v1beta1::TextSpan;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.Sentence.text)
  return text_;
}
::google::cloud::language::v1beta1::TextSpan* Sentence::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.Sentence.text)
  
  ::google::cloud::language::v1beta1::TextSpan* temp = text_;
  text_ = NULL;
  return temp;
}
void Sentence::set_allocated_text(::google::cloud::language::v1beta1::TextSpan* text) {
  delete text_;
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.Sentence.text)
}

// .google.cloud.language.v1beta1.Sentiment sentiment = 2;
bool Sentence::has_sentiment() const {
  return this != internal_default_instance() && sentiment_ != NULL;
}
void Sentence::clear_sentiment() {
  if (GetArenaNoVirtual() == NULL && sentiment_ != NULL) delete sentiment_;
  sentiment_ = NULL;
}
const ::google::cloud::language::v1beta1::Sentiment& Sentence::sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Sentence.sentiment)
  return sentiment_ != NULL ? *sentiment_
                         : *::google::cloud::language::v1beta1::Sentiment::internal_default_instance();
}
::google::cloud::language::v1beta1::Sentiment* Sentence::mutable_sentiment() {
  
  if (sentiment_ == NULL) {
    sentiment_ = new ::google::cloud::language::v1beta1::Sentiment;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.Sentence.sentiment)
  return sentiment_;
}
::google::cloud::language::v1beta1::Sentiment* Sentence::release_sentiment() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.Sentence.sentiment)
  
  ::google::cloud::language::v1beta1::Sentiment* temp = sentiment_;
  sentiment_ = NULL;
  return temp;
}
void Sentence::set_allocated_sentiment(::google::cloud::language::v1beta1::Sentiment* sentiment) {
  delete sentiment_;
  sentiment_ = sentiment;
  if (sentiment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.Sentence.sentiment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Entity::Entity_MetadataEntry::Entity_MetadataEntry() {}
Entity::Entity_MetadataEntry::Entity_MetadataEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Entity::Entity_MetadataEntry::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[2];
}
void Entity::Entity_MetadataEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Entity::Entity_MetadataEntry::MergeFrom(const Entity_MetadataEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entity::kNameFieldNumber;
const int Entity::kTypeFieldNumber;
const int Entity::kMetadataFieldNumber;
const int Entity::kSalienceFieldNumber;
const int Entity::kMentionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entity::Entity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.Entity)
}
Entity::Entity(const Entity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mentions_(from.mentions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&salience_) -
    reinterpret_cast<char*>(&type_) + sizeof(salience_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.Entity)
}

void Entity::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&salience_) -
    reinterpret_cast<char*>(&type_) + sizeof(salience_));
  _cached_size_ = 0;
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Entity& Entity::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

Entity* Entity::New(::google::protobuf::Arena* arena) const {
  Entity* n = new Entity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.Entity)
  metadata_.Clear();
  mentions_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&salience_) -
    reinterpret_cast<char*>(&type_) + sizeof(salience_));
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1beta1.Entity.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.Entity.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::cloud::language::v1beta1::Entity_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          Entity_MetadataEntry::Parser< ::google::protobuf::internal::MapField<
              Entity_MetadataEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&metadata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1beta1.Entity.MetadataEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1beta1.Entity.MetadataEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float salience = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &salience_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.language.v1beta1.EntityMention mentions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mentions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.Entity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.Entity.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.cloud.language.v1beta1.Entity.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // map<string, string> metadata = 3;
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.language.v1beta1.Entity.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.language.v1beta1.Entity.MetadataEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Entity_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Entity_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // float salience = 4;
  if (this->salience() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->salience(), output);
  }

  // repeated .google.cloud.language.v1beta1.EntityMention mentions = 5;
  for (unsigned int i = 0, n = this->mentions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mentions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.Entity)
}

::google::protobuf::uint8* Entity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.Entity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.Entity.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.cloud.language.v1beta1.Entity.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // map<string, string> metadata = 3;
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.language.v1beta1.Entity.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.language.v1beta1.Entity.MetadataEntry.value");
      }
    };

    if (deterministic &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Entity_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Entity_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // float salience = 4;
  if (this->salience() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->salience(), target);
  }

  // repeated .google.cloud.language.v1beta1.EntityMention mentions = 5;
  for (unsigned int i = 0, n = this->mentions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->mentions(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.Entity)
  return target;
}

size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.Entity)
  size_t total_size = 0;

  // map<string, string> metadata = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metadata_size());
  {
    ::google::protobuf::scoped_ptr<Entity_MetadataEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->metadata().begin();
        it != this->metadata().end(); ++it) {
      entry.reset(metadata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .google.cloud.language.v1beta1.EntityMention mentions = 5;
  {
    unsigned int count = this->mentions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mentions(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.cloud.language.v1beta1.Entity.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float salience = 4;
  if (this->salience() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  const Entity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.Entity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.Entity)
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  mentions_.MergeFrom(from.mentions_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.salience() != 0) {
    set_salience(from.salience());
  }
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  return true;
}

void Entity::Swap(Entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity::InternalSwap(Entity* other) {
  metadata_.Swap(&other->metadata_);
  mentions_.InternalSwap(&other->mentions_);
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(salience_, other->salience_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entity

// string name = 1;
void Entity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Entity::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Entity.name)
  return name_.GetNoArena();
}
void Entity::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Entity.name)
}
#if LANG_CXX11
void Entity::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.language.v1beta1.Entity.name)
}
#endif
void Entity::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1beta1.Entity.name)
}
void Entity::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1beta1.Entity.name)
}
::std::string* Entity::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.Entity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Entity::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.Entity.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Entity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.Entity.name)
}

// .google.cloud.language.v1beta1.Entity.Type type = 2;
void Entity::clear_type() {
  type_ = 0;
}
::google::cloud::language::v1beta1::Entity_Type Entity::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Entity.type)
  return static_cast< ::google::cloud::language::v1beta1::Entity_Type >(type_);
}
void Entity::set_type(::google::cloud::language::v1beta1::Entity_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Entity.type)
}

// map<string, string> metadata = 3;
int Entity::metadata_size() const {
  return metadata_.size();
}
void Entity::clear_metadata() {
  metadata_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Entity::metadata() const {
  // @@protoc_insertion_point(field_map:google.cloud.language.v1beta1.Entity.metadata)
  return metadata_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Entity::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.language.v1beta1.Entity.metadata)
  return metadata_.MutableMap();
}

// float salience = 4;
void Entity::clear_salience() {
  salience_ = 0;
}
float Entity::salience() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Entity.salience)
  return salience_;
}
void Entity::set_salience(float value) {
  
  salience_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Entity.salience)
}

// repeated .google.cloud.language.v1beta1.EntityMention mentions = 5;
int Entity::mentions_size() const {
  return mentions_.size();
}
void Entity::clear_mentions() {
  mentions_.Clear();
}
const ::google::cloud::language::v1beta1::EntityMention& Entity::mentions(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Entity.mentions)
  return mentions_.Get(index);
}
::google::cloud::language::v1beta1::EntityMention* Entity::mutable_mentions(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.Entity.mentions)
  return mentions_.Mutable(index);
}
::google::cloud::language::v1beta1::EntityMention* Entity::add_mentions() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1beta1.Entity.mentions)
  return mentions_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::EntityMention >*
Entity::mutable_mentions() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1beta1.Entity.mentions)
  return &mentions_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::EntityMention >&
Entity::mentions() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1beta1.Entity.mentions)
  return mentions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Token::kTextFieldNumber;
const int Token::kPartOfSpeechFieldNumber;
const int Token::kDependencyEdgeFieldNumber;
const int Token::kLemmaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Token::Token()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.Token)
}
Token::Token(const Token& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lemma_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lemma().size() > 0) {
    lemma_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lemma_);
  }
  if (from.has_text()) {
    text_ = new ::google::cloud::language::v1beta1::TextSpan(*from.text_);
  } else {
    text_ = NULL;
  }
  if (from.has_part_of_speech()) {
    part_of_speech_ = new ::google::cloud::language::v1beta1::PartOfSpeech(*from.part_of_speech_);
  } else {
    part_of_speech_ = NULL;
  }
  if (from.has_dependency_edge()) {
    dependency_edge_ = new ::google::cloud::language::v1beta1::DependencyEdge(*from.dependency_edge_);
  } else {
    dependency_edge_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.Token)
}

void Token::SharedCtor() {
  lemma_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&text_, 0, reinterpret_cast<char*>(&dependency_edge_) -
    reinterpret_cast<char*>(&text_) + sizeof(dependency_edge_));
  _cached_size_ = 0;
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.Token)
  SharedDtor();
}

void Token::SharedDtor() {
  lemma_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete text_;
  }
  if (this != internal_default_instance()) {
    delete part_of_speech_;
  }
  if (this != internal_default_instance()) {
    delete dependency_edge_;
  }
}

void Token::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Token::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Token& Token::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

Token* Token::New(::google::protobuf::Arena* arena) const {
  Token* n = new Token;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.Token)
  lemma_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
  if (GetArenaNoVirtual() == NULL && part_of_speech_ != NULL) {
    delete part_of_speech_;
  }
  part_of_speech_ = NULL;
  if (GetArenaNoVirtual() == NULL && dependency_edge_ != NULL) {
    delete dependency_edge_;
  }
  dependency_edge_ = NULL;
}

bool Token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.Token)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.language.v1beta1.TextSpan text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.PartOfSpeech part_of_speech = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_part_of_speech()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.DependencyEdge dependency_edge = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dependency_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lemma = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lemma()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lemma().data(), this->lemma().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1beta1.Token.lemma"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.Token)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.Token)
  return false;
#undef DO_
}

void Token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.Token)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.TextSpan text = 1;
  if (this->has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->text_, output);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech part_of_speech = 2;
  if (this->has_part_of_speech()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->part_of_speech_, output);
  }

  // .google.cloud.language.v1beta1.DependencyEdge dependency_edge = 3;
  if (this->has_dependency_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dependency_edge_, output);
  }

  // string lemma = 4;
  if (this->lemma().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lemma().data(), this->lemma().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.Token.lemma");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lemma(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.Token)
}

::google::protobuf::uint8* Token::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.Token)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.TextSpan text = 1;
  if (this->has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->text_, deterministic, target);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech part_of_speech = 2;
  if (this->has_part_of_speech()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->part_of_speech_, deterministic, target);
  }

  // .google.cloud.language.v1beta1.DependencyEdge dependency_edge = 3;
  if (this->has_dependency_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->dependency_edge_, deterministic, target);
  }

  // string lemma = 4;
  if (this->lemma().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lemma().data(), this->lemma().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.Token.lemma");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lemma(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.Token)
  size_t total_size = 0;

  // string lemma = 4;
  if (this->lemma().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lemma());
  }

  // .google.cloud.language.v1beta1.TextSpan text = 1;
  if (this->has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->text_);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech part_of_speech = 2;
  if (this->has_part_of_speech()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->part_of_speech_);
  }

  // .google.cloud.language.v1beta1.DependencyEdge dependency_edge = 3;
  if (this->has_dependency_edge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dependency_edge_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Token::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.Token)
  GOOGLE_DCHECK_NE(&from, this);
  const Token* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Token>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.Token)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.Token)
    MergeFrom(*source);
  }
}

void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lemma().size() > 0) {

    lemma_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lemma_);
  }
  if (from.has_text()) {
    mutable_text()->::google::cloud::language::v1beta1::TextSpan::MergeFrom(from.text());
  }
  if (from.has_part_of_speech()) {
    mutable_part_of_speech()->::google::cloud::language::v1beta1::PartOfSpeech::MergeFrom(from.part_of_speech());
  }
  if (from.has_dependency_edge()) {
    mutable_dependency_edge()->::google::cloud::language::v1beta1::DependencyEdge::MergeFrom(from.dependency_edge());
  }
}

void Token::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::Swap(Token* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Token::InternalSwap(Token* other) {
  lemma_.Swap(&other->lemma_);
  std::swap(text_, other->text_);
  std::swap(part_of_speech_, other->part_of_speech_);
  std::swap(dependency_edge_, other->dependency_edge_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Token::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Token

// .google.cloud.language.v1beta1.TextSpan text = 1;
bool Token::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
void Token::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
const ::google::cloud::language::v1beta1::TextSpan& Token::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Token.text)
  return text_ != NULL ? *text_
                         : *::google::cloud::language::v1beta1::TextSpan::internal_default_instance();
}
::google::cloud::language::v1beta1::TextSpan* Token::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::google::cloud::language::v1beta1::TextSpan;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.Token.text)
  return text_;
}
::google::cloud::language::v1beta1::TextSpan* Token::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.Token.text)
  
  ::google::cloud::language::v1beta1::TextSpan* temp = text_;
  text_ = NULL;
  return temp;
}
void Token::set_allocated_text(::google::cloud::language::v1beta1::TextSpan* text) {
  delete text_;
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.Token.text)
}

// .google.cloud.language.v1beta1.PartOfSpeech part_of_speech = 2;
bool Token::has_part_of_speech() const {
  return this != internal_default_instance() && part_of_speech_ != NULL;
}
void Token::clear_part_of_speech() {
  if (GetArenaNoVirtual() == NULL && part_of_speech_ != NULL) delete part_of_speech_;
  part_of_speech_ = NULL;
}
const ::google::cloud::language::v1beta1::PartOfSpeech& Token::part_of_speech() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Token.part_of_speech)
  return part_of_speech_ != NULL ? *part_of_speech_
                         : *::google::cloud::language::v1beta1::PartOfSpeech::internal_default_instance();
}
::google::cloud::language::v1beta1::PartOfSpeech* Token::mutable_part_of_speech() {
  
  if (part_of_speech_ == NULL) {
    part_of_speech_ = new ::google::cloud::language::v1beta1::PartOfSpeech;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.Token.part_of_speech)
  return part_of_speech_;
}
::google::cloud::language::v1beta1::PartOfSpeech* Token::release_part_of_speech() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.Token.part_of_speech)
  
  ::google::cloud::language::v1beta1::PartOfSpeech* temp = part_of_speech_;
  part_of_speech_ = NULL;
  return temp;
}
void Token::set_allocated_part_of_speech(::google::cloud::language::v1beta1::PartOfSpeech* part_of_speech) {
  delete part_of_speech_;
  part_of_speech_ = part_of_speech;
  if (part_of_speech) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.Token.part_of_speech)
}

// .google.cloud.language.v1beta1.DependencyEdge dependency_edge = 3;
bool Token::has_dependency_edge() const {
  return this != internal_default_instance() && dependency_edge_ != NULL;
}
void Token::clear_dependency_edge() {
  if (GetArenaNoVirtual() == NULL && dependency_edge_ != NULL) delete dependency_edge_;
  dependency_edge_ = NULL;
}
const ::google::cloud::language::v1beta1::DependencyEdge& Token::dependency_edge() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Token.dependency_edge)
  return dependency_edge_ != NULL ? *dependency_edge_
                         : *::google::cloud::language::v1beta1::DependencyEdge::internal_default_instance();
}
::google::cloud::language::v1beta1::DependencyEdge* Token::mutable_dependency_edge() {
  
  if (dependency_edge_ == NULL) {
    dependency_edge_ = new ::google::cloud::language::v1beta1::DependencyEdge;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.Token.dependency_edge)
  return dependency_edge_;
}
::google::cloud::language::v1beta1::DependencyEdge* Token::release_dependency_edge() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.Token.dependency_edge)
  
  ::google::cloud::language::v1beta1::DependencyEdge* temp = dependency_edge_;
  dependency_edge_ = NULL;
  return temp;
}
void Token::set_allocated_dependency_edge(::google::cloud::language::v1beta1::DependencyEdge* dependency_edge) {
  delete dependency_edge_;
  dependency_edge_ = dependency_edge;
  if (dependency_edge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.Token.dependency_edge)
}

// string lemma = 4;
void Token::clear_lemma() {
  lemma_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Token::lemma() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Token.lemma)
  return lemma_.GetNoArena();
}
void Token::set_lemma(const ::std::string& value) {
  
  lemma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Token.lemma)
}
#if LANG_CXX11
void Token::set_lemma(::std::string&& value) {
  
  lemma_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.language.v1beta1.Token.lemma)
}
#endif
void Token::set_lemma(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lemma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1beta1.Token.lemma)
}
void Token::set_lemma(const char* value, size_t size) {
  
  lemma_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1beta1.Token.lemma)
}
::std::string* Token::mutable_lemma() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.Token.lemma)
  return lemma_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Token::release_lemma() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.Token.lemma)
  
  return lemma_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Token::set_allocated_lemma(::std::string* lemma) {
  if (lemma != NULL) {
    
  } else {
    
  }
  lemma_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lemma);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.Token.lemma)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sentiment::kPolarityFieldNumber;
const int Sentiment::kMagnitudeFieldNumber;
const int Sentiment::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sentiment::Sentiment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.Sentiment)
}
Sentiment::Sentiment(const Sentiment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&polarity_, &from.polarity_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&polarity_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.Sentiment)
}

void Sentiment::SharedCtor() {
  ::memset(&polarity_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&polarity_) + sizeof(score_));
  _cached_size_ = 0;
}

Sentiment::~Sentiment() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.Sentiment)
  SharedDtor();
}

void Sentiment::SharedDtor() {
}

void Sentiment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sentiment::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sentiment& Sentiment::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sentiment* Sentiment::New(::google::protobuf::Arena* arena) const {
  Sentiment* n = new Sentiment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sentiment::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.Sentiment)
  ::memset(&polarity_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&polarity_) + sizeof(score_));
}

bool Sentiment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.Sentiment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float polarity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &polarity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float magnitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magnitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.Sentiment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.Sentiment)
  return false;
#undef DO_
}

void Sentiment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.Sentiment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float polarity = 1;
  if (this->polarity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->polarity(), output);
  }

  // float magnitude = 2;
  if (this->magnitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->magnitude(), output);
  }

  // float score = 3;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.Sentiment)
}

::google::protobuf::uint8* Sentiment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.Sentiment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float polarity = 1;
  if (this->polarity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->polarity(), target);
  }

  // float magnitude = 2;
  if (this->magnitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->magnitude(), target);
  }

  // float score = 3;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.Sentiment)
  return target;
}

size_t Sentiment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.Sentiment)
  size_t total_size = 0;

  // float polarity = 1;
  if (this->polarity() != 0) {
    total_size += 1 + 4;
  }

  // float magnitude = 2;
  if (this->magnitude() != 0) {
    total_size += 1 + 4;
  }

  // float score = 3;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sentiment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.Sentiment)
  GOOGLE_DCHECK_NE(&from, this);
  const Sentiment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sentiment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.Sentiment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.Sentiment)
    MergeFrom(*source);
  }
}

void Sentiment::MergeFrom(const Sentiment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.Sentiment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.polarity() != 0) {
    set_polarity(from.polarity());
  }
  if (from.magnitude() != 0) {
    set_magnitude(from.magnitude());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Sentiment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.Sentiment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sentiment::CopyFrom(const Sentiment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.Sentiment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sentiment::IsInitialized() const {
  return true;
}

void Sentiment::Swap(Sentiment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sentiment::InternalSwap(Sentiment* other) {
  std::swap(polarity_, other->polarity_);
  std::swap(magnitude_, other->magnitude_);
  std::swap(score_, other->score_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sentiment::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sentiment

// float polarity = 1;
void Sentiment::clear_polarity() {
  polarity_ = 0;
}
float Sentiment::polarity() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Sentiment.polarity)
  return polarity_;
}
void Sentiment::set_polarity(float value) {
  
  polarity_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Sentiment.polarity)
}

// float magnitude = 2;
void Sentiment::clear_magnitude() {
  magnitude_ = 0;
}
float Sentiment::magnitude() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Sentiment.magnitude)
  return magnitude_;
}
void Sentiment::set_magnitude(float value) {
  
  magnitude_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Sentiment.magnitude)
}

// float score = 3;
void Sentiment::clear_score() {
  score_ = 0;
}
float Sentiment::score() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.Sentiment.score)
  return score_;
}
void Sentiment::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.Sentiment.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartOfSpeech::kTagFieldNumber;
const int PartOfSpeech::kAspectFieldNumber;
const int PartOfSpeech::kCaseFieldNumber;
const int PartOfSpeech::kFormFieldNumber;
const int PartOfSpeech::kGenderFieldNumber;
const int PartOfSpeech::kMoodFieldNumber;
const int PartOfSpeech::kNumberFieldNumber;
const int PartOfSpeech::kPersonFieldNumber;
const int PartOfSpeech::kProperFieldNumber;
const int PartOfSpeech::kReciprocityFieldNumber;
const int PartOfSpeech::kTenseFieldNumber;
const int PartOfSpeech::kVoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartOfSpeech::PartOfSpeech()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.PartOfSpeech)
}
PartOfSpeech::PartOfSpeech(const PartOfSpeech& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tag_, &from.tag_,
    reinterpret_cast<char*>(&voice_) -
    reinterpret_cast<char*>(&tag_) + sizeof(voice_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.PartOfSpeech)
}

void PartOfSpeech::SharedCtor() {
  ::memset(&tag_, 0, reinterpret_cast<char*>(&voice_) -
    reinterpret_cast<char*>(&tag_) + sizeof(voice_));
  _cached_size_ = 0;
}

PartOfSpeech::~PartOfSpeech() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.PartOfSpeech)
  SharedDtor();
}

void PartOfSpeech::SharedDtor() {
}

void PartOfSpeech::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartOfSpeech::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PartOfSpeech& PartOfSpeech::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

PartOfSpeech* PartOfSpeech::New(::google::protobuf::Arena* arena) const {
  PartOfSpeech* n = new PartOfSpeech;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartOfSpeech::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.PartOfSpeech)
  ::memset(&tag_, 0, reinterpret_cast<char*>(&voice_) -
    reinterpret_cast<char*>(&tag_) + sizeof(voice_));
}

bool PartOfSpeech::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.PartOfSpeech)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.language.v1beta1.PartOfSpeech.Tag tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tag(static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Tag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.PartOfSpeech.Aspect aspect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aspect(static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Aspect >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.PartOfSpeech.Case case = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_case_(static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Case >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.PartOfSpeech.Form form = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_form(static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Form >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.PartOfSpeech.Gender gender = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gender(static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Gender >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.PartOfSpeech.Mood mood = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mood(static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Mood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.PartOfSpeech.Number number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_number(static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Number >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.PartOfSpeech.Person person = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_person(static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Person >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.PartOfSpeech.Proper proper = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_proper(static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Proper >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.PartOfSpeech.Reciprocity reciprocity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reciprocity(static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Reciprocity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.PartOfSpeech.Tense tense = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tense(static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Tense >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.PartOfSpeech.Voice voice = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_voice(static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Voice >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.PartOfSpeech)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.PartOfSpeech)
  return false;
#undef DO_
}

void PartOfSpeech::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.PartOfSpeech)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.PartOfSpeech.Tag tag = 1;
  if (this->tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tag(), output);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Aspect aspect = 2;
  if (this->aspect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->aspect(), output);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Case case = 3;
  if (this->case_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->case_(), output);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Form form = 4;
  if (this->form() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->form(), output);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Gender gender = 5;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gender(), output);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Mood mood = 6;
  if (this->mood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mood(), output);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Number number = 7;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->number(), output);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Person person = 8;
  if (this->person() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->person(), output);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Proper proper = 9;
  if (this->proper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->proper(), output);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Reciprocity reciprocity = 10;
  if (this->reciprocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->reciprocity(), output);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Tense tense = 11;
  if (this->tense() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->tense(), output);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Voice voice = 12;
  if (this->voice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->voice(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.PartOfSpeech)
}

::google::protobuf::uint8* PartOfSpeech::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.PartOfSpeech)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.PartOfSpeech.Tag tag = 1;
  if (this->tag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tag(), target);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Aspect aspect = 2;
  if (this->aspect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->aspect(), target);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Case case = 3;
  if (this->case_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->case_(), target);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Form form = 4;
  if (this->form() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->form(), target);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Gender gender = 5;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gender(), target);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Mood mood = 6;
  if (this->mood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->mood(), target);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Number number = 7;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->number(), target);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Person person = 8;
  if (this->person() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->person(), target);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Proper proper = 9;
  if (this->proper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->proper(), target);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Reciprocity reciprocity = 10;
  if (this->reciprocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->reciprocity(), target);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Tense tense = 11;
  if (this->tense() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->tense(), target);
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Voice voice = 12;
  if (this->voice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->voice(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.PartOfSpeech)
  return target;
}

size_t PartOfSpeech::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.PartOfSpeech)
  size_t total_size = 0;

  // .google.cloud.language.v1beta1.PartOfSpeech.Tag tag = 1;
  if (this->tag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Aspect aspect = 2;
  if (this->aspect() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->aspect());
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Case case = 3;
  if (this->case_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->case_());
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Form form = 4;
  if (this->form() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->form());
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Gender gender = 5;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Mood mood = 6;
  if (this->mood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mood());
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Number number = 7;
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->number());
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Person person = 8;
  if (this->person() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->person());
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Proper proper = 9;
  if (this->proper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->proper());
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Reciprocity reciprocity = 10;
  if (this->reciprocity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reciprocity());
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Tense tense = 11;
  if (this->tense() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tense());
  }

  // .google.cloud.language.v1beta1.PartOfSpeech.Voice voice = 12;
  if (this->voice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->voice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartOfSpeech::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.PartOfSpeech)
  GOOGLE_DCHECK_NE(&from, this);
  const PartOfSpeech* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartOfSpeech>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.PartOfSpeech)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.PartOfSpeech)
    MergeFrom(*source);
  }
}

void PartOfSpeech::MergeFrom(const PartOfSpeech& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.PartOfSpeech)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag() != 0) {
    set_tag(from.tag());
  }
  if (from.aspect() != 0) {
    set_aspect(from.aspect());
  }
  if (from.case_() != 0) {
    set_case_(from.case_());
  }
  if (from.form() != 0) {
    set_form(from.form());
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.mood() != 0) {
    set_mood(from.mood());
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
  if (from.person() != 0) {
    set_person(from.person());
  }
  if (from.proper() != 0) {
    set_proper(from.proper());
  }
  if (from.reciprocity() != 0) {
    set_reciprocity(from.reciprocity());
  }
  if (from.tense() != 0) {
    set_tense(from.tense());
  }
  if (from.voice() != 0) {
    set_voice(from.voice());
  }
}

void PartOfSpeech::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.PartOfSpeech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartOfSpeech::CopyFrom(const PartOfSpeech& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.PartOfSpeech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartOfSpeech::IsInitialized() const {
  return true;
}

void PartOfSpeech::Swap(PartOfSpeech* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartOfSpeech::InternalSwap(PartOfSpeech* other) {
  std::swap(tag_, other->tag_);
  std::swap(aspect_, other->aspect_);
  std::swap(case__, other->case__);
  std::swap(form_, other->form_);
  std::swap(gender_, other->gender_);
  std::swap(mood_, other->mood_);
  std::swap(number_, other->number_);
  std::swap(person_, other->person_);
  std::swap(proper_, other->proper_);
  std::swap(reciprocity_, other->reciprocity_);
  std::swap(tense_, other->tense_);
  std::swap(voice_, other->voice_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PartOfSpeech::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartOfSpeech

// .google.cloud.language.v1beta1.PartOfSpeech.Tag tag = 1;
void PartOfSpeech::clear_tag() {
  tag_ = 0;
}
::google::cloud::language::v1beta1::PartOfSpeech_Tag PartOfSpeech::tag() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.PartOfSpeech.tag)
  return static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Tag >(tag_);
}
void PartOfSpeech::set_tag(::google::cloud::language::v1beta1::PartOfSpeech_Tag value) {
  
  tag_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.PartOfSpeech.tag)
}

// .google.cloud.language.v1beta1.PartOfSpeech.Aspect aspect = 2;
void PartOfSpeech::clear_aspect() {
  aspect_ = 0;
}
::google::cloud::language::v1beta1::PartOfSpeech_Aspect PartOfSpeech::aspect() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.PartOfSpeech.aspect)
  return static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Aspect >(aspect_);
}
void PartOfSpeech::set_aspect(::google::cloud::language::v1beta1::PartOfSpeech_Aspect value) {
  
  aspect_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.PartOfSpeech.aspect)
}

// .google.cloud.language.v1beta1.PartOfSpeech.Case case = 3;
void PartOfSpeech::clear_case_() {
  case__ = 0;
}
::google::cloud::language::v1beta1::PartOfSpeech_Case PartOfSpeech::case_() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.PartOfSpeech.case)
  return static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Case >(case__);
}
void PartOfSpeech::set_case_(::google::cloud::language::v1beta1::PartOfSpeech_Case value) {
  
  case__ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.PartOfSpeech.case)
}

// .google.cloud.language.v1beta1.PartOfSpeech.Form form = 4;
void PartOfSpeech::clear_form() {
  form_ = 0;
}
::google::cloud::language::v1beta1::PartOfSpeech_Form PartOfSpeech::form() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.PartOfSpeech.form)
  return static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Form >(form_);
}
void PartOfSpeech::set_form(::google::cloud::language::v1beta1::PartOfSpeech_Form value) {
  
  form_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.PartOfSpeech.form)
}

// .google.cloud.language.v1beta1.PartOfSpeech.Gender gender = 5;
void PartOfSpeech::clear_gender() {
  gender_ = 0;
}
::google::cloud::language::v1beta1::PartOfSpeech_Gender PartOfSpeech::gender() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.PartOfSpeech.gender)
  return static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Gender >(gender_);
}
void PartOfSpeech::set_gender(::google::cloud::language::v1beta1::PartOfSpeech_Gender value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.PartOfSpeech.gender)
}

// .google.cloud.language.v1beta1.PartOfSpeech.Mood mood = 6;
void PartOfSpeech::clear_mood() {
  mood_ = 0;
}
::google::cloud::language::v1beta1::PartOfSpeech_Mood PartOfSpeech::mood() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.PartOfSpeech.mood)
  return static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Mood >(mood_);
}
void PartOfSpeech::set_mood(::google::cloud::language::v1beta1::PartOfSpeech_Mood value) {
  
  mood_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.PartOfSpeech.mood)
}

// .google.cloud.language.v1beta1.PartOfSpeech.Number number = 7;
void PartOfSpeech::clear_number() {
  number_ = 0;
}
::google::cloud::language::v1beta1::PartOfSpeech_Number PartOfSpeech::number() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.PartOfSpeech.number)
  return static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Number >(number_);
}
void PartOfSpeech::set_number(::google::cloud::language::v1beta1::PartOfSpeech_Number value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.PartOfSpeech.number)
}

// .google.cloud.language.v1beta1.PartOfSpeech.Person person = 8;
void PartOfSpeech::clear_person() {
  person_ = 0;
}
::google::cloud::language::v1beta1::PartOfSpeech_Person PartOfSpeech::person() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.PartOfSpeech.person)
  return static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Person >(person_);
}
void PartOfSpeech::set_person(::google::cloud::language::v1beta1::PartOfSpeech_Person value) {
  
  person_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.PartOfSpeech.person)
}

// .google.cloud.language.v1beta1.PartOfSpeech.Proper proper = 9;
void PartOfSpeech::clear_proper() {
  proper_ = 0;
}
::google::cloud::language::v1beta1::PartOfSpeech_Proper PartOfSpeech::proper() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.PartOfSpeech.proper)
  return static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Proper >(proper_);
}
void PartOfSpeech::set_proper(::google::cloud::language::v1beta1::PartOfSpeech_Proper value) {
  
  proper_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.PartOfSpeech.proper)
}

// .google.cloud.language.v1beta1.PartOfSpeech.Reciprocity reciprocity = 10;
void PartOfSpeech::clear_reciprocity() {
  reciprocity_ = 0;
}
::google::cloud::language::v1beta1::PartOfSpeech_Reciprocity PartOfSpeech::reciprocity() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.PartOfSpeech.reciprocity)
  return static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Reciprocity >(reciprocity_);
}
void PartOfSpeech::set_reciprocity(::google::cloud::language::v1beta1::PartOfSpeech_Reciprocity value) {
  
  reciprocity_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.PartOfSpeech.reciprocity)
}

// .google.cloud.language.v1beta1.PartOfSpeech.Tense tense = 11;
void PartOfSpeech::clear_tense() {
  tense_ = 0;
}
::google::cloud::language::v1beta1::PartOfSpeech_Tense PartOfSpeech::tense() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.PartOfSpeech.tense)
  return static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Tense >(tense_);
}
void PartOfSpeech::set_tense(::google::cloud::language::v1beta1::PartOfSpeech_Tense value) {
  
  tense_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.PartOfSpeech.tense)
}

// .google.cloud.language.v1beta1.PartOfSpeech.Voice voice = 12;
void PartOfSpeech::clear_voice() {
  voice_ = 0;
}
::google::cloud::language::v1beta1::PartOfSpeech_Voice PartOfSpeech::voice() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.PartOfSpeech.voice)
  return static_cast< ::google::cloud::language::v1beta1::PartOfSpeech_Voice >(voice_);
}
void PartOfSpeech::set_voice(::google::cloud::language::v1beta1::PartOfSpeech_Voice value) {
  
  voice_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.PartOfSpeech.voice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DependencyEdge::kHeadTokenIndexFieldNumber;
const int DependencyEdge::kLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DependencyEdge::DependencyEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.DependencyEdge)
}
DependencyEdge::DependencyEdge(const DependencyEdge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&head_token_index_, &from.head_token_index_,
    reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&head_token_index_) + sizeof(label_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.DependencyEdge)
}

void DependencyEdge::SharedCtor() {
  ::memset(&head_token_index_, 0, reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&head_token_index_) + sizeof(label_));
  _cached_size_ = 0;
}

DependencyEdge::~DependencyEdge() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.DependencyEdge)
  SharedDtor();
}

void DependencyEdge::SharedDtor() {
}

void DependencyEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DependencyEdge::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DependencyEdge& DependencyEdge::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

DependencyEdge* DependencyEdge::New(::google::protobuf::Arena* arena) const {
  DependencyEdge* n = new DependencyEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DependencyEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.DependencyEdge)
  ::memset(&head_token_index_, 0, reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&head_token_index_) + sizeof(label_));
}

bool DependencyEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.DependencyEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 head_token_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_token_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.DependencyEdge.Label label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_label(static_cast< ::google::cloud::language::v1beta1::DependencyEdge_Label >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.DependencyEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.DependencyEdge)
  return false;
#undef DO_
}

void DependencyEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.DependencyEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 head_token_index = 1;
  if (this->head_token_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->head_token_index(), output);
  }

  // .google.cloud.language.v1beta1.DependencyEdge.Label label = 2;
  if (this->label() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->label(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.DependencyEdge)
}

::google::protobuf::uint8* DependencyEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.DependencyEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 head_token_index = 1;
  if (this->head_token_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->head_token_index(), target);
  }

  // .google.cloud.language.v1beta1.DependencyEdge.Label label = 2;
  if (this->label() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->label(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.DependencyEdge)
  return target;
}

size_t DependencyEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.DependencyEdge)
  size_t total_size = 0;

  // int32 head_token_index = 1;
  if (this->head_token_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->head_token_index());
  }

  // .google.cloud.language.v1beta1.DependencyEdge.Label label = 2;
  if (this->label() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->label());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DependencyEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.DependencyEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const DependencyEdge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DependencyEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.DependencyEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.DependencyEdge)
    MergeFrom(*source);
  }
}

void DependencyEdge::MergeFrom(const DependencyEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.DependencyEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.head_token_index() != 0) {
    set_head_token_index(from.head_token_index());
  }
  if (from.label() != 0) {
    set_label(from.label());
  }
}

void DependencyEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.DependencyEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DependencyEdge::CopyFrom(const DependencyEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.DependencyEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DependencyEdge::IsInitialized() const {
  return true;
}

void DependencyEdge::Swap(DependencyEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DependencyEdge::InternalSwap(DependencyEdge* other) {
  std::swap(head_token_index_, other->head_token_index_);
  std::swap(label_, other->label_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DependencyEdge::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DependencyEdge

// int32 head_token_index = 1;
void DependencyEdge::clear_head_token_index() {
  head_token_index_ = 0;
}
::google::protobuf::int32 DependencyEdge::head_token_index() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.DependencyEdge.head_token_index)
  return head_token_index_;
}
void DependencyEdge::set_head_token_index(::google::protobuf::int32 value) {
  
  head_token_index_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.DependencyEdge.head_token_index)
}

// .google.cloud.language.v1beta1.DependencyEdge.Label label = 2;
void DependencyEdge::clear_label() {
  label_ = 0;
}
::google::cloud::language::v1beta1::DependencyEdge_Label DependencyEdge::label() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.DependencyEdge.label)
  return static_cast< ::google::cloud::language::v1beta1::DependencyEdge_Label >(label_);
}
void DependencyEdge::set_label(::google::cloud::language::v1beta1::DependencyEdge_Label value) {
  
  label_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.DependencyEdge.label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityMention::kTextFieldNumber;
const int EntityMention::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityMention::EntityMention()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.EntityMention)
}
EntityMention::EntityMention(const EntityMention& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_text()) {
    text_ = new ::google::cloud::language::v1beta1::TextSpan(*from.text_);
  } else {
    text_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.EntityMention)
}

void EntityMention::SharedCtor() {
  ::memset(&text_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&text_) + sizeof(type_));
  _cached_size_ = 0;
}

EntityMention::~EntityMention() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.EntityMention)
  SharedDtor();
}

void EntityMention::SharedDtor() {
  if (this != internal_default_instance()) {
    delete text_;
  }
}

void EntityMention::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityMention::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityMention& EntityMention::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

EntityMention* EntityMention::New(::google::protobuf::Arena* arena) const {
  EntityMention* n = new EntityMention;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityMention::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.EntityMention)
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
  type_ = 0;
}

bool EntityMention::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.EntityMention)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.language.v1beta1.TextSpan text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.EntityMention.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::cloud::language::v1beta1::EntityMention_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.EntityMention)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.EntityMention)
  return false;
#undef DO_
}

void EntityMention::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.EntityMention)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.TextSpan text = 1;
  if (this->has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->text_, output);
  }

  // .google.cloud.language.v1beta1.EntityMention.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.EntityMention)
}

::google::protobuf::uint8* EntityMention::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.EntityMention)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.TextSpan text = 1;
  if (this->has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->text_, deterministic, target);
  }

  // .google.cloud.language.v1beta1.EntityMention.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.EntityMention)
  return target;
}

size_t EntityMention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.EntityMention)
  size_t total_size = 0;

  // .google.cloud.language.v1beta1.TextSpan text = 1;
  if (this->has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->text_);
  }

  // .google.cloud.language.v1beta1.EntityMention.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityMention::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.EntityMention)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityMention* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityMention>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.EntityMention)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.EntityMention)
    MergeFrom(*source);
  }
}

void EntityMention::MergeFrom(const EntityMention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.EntityMention)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    mutable_text()->::google::cloud::language::v1beta1::TextSpan::MergeFrom(from.text());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void EntityMention::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.EntityMention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityMention::CopyFrom(const EntityMention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.EntityMention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityMention::IsInitialized() const {
  return true;
}

void EntityMention::Swap(EntityMention* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityMention::InternalSwap(EntityMention* other) {
  std::swap(text_, other->text_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityMention::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityMention

// .google.cloud.language.v1beta1.TextSpan text = 1;
bool EntityMention::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
void EntityMention::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
const ::google::cloud::language::v1beta1::TextSpan& EntityMention::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.EntityMention.text)
  return text_ != NULL ? *text_
                         : *::google::cloud::language::v1beta1::TextSpan::internal_default_instance();
}
::google::cloud::language::v1beta1::TextSpan* EntityMention::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::google::cloud::language::v1beta1::TextSpan;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.EntityMention.text)
  return text_;
}
::google::cloud::language::v1beta1::TextSpan* EntityMention::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.EntityMention.text)
  
  ::google::cloud::language::v1beta1::TextSpan* temp = text_;
  text_ = NULL;
  return temp;
}
void EntityMention::set_allocated_text(::google::cloud::language::v1beta1::TextSpan* text) {
  delete text_;
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.EntityMention.text)
}

// .google.cloud.language.v1beta1.EntityMention.Type type = 2;
void EntityMention::clear_type() {
  type_ = 0;
}
::google::cloud::language::v1beta1::EntityMention_Type EntityMention::type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.EntityMention.type)
  return static_cast< ::google::cloud::language::v1beta1::EntityMention_Type >(type_);
}
void EntityMention::set_type(::google::cloud::language::v1beta1::EntityMention_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.EntityMention.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextSpan::kContentFieldNumber;
const int TextSpan::kBeginOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextSpan::TextSpan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.TextSpan)
}
TextSpan::TextSpan(const TextSpan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  begin_offset_ = from.begin_offset_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.TextSpan)
}

void TextSpan::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begin_offset_ = 0;
  _cached_size_ = 0;
}

TextSpan::~TextSpan() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.TextSpan)
  SharedDtor();
}

void TextSpan::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TextSpan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextSpan::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextSpan& TextSpan::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TextSpan* TextSpan::New(::google::protobuf::Arena* arena) const {
  TextSpan* n = new TextSpan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TextSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.TextSpan)
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begin_offset_ = 0;
}

bool TextSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.TextSpan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1beta1.TextSpan.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 begin_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.TextSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.TextSpan)
  return false;
#undef DO_
}

void TextSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.TextSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.TextSpan.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  // int32 begin_offset = 2;
  if (this->begin_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin_offset(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.TextSpan)
}

::google::protobuf::uint8* TextSpan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.TextSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.TextSpan.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // int32 begin_offset = 2;
  if (this->begin_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->begin_offset(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.TextSpan)
  return target;
}

size_t TextSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.TextSpan)
  size_t total_size = 0;

  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // int32 begin_offset = 2;
  if (this->begin_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin_offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextSpan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.TextSpan)
  GOOGLE_DCHECK_NE(&from, this);
  const TextSpan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextSpan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.TextSpan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.TextSpan)
    MergeFrom(*source);
  }
}

void TextSpan::MergeFrom(const TextSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.TextSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.begin_offset() != 0) {
    set_begin_offset(from.begin_offset());
  }
}

void TextSpan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.TextSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextSpan::CopyFrom(const TextSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.TextSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextSpan::IsInitialized() const {
  return true;
}

void TextSpan::Swap(TextSpan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextSpan::InternalSwap(TextSpan* other) {
  content_.Swap(&other->content_);
  std::swap(begin_offset_, other->begin_offset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TextSpan::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TextSpan

// string content = 1;
void TextSpan::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TextSpan::content() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.TextSpan.content)
  return content_.GetNoArena();
}
void TextSpan::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.TextSpan.content)
}
#if LANG_CXX11
void TextSpan::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.language.v1beta1.TextSpan.content)
}
#endif
void TextSpan::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1beta1.TextSpan.content)
}
void TextSpan::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1beta1.TextSpan.content)
}
::std::string* TextSpan::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.TextSpan.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TextSpan::release_content() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.TextSpan.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TextSpan::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.TextSpan.content)
}

// int32 begin_offset = 2;
void TextSpan::clear_begin_offset() {
  begin_offset_ = 0;
}
::google::protobuf::int32 TextSpan::begin_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.TextSpan.begin_offset)
  return begin_offset_;
}
void TextSpan::set_begin_offset(::google::protobuf::int32 value) {
  
  begin_offset_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.TextSpan.begin_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeSentimentRequest::kDocumentFieldNumber;
const int AnalyzeSentimentRequest::kEncodingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeSentimentRequest::AnalyzeSentimentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
}
AnalyzeSentimentRequest::AnalyzeSentimentRequest(const AnalyzeSentimentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_document()) {
    document_ = new ::google::cloud::language::v1beta1::Document(*from.document_);
  } else {
    document_ = NULL;
  }
  encoding_type_ = from.encoding_type_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
}

void AnalyzeSentimentRequest::SharedCtor() {
  ::memset(&document_, 0, reinterpret_cast<char*>(&encoding_type_) -
    reinterpret_cast<char*>(&document_) + sizeof(encoding_type_));
  _cached_size_ = 0;
}

AnalyzeSentimentRequest::~AnalyzeSentimentRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  SharedDtor();
}

void AnalyzeSentimentRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete document_;
  }
}

void AnalyzeSentimentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeSentimentRequest::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalyzeSentimentRequest& AnalyzeSentimentRequest::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnalyzeSentimentRequest* AnalyzeSentimentRequest::New(::google::protobuf::Arena* arena) const {
  AnalyzeSentimentRequest* n = new AnalyzeSentimentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeSentimentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  if (GetArenaNoVirtual() == NULL && document_ != NULL) {
    delete document_;
  }
  document_ = NULL;
  encoding_type_ = 0;
}

bool AnalyzeSentimentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.language.v1beta1.Document document = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding_type(static_cast< ::google::cloud::language::v1beta1::EncodingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  return false;
#undef DO_
}

void AnalyzeSentimentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.Document document = 1;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->document_, output);
  }

  // .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
}

::google::protobuf::uint8* AnalyzeSentimentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.Document document = 1;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->document_, deterministic, target);
  }

  // .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  return target;
}

size_t AnalyzeSentimentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  size_t total_size = 0;

  // .google.cloud.language.v1beta1.Document document = 1;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_);
  }

  // .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeSentimentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeSentimentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeSentimentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
    MergeFrom(*source);
  }
}

void AnalyzeSentimentRequest::MergeFrom(const AnalyzeSentimentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_document()) {
    mutable_document()->::google::cloud::language::v1beta1::Document::MergeFrom(from.document());
  }
  if (from.encoding_type() != 0) {
    set_encoding_type(from.encoding_type());
  }
}

void AnalyzeSentimentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeSentimentRequest::CopyFrom(const AnalyzeSentimentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.AnalyzeSentimentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeSentimentRequest::IsInitialized() const {
  return true;
}

void AnalyzeSentimentRequest::Swap(AnalyzeSentimentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeSentimentRequest::InternalSwap(AnalyzeSentimentRequest* other) {
  std::swap(document_, other->document_);
  std::swap(encoding_type_, other->encoding_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeSentimentRequest::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnalyzeSentimentRequest

// .google.cloud.language.v1beta1.Document document = 1;
bool AnalyzeSentimentRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
void AnalyzeSentimentRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
const ::google::cloud::language::v1beta1::Document& AnalyzeSentimentRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeSentimentRequest.document)
  return document_ != NULL ? *document_
                         : *::google::cloud::language::v1beta1::Document::internal_default_instance();
}
::google::cloud::language::v1beta1::Document* AnalyzeSentimentRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::google::cloud::language::v1beta1::Document;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnalyzeSentimentRequest.document)
  return document_;
}
::google::cloud::language::v1beta1::Document* AnalyzeSentimentRequest::release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.AnalyzeSentimentRequest.document)
  
  ::google::cloud::language::v1beta1::Document* temp = document_;
  document_ = NULL;
  return temp;
}
void AnalyzeSentimentRequest::set_allocated_document(::google::cloud::language::v1beta1::Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.AnalyzeSentimentRequest.document)
}

// .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
void AnalyzeSentimentRequest::clear_encoding_type() {
  encoding_type_ = 0;
}
::google::cloud::language::v1beta1::EncodingType AnalyzeSentimentRequest::encoding_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeSentimentRequest.encoding_type)
  return static_cast< ::google::cloud::language::v1beta1::EncodingType >(encoding_type_);
}
void AnalyzeSentimentRequest::set_encoding_type(::google::cloud::language::v1beta1::EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.AnalyzeSentimentRequest.encoding_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeSentimentResponse::kDocumentSentimentFieldNumber;
const int AnalyzeSentimentResponse::kLanguageFieldNumber;
const int AnalyzeSentimentResponse::kSentencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeSentimentResponse::AnalyzeSentimentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
}
AnalyzeSentimentResponse::AnalyzeSentimentResponse(const AnalyzeSentimentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sentences_(from.sentences_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language().size() > 0) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_document_sentiment()) {
    document_sentiment_ = new ::google::cloud::language::v1beta1::Sentiment(*from.document_sentiment_);
  } else {
    document_sentiment_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
}

void AnalyzeSentimentResponse::SharedCtor() {
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_sentiment_ = NULL;
  _cached_size_ = 0;
}

AnalyzeSentimentResponse::~AnalyzeSentimentResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  SharedDtor();
}

void AnalyzeSentimentResponse::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete document_sentiment_;
  }
}

void AnalyzeSentimentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeSentimentResponse::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalyzeSentimentResponse& AnalyzeSentimentResponse::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnalyzeSentimentResponse* AnalyzeSentimentResponse::New(::google::protobuf::Arena* arena) const {
  AnalyzeSentimentResponse* n = new AnalyzeSentimentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeSentimentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  sentences_.Clear();
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && document_sentiment_ != NULL) {
    delete document_sentiment_;
  }
  document_sentiment_ = NULL;
}

bool AnalyzeSentimentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.language.v1beta1.Sentiment document_sentiment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_sentiment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1beta1.AnalyzeSentimentResponse.language"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.language.v1beta1.Sentence sentences = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  return false;
#undef DO_
}

void AnalyzeSentimentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.Sentiment document_sentiment = 1;
  if (this->has_document_sentiment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->document_sentiment_, output);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.AnalyzeSentimentResponse.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language(), output);
  }

  // repeated .google.cloud.language.v1beta1.Sentence sentences = 3;
  for (unsigned int i = 0, n = this->sentences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sentences(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
}

::google::protobuf::uint8* AnalyzeSentimentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.Sentiment document_sentiment = 1;
  if (this->has_document_sentiment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->document_sentiment_, deterministic, target);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.AnalyzeSentimentResponse.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  // repeated .google.cloud.language.v1beta1.Sentence sentences = 3;
  for (unsigned int i = 0, n = this->sentences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->sentences(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  return target;
}

size_t AnalyzeSentimentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  size_t total_size = 0;

  // repeated .google.cloud.language.v1beta1.Sentence sentences = 3;
  {
    unsigned int count = this->sentences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentences(i));
    }
  }

  // string language = 2;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  // .google.cloud.language.v1beta1.Sentiment document_sentiment = 1;
  if (this->has_document_sentiment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_sentiment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeSentimentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeSentimentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeSentimentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
    MergeFrom(*source);
  }
}

void AnalyzeSentimentResponse::MergeFrom(const AnalyzeSentimentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sentences_.MergeFrom(from.sentences_);
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_document_sentiment()) {
    mutable_document_sentiment()->::google::cloud::language::v1beta1::Sentiment::MergeFrom(from.document_sentiment());
  }
}

void AnalyzeSentimentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeSentimentResponse::CopyFrom(const AnalyzeSentimentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.AnalyzeSentimentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeSentimentResponse::IsInitialized() const {
  return true;
}

void AnalyzeSentimentResponse::Swap(AnalyzeSentimentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeSentimentResponse::InternalSwap(AnalyzeSentimentResponse* other) {
  sentences_.InternalSwap(&other->sentences_);
  language_.Swap(&other->language_);
  std::swap(document_sentiment_, other->document_sentiment_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeSentimentResponse::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnalyzeSentimentResponse

// .google.cloud.language.v1beta1.Sentiment document_sentiment = 1;
bool AnalyzeSentimentResponse::has_document_sentiment() const {
  return this != internal_default_instance() && document_sentiment_ != NULL;
}
void AnalyzeSentimentResponse::clear_document_sentiment() {
  if (GetArenaNoVirtual() == NULL && document_sentiment_ != NULL) delete document_sentiment_;
  document_sentiment_ = NULL;
}
const ::google::cloud::language::v1beta1::Sentiment& AnalyzeSentimentResponse::document_sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeSentimentResponse.document_sentiment)
  return document_sentiment_ != NULL ? *document_sentiment_
                         : *::google::cloud::language::v1beta1::Sentiment::internal_default_instance();
}
::google::cloud::language::v1beta1::Sentiment* AnalyzeSentimentResponse::mutable_document_sentiment() {
  
  if (document_sentiment_ == NULL) {
    document_sentiment_ = new ::google::cloud::language::v1beta1::Sentiment;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnalyzeSentimentResponse.document_sentiment)
  return document_sentiment_;
}
::google::cloud::language::v1beta1::Sentiment* AnalyzeSentimentResponse::release_document_sentiment() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.AnalyzeSentimentResponse.document_sentiment)
  
  ::google::cloud::language::v1beta1::Sentiment* temp = document_sentiment_;
  document_sentiment_ = NULL;
  return temp;
}
void AnalyzeSentimentResponse::set_allocated_document_sentiment(::google::cloud::language::v1beta1::Sentiment* document_sentiment) {
  delete document_sentiment_;
  document_sentiment_ = document_sentiment;
  if (document_sentiment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.AnalyzeSentimentResponse.document_sentiment)
}

// string language = 2;
void AnalyzeSentimentResponse::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnalyzeSentimentResponse::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeSentimentResponse.language)
  return language_.GetNoArena();
}
void AnalyzeSentimentResponse::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.AnalyzeSentimentResponse.language)
}
#if LANG_CXX11
void AnalyzeSentimentResponse::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.language.v1beta1.AnalyzeSentimentResponse.language)
}
#endif
void AnalyzeSentimentResponse::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1beta1.AnalyzeSentimentResponse.language)
}
void AnalyzeSentimentResponse::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1beta1.AnalyzeSentimentResponse.language)
}
::std::string* AnalyzeSentimentResponse::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnalyzeSentimentResponse.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnalyzeSentimentResponse::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.AnalyzeSentimentResponse.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnalyzeSentimentResponse::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.AnalyzeSentimentResponse.language)
}

// repeated .google.cloud.language.v1beta1.Sentence sentences = 3;
int AnalyzeSentimentResponse::sentences_size() const {
  return sentences_.size();
}
void AnalyzeSentimentResponse::clear_sentences() {
  sentences_.Clear();
}
const ::google::cloud::language::v1beta1::Sentence& AnalyzeSentimentResponse::sentences(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeSentimentResponse.sentences)
  return sentences_.Get(index);
}
::google::cloud::language::v1beta1::Sentence* AnalyzeSentimentResponse::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnalyzeSentimentResponse.sentences)
  return sentences_.Mutable(index);
}
::google::cloud::language::v1beta1::Sentence* AnalyzeSentimentResponse::add_sentences() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1beta1.AnalyzeSentimentResponse.sentences)
  return sentences_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Sentence >*
AnalyzeSentimentResponse::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1beta1.AnalyzeSentimentResponse.sentences)
  return &sentences_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Sentence >&
AnalyzeSentimentResponse::sentences() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1beta1.AnalyzeSentimentResponse.sentences)
  return sentences_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeEntitiesRequest::kDocumentFieldNumber;
const int AnalyzeEntitiesRequest::kEncodingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeEntitiesRequest::AnalyzeEntitiesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
}
AnalyzeEntitiesRequest::AnalyzeEntitiesRequest(const AnalyzeEntitiesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_document()) {
    document_ = new ::google::cloud::language::v1beta1::Document(*from.document_);
  } else {
    document_ = NULL;
  }
  encoding_type_ = from.encoding_type_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
}

void AnalyzeEntitiesRequest::SharedCtor() {
  ::memset(&document_, 0, reinterpret_cast<char*>(&encoding_type_) -
    reinterpret_cast<char*>(&document_) + sizeof(encoding_type_));
  _cached_size_ = 0;
}

AnalyzeEntitiesRequest::~AnalyzeEntitiesRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  SharedDtor();
}

void AnalyzeEntitiesRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete document_;
  }
}

void AnalyzeEntitiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeEntitiesRequest::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalyzeEntitiesRequest& AnalyzeEntitiesRequest::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnalyzeEntitiesRequest* AnalyzeEntitiesRequest::New(::google::protobuf::Arena* arena) const {
  AnalyzeEntitiesRequest* n = new AnalyzeEntitiesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeEntitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  if (GetArenaNoVirtual() == NULL && document_ != NULL) {
    delete document_;
  }
  document_ = NULL;
  encoding_type_ = 0;
}

bool AnalyzeEntitiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.language.v1beta1.Document document = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding_type(static_cast< ::google::cloud::language::v1beta1::EncodingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  return false;
#undef DO_
}

void AnalyzeEntitiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.Document document = 1;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->document_, output);
  }

  // .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
}

::google::protobuf::uint8* AnalyzeEntitiesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.Document document = 1;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->document_, deterministic, target);
  }

  // .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  return target;
}

size_t AnalyzeEntitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  size_t total_size = 0;

  // .google.cloud.language.v1beta1.Document document = 1;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_);
  }

  // .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeEntitiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeEntitiesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeEntitiesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
    MergeFrom(*source);
  }
}

void AnalyzeEntitiesRequest::MergeFrom(const AnalyzeEntitiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_document()) {
    mutable_document()->::google::cloud::language::v1beta1::Document::MergeFrom(from.document());
  }
  if (from.encoding_type() != 0) {
    set_encoding_type(from.encoding_type());
  }
}

void AnalyzeEntitiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeEntitiesRequest::CopyFrom(const AnalyzeEntitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.AnalyzeEntitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeEntitiesRequest::IsInitialized() const {
  return true;
}

void AnalyzeEntitiesRequest::Swap(AnalyzeEntitiesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeEntitiesRequest::InternalSwap(AnalyzeEntitiesRequest* other) {
  std::swap(document_, other->document_);
  std::swap(encoding_type_, other->encoding_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeEntitiesRequest::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnalyzeEntitiesRequest

// .google.cloud.language.v1beta1.Document document = 1;
bool AnalyzeEntitiesRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
void AnalyzeEntitiesRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
const ::google::cloud::language::v1beta1::Document& AnalyzeEntitiesRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeEntitiesRequest.document)
  return document_ != NULL ? *document_
                         : *::google::cloud::language::v1beta1::Document::internal_default_instance();
}
::google::cloud::language::v1beta1::Document* AnalyzeEntitiesRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::google::cloud::language::v1beta1::Document;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnalyzeEntitiesRequest.document)
  return document_;
}
::google::cloud::language::v1beta1::Document* AnalyzeEntitiesRequest::release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.AnalyzeEntitiesRequest.document)
  
  ::google::cloud::language::v1beta1::Document* temp = document_;
  document_ = NULL;
  return temp;
}
void AnalyzeEntitiesRequest::set_allocated_document(::google::cloud::language::v1beta1::Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.AnalyzeEntitiesRequest.document)
}

// .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
void AnalyzeEntitiesRequest::clear_encoding_type() {
  encoding_type_ = 0;
}
::google::cloud::language::v1beta1::EncodingType AnalyzeEntitiesRequest::encoding_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeEntitiesRequest.encoding_type)
  return static_cast< ::google::cloud::language::v1beta1::EncodingType >(encoding_type_);
}
void AnalyzeEntitiesRequest::set_encoding_type(::google::cloud::language::v1beta1::EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.AnalyzeEntitiesRequest.encoding_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeEntitiesResponse::kEntitiesFieldNumber;
const int AnalyzeEntitiesResponse::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeEntitiesResponse::AnalyzeEntitiesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
}
AnalyzeEntitiesResponse::AnalyzeEntitiesResponse(const AnalyzeEntitiesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entities_(from.entities_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language().size() > 0) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
}

void AnalyzeEntitiesResponse::SharedCtor() {
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AnalyzeEntitiesResponse::~AnalyzeEntitiesResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  SharedDtor();
}

void AnalyzeEntitiesResponse::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AnalyzeEntitiesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeEntitiesResponse::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalyzeEntitiesResponse& AnalyzeEntitiesResponse::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnalyzeEntitiesResponse* AnalyzeEntitiesResponse::New(::google::protobuf::Arena* arena) const {
  AnalyzeEntitiesResponse* n = new AnalyzeEntitiesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeEntitiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  entities_.Clear();
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AnalyzeEntitiesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.language.v1beta1.Entity entities = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1beta1.AnalyzeEntitiesResponse.language"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  return false;
#undef DO_
}

void AnalyzeEntitiesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.language.v1beta1.Entity entities = 1;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entities(i), output);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.AnalyzeEntitiesResponse.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
}

::google::protobuf::uint8* AnalyzeEntitiesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.language.v1beta1.Entity entities = 1;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entities(i), deterministic, target);
  }

  // string language = 2;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.AnalyzeEntitiesResponse.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  return target;
}

size_t AnalyzeEntitiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  size_t total_size = 0;

  // repeated .google.cloud.language.v1beta1.Entity entities = 1;
  {
    unsigned int count = this->entities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entities(i));
    }
  }

  // string language = 2;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeEntitiesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeEntitiesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeEntitiesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
    MergeFrom(*source);
  }
}

void AnalyzeEntitiesResponse::MergeFrom(const AnalyzeEntitiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void AnalyzeEntitiesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeEntitiesResponse::CopyFrom(const AnalyzeEntitiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.AnalyzeEntitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeEntitiesResponse::IsInitialized() const {
  return true;
}

void AnalyzeEntitiesResponse::Swap(AnalyzeEntitiesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeEntitiesResponse::InternalSwap(AnalyzeEntitiesResponse* other) {
  entities_.InternalSwap(&other->entities_);
  language_.Swap(&other->language_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeEntitiesResponse::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnalyzeEntitiesResponse

// repeated .google.cloud.language.v1beta1.Entity entities = 1;
int AnalyzeEntitiesResponse::entities_size() const {
  return entities_.size();
}
void AnalyzeEntitiesResponse::clear_entities() {
  entities_.Clear();
}
const ::google::cloud::language::v1beta1::Entity& AnalyzeEntitiesResponse::entities(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.entities)
  return entities_.Get(index);
}
::google::cloud::language::v1beta1::Entity* AnalyzeEntitiesResponse::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.entities)
  return entities_.Mutable(index);
}
::google::cloud::language::v1beta1::Entity* AnalyzeEntitiesResponse::add_entities() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.entities)
  return entities_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Entity >*
AnalyzeEntitiesResponse::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.entities)
  return &entities_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Entity >&
AnalyzeEntitiesResponse::entities() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.entities)
  return entities_;
}

// string language = 2;
void AnalyzeEntitiesResponse::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnalyzeEntitiesResponse::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.language)
  return language_.GetNoArena();
}
void AnalyzeEntitiesResponse::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.language)
}
#if LANG_CXX11
void AnalyzeEntitiesResponse::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.language)
}
#endif
void AnalyzeEntitiesResponse::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.language)
}
void AnalyzeEntitiesResponse::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.language)
}
::std::string* AnalyzeEntitiesResponse::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnalyzeEntitiesResponse::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnalyzeEntitiesResponse::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.AnalyzeEntitiesResponse.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeSyntaxRequest::kDocumentFieldNumber;
const int AnalyzeSyntaxRequest::kEncodingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeSyntaxRequest::AnalyzeSyntaxRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
}
AnalyzeSyntaxRequest::AnalyzeSyntaxRequest(const AnalyzeSyntaxRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_document()) {
    document_ = new ::google::cloud::language::v1beta1::Document(*from.document_);
  } else {
    document_ = NULL;
  }
  encoding_type_ = from.encoding_type_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
}

void AnalyzeSyntaxRequest::SharedCtor() {
  ::memset(&document_, 0, reinterpret_cast<char*>(&encoding_type_) -
    reinterpret_cast<char*>(&document_) + sizeof(encoding_type_));
  _cached_size_ = 0;
}

AnalyzeSyntaxRequest::~AnalyzeSyntaxRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  SharedDtor();
}

void AnalyzeSyntaxRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete document_;
  }
}

void AnalyzeSyntaxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeSyntaxRequest::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalyzeSyntaxRequest& AnalyzeSyntaxRequest::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnalyzeSyntaxRequest* AnalyzeSyntaxRequest::New(::google::protobuf::Arena* arena) const {
  AnalyzeSyntaxRequest* n = new AnalyzeSyntaxRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeSyntaxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  if (GetArenaNoVirtual() == NULL && document_ != NULL) {
    delete document_;
  }
  document_ = NULL;
  encoding_type_ = 0;
}

bool AnalyzeSyntaxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.language.v1beta1.Document document = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding_type(static_cast< ::google::cloud::language::v1beta1::EncodingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  return false;
#undef DO_
}

void AnalyzeSyntaxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.Document document = 1;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->document_, output);
  }

  // .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
}

::google::protobuf::uint8* AnalyzeSyntaxRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.Document document = 1;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->document_, deterministic, target);
  }

  // .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  return target;
}

size_t AnalyzeSyntaxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  size_t total_size = 0;

  // .google.cloud.language.v1beta1.Document document = 1;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_);
  }

  // .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeSyntaxRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeSyntaxRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeSyntaxRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
    MergeFrom(*source);
  }
}

void AnalyzeSyntaxRequest::MergeFrom(const AnalyzeSyntaxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_document()) {
    mutable_document()->::google::cloud::language::v1beta1::Document::MergeFrom(from.document());
  }
  if (from.encoding_type() != 0) {
    set_encoding_type(from.encoding_type());
  }
}

void AnalyzeSyntaxRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeSyntaxRequest::CopyFrom(const AnalyzeSyntaxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.AnalyzeSyntaxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeSyntaxRequest::IsInitialized() const {
  return true;
}

void AnalyzeSyntaxRequest::Swap(AnalyzeSyntaxRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeSyntaxRequest::InternalSwap(AnalyzeSyntaxRequest* other) {
  std::swap(document_, other->document_);
  std::swap(encoding_type_, other->encoding_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeSyntaxRequest::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnalyzeSyntaxRequest

// .google.cloud.language.v1beta1.Document document = 1;
bool AnalyzeSyntaxRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
void AnalyzeSyntaxRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
const ::google::cloud::language::v1beta1::Document& AnalyzeSyntaxRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeSyntaxRequest.document)
  return document_ != NULL ? *document_
                         : *::google::cloud::language::v1beta1::Document::internal_default_instance();
}
::google::cloud::language::v1beta1::Document* AnalyzeSyntaxRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::google::cloud::language::v1beta1::Document;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnalyzeSyntaxRequest.document)
  return document_;
}
::google::cloud::language::v1beta1::Document* AnalyzeSyntaxRequest::release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.AnalyzeSyntaxRequest.document)
  
  ::google::cloud::language::v1beta1::Document* temp = document_;
  document_ = NULL;
  return temp;
}
void AnalyzeSyntaxRequest::set_allocated_document(::google::cloud::language::v1beta1::Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.AnalyzeSyntaxRequest.document)
}

// .google.cloud.language.v1beta1.EncodingType encoding_type = 2;
void AnalyzeSyntaxRequest::clear_encoding_type() {
  encoding_type_ = 0;
}
::google::cloud::language::v1beta1::EncodingType AnalyzeSyntaxRequest::encoding_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeSyntaxRequest.encoding_type)
  return static_cast< ::google::cloud::language::v1beta1::EncodingType >(encoding_type_);
}
void AnalyzeSyntaxRequest::set_encoding_type(::google::cloud::language::v1beta1::EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.AnalyzeSyntaxRequest.encoding_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeSyntaxResponse::kSentencesFieldNumber;
const int AnalyzeSyntaxResponse::kTokensFieldNumber;
const int AnalyzeSyntaxResponse::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeSyntaxResponse::AnalyzeSyntaxResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
}
AnalyzeSyntaxResponse::AnalyzeSyntaxResponse(const AnalyzeSyntaxResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sentences_(from.sentences_),
      tokens_(from.tokens_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language().size() > 0) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
}

void AnalyzeSyntaxResponse::SharedCtor() {
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AnalyzeSyntaxResponse::~AnalyzeSyntaxResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  SharedDtor();
}

void AnalyzeSyntaxResponse::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AnalyzeSyntaxResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalyzeSyntaxResponse::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnalyzeSyntaxResponse& AnalyzeSyntaxResponse::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnalyzeSyntaxResponse* AnalyzeSyntaxResponse::New(::google::protobuf::Arena* arena) const {
  AnalyzeSyntaxResponse* n = new AnalyzeSyntaxResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnalyzeSyntaxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  sentences_.Clear();
  tokens_.Clear();
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AnalyzeSyntaxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.language.v1beta1.Sentence sentences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.language.v1beta1.Token tokens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1beta1.AnalyzeSyntaxResponse.language"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  return false;
#undef DO_
}

void AnalyzeSyntaxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.language.v1beta1.Sentence sentences = 1;
  for (unsigned int i = 0, n = this->sentences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sentences(i), output);
  }

  // repeated .google.cloud.language.v1beta1.Token tokens = 2;
  for (unsigned int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tokens(i), output);
  }

  // string language = 3;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.AnalyzeSyntaxResponse.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
}

::google::protobuf::uint8* AnalyzeSyntaxResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.language.v1beta1.Sentence sentences = 1;
  for (unsigned int i = 0, n = this->sentences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sentences(i), deterministic, target);
  }

  // repeated .google.cloud.language.v1beta1.Token tokens = 2;
  for (unsigned int i = 0, n = this->tokens_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tokens(i), deterministic, target);
  }

  // string language = 3;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.AnalyzeSyntaxResponse.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  return target;
}

size_t AnalyzeSyntaxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  size_t total_size = 0;

  // repeated .google.cloud.language.v1beta1.Sentence sentences = 1;
  {
    unsigned int count = this->sentences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentences(i));
    }
  }

  // repeated .google.cloud.language.v1beta1.Token tokens = 2;
  {
    unsigned int count = this->tokens_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tokens(i));
    }
  }

  // string language = 3;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalyzeSyntaxResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeSyntaxResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnalyzeSyntaxResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
    MergeFrom(*source);
  }
}

void AnalyzeSyntaxResponse::MergeFrom(const AnalyzeSyntaxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sentences_.MergeFrom(from.sentences_);
  tokens_.MergeFrom(from.tokens_);
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void AnalyzeSyntaxResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeSyntaxResponse::CopyFrom(const AnalyzeSyntaxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.AnalyzeSyntaxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeSyntaxResponse::IsInitialized() const {
  return true;
}

void AnalyzeSyntaxResponse::Swap(AnalyzeSyntaxResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeSyntaxResponse::InternalSwap(AnalyzeSyntaxResponse* other) {
  sentences_.InternalSwap(&other->sentences_);
  tokens_.InternalSwap(&other->tokens_);
  language_.Swap(&other->language_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnalyzeSyntaxResponse::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnalyzeSyntaxResponse

// repeated .google.cloud.language.v1beta1.Sentence sentences = 1;
int AnalyzeSyntaxResponse::sentences_size() const {
  return sentences_.size();
}
void AnalyzeSyntaxResponse::clear_sentences() {
  sentences_.Clear();
}
const ::google::cloud::language::v1beta1::Sentence& AnalyzeSyntaxResponse::sentences(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.sentences)
  return sentences_.Get(index);
}
::google::cloud::language::v1beta1::Sentence* AnalyzeSyntaxResponse::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.sentences)
  return sentences_.Mutable(index);
}
::google::cloud::language::v1beta1::Sentence* AnalyzeSyntaxResponse::add_sentences() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.sentences)
  return sentences_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Sentence >*
AnalyzeSyntaxResponse::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.sentences)
  return &sentences_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Sentence >&
AnalyzeSyntaxResponse::sentences() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.sentences)
  return sentences_;
}

// repeated .google.cloud.language.v1beta1.Token tokens = 2;
int AnalyzeSyntaxResponse::tokens_size() const {
  return tokens_.size();
}
void AnalyzeSyntaxResponse::clear_tokens() {
  tokens_.Clear();
}
const ::google::cloud::language::v1beta1::Token& AnalyzeSyntaxResponse::tokens(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.tokens)
  return tokens_.Get(index);
}
::google::cloud::language::v1beta1::Token* AnalyzeSyntaxResponse::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.tokens)
  return tokens_.Mutable(index);
}
::google::cloud::language::v1beta1::Token* AnalyzeSyntaxResponse::add_tokens() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.tokens)
  return tokens_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Token >*
AnalyzeSyntaxResponse::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.tokens)
  return &tokens_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Token >&
AnalyzeSyntaxResponse::tokens() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.tokens)
  return tokens_;
}

// string language = 3;
void AnalyzeSyntaxResponse::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnalyzeSyntaxResponse::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.language)
  return language_.GetNoArena();
}
void AnalyzeSyntaxResponse::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.language)
}
#if LANG_CXX11
void AnalyzeSyntaxResponse::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.language)
}
#endif
void AnalyzeSyntaxResponse::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.language)
}
void AnalyzeSyntaxResponse::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.language)
}
::std::string* AnalyzeSyntaxResponse::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnalyzeSyntaxResponse::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnalyzeSyntaxResponse::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.AnalyzeSyntaxResponse.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotateTextRequest_Features::kExtractSyntaxFieldNumber;
const int AnnotateTextRequest_Features::kExtractEntitiesFieldNumber;
const int AnnotateTextRequest_Features::kExtractDocumentSentimentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotateTextRequest_Features::AnnotateTextRequest_Features()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
}
AnnotateTextRequest_Features::AnnotateTextRequest_Features(const AnnotateTextRequest_Features& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&extract_syntax_, &from.extract_syntax_,
    reinterpret_cast<char*>(&extract_document_sentiment_) -
    reinterpret_cast<char*>(&extract_syntax_) + sizeof(extract_document_sentiment_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
}

void AnnotateTextRequest_Features::SharedCtor() {
  ::memset(&extract_syntax_, 0, reinterpret_cast<char*>(&extract_document_sentiment_) -
    reinterpret_cast<char*>(&extract_syntax_) + sizeof(extract_document_sentiment_));
  _cached_size_ = 0;
}

AnnotateTextRequest_Features::~AnnotateTextRequest_Features() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  SharedDtor();
}

void AnnotateTextRequest_Features::SharedDtor() {
}

void AnnotateTextRequest_Features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotateTextRequest_Features::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnotateTextRequest_Features& AnnotateTextRequest_Features::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnnotateTextRequest_Features* AnnotateTextRequest_Features::New(::google::protobuf::Arena* arena) const {
  AnnotateTextRequest_Features* n = new AnnotateTextRequest_Features;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnotateTextRequest_Features::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  ::memset(&extract_syntax_, 0, reinterpret_cast<char*>(&extract_document_sentiment_) -
    reinterpret_cast<char*>(&extract_syntax_) + sizeof(extract_document_sentiment_));
}

bool AnnotateTextRequest_Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool extract_syntax = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extract_syntax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool extract_entities = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extract_entities_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool extract_document_sentiment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extract_document_sentiment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  return false;
#undef DO_
}

void AnnotateTextRequest_Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool extract_syntax = 1;
  if (this->extract_syntax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->extract_syntax(), output);
  }

  // bool extract_entities = 2;
  if (this->extract_entities() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->extract_entities(), output);
  }

  // bool extract_document_sentiment = 3;
  if (this->extract_document_sentiment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->extract_document_sentiment(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
}

::google::protobuf::uint8* AnnotateTextRequest_Features::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool extract_syntax = 1;
  if (this->extract_syntax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->extract_syntax(), target);
  }

  // bool extract_entities = 2;
  if (this->extract_entities() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->extract_entities(), target);
  }

  // bool extract_document_sentiment = 3;
  if (this->extract_document_sentiment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->extract_document_sentiment(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  return target;
}

size_t AnnotateTextRequest_Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  size_t total_size = 0;

  // bool extract_syntax = 1;
  if (this->extract_syntax() != 0) {
    total_size += 1 + 1;
  }

  // bool extract_entities = 2;
  if (this->extract_entities() != 0) {
    total_size += 1 + 1;
  }

  // bool extract_document_sentiment = 3;
  if (this->extract_document_sentiment() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotateTextRequest_Features::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotateTextRequest_Features* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotateTextRequest_Features>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
    MergeFrom(*source);
  }
}

void AnnotateTextRequest_Features::MergeFrom(const AnnotateTextRequest_Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.extract_syntax() != 0) {
    set_extract_syntax(from.extract_syntax());
  }
  if (from.extract_entities() != 0) {
    set_extract_entities(from.extract_entities());
  }
  if (from.extract_document_sentiment() != 0) {
    set_extract_document_sentiment(from.extract_document_sentiment());
  }
}

void AnnotateTextRequest_Features::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotateTextRequest_Features::CopyFrom(const AnnotateTextRequest_Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.AnnotateTextRequest.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotateTextRequest_Features::IsInitialized() const {
  return true;
}

void AnnotateTextRequest_Features::Swap(AnnotateTextRequest_Features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotateTextRequest_Features::InternalSwap(AnnotateTextRequest_Features* other) {
  std::swap(extract_syntax_, other->extract_syntax_);
  std::swap(extract_entities_, other->extract_entities_);
  std::swap(extract_document_sentiment_, other->extract_document_sentiment_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnotateTextRequest_Features::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnotateTextRequest_Features

// bool extract_syntax = 1;
void AnnotateTextRequest_Features::clear_extract_syntax() {
  extract_syntax_ = false;
}
bool AnnotateTextRequest_Features::extract_syntax() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_syntax)
  return extract_syntax_;
}
void AnnotateTextRequest_Features::set_extract_syntax(bool value) {
  
  extract_syntax_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_syntax)
}

// bool extract_entities = 2;
void AnnotateTextRequest_Features::clear_extract_entities() {
  extract_entities_ = false;
}
bool AnnotateTextRequest_Features::extract_entities() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_entities)
  return extract_entities_;
}
void AnnotateTextRequest_Features::set_extract_entities(bool value) {
  
  extract_entities_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_entities)
}

// bool extract_document_sentiment = 3;
void AnnotateTextRequest_Features::clear_extract_document_sentiment() {
  extract_document_sentiment_ = false;
}
bool AnnotateTextRequest_Features::extract_document_sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_document_sentiment)
  return extract_document_sentiment_;
}
void AnnotateTextRequest_Features::set_extract_document_sentiment(bool value) {
  
  extract_document_sentiment_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.AnnotateTextRequest.Features.extract_document_sentiment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotateTextRequest::kDocumentFieldNumber;
const int AnnotateTextRequest::kFeaturesFieldNumber;
const int AnnotateTextRequest::kEncodingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotateTextRequest::AnnotateTextRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.AnnotateTextRequest)
}
AnnotateTextRequest::AnnotateTextRequest(const AnnotateTextRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_document()) {
    document_ = new ::google::cloud::language::v1beta1::Document(*from.document_);
  } else {
    document_ = NULL;
  }
  if (from.has_features()) {
    features_ = new ::google::cloud::language::v1beta1::AnnotateTextRequest_Features(*from.features_);
  } else {
    features_ = NULL;
  }
  encoding_type_ = from.encoding_type_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.AnnotateTextRequest)
}

void AnnotateTextRequest::SharedCtor() {
  ::memset(&document_, 0, reinterpret_cast<char*>(&encoding_type_) -
    reinterpret_cast<char*>(&document_) + sizeof(encoding_type_));
  _cached_size_ = 0;
}

AnnotateTextRequest::~AnnotateTextRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.AnnotateTextRequest)
  SharedDtor();
}

void AnnotateTextRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete document_;
  }
  if (this != internal_default_instance()) {
    delete features_;
  }
}

void AnnotateTextRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotateTextRequest::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnotateTextRequest& AnnotateTextRequest::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnnotateTextRequest* AnnotateTextRequest::New(::google::protobuf::Arena* arena) const {
  AnnotateTextRequest* n = new AnnotateTextRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnotateTextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.AnnotateTextRequest)
  if (GetArenaNoVirtual() == NULL && document_ != NULL) {
    delete document_;
  }
  document_ = NULL;
  if (GetArenaNoVirtual() == NULL && features_ != NULL) {
    delete features_;
  }
  features_ = NULL;
  encoding_type_ = 0;
}

bool AnnotateTextRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.AnnotateTextRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.language.v1beta1.Document document = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.AnnotateTextRequest.Features features = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.EncodingType encoding_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding_type(static_cast< ::google::cloud::language::v1beta1::EncodingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.AnnotateTextRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.AnnotateTextRequest)
  return false;
#undef DO_
}

void AnnotateTextRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.AnnotateTextRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.Document document = 1;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->document_, output);
  }

  // .google.cloud.language.v1beta1.AnnotateTextRequest.Features features = 2;
  if (this->has_features()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->features_, output);
  }

  // .google.cloud.language.v1beta1.EncodingType encoding_type = 3;
  if (this->encoding_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->encoding_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.AnnotateTextRequest)
}

::google::protobuf::uint8* AnnotateTextRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.AnnotateTextRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.language.v1beta1.Document document = 1;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->document_, deterministic, target);
  }

  // .google.cloud.language.v1beta1.AnnotateTextRequest.Features features = 2;
  if (this->has_features()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->features_, deterministic, target);
  }

  // .google.cloud.language.v1beta1.EncodingType encoding_type = 3;
  if (this->encoding_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->encoding_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.AnnotateTextRequest)
  return target;
}

size_t AnnotateTextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.AnnotateTextRequest)
  size_t total_size = 0;

  // .google.cloud.language.v1beta1.Document document = 1;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_);
  }

  // .google.cloud.language.v1beta1.AnnotateTextRequest.Features features = 2;
  if (this->has_features()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->features_);
  }

  // .google.cloud.language.v1beta1.EncodingType encoding_type = 3;
  if (this->encoding_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotateTextRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.AnnotateTextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotateTextRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotateTextRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.AnnotateTextRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.AnnotateTextRequest)
    MergeFrom(*source);
  }
}

void AnnotateTextRequest::MergeFrom(const AnnotateTextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.AnnotateTextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_document()) {
    mutable_document()->::google::cloud::language::v1beta1::Document::MergeFrom(from.document());
  }
  if (from.has_features()) {
    mutable_features()->::google::cloud::language::v1beta1::AnnotateTextRequest_Features::MergeFrom(from.features());
  }
  if (from.encoding_type() != 0) {
    set_encoding_type(from.encoding_type());
  }
}

void AnnotateTextRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.AnnotateTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotateTextRequest::CopyFrom(const AnnotateTextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.AnnotateTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotateTextRequest::IsInitialized() const {
  return true;
}

void AnnotateTextRequest::Swap(AnnotateTextRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotateTextRequest::InternalSwap(AnnotateTextRequest* other) {
  std::swap(document_, other->document_);
  std::swap(features_, other->features_);
  std::swap(encoding_type_, other->encoding_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnotateTextRequest::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnotateTextRequest

// .google.cloud.language.v1beta1.Document document = 1;
bool AnnotateTextRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
void AnnotateTextRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
const ::google::cloud::language::v1beta1::Document& AnnotateTextRequest::document() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnnotateTextRequest.document)
  return document_ != NULL ? *document_
                         : *::google::cloud::language::v1beta1::Document::internal_default_instance();
}
::google::cloud::language::v1beta1::Document* AnnotateTextRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::google::cloud::language::v1beta1::Document;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnnotateTextRequest.document)
  return document_;
}
::google::cloud::language::v1beta1::Document* AnnotateTextRequest::release_document() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.AnnotateTextRequest.document)
  
  ::google::cloud::language::v1beta1::Document* temp = document_;
  document_ = NULL;
  return temp;
}
void AnnotateTextRequest::set_allocated_document(::google::cloud::language::v1beta1::Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.AnnotateTextRequest.document)
}

// .google.cloud.language.v1beta1.AnnotateTextRequest.Features features = 2;
bool AnnotateTextRequest::has_features() const {
  return this != internal_default_instance() && features_ != NULL;
}
void AnnotateTextRequest::clear_features() {
  if (GetArenaNoVirtual() == NULL && features_ != NULL) delete features_;
  features_ = NULL;
}
const ::google::cloud::language::v1beta1::AnnotateTextRequest_Features& AnnotateTextRequest::features() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnnotateTextRequest.features)
  return features_ != NULL ? *features_
                         : *::google::cloud::language::v1beta1::AnnotateTextRequest_Features::internal_default_instance();
}
::google::cloud::language::v1beta1::AnnotateTextRequest_Features* AnnotateTextRequest::mutable_features() {
  
  if (features_ == NULL) {
    features_ = new ::google::cloud::language::v1beta1::AnnotateTextRequest_Features;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnnotateTextRequest.features)
  return features_;
}
::google::cloud::language::v1beta1::AnnotateTextRequest_Features* AnnotateTextRequest::release_features() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.AnnotateTextRequest.features)
  
  ::google::cloud::language::v1beta1::AnnotateTextRequest_Features* temp = features_;
  features_ = NULL;
  return temp;
}
void AnnotateTextRequest::set_allocated_features(::google::cloud::language::v1beta1::AnnotateTextRequest_Features* features) {
  delete features_;
  features_ = features;
  if (features) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.AnnotateTextRequest.features)
}

// .google.cloud.language.v1beta1.EncodingType encoding_type = 3;
void AnnotateTextRequest::clear_encoding_type() {
  encoding_type_ = 0;
}
::google::cloud::language::v1beta1::EncodingType AnnotateTextRequest::encoding_type() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnnotateTextRequest.encoding_type)
  return static_cast< ::google::cloud::language::v1beta1::EncodingType >(encoding_type_);
}
void AnnotateTextRequest::set_encoding_type(::google::cloud::language::v1beta1::EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.AnnotateTextRequest.encoding_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotateTextResponse::kSentencesFieldNumber;
const int AnnotateTextResponse::kTokensFieldNumber;
const int AnnotateTextResponse::kEntitiesFieldNumber;
const int AnnotateTextResponse::kDocumentSentimentFieldNumber;
const int AnnotateTextResponse::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotateTextResponse::AnnotateTextResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.language.v1beta1.AnnotateTextResponse)
}
AnnotateTextResponse::AnnotateTextResponse(const AnnotateTextResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sentences_(from.sentences_),
      tokens_(from.tokens_),
      entities_(from.entities_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language().size() > 0) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_document_sentiment()) {
    document_sentiment_ = new ::google::cloud::language::v1beta1::Sentiment(*from.document_sentiment_);
  } else {
    document_sentiment_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.language.v1beta1.AnnotateTextResponse)
}

void AnnotateTextResponse::SharedCtor() {
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  document_sentiment_ = NULL;
  _cached_size_ = 0;
}

AnnotateTextResponse::~AnnotateTextResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.language.v1beta1.AnnotateTextResponse)
  SharedDtor();
}

void AnnotateTextResponse::SharedDtor() {
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete document_sentiment_;
  }
}

void AnnotateTextResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotateTextResponse::descriptor() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnotateTextResponse& AnnotateTextResponse::default_instance() {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnnotateTextResponse* AnnotateTextResponse::New(::google::protobuf::Arena* arena) const {
  AnnotateTextResponse* n = new AnnotateTextResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnotateTextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.language.v1beta1.AnnotateTextResponse)
  sentences_.Clear();
  tokens_.Clear();
  entities_.Clear();
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && document_sentiment_ != NULL) {
    delete document_sentiment_;
  }
  document_sentiment_ = NULL;
}

bool AnnotateTextResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.language.v1beta1.AnnotateTextResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.language.v1beta1.Sentence sentences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.language.v1beta1.Token tokens = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.language.v1beta1.Entity entities = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.language.v1beta1.Sentiment document_sentiment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_sentiment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.language.v1beta1.AnnotateTextResponse.language"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.language.v1beta1.AnnotateTextResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.language.v1beta1.AnnotateTextResponse)
  return false;
#undef DO_
}

void AnnotateTextResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.language.v1beta1.AnnotateTextResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.language.v1beta1.Sentence sentences = 1;
  for (unsigned int i = 0, n = this->sentences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sentences(i), output);
  }

  // repeated .google.cloud.language.v1beta1.Token tokens = 2;
  for (unsigned int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tokens(i), output);
  }

  // repeated .google.cloud.language.v1beta1.Entity entities = 3;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entities(i), output);
  }

  // .google.cloud.language.v1beta1.Sentiment document_sentiment = 4;
  if (this->has_document_sentiment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->document_sentiment_, output);
  }

  // string language = 5;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.AnnotateTextResponse.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->language(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.language.v1beta1.AnnotateTextResponse)
}

::google::protobuf::uint8* AnnotateTextResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.language.v1beta1.AnnotateTextResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.language.v1beta1.Sentence sentences = 1;
  for (unsigned int i = 0, n = this->sentences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sentences(i), deterministic, target);
  }

  // repeated .google.cloud.language.v1beta1.Token tokens = 2;
  for (unsigned int i = 0, n = this->tokens_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tokens(i), deterministic, target);
  }

  // repeated .google.cloud.language.v1beta1.Entity entities = 3;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->entities(i), deterministic, target);
  }

  // .google.cloud.language.v1beta1.Sentiment document_sentiment = 4;
  if (this->has_document_sentiment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->document_sentiment_, deterministic, target);
  }

  // string language = 5;
  if (this->language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.language.v1beta1.AnnotateTextResponse.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.language.v1beta1.AnnotateTextResponse)
  return target;
}

size_t AnnotateTextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.language.v1beta1.AnnotateTextResponse)
  size_t total_size = 0;

  // repeated .google.cloud.language.v1beta1.Sentence sentences = 1;
  {
    unsigned int count = this->sentences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sentences(i));
    }
  }

  // repeated .google.cloud.language.v1beta1.Token tokens = 2;
  {
    unsigned int count = this->tokens_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tokens(i));
    }
  }

  // repeated .google.cloud.language.v1beta1.Entity entities = 3;
  {
    unsigned int count = this->entities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entities(i));
    }
  }

  // string language = 5;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language());
  }

  // .google.cloud.language.v1beta1.Sentiment document_sentiment = 4;
  if (this->has_document_sentiment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_sentiment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotateTextResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.language.v1beta1.AnnotateTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotateTextResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotateTextResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.language.v1beta1.AnnotateTextResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.language.v1beta1.AnnotateTextResponse)
    MergeFrom(*source);
  }
}

void AnnotateTextResponse::MergeFrom(const AnnotateTextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.language.v1beta1.AnnotateTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sentences_.MergeFrom(from.sentences_);
  tokens_.MergeFrom(from.tokens_);
  entities_.MergeFrom(from.entities_);
  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_document_sentiment()) {
    mutable_document_sentiment()->::google::cloud::language::v1beta1::Sentiment::MergeFrom(from.document_sentiment());
  }
}

void AnnotateTextResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.language.v1beta1.AnnotateTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotateTextResponse::CopyFrom(const AnnotateTextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.language.v1beta1.AnnotateTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotateTextResponse::IsInitialized() const {
  return true;
}

void AnnotateTextResponse::Swap(AnnotateTextResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotateTextResponse::InternalSwap(AnnotateTextResponse* other) {
  sentences_.InternalSwap(&other->sentences_);
  tokens_.InternalSwap(&other->tokens_);
  entities_.InternalSwap(&other->entities_);
  language_.Swap(&other->language_);
  std::swap(document_sentiment_, other->document_sentiment_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnotateTextResponse::GetMetadata() const {
  protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2flanguage_2fv1beta1_2flanguage_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnotateTextResponse

// repeated .google.cloud.language.v1beta1.Sentence sentences = 1;
int AnnotateTextResponse::sentences_size() const {
  return sentences_.size();
}
void AnnotateTextResponse::clear_sentences() {
  sentences_.Clear();
}
const ::google::cloud::language::v1beta1::Sentence& AnnotateTextResponse::sentences(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnnotateTextResponse.sentences)
  return sentences_.Get(index);
}
::google::cloud::language::v1beta1::Sentence* AnnotateTextResponse::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnnotateTextResponse.sentences)
  return sentences_.Mutable(index);
}
::google::cloud::language::v1beta1::Sentence* AnnotateTextResponse::add_sentences() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1beta1.AnnotateTextResponse.sentences)
  return sentences_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Sentence >*
AnnotateTextResponse::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1beta1.AnnotateTextResponse.sentences)
  return &sentences_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Sentence >&
AnnotateTextResponse::sentences() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1beta1.AnnotateTextResponse.sentences)
  return sentences_;
}

// repeated .google.cloud.language.v1beta1.Token tokens = 2;
int AnnotateTextResponse::tokens_size() const {
  return tokens_.size();
}
void AnnotateTextResponse::clear_tokens() {
  tokens_.Clear();
}
const ::google::cloud::language::v1beta1::Token& AnnotateTextResponse::tokens(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnnotateTextResponse.tokens)
  return tokens_.Get(index);
}
::google::cloud::language::v1beta1::Token* AnnotateTextResponse::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnnotateTextResponse.tokens)
  return tokens_.Mutable(index);
}
::google::cloud::language::v1beta1::Token* AnnotateTextResponse::add_tokens() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1beta1.AnnotateTextResponse.tokens)
  return tokens_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Token >*
AnnotateTextResponse::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1beta1.AnnotateTextResponse.tokens)
  return &tokens_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Token >&
AnnotateTextResponse::tokens() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1beta1.AnnotateTextResponse.tokens)
  return tokens_;
}

// repeated .google.cloud.language.v1beta1.Entity entities = 3;
int AnnotateTextResponse::entities_size() const {
  return entities_.size();
}
void AnnotateTextResponse::clear_entities() {
  entities_.Clear();
}
const ::google::cloud::language::v1beta1::Entity& AnnotateTextResponse::entities(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnnotateTextResponse.entities)
  return entities_.Get(index);
}
::google::cloud::language::v1beta1::Entity* AnnotateTextResponse::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnnotateTextResponse.entities)
  return entities_.Mutable(index);
}
::google::cloud::language::v1beta1::Entity* AnnotateTextResponse::add_entities() {
  // @@protoc_insertion_point(field_add:google.cloud.language.v1beta1.AnnotateTextResponse.entities)
  return entities_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Entity >*
AnnotateTextResponse::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.language.v1beta1.AnnotateTextResponse.entities)
  return &entities_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::language::v1beta1::Entity >&
AnnotateTextResponse::entities() const {
  // @@protoc_insertion_point(field_list:google.cloud.language.v1beta1.AnnotateTextResponse.entities)
  return entities_;
}

// .google.cloud.language.v1beta1.Sentiment document_sentiment = 4;
bool AnnotateTextResponse::has_document_sentiment() const {
  return this != internal_default_instance() && document_sentiment_ != NULL;
}
void AnnotateTextResponse::clear_document_sentiment() {
  if (GetArenaNoVirtual() == NULL && document_sentiment_ != NULL) delete document_sentiment_;
  document_sentiment_ = NULL;
}
const ::google::cloud::language::v1beta1::Sentiment& AnnotateTextResponse::document_sentiment() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnnotateTextResponse.document_sentiment)
  return document_sentiment_ != NULL ? *document_sentiment_
                         : *::google::cloud::language::v1beta1::Sentiment::internal_default_instance();
}
::google::cloud::language::v1beta1::Sentiment* AnnotateTextResponse::mutable_document_sentiment() {
  
  if (document_sentiment_ == NULL) {
    document_sentiment_ = new ::google::cloud::language::v1beta1::Sentiment;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnnotateTextResponse.document_sentiment)
  return document_sentiment_;
}
::google::cloud::language::v1beta1::Sentiment* AnnotateTextResponse::release_document_sentiment() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.AnnotateTextResponse.document_sentiment)
  
  ::google::cloud::language::v1beta1::Sentiment* temp = document_sentiment_;
  document_sentiment_ = NULL;
  return temp;
}
void AnnotateTextResponse::set_allocated_document_sentiment(::google::cloud::language::v1beta1::Sentiment* document_sentiment) {
  delete document_sentiment_;
  document_sentiment_ = document_sentiment;
  if (document_sentiment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.AnnotateTextResponse.document_sentiment)
}

// string language = 5;
void AnnotateTextResponse::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnnotateTextResponse::language() const {
  // @@protoc_insertion_point(field_get:google.cloud.language.v1beta1.AnnotateTextResponse.language)
  return language_.GetNoArena();
}
void AnnotateTextResponse::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.language.v1beta1.AnnotateTextResponse.language)
}
#if LANG_CXX11
void AnnotateTextResponse::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.language.v1beta1.AnnotateTextResponse.language)
}
#endif
void AnnotateTextResponse::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.language.v1beta1.AnnotateTextResponse.language)
}
void AnnotateTextResponse::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.language.v1beta1.AnnotateTextResponse.language)
}
::std::string* AnnotateTextResponse::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.language.v1beta1.AnnotateTextResponse.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnnotateTextResponse::release_language() {
  // @@protoc_insertion_point(field_release:google.cloud.language.v1beta1.AnnotateTextResponse.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnnotateTextResponse::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.language.v1beta1.AnnotateTextResponse.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace language
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)
