// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/cloud/ml/v1/project_service.proto

#include "google/cloud/ml/v1/project_service.pb.h"
#include "google/cloud/ml/v1/project_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace google {
namespace cloud {
namespace ml {
namespace v1 {

static const char* ProjectManagementService_method_names[] = {
  "/google.cloud.ml.v1.ProjectManagementService/GetConfig",
};

std::unique_ptr< ProjectManagementService::Stub> ProjectManagementService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ProjectManagementService::Stub> stub(new ProjectManagementService::Stub(channel));
  return stub;
}

ProjectManagementService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetConfig_(ProjectManagementService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProjectManagementService::Stub::GetConfig(::grpc::ClientContext* context, const ::google::cloud::ml::v1::GetConfigRequest& request, ::google::cloud::ml::v1::GetConfigResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1::GetConfigResponse>* ProjectManagementService::Stub::AsyncGetConfigRaw(::grpc::ClientContext* context, const ::google::cloud::ml::v1::GetConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::google::cloud::ml::v1::GetConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetConfig_, context, request);
}

ProjectManagementService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      ProjectManagementService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ProjectManagementService::Service, ::google::cloud::ml::v1::GetConfigRequest, ::google::cloud::ml::v1::GetConfigResponse>(
          std::mem_fn(&ProjectManagementService::Service::GetConfig), this)));
}

ProjectManagementService::Service::~Service() {
}

::grpc::Status ProjectManagementService::Service::GetConfig(::grpc::ServerContext* context, const ::google::cloud::ml::v1::GetConfigRequest* request, ::google::cloud::ml::v1::GetConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace cloud
}  // namespace ml
}  // namespace v1

