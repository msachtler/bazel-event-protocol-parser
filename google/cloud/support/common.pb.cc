// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/support/common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/cloud/support/common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace cloud {
namespace support {
namespace common {
class SupportAccountDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SupportAccount> {
} _SupportAccount_default_instance_;
class CaseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Case> {
} _Case_default_instance_;
class CustomerIssueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CustomerIssue> {
} _CustomerIssue_default_instance_;
class SupportRoleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SupportRole> {
} _SupportRole_default_instance_;
class CommentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Comment> {
} _Comment_default_instance_;
class IssueTaxonomy_ComponentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IssueTaxonomy_Component> {
} _IssueTaxonomy_Component_default_instance_;
class IssueTaxonomy_Category_ComponentsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IssueTaxonomy_Category::IssueTaxonomy_Category_ComponentsEntry> {
} _IssueTaxonomy_Category_ComponentsEntry_default_instance_;
class IssueTaxonomy_CategoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IssueTaxonomy_Category> {
} _IssueTaxonomy_Category_default_instance_;
class IssueTaxonomy_CategoriesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IssueTaxonomy::IssueTaxonomy_CategoriesEntry> {
} _IssueTaxonomy_CategoriesEntry_default_instance_;
class IssueTaxonomyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IssueTaxonomy> {
} _IssueTaxonomy_default_instance_;

namespace protobuf_google_2fcloud_2fsupport_2fcommon_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportAccount, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportAccount, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportAccount, cloud_resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportAccount, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportAccount, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportAccount, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportAccount, billing_account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportAccount, unify_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportAccount, pricing_model_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, component_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, subcomponent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, client_timezone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, cc_addresses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, issues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, creator_email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Case, category_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomerIssue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomerIssue, issue_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomerIssue, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomerIssue, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomerIssue, resolve_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomerIssue, update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportRole, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportRole, role_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, author_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueTaxonomy_Component, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueTaxonomy_Component, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueTaxonomy_Component, languages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueTaxonomy_Component, template__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueTaxonomy_Component, subcomponents_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueTaxonomy_Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueTaxonomy_Category, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueTaxonomy_Category, components_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueTaxonomy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IssueTaxonomy, categories_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SupportAccount)},
  { 14, -1, sizeof(Case)},
  { 34, -1, sizeof(CustomerIssue)},
  { 44, -1, sizeof(SupportRole)},
  { 51, -1, sizeof(Comment)},
  { 60, -1, sizeof(IssueTaxonomy_Component)},
  { 69, -1, sizeof(IssueTaxonomy_Category)},
  { 76, -1, sizeof(IssueTaxonomy)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SupportAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Case_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomerIssue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SupportRole_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Comment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IssueTaxonomy_Component_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IssueTaxonomy_Category_ComponentsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IssueTaxonomy_Category_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IssueTaxonomy_CategoriesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IssueTaxonomy_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/cloud/support/common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[6].reflection = IssueTaxonomy_Category::IssueTaxonomy_Category_ComponentsEntry::CreateReflection(file_level_metadata[6].descriptor, _IssueTaxonomy_Category_ComponentsEntry_default_instance_.get_mutable());
file_level_metadata[8].reflection = IssueTaxonomy::IssueTaxonomy_CategoriesEntry::CreateReflection(file_level_metadata[8].descriptor, _IssueTaxonomy_CategoriesEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _SupportAccount_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Case_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CustomerIssue_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SupportRole_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Comment_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _IssueTaxonomy_Component_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _IssueTaxonomy_Category_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _IssueTaxonomy_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  delete file_level_metadata[6].reflection;
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _SupportAccount_default_instance_.DefaultConstruct();
  _Case_default_instance_.DefaultConstruct();
  _CustomerIssue_default_instance_.DefaultConstruct();
  _SupportRole_default_instance_.DefaultConstruct();
  _Comment_default_instance_.DefaultConstruct();
  _IssueTaxonomy_Component_default_instance_.DefaultConstruct();
  _IssueTaxonomy_Category_ComponentsEntry_default_instance_.DefaultConstruct();
  _IssueTaxonomy_Category_default_instance_.DefaultConstruct();
  _IssueTaxonomy_CategoriesEntry_default_instance_.DefaultConstruct();
  _IssueTaxonomy_default_instance_.DefaultConstruct();
  _SupportAccount_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Case_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Case_default_instance_.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _CustomerIssue_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _CustomerIssue_default_instance_.get_mutable()->resolve_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _CustomerIssue_default_instance_.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Comment_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _IssueTaxonomy_Category_ComponentsEntry_default_instance_.get_mutable()->set_default_instance(_IssueTaxonomy_Category_ComponentsEntry_default_instance_.get_mutable());
  _IssueTaxonomy_Category_ComponentsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _IssueTaxonomy_CategoriesEntry_default_instance_.get_mutable()->set_default_instance(_IssueTaxonomy_CategoriesEntry_default_instance_.get_mutable());
  _IssueTaxonomy_CategoriesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n!google/cloud/support/common.proto\022\033goo"
      "gle.cloud.support.common\032\034google/api/ann"
      "otations.proto\032\037google/protobuf/timestam"
      "p.proto\"\364\003\n\016SupportAccount\022\014\n\004name\030\001 \001(\t"
      "\022\022\n\naccount_id\030\002 \001(\t\022\026\n\016cloud_resource\030\003"
      " \001(\t\022\024\n\014display_name\030\004 \001(\t\022@\n\005state\030\005 \001("
      "\01621.google.cloud.support.common.SupportA"
      "ccount.State\022/\n\013create_time\030\006 \001(\0132\032.goog"
      "le.protobuf.Timestamp\022\034\n\024billing_account"
      "_name\030\007 \001(\t\022\030\n\020unify_account_id\030\010 \001(\t\022O\n"
      "\rpricing_model\030\t \001(\01628.google.cloud.supp"
      "ort.common.SupportAccount.PricingModel\"M"
      "\n\005State\022\025\n\021STATE_UNSPECIFIED\020\000\022\n\n\006ACTIVE"
      "\020\001\022\013\n\007PENDING\020\002\022\024\n\020PENDING_DELETION\020\003\"G\n"
      "\014PricingModel\022\031\n\025PRICING_MODEL_UNKNOWN\020\000"
      "\022\014\n\010PACKAGES\020\001\022\016\n\nUSER_ROLES\020\002\"\214\006\n\004Case\022"
      "\014\n\004name\030\001 \001(\t\022\024\n\014display_name\030\002 \001(\t\022\023\n\013d"
      "escription\030\003 \001(\t\022\021\n\tcomponent\030\004 \001(\t\022\024\n\014s"
      "ubcomponent\030\005 \001(\t\022\027\n\017client_timezone\030\006 \001"
      "(\t\022\024\n\014cc_addresses\030\007 \003(\t\022\022\n\nproject_id\030\010"
      " \001(\t\022:\n\006issues\030\n \003(\0132*.google.cloud.supp"
      "ort.common.CustomerIssue\022<\n\010priority\030\013 \001"
      "(\0162*.google.cloud.support.common.Case.Pr"
      "iority\0226\n\005state\030\014 \001(\0162\'.google.cloud.sup"
      "port.common.Case.State\022/\n\013create_time\030\r "
      "\001(\0132\032.google.protobuf.Timestamp\022/\n\013updat"
      "e_time\030\016 \001(\0132\032.google.protobuf.Timestamp"
      "\022\025\n\rcreator_email\030\017 \001(\t\022\020\n\010category\030\020 \001("
      "\t\"L\n\010Priority\022\030\n\024PRIORITY_UNSPECIFIED\020\000\022"
      "\006\n\002P0\020\001\022\006\n\002P1\020\002\022\006\n\002P2\020\003\022\006\n\002P3\020\004\022\006\n\002P4\020\005\""
      "\323\001\n\005State\022\025\n\021STATE_UNSPECIFIED\020\000\022\007\n\003NEW\020"
      "\001\022\014\n\010ASSIGNED\020\002\022\036\n\032IN_PROGRESS_GOOGLE_SU"
      "PPORT\020\003\022\032\n\026IN_PROGRESS_GOOGLE_ENG\020\004\022\033\n\027I"
      "N_PROGRESS_KNOWN_ISSUE\020\005\022!\n\035WAITING_FOR_"
      "CUSTOMER_RESPONSE\020\006\022\024\n\020SOLUTION_OFFERED\020"
      "\007\022\n\n\006CLOSED\020\010\"\350\002\n\rCustomerIssue\022\020\n\010issue"
      "_id\030\001 \001(\t\022D\n\005state\030\002 \001(\01625.google.cloud."
      "support.common.CustomerIssue.IssueState\022"
      "/\n\013create_time\030\003 \001(\0132\032.google.protobuf.T"
      "imestamp\0220\n\014resolve_time\030\004 \001(\0132\032.google."
      "protobuf.Timestamp\022/\n\013update_time\030\005 \001(\0132"
      "\032.google.protobuf.Timestamp\"k\n\nIssueStat"
      "e\022\033\n\027ISSUE_STATE_UNSPECIFIED\020\000\022\010\n\004OPEN\020\001"
      "\022\017\n\013IN_PROGRESS\020\002\022\t\n\005FIXED\020\003\022\014\n\010WONT_FIX"
      "\020\004\022\014\n\010VERIFIED\020\005\"\266\001\n\013SupportRole\022\r\n\005emai"
      "l\030\001 \001(\t\022;\n\004role\030\002 \001(\0162-.google.cloud.sup"
      "port.common.SupportRole.Role\"[\n\004Role\022\024\n\020"
      "ROLE_UNSPECIFIED\020\000\022\t\n\005BASIC\020\001\022\r\n\tDEVELOP"
      "ER\020\002\022\r\n\tOPERATION\020\003\022\024\n\020SITE_RELIABILITY\020"
      "\004\"f\n\007Comment\022\014\n\004text\030\001 \001(\t\022/\n\013create_tim"
      "e\030\002 \001(\0132\032.google.protobuf.Timestamp\022\016\n\006a"
      "uthor\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\"\302\004\n\rIssueTaxon"
      "omy\022N\n\ncategories\030\001 \003(\0132:.google.cloud.s"
      "upport.common.IssueTaxonomy.CategoriesEn"
      "try\032\223\001\n\tComponent\022\024\n\014display_name\030\001 \001(\t\022"
      "\021\n\tlanguages\030\002 \003(\t\022\020\n\010template\030\003 \001(\t\022K\n\r"
      "subcomponents\030\004 \003(\01324.google.cloud.suppo"
      "rt.common.IssueTaxonomy.Component\032\342\001\n\010Ca"
      "tegory\022\024\n\014display_name\030\001 \001(\t\022W\n\ncomponen"
      "ts\030\002 \003(\0132C.google.cloud.support.common.I"
      "ssueTaxonomy.Category.ComponentsEntry\032g\n"
      "\017ComponentsEntry\022\013\n\003key\030\001 \001(\t\022C\n\005value\030\002"
      " \001(\01324.google.cloud.support.common.Issue"
      "Taxonomy.Component:\0028\001\032f\n\017CategoriesEntr"
      "y\022\013\n\003key\030\001 \001(\t\022B\n\005value\030\002 \001(\01323.google.c"
      "loud.support.common.IssueTaxonomy.Catego"
      "ry:\0028\001Bw\n\037com.google.cloud.support.commo"
      "nB\021CloudSupportProtoZAgoogle.golang.org/"
      "genproto/googleapis/cloud/support/common"
      ";commonb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/support/common.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fcloud_2fsupport_2fcommon_2eproto

const ::google::protobuf::EnumDescriptor* SupportAccount_State_descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_enum_descriptors[0];
}
bool SupportAccount_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SupportAccount_State SupportAccount::STATE_UNSPECIFIED;
const SupportAccount_State SupportAccount::ACTIVE;
const SupportAccount_State SupportAccount::PENDING;
const SupportAccount_State SupportAccount::PENDING_DELETION;
const SupportAccount_State SupportAccount::State_MIN;
const SupportAccount_State SupportAccount::State_MAX;
const int SupportAccount::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SupportAccount_PricingModel_descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_enum_descriptors[1];
}
bool SupportAccount_PricingModel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SupportAccount_PricingModel SupportAccount::PRICING_MODEL_UNKNOWN;
const SupportAccount_PricingModel SupportAccount::PACKAGES;
const SupportAccount_PricingModel SupportAccount::USER_ROLES;
const SupportAccount_PricingModel SupportAccount::PricingModel_MIN;
const SupportAccount_PricingModel SupportAccount::PricingModel_MAX;
const int SupportAccount::PricingModel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Case_Priority_descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_enum_descriptors[2];
}
bool Case_Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Case_Priority Case::PRIORITY_UNSPECIFIED;
const Case_Priority Case::P0;
const Case_Priority Case::P1;
const Case_Priority Case::P2;
const Case_Priority Case::P3;
const Case_Priority Case::P4;
const Case_Priority Case::Priority_MIN;
const Case_Priority Case::Priority_MAX;
const int Case::Priority_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Case_State_descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_enum_descriptors[3];
}
bool Case_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Case_State Case::STATE_UNSPECIFIED;
const Case_State Case::NEW;
const Case_State Case::ASSIGNED;
const Case_State Case::IN_PROGRESS_GOOGLE_SUPPORT;
const Case_State Case::IN_PROGRESS_GOOGLE_ENG;
const Case_State Case::IN_PROGRESS_KNOWN_ISSUE;
const Case_State Case::WAITING_FOR_CUSTOMER_RESPONSE;
const Case_State Case::SOLUTION_OFFERED;
const Case_State Case::CLOSED;
const Case_State Case::State_MIN;
const Case_State Case::State_MAX;
const int Case::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CustomerIssue_IssueState_descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_enum_descriptors[4];
}
bool CustomerIssue_IssueState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CustomerIssue_IssueState CustomerIssue::ISSUE_STATE_UNSPECIFIED;
const CustomerIssue_IssueState CustomerIssue::OPEN;
const CustomerIssue_IssueState CustomerIssue::IN_PROGRESS;
const CustomerIssue_IssueState CustomerIssue::FIXED;
const CustomerIssue_IssueState CustomerIssue::WONT_FIX;
const CustomerIssue_IssueState CustomerIssue::VERIFIED;
const CustomerIssue_IssueState CustomerIssue::IssueState_MIN;
const CustomerIssue_IssueState CustomerIssue::IssueState_MAX;
const int CustomerIssue::IssueState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SupportRole_Role_descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_enum_descriptors[5];
}
bool SupportRole_Role_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SupportRole_Role SupportRole::ROLE_UNSPECIFIED;
const SupportRole_Role SupportRole::BASIC;
const SupportRole_Role SupportRole::DEVELOPER;
const SupportRole_Role SupportRole::OPERATION;
const SupportRole_Role SupportRole::SITE_RELIABILITY;
const SupportRole_Role SupportRole::Role_MIN;
const SupportRole_Role SupportRole::Role_MAX;
const int SupportRole::Role_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SupportAccount::kNameFieldNumber;
const int SupportAccount::kAccountIdFieldNumber;
const int SupportAccount::kCloudResourceFieldNumber;
const int SupportAccount::kDisplayNameFieldNumber;
const int SupportAccount::kStateFieldNumber;
const int SupportAccount::kCreateTimeFieldNumber;
const int SupportAccount::kBillingAccountNameFieldNumber;
const int SupportAccount::kUnifyAccountIdFieldNumber;
const int SupportAccount::kPricingModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SupportAccount::SupportAccount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.support.common.SupportAccount)
}
SupportAccount::SupportAccount(const SupportAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  cloud_resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cloud_resource().size() > 0) {
    cloud_resource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cloud_resource_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  billing_account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.billing_account_name().size() > 0) {
    billing_account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.billing_account_name_);
  }
  unify_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unify_account_id().size() > 0) {
    unify_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unify_account_id_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  ::memcpy(&state_, &from.state_,
    reinterpret_cast<char*>(&pricing_model_) -
    reinterpret_cast<char*>(&state_) + sizeof(pricing_model_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.support.common.SupportAccount)
}

void SupportAccount::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cloud_resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  billing_account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unify_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, reinterpret_cast<char*>(&pricing_model_) -
    reinterpret_cast<char*>(&create_time_) + sizeof(pricing_model_));
  _cached_size_ = 0;
}

SupportAccount::~SupportAccount() {
  // @@protoc_insertion_point(destructor:google.cloud.support.common.SupportAccount)
  SharedDtor();
}

void SupportAccount::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cloud_resource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  billing_account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unify_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete create_time_;
  }
}

void SupportAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SupportAccount::descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SupportAccount& SupportAccount::default_instance() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

SupportAccount* SupportAccount::New(::google::protobuf::Arena* arena) const {
  SupportAccount* n = new SupportAccount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SupportAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.support.common.SupportAccount)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cloud_resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  billing_account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unify_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  ::memset(&state_, 0, reinterpret_cast<char*>(&pricing_model_) -
    reinterpret_cast<char*>(&state_) + sizeof(pricing_model_));
}

bool SupportAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.support.common.SupportAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.SupportAccount.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.SupportAccount.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cloud_resource = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cloud_resource()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cloud_resource().data(), this->cloud_resource().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.SupportAccount.cloud_resource"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.SupportAccount.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.support.common.SupportAccount.State state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::cloud::support::common::SupportAccount_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string billing_account_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billing_account_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->billing_account_name().data(), this->billing_account_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.SupportAccount.billing_account_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unify_account_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unify_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unify_account_id().data(), this->unify_account_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.SupportAccount.unify_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.support.common.SupportAccount.PricingModel pricing_model = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pricing_model(static_cast< ::google::cloud::support::common::SupportAccount_PricingModel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.support.common.SupportAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.support.common.SupportAccount)
  return false;
#undef DO_
}

void SupportAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.support.common.SupportAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportAccount.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportAccount.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account_id(), output);
  }

  // string cloud_resource = 3;
  if (this->cloud_resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cloud_resource().data(), this->cloud_resource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportAccount.cloud_resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cloud_resource(), output);
  }

  // string display_name = 4;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportAccount.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->display_name(), output);
  }

  // .google.cloud.support.common.SupportAccount.State state = 5;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->create_time_, output);
  }

  // string billing_account_name = 7;
  if (this->billing_account_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->billing_account_name().data(), this->billing_account_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportAccount.billing_account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->billing_account_name(), output);
  }

  // string unify_account_id = 8;
  if (this->unify_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unify_account_id().data(), this->unify_account_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportAccount.unify_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->unify_account_id(), output);
  }

  // .google.cloud.support.common.SupportAccount.PricingModel pricing_model = 9;
  if (this->pricing_model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->pricing_model(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.support.common.SupportAccount)
}

::google::protobuf::uint8* SupportAccount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.support.common.SupportAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportAccount.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportAccount.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_id(), target);
  }

  // string cloud_resource = 3;
  if (this->cloud_resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cloud_resource().data(), this->cloud_resource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportAccount.cloud_resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cloud_resource(), target);
  }

  // string display_name = 4;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportAccount.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->display_name(), target);
  }

  // .google.cloud.support.common.SupportAccount.State state = 5;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->create_time_, deterministic, target);
  }

  // string billing_account_name = 7;
  if (this->billing_account_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->billing_account_name().data(), this->billing_account_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportAccount.billing_account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->billing_account_name(), target);
  }

  // string unify_account_id = 8;
  if (this->unify_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unify_account_id().data(), this->unify_account_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportAccount.unify_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->unify_account_id(), target);
  }

  // .google.cloud.support.common.SupportAccount.PricingModel pricing_model = 9;
  if (this->pricing_model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->pricing_model(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.support.common.SupportAccount)
  return target;
}

size_t SupportAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.support.common.SupportAccount)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string cloud_resource = 3;
  if (this->cloud_resource().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cloud_resource());
  }

  // string display_name = 4;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string billing_account_name = 7;
  if (this->billing_account_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->billing_account_name());
  }

  // string unify_account_id = 8;
  if (this->unify_account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unify_account_id());
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // .google.cloud.support.common.SupportAccount.State state = 5;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // .google.cloud.support.common.SupportAccount.PricingModel pricing_model = 9;
  if (this->pricing_model() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pricing_model());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SupportAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.support.common.SupportAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const SupportAccount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SupportAccount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.support.common.SupportAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.support.common.SupportAccount)
    MergeFrom(*source);
  }
}

void SupportAccount::MergeFrom(const SupportAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.support.common.SupportAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.cloud_resource().size() > 0) {

    cloud_resource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cloud_resource_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.billing_account_name().size() > 0) {

    billing_account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.billing_account_name_);
  }
  if (from.unify_account_id().size() > 0) {

    unify_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unify_account_id_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.pricing_model() != 0) {
    set_pricing_model(from.pricing_model());
  }
}

void SupportAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.support.common.SupportAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportAccount::CopyFrom(const SupportAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.support.common.SupportAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportAccount::IsInitialized() const {
  return true;
}

void SupportAccount::Swap(SupportAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SupportAccount::InternalSwap(SupportAccount* other) {
  name_.Swap(&other->name_);
  account_id_.Swap(&other->account_id_);
  cloud_resource_.Swap(&other->cloud_resource_);
  display_name_.Swap(&other->display_name_);
  billing_account_name_.Swap(&other->billing_account_name_);
  unify_account_id_.Swap(&other->unify_account_id_);
  std::swap(create_time_, other->create_time_);
  std::swap(state_, other->state_);
  std::swap(pricing_model_, other->pricing_model_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SupportAccount::GetMetadata() const {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SupportAccount

// string name = 1;
void SupportAccount::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SupportAccount::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.name)
  return name_.GetNoArena();
}
void SupportAccount::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.name)
}
#if LANG_CXX11
void SupportAccount::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportAccount.name)
}
#endif
void SupportAccount::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportAccount.name)
}
void SupportAccount::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportAccount.name)
}
::std::string* SupportAccount::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SupportAccount::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SupportAccount::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.name)
}

// string account_id = 2;
void SupportAccount::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SupportAccount::account_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.account_id)
  return account_id_.GetNoArena();
}
void SupportAccount::set_account_id(const ::std::string& value) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.account_id)
}
#if LANG_CXX11
void SupportAccount::set_account_id(::std::string&& value) {
  
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportAccount.account_id)
}
#endif
void SupportAccount::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportAccount.account_id)
}
void SupportAccount::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportAccount.account_id)
}
::std::string* SupportAccount::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SupportAccount::release_account_id() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.account_id)
  
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SupportAccount::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.account_id)
}

// string cloud_resource = 3;
void SupportAccount::clear_cloud_resource() {
  cloud_resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SupportAccount::cloud_resource() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.cloud_resource)
  return cloud_resource_.GetNoArena();
}
void SupportAccount::set_cloud_resource(const ::std::string& value) {
  
  cloud_resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.cloud_resource)
}
#if LANG_CXX11
void SupportAccount::set_cloud_resource(::std::string&& value) {
  
  cloud_resource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportAccount.cloud_resource)
}
#endif
void SupportAccount::set_cloud_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cloud_resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportAccount.cloud_resource)
}
void SupportAccount::set_cloud_resource(const char* value, size_t size) {
  
  cloud_resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportAccount.cloud_resource)
}
::std::string* SupportAccount::mutable_cloud_resource() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.cloud_resource)
  return cloud_resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SupportAccount::release_cloud_resource() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.cloud_resource)
  
  return cloud_resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SupportAccount::set_allocated_cloud_resource(::std::string* cloud_resource) {
  if (cloud_resource != NULL) {
    
  } else {
    
  }
  cloud_resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cloud_resource);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.cloud_resource)
}

// string display_name = 4;
void SupportAccount::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SupportAccount::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.display_name)
  return display_name_.GetNoArena();
}
void SupportAccount::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.display_name)
}
#if LANG_CXX11
void SupportAccount::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportAccount.display_name)
}
#endif
void SupportAccount::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportAccount.display_name)
}
void SupportAccount::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportAccount.display_name)
}
::std::string* SupportAccount::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SupportAccount::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SupportAccount::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.display_name)
}

// .google.cloud.support.common.SupportAccount.State state = 5;
void SupportAccount::clear_state() {
  state_ = 0;
}
::google::cloud::support::common::SupportAccount_State SupportAccount::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.state)
  return static_cast< ::google::cloud::support::common::SupportAccount_State >(state_);
}
void SupportAccount::set_state(::google::cloud::support::common::SupportAccount_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.state)
}

// .google.protobuf.Timestamp create_time = 6;
bool SupportAccount::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void SupportAccount::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& SupportAccount::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* SupportAccount::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* SupportAccount::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void SupportAccount::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.create_time)
}

// string billing_account_name = 7;
void SupportAccount::clear_billing_account_name() {
  billing_account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SupportAccount::billing_account_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.billing_account_name)
  return billing_account_name_.GetNoArena();
}
void SupportAccount::set_billing_account_name(const ::std::string& value) {
  
  billing_account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.billing_account_name)
}
#if LANG_CXX11
void SupportAccount::set_billing_account_name(::std::string&& value) {
  
  billing_account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportAccount.billing_account_name)
}
#endif
void SupportAccount::set_billing_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  billing_account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportAccount.billing_account_name)
}
void SupportAccount::set_billing_account_name(const char* value, size_t size) {
  
  billing_account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportAccount.billing_account_name)
}
::std::string* SupportAccount::mutable_billing_account_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.billing_account_name)
  return billing_account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SupportAccount::release_billing_account_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.billing_account_name)
  
  return billing_account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SupportAccount::set_allocated_billing_account_name(::std::string* billing_account_name) {
  if (billing_account_name != NULL) {
    
  } else {
    
  }
  billing_account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), billing_account_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.billing_account_name)
}

// string unify_account_id = 8;
void SupportAccount::clear_unify_account_id() {
  unify_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SupportAccount::unify_account_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.unify_account_id)
  return unify_account_id_.GetNoArena();
}
void SupportAccount::set_unify_account_id(const ::std::string& value) {
  
  unify_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.unify_account_id)
}
#if LANG_CXX11
void SupportAccount::set_unify_account_id(::std::string&& value) {
  
  unify_account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportAccount.unify_account_id)
}
#endif
void SupportAccount::set_unify_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unify_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportAccount.unify_account_id)
}
void SupportAccount::set_unify_account_id(const char* value, size_t size) {
  
  unify_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportAccount.unify_account_id)
}
::std::string* SupportAccount::mutable_unify_account_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportAccount.unify_account_id)
  return unify_account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SupportAccount::release_unify_account_id() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportAccount.unify_account_id)
  
  return unify_account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SupportAccount::set_allocated_unify_account_id(::std::string* unify_account_id) {
  if (unify_account_id != NULL) {
    
  } else {
    
  }
  unify_account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unify_account_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportAccount.unify_account_id)
}

// .google.cloud.support.common.SupportAccount.PricingModel pricing_model = 9;
void SupportAccount::clear_pricing_model() {
  pricing_model_ = 0;
}
::google::cloud::support::common::SupportAccount_PricingModel SupportAccount::pricing_model() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportAccount.pricing_model)
  return static_cast< ::google::cloud::support::common::SupportAccount_PricingModel >(pricing_model_);
}
void SupportAccount::set_pricing_model(::google::cloud::support::common::SupportAccount_PricingModel value) {
  
  pricing_model_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportAccount.pricing_model)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Case::kNameFieldNumber;
const int Case::kDisplayNameFieldNumber;
const int Case::kDescriptionFieldNumber;
const int Case::kComponentFieldNumber;
const int Case::kSubcomponentFieldNumber;
const int Case::kClientTimezoneFieldNumber;
const int Case::kCcAddressesFieldNumber;
const int Case::kProjectIdFieldNumber;
const int Case::kIssuesFieldNumber;
const int Case::kPriorityFieldNumber;
const int Case::kStateFieldNumber;
const int Case::kCreateTimeFieldNumber;
const int Case::kUpdateTimeFieldNumber;
const int Case::kCreatorEmailFieldNumber;
const int Case::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Case::Case()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.support.common.Case)
}
Case::Case(const Case& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cc_addresses_(from.cc_addresses_),
      issues_(from.issues_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  component_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.component().size() > 0) {
    component_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.component_);
  }
  subcomponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subcomponent().size() > 0) {
    subcomponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subcomponent_);
  }
  client_timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_timezone().size() > 0) {
    client_timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_timezone_);
  }
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  creator_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.creator_email().size() > 0) {
    creator_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_email_);
  }
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.category().size() > 0) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = NULL;
  }
  ::memcpy(&priority_, &from.priority_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&priority_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.support.common.Case)
}

void Case::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  component_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subcomponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&create_time_) + sizeof(state_));
  _cached_size_ = 0;
}

Case::~Case() {
  // @@protoc_insertion_point(destructor:google.cloud.support.common.Case)
  SharedDtor();
}

void Case::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  component_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subcomponent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete create_time_;
  }
  if (this != internal_default_instance()) {
    delete update_time_;
  }
}

void Case::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Case::descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Case& Case::default_instance() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Case* Case::New(::google::protobuf::Arena* arena) const {
  Case* n = new Case;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Case::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.support.common.Case)
  cc_addresses_.Clear();
  issues_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  component_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subcomponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
  ::memset(&priority_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&priority_) + sizeof(state_));
}

bool Case::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.support.common.Case)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Case.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Case.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Case.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string component = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_component()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->component().data(), this->component().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Case.component"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subcomponent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subcomponent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subcomponent().data(), this->subcomponent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Case.subcomponent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_timezone = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_timezone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_timezone().data(), this->client_timezone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Case.client_timezone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string cc_addresses = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cc_addresses()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cc_addresses(this->cc_addresses_size() - 1).data(),
            this->cc_addresses(this->cc_addresses_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Case.cc_addresses"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Case.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.support.common.CustomerIssue issues = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_issues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.support.common.Case.Priority priority = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_priority(static_cast< ::google::cloud::support::common::Case_Priority >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.support.common.Case.State state = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::cloud::support::common::Case_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string creator_email = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator_email().data(), this->creator_email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Case.creator_email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string category = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Case.category"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.support.common.Case)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.support.common.Case)
  return false;
#undef DO_
}

void Case::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.support.common.Case)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // string component = 4;
  if (this->component().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->component().data(), this->component().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.component");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->component(), output);
  }

  // string subcomponent = 5;
  if (this->subcomponent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subcomponent().data(), this->subcomponent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.subcomponent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->subcomponent(), output);
  }

  // string client_timezone = 6;
  if (this->client_timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_timezone().data(), this->client_timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.client_timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->client_timezone(), output);
  }

  // repeated string cc_addresses = 7;
  for (int i = 0, n = this->cc_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cc_addresses(i).data(), this->cc_addresses(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.cc_addresses");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cc_addresses(i), output);
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // repeated .google.cloud.support.common.CustomerIssue issues = 10;
  for (unsigned int i = 0, n = this->issues_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->issues(i), output);
  }

  // .google.cloud.support.common.Case.Priority priority = 11;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->priority(), output);
  }

  // .google.cloud.support.common.Case.State state = 12;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->state(), output);
  }

  // .google.protobuf.Timestamp create_time = 13;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->create_time_, output);
  }

  // .google.protobuf.Timestamp update_time = 14;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->update_time_, output);
  }

  // string creator_email = 15;
  if (this->creator_email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_email().data(), this->creator_email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.creator_email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->creator_email(), output);
  }

  // string category = 16;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->category(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.support.common.Case)
}

::google::protobuf::uint8* Case::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.support.common.Case)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // string component = 4;
  if (this->component().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->component().data(), this->component().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.component");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->component(), target);
  }

  // string subcomponent = 5;
  if (this->subcomponent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subcomponent().data(), this->subcomponent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.subcomponent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->subcomponent(), target);
  }

  // string client_timezone = 6;
  if (this->client_timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_timezone().data(), this->client_timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.client_timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->client_timezone(), target);
  }

  // repeated string cc_addresses = 7;
  for (int i = 0, n = this->cc_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cc_addresses(i).data(), this->cc_addresses(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.cc_addresses");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->cc_addresses(i), target);
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // repeated .google.cloud.support.common.CustomerIssue issues = 10;
  for (unsigned int i = 0, n = this->issues_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->issues(i), deterministic, target);
  }

  // .google.cloud.support.common.Case.Priority priority = 11;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->priority(), target);
  }

  // .google.cloud.support.common.Case.State state = 12;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->state(), target);
  }

  // .google.protobuf.Timestamp create_time = 13;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->create_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp update_time = 14;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->update_time_, deterministic, target);
  }

  // string creator_email = 15;
  if (this->creator_email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_email().data(), this->creator_email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.creator_email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->creator_email(), target);
  }

  // string category = 16;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Case.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->category(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.support.common.Case)
  return target;
}

size_t Case::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.support.common.Case)
  size_t total_size = 0;

  // repeated string cc_addresses = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cc_addresses_size());
  for (int i = 0, n = this->cc_addresses_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cc_addresses(i));
  }

  // repeated .google.cloud.support.common.CustomerIssue issues = 10;
  {
    unsigned int count = this->issues_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->issues(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string component = 4;
  if (this->component().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->component());
  }

  // string subcomponent = 5;
  if (this->subcomponent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subcomponent());
  }

  // string client_timezone = 6;
  if (this->client_timezone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_timezone());
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string creator_email = 15;
  if (this->creator_email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator_email());
  }

  // string category = 16;
  if (this->category().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());
  }

  // .google.protobuf.Timestamp create_time = 13;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // .google.protobuf.Timestamp update_time = 14;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_time_);
  }

  // .google.cloud.support.common.Case.Priority priority = 11;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  // .google.cloud.support.common.Case.State state = 12;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Case::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.support.common.Case)
  GOOGLE_DCHECK_NE(&from, this);
  const Case* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Case>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.support.common.Case)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.support.common.Case)
    MergeFrom(*source);
  }
}

void Case::MergeFrom(const Case& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.support.common.Case)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cc_addresses_.MergeFrom(from.cc_addresses_);
  issues_.MergeFrom(from.issues_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.component().size() > 0) {

    component_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.component_);
  }
  if (from.subcomponent().size() > 0) {

    subcomponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subcomponent_);
  }
  if (from.client_timezone().size() > 0) {

    client_timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_timezone_);
  }
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.creator_email().size() > 0) {

    creator_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_email_);
  }
  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Case::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.support.common.Case)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Case::CopyFrom(const Case& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.support.common.Case)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Case::IsInitialized() const {
  return true;
}

void Case::Swap(Case* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Case::InternalSwap(Case* other) {
  cc_addresses_.InternalSwap(&other->cc_addresses_);
  issues_.InternalSwap(&other->issues_);
  name_.Swap(&other->name_);
  display_name_.Swap(&other->display_name_);
  description_.Swap(&other->description_);
  component_.Swap(&other->component_);
  subcomponent_.Swap(&other->subcomponent_);
  client_timezone_.Swap(&other->client_timezone_);
  project_id_.Swap(&other->project_id_);
  creator_email_.Swap(&other->creator_email_);
  category_.Swap(&other->category_);
  std::swap(create_time_, other->create_time_);
  std::swap(update_time_, other->update_time_);
  std::swap(priority_, other->priority_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Case::GetMetadata() const {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Case

// string name = 1;
void Case::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Case::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.name)
  return name_.GetNoArena();
}
void Case::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.name)
}
#if LANG_CXX11
void Case::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.name)
}
#endif
void Case::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.name)
}
void Case::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.name)
}
::std::string* Case::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Case::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Case::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.name)
}

// string display_name = 2;
void Case::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Case::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.display_name)
  return display_name_.GetNoArena();
}
void Case::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.display_name)
}
#if LANG_CXX11
void Case::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.display_name)
}
#endif
void Case::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.display_name)
}
void Case::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.display_name)
}
::std::string* Case::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Case::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Case::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.display_name)
}

// string description = 3;
void Case::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Case::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.description)
  return description_.GetNoArena();
}
void Case::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.description)
}
#if LANG_CXX11
void Case::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.description)
}
#endif
void Case::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.description)
}
void Case::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.description)
}
::std::string* Case::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Case::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Case::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.description)
}

// string component = 4;
void Case::clear_component() {
  component_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Case::component() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.component)
  return component_.GetNoArena();
}
void Case::set_component(const ::std::string& value) {
  
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.component)
}
#if LANG_CXX11
void Case::set_component(::std::string&& value) {
  
  component_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.component)
}
#endif
void Case::set_component(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.component)
}
void Case::set_component(const char* value, size_t size) {
  
  component_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.component)
}
::std::string* Case::mutable_component() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.component)
  return component_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Case::release_component() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.component)
  
  return component_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Case::set_allocated_component(::std::string* component) {
  if (component != NULL) {
    
  } else {
    
  }
  component_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), component);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.component)
}

// string subcomponent = 5;
void Case::clear_subcomponent() {
  subcomponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Case::subcomponent() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.subcomponent)
  return subcomponent_.GetNoArena();
}
void Case::set_subcomponent(const ::std::string& value) {
  
  subcomponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.subcomponent)
}
#if LANG_CXX11
void Case::set_subcomponent(::std::string&& value) {
  
  subcomponent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.subcomponent)
}
#endif
void Case::set_subcomponent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subcomponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.subcomponent)
}
void Case::set_subcomponent(const char* value, size_t size) {
  
  subcomponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.subcomponent)
}
::std::string* Case::mutable_subcomponent() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.subcomponent)
  return subcomponent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Case::release_subcomponent() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.subcomponent)
  
  return subcomponent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Case::set_allocated_subcomponent(::std::string* subcomponent) {
  if (subcomponent != NULL) {
    
  } else {
    
  }
  subcomponent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subcomponent);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.subcomponent)
}

// string client_timezone = 6;
void Case::clear_client_timezone() {
  client_timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Case::client_timezone() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.client_timezone)
  return client_timezone_.GetNoArena();
}
void Case::set_client_timezone(const ::std::string& value) {
  
  client_timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.client_timezone)
}
#if LANG_CXX11
void Case::set_client_timezone(::std::string&& value) {
  
  client_timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.client_timezone)
}
#endif
void Case::set_client_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.client_timezone)
}
void Case::set_client_timezone(const char* value, size_t size) {
  
  client_timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.client_timezone)
}
::std::string* Case::mutable_client_timezone() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.client_timezone)
  return client_timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Case::release_client_timezone() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.client_timezone)
  
  return client_timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Case::set_allocated_client_timezone(::std::string* client_timezone) {
  if (client_timezone != NULL) {
    
  } else {
    
  }
  client_timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_timezone);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.client_timezone)
}

// repeated string cc_addresses = 7;
int Case::cc_addresses_size() const {
  return cc_addresses_.size();
}
void Case::clear_cc_addresses() {
  cc_addresses_.Clear();
}
const ::std::string& Case::cc_addresses(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.cc_addresses)
  return cc_addresses_.Get(index);
}
::std::string* Case::mutable_cc_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.cc_addresses)
  return cc_addresses_.Mutable(index);
}
void Case::set_cc_addresses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.cc_addresses)
  cc_addresses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Case::set_cc_addresses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.cc_addresses)
  cc_addresses_.Mutable(index)->assign(std::move(value));
}
#endif
void Case::set_cc_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cc_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.cc_addresses)
}
void Case::set_cc_addresses(int index, const char* value, size_t size) {
  cc_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.cc_addresses)
}
::std::string* Case::add_cc_addresses() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.support.common.Case.cc_addresses)
  return cc_addresses_.Add();
}
void Case::add_cc_addresses(const ::std::string& value) {
  cc_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.support.common.Case.cc_addresses)
}
#if LANG_CXX11
void Case::add_cc_addresses(::std::string&& value) {
  cc_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.support.common.Case.cc_addresses)
}
#endif
void Case::add_cc_addresses(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cc_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.support.common.Case.cc_addresses)
}
void Case::add_cc_addresses(const char* value, size_t size) {
  cc_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.support.common.Case.cc_addresses)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Case::cc_addresses() const {
  // @@protoc_insertion_point(field_list:google.cloud.support.common.Case.cc_addresses)
  return cc_addresses_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Case::mutable_cc_addresses() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.support.common.Case.cc_addresses)
  return &cc_addresses_;
}

// string project_id = 8;
void Case::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Case::project_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.project_id)
  return project_id_.GetNoArena();
}
void Case::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.project_id)
}
#if LANG_CXX11
void Case::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.project_id)
}
#endif
void Case::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.project_id)
}
void Case::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.project_id)
}
::std::string* Case::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Case::release_project_id() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Case::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.project_id)
}

// repeated .google.cloud.support.common.CustomerIssue issues = 10;
int Case::issues_size() const {
  return issues_.size();
}
void Case::clear_issues() {
  issues_.Clear();
}
const ::google::cloud::support::common::CustomerIssue& Case::issues(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.issues)
  return issues_.Get(index);
}
::google::cloud::support::common::CustomerIssue* Case::mutable_issues(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.issues)
  return issues_.Mutable(index);
}
::google::cloud::support::common::CustomerIssue* Case::add_issues() {
  // @@protoc_insertion_point(field_add:google.cloud.support.common.Case.issues)
  return issues_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::CustomerIssue >*
Case::mutable_issues() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.support.common.Case.issues)
  return &issues_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::CustomerIssue >&
Case::issues() const {
  // @@protoc_insertion_point(field_list:google.cloud.support.common.Case.issues)
  return issues_;
}

// .google.cloud.support.common.Case.Priority priority = 11;
void Case::clear_priority() {
  priority_ = 0;
}
::google::cloud::support::common::Case_Priority Case::priority() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.priority)
  return static_cast< ::google::cloud::support::common::Case_Priority >(priority_);
}
void Case::set_priority(::google::cloud::support::common::Case_Priority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.priority)
}

// .google.cloud.support.common.Case.State state = 12;
void Case::clear_state() {
  state_ = 0;
}
::google::cloud::support::common::Case_State Case::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.state)
  return static_cast< ::google::cloud::support::common::Case_State >(state_);
}
void Case::set_state(::google::cloud::support::common::Case_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.state)
}

// .google.protobuf.Timestamp create_time = 13;
bool Case::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void Case::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& Case::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Case::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* Case::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void Case::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.create_time)
}

// .google.protobuf.Timestamp update_time = 14;
bool Case::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
void Case::clear_update_time() {
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) delete update_time_;
  update_time_ = NULL;
}
const ::google::protobuf::Timestamp& Case::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.update_time)
  return update_time_ != NULL ? *update_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Case::mutable_update_time() {
  
  if (update_time_ == NULL) {
    update_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.update_time)
  return update_time_;
}
::google::protobuf::Timestamp* Case::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
void Case::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  delete update_time_;
  if (update_time != NULL && update_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_update_time = new ::google::protobuf::Timestamp;
    new_update_time->CopyFrom(*update_time);
    update_time = new_update_time;
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.update_time)
}

// string creator_email = 15;
void Case::clear_creator_email() {
  creator_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Case::creator_email() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.creator_email)
  return creator_email_.GetNoArena();
}
void Case::set_creator_email(const ::std::string& value) {
  
  creator_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.creator_email)
}
#if LANG_CXX11
void Case::set_creator_email(::std::string&& value) {
  
  creator_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.creator_email)
}
#endif
void Case::set_creator_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  creator_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.creator_email)
}
void Case::set_creator_email(const char* value, size_t size) {
  
  creator_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.creator_email)
}
::std::string* Case::mutable_creator_email() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.creator_email)
  return creator_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Case::release_creator_email() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.creator_email)
  
  return creator_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Case::set_allocated_creator_email(::std::string* creator_email) {
  if (creator_email != NULL) {
    
  } else {
    
  }
  creator_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_email);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.creator_email)
}

// string category = 16;
void Case::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Case::category() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Case.category)
  return category_.GetNoArena();
}
void Case::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Case.category)
}
#if LANG_CXX11
void Case::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Case.category)
}
#endif
void Case::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Case.category)
}
void Case::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Case.category)
}
::std::string* Case::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Case.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Case::release_category() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Case.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Case::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Case.category)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomerIssue::kIssueIdFieldNumber;
const int CustomerIssue::kStateFieldNumber;
const int CustomerIssue::kCreateTimeFieldNumber;
const int CustomerIssue::kResolveTimeFieldNumber;
const int CustomerIssue::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomerIssue::CustomerIssue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.support.common.CustomerIssue)
}
CustomerIssue::CustomerIssue(const CustomerIssue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issue_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.issue_id().size() > 0) {
    issue_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issue_id_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_resolve_time()) {
    resolve_time_ = new ::google::protobuf::Timestamp(*from.resolve_time_);
  } else {
    resolve_time_ = NULL;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.support.common.CustomerIssue)
}

void CustomerIssue::SharedCtor() {
  issue_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&create_time_) + sizeof(state_));
  _cached_size_ = 0;
}

CustomerIssue::~CustomerIssue() {
  // @@protoc_insertion_point(destructor:google.cloud.support.common.CustomerIssue)
  SharedDtor();
}

void CustomerIssue::SharedDtor() {
  issue_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete create_time_;
  }
  if (this != internal_default_instance()) {
    delete resolve_time_;
  }
  if (this != internal_default_instance()) {
    delete update_time_;
  }
}

void CustomerIssue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomerIssue::descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomerIssue& CustomerIssue::default_instance() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomerIssue* CustomerIssue::New(::google::protobuf::Arena* arena) const {
  CustomerIssue* n = new CustomerIssue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomerIssue::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.support.common.CustomerIssue)
  issue_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && resolve_time_ != NULL) {
    delete resolve_time_;
  }
  resolve_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
  state_ = 0;
}

bool CustomerIssue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.support.common.CustomerIssue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string issue_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issue_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->issue_id().data(), this->issue_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.CustomerIssue.issue_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.support.common.CustomerIssue.IssueState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::cloud::support::common::CustomerIssue_IssueState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp resolve_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolve_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.support.common.CustomerIssue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.support.common.CustomerIssue)
  return false;
#undef DO_
}

void CustomerIssue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.support.common.CustomerIssue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string issue_id = 1;
  if (this->issue_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->issue_id().data(), this->issue_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.CustomerIssue.issue_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->issue_id(), output);
  }

  // .google.cloud.support.common.CustomerIssue.IssueState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // .google.protobuf.Timestamp create_time = 3;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->create_time_, output);
  }

  // .google.protobuf.Timestamp resolve_time = 4;
  if (this->has_resolve_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->resolve_time_, output);
  }

  // .google.protobuf.Timestamp update_time = 5;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->update_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.support.common.CustomerIssue)
}

::google::protobuf::uint8* CustomerIssue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.support.common.CustomerIssue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string issue_id = 1;
  if (this->issue_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->issue_id().data(), this->issue_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.CustomerIssue.issue_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->issue_id(), target);
  }

  // .google.cloud.support.common.CustomerIssue.IssueState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // .google.protobuf.Timestamp create_time = 3;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->create_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp resolve_time = 4;
  if (this->has_resolve_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->resolve_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp update_time = 5;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->update_time_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.support.common.CustomerIssue)
  return target;
}

size_t CustomerIssue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.support.common.CustomerIssue)
  size_t total_size = 0;

  // string issue_id = 1;
  if (this->issue_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->issue_id());
  }

  // .google.protobuf.Timestamp create_time = 3;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // .google.protobuf.Timestamp resolve_time = 4;
  if (this->has_resolve_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resolve_time_);
  }

  // .google.protobuf.Timestamp update_time = 5;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_time_);
  }

  // .google.cloud.support.common.CustomerIssue.IssueState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomerIssue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.support.common.CustomerIssue)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomerIssue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomerIssue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.support.common.CustomerIssue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.support.common.CustomerIssue)
    MergeFrom(*source);
  }
}

void CustomerIssue::MergeFrom(const CustomerIssue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.support.common.CustomerIssue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.issue_id().size() > 0) {

    issue_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issue_id_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_resolve_time()) {
    mutable_resolve_time()->::google::protobuf::Timestamp::MergeFrom(from.resolve_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void CustomerIssue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.support.common.CustomerIssue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerIssue::CopyFrom(const CustomerIssue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.support.common.CustomerIssue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerIssue::IsInitialized() const {
  return true;
}

void CustomerIssue::Swap(CustomerIssue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomerIssue::InternalSwap(CustomerIssue* other) {
  issue_id_.Swap(&other->issue_id_);
  std::swap(create_time_, other->create_time_);
  std::swap(resolve_time_, other->resolve_time_);
  std::swap(update_time_, other->update_time_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomerIssue::GetMetadata() const {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomerIssue

// string issue_id = 1;
void CustomerIssue::clear_issue_id() {
  issue_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CustomerIssue::issue_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.CustomerIssue.issue_id)
  return issue_id_.GetNoArena();
}
void CustomerIssue::set_issue_id(const ::std::string& value) {
  
  issue_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.CustomerIssue.issue_id)
}
#if LANG_CXX11
void CustomerIssue::set_issue_id(::std::string&& value) {
  
  issue_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.CustomerIssue.issue_id)
}
#endif
void CustomerIssue::set_issue_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  issue_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.CustomerIssue.issue_id)
}
void CustomerIssue::set_issue_id(const char* value, size_t size) {
  
  issue_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.CustomerIssue.issue_id)
}
::std::string* CustomerIssue::mutable_issue_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.CustomerIssue.issue_id)
  return issue_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CustomerIssue::release_issue_id() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.CustomerIssue.issue_id)
  
  return issue_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CustomerIssue::set_allocated_issue_id(::std::string* issue_id) {
  if (issue_id != NULL) {
    
  } else {
    
  }
  issue_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issue_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.CustomerIssue.issue_id)
}

// .google.cloud.support.common.CustomerIssue.IssueState state = 2;
void CustomerIssue::clear_state() {
  state_ = 0;
}
::google::cloud::support::common::CustomerIssue_IssueState CustomerIssue::state() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.CustomerIssue.state)
  return static_cast< ::google::cloud::support::common::CustomerIssue_IssueState >(state_);
}
void CustomerIssue::set_state(::google::cloud::support::common::CustomerIssue_IssueState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.common.CustomerIssue.state)
}

// .google.protobuf.Timestamp create_time = 3;
bool CustomerIssue::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void CustomerIssue::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& CustomerIssue::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.CustomerIssue.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* CustomerIssue::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.CustomerIssue.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* CustomerIssue::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.CustomerIssue.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void CustomerIssue::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.CustomerIssue.create_time)
}

// .google.protobuf.Timestamp resolve_time = 4;
bool CustomerIssue::has_resolve_time() const {
  return this != internal_default_instance() && resolve_time_ != NULL;
}
void CustomerIssue::clear_resolve_time() {
  if (GetArenaNoVirtual() == NULL && resolve_time_ != NULL) delete resolve_time_;
  resolve_time_ = NULL;
}
const ::google::protobuf::Timestamp& CustomerIssue::resolve_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.CustomerIssue.resolve_time)
  return resolve_time_ != NULL ? *resolve_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* CustomerIssue::mutable_resolve_time() {
  
  if (resolve_time_ == NULL) {
    resolve_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.CustomerIssue.resolve_time)
  return resolve_time_;
}
::google::protobuf::Timestamp* CustomerIssue::release_resolve_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.CustomerIssue.resolve_time)
  
  ::google::protobuf::Timestamp* temp = resolve_time_;
  resolve_time_ = NULL;
  return temp;
}
void CustomerIssue::set_allocated_resolve_time(::google::protobuf::Timestamp* resolve_time) {
  delete resolve_time_;
  if (resolve_time != NULL && resolve_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_resolve_time = new ::google::protobuf::Timestamp;
    new_resolve_time->CopyFrom(*resolve_time);
    resolve_time = new_resolve_time;
  }
  resolve_time_ = resolve_time;
  if (resolve_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.CustomerIssue.resolve_time)
}

// .google.protobuf.Timestamp update_time = 5;
bool CustomerIssue::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
void CustomerIssue::clear_update_time() {
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) delete update_time_;
  update_time_ = NULL;
}
const ::google::protobuf::Timestamp& CustomerIssue::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.CustomerIssue.update_time)
  return update_time_ != NULL ? *update_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* CustomerIssue::mutable_update_time() {
  
  if (update_time_ == NULL) {
    update_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.CustomerIssue.update_time)
  return update_time_;
}
::google::protobuf::Timestamp* CustomerIssue::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.CustomerIssue.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
void CustomerIssue::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  delete update_time_;
  if (update_time != NULL && update_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_update_time = new ::google::protobuf::Timestamp;
    new_update_time->CopyFrom(*update_time);
    update_time = new_update_time;
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.CustomerIssue.update_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SupportRole::kEmailFieldNumber;
const int SupportRole::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SupportRole::SupportRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.support.common.SupportRole)
}
SupportRole::SupportRole(const SupportRole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.email().size() > 0) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  role_ = from.role_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.support.common.SupportRole)
}

void SupportRole::SharedCtor() {
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = 0;
  _cached_size_ = 0;
}

SupportRole::~SupportRole() {
  // @@protoc_insertion_point(destructor:google.cloud.support.common.SupportRole)
  SharedDtor();
}

void SupportRole::SharedDtor() {
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SupportRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SupportRole::descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SupportRole& SupportRole::default_instance() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

SupportRole* SupportRole::New(::google::protobuf::Arena* arena) const {
  SupportRole* n = new SupportRole;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SupportRole::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.support.common.SupportRole)
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = 0;
}

bool SupportRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.support.common.SupportRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string email = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.SupportRole.email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.support.common.SupportRole.Role role = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_role(static_cast< ::google::cloud::support::common::SupportRole_Role >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.support.common.SupportRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.support.common.SupportRole)
  return false;
#undef DO_
}

void SupportRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.support.common.SupportRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportRole.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // .google.cloud.support.common.SupportRole.Role role = 2;
  if (this->role() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->role(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.support.common.SupportRole)
}

::google::protobuf::uint8* SupportRole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.support.common.SupportRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.SupportRole.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email(), target);
  }

  // .google.cloud.support.common.SupportRole.Role role = 2;
  if (this->role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->role(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.support.common.SupportRole)
  return target;
}

size_t SupportRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.support.common.SupportRole)
  size_t total_size = 0;

  // string email = 1;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // .google.cloud.support.common.SupportRole.Role role = 2;
  if (this->role() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SupportRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.support.common.SupportRole)
  GOOGLE_DCHECK_NE(&from, this);
  const SupportRole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SupportRole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.support.common.SupportRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.support.common.SupportRole)
    MergeFrom(*source);
  }
}

void SupportRole::MergeFrom(const SupportRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.support.common.SupportRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.role() != 0) {
    set_role(from.role());
  }
}

void SupportRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.support.common.SupportRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportRole::CopyFrom(const SupportRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.support.common.SupportRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportRole::IsInitialized() const {
  return true;
}

void SupportRole::Swap(SupportRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SupportRole::InternalSwap(SupportRole* other) {
  email_.Swap(&other->email_);
  std::swap(role_, other->role_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SupportRole::GetMetadata() const {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SupportRole

// string email = 1;
void SupportRole::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SupportRole::email() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportRole.email)
  return email_.GetNoArena();
}
void SupportRole::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportRole.email)
}
#if LANG_CXX11
void SupportRole::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.SupportRole.email)
}
#endif
void SupportRole::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.SupportRole.email)
}
void SupportRole::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.SupportRole.email)
}
::std::string* SupportRole::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.SupportRole.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SupportRole::release_email() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.SupportRole.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SupportRole::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.SupportRole.email)
}

// .google.cloud.support.common.SupportRole.Role role = 2;
void SupportRole::clear_role() {
  role_ = 0;
}
::google::cloud::support::common::SupportRole_Role SupportRole::role() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.SupportRole.role)
  return static_cast< ::google::cloud::support::common::SupportRole_Role >(role_);
}
void SupportRole::set_role(::google::cloud::support::common::SupportRole_Role value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.support.common.SupportRole.role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Comment::kTextFieldNumber;
const int Comment::kCreateTimeFieldNumber;
const int Comment::kAuthorFieldNumber;
const int Comment::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Comment::Comment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.support.common.Comment)
}
Comment::Comment(const Comment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.author().size() > 0) {
    author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.support.common.Comment)
}

void Comment::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = NULL;
  _cached_size_ = 0;
}

Comment::~Comment() {
  // @@protoc_insertion_point(destructor:google.cloud.support.common.Comment)
  SharedDtor();
}

void Comment::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete create_time_;
  }
}

void Comment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Comment::descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Comment& Comment::default_instance() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Comment* Comment::New(::google::protobuf::Arena* arena) const {
  Comment* n = new Comment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Comment::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.support.common.Comment)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
}

bool Comment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.support.common.Comment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Comment.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string author = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Comment.author"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.Comment.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.support.common.Comment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.support.common.Comment)
  return false;
#undef DO_
}

void Comment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.support.common.Comment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Comment.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->create_time_, output);
  }

  // string author = 3;
  if (this->author().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Comment.author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->author(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Comment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.support.common.Comment)
}

::google::protobuf::uint8* Comment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.support.common.Comment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Comment.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->create_time_, deterministic, target);
  }

  // string author = 3;
  if (this->author().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Comment.author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->author(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.Comment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.support.common.Comment)
  return target;
}

size_t Comment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.support.common.Comment)
  size_t total_size = 0;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // string author = 3;
  if (this->author().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Comment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.support.common.Comment)
  GOOGLE_DCHECK_NE(&from, this);
  const Comment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Comment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.support.common.Comment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.support.common.Comment)
    MergeFrom(*source);
  }
}

void Comment::MergeFrom(const Comment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.support.common.Comment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.author().size() > 0) {

    author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
}

void Comment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.support.common.Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Comment::CopyFrom(const Comment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.support.common.Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comment::IsInitialized() const {
  return true;
}

void Comment::Swap(Comment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Comment::InternalSwap(Comment* other) {
  text_.Swap(&other->text_);
  author_.Swap(&other->author_);
  name_.Swap(&other->name_);
  std::swap(create_time_, other->create_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Comment::GetMetadata() const {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Comment

// string text = 1;
void Comment::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Comment::text() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Comment.text)
  return text_.GetNoArena();
}
void Comment::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Comment.text)
}
#if LANG_CXX11
void Comment::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Comment.text)
}
#endif
void Comment::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Comment.text)
}
void Comment::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Comment.text)
}
::std::string* Comment::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Comment.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Comment::release_text() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Comment.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Comment::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Comment.text)
}

// .google.protobuf.Timestamp create_time = 2;
bool Comment::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void Comment::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& Comment::create_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Comment.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Comment::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Comment.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* Comment::release_create_time() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Comment.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void Comment::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Comment.create_time)
}

// string author = 3;
void Comment::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Comment::author() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Comment.author)
  return author_.GetNoArena();
}
void Comment::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Comment.author)
}
#if LANG_CXX11
void Comment::set_author(::std::string&& value) {
  
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Comment.author)
}
#endif
void Comment::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Comment.author)
}
void Comment::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Comment.author)
}
::std::string* Comment::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Comment.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Comment::release_author() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Comment.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Comment::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Comment.author)
}

// string name = 4;
void Comment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Comment::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.Comment.name)
  return name_.GetNoArena();
}
void Comment::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.Comment.name)
}
#if LANG_CXX11
void Comment::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.Comment.name)
}
#endif
void Comment::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.Comment.name)
}
void Comment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.Comment.name)
}
::std::string* Comment::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.Comment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Comment::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.Comment.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Comment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.Comment.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IssueTaxonomy_Component::kDisplayNameFieldNumber;
const int IssueTaxonomy_Component::kLanguagesFieldNumber;
const int IssueTaxonomy_Component::kTemplateFieldNumber;
const int IssueTaxonomy_Component::kSubcomponentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IssueTaxonomy_Component::IssueTaxonomy_Component()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.support.common.IssueTaxonomy.Component)
}
IssueTaxonomy_Component::IssueTaxonomy_Component(const IssueTaxonomy_Component& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      languages_(from.languages_),
      subcomponents_(from.subcomponents_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  template__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.template_().size() > 0) {
    template__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template__);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.support.common.IssueTaxonomy.Component)
}

void IssueTaxonomy_Component::SharedCtor() {
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

IssueTaxonomy_Component::~IssueTaxonomy_Component() {
  // @@protoc_insertion_point(destructor:google.cloud.support.common.IssueTaxonomy.Component)
  SharedDtor();
}

void IssueTaxonomy_Component::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IssueTaxonomy_Component::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IssueTaxonomy_Component::descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IssueTaxonomy_Component& IssueTaxonomy_Component::default_instance() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

IssueTaxonomy_Component* IssueTaxonomy_Component::New(::google::protobuf::Arena* arena) const {
  IssueTaxonomy_Component* n = new IssueTaxonomy_Component;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IssueTaxonomy_Component::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.support.common.IssueTaxonomy.Component)
  languages_.Clear();
  subcomponents_.Clear();
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IssueTaxonomy_Component::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.support.common.IssueTaxonomy.Component)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string display_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.IssueTaxonomy.Component.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string languages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_languages()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->languages(this->languages_size() - 1).data(),
            this->languages(this->languages_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.IssueTaxonomy.Component.languages"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string template = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->template_().data(), this->template_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.IssueTaxonomy.Component.template"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.support.common.IssueTaxonomy.Component subcomponents = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subcomponents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.support.common.IssueTaxonomy.Component)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.support.common.IssueTaxonomy.Component)
  return false;
#undef DO_
}

void IssueTaxonomy_Component::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.support.common.IssueTaxonomy.Component)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.IssueTaxonomy.Component.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->display_name(), output);
  }

  // repeated string languages = 2;
  for (int i = 0, n = this->languages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->languages(i).data(), this->languages(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.IssueTaxonomy.Component.languages");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->languages(i), output);
  }

  // string template = 3;
  if (this->template_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->template_().data(), this->template_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.IssueTaxonomy.Component.template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->template_(), output);
  }

  // repeated .google.cloud.support.common.IssueTaxonomy.Component subcomponents = 4;
  for (unsigned int i = 0, n = this->subcomponents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->subcomponents(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.support.common.IssueTaxonomy.Component)
}

::google::protobuf::uint8* IssueTaxonomy_Component::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.support.common.IssueTaxonomy.Component)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.IssueTaxonomy.Component.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->display_name(), target);
  }

  // repeated string languages = 2;
  for (int i = 0, n = this->languages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->languages(i).data(), this->languages(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.IssueTaxonomy.Component.languages");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->languages(i), target);
  }

  // string template = 3;
  if (this->template_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->template_().data(), this->template_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.IssueTaxonomy.Component.template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->template_(), target);
  }

  // repeated .google.cloud.support.common.IssueTaxonomy.Component subcomponents = 4;
  for (unsigned int i = 0, n = this->subcomponents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->subcomponents(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.support.common.IssueTaxonomy.Component)
  return target;
}

size_t IssueTaxonomy_Component::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.support.common.IssueTaxonomy.Component)
  size_t total_size = 0;

  // repeated string languages = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->languages_size());
  for (int i = 0, n = this->languages_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->languages(i));
  }

  // repeated .google.cloud.support.common.IssueTaxonomy.Component subcomponents = 4;
  {
    unsigned int count = this->subcomponents_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subcomponents(i));
    }
  }

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string template = 3;
  if (this->template_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->template_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IssueTaxonomy_Component::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.support.common.IssueTaxonomy.Component)
  GOOGLE_DCHECK_NE(&from, this);
  const IssueTaxonomy_Component* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IssueTaxonomy_Component>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.support.common.IssueTaxonomy.Component)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.support.common.IssueTaxonomy.Component)
    MergeFrom(*source);
  }
}

void IssueTaxonomy_Component::MergeFrom(const IssueTaxonomy_Component& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.support.common.IssueTaxonomy.Component)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  languages_.MergeFrom(from.languages_);
  subcomponents_.MergeFrom(from.subcomponents_);
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.template_().size() > 0) {

    template__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template__);
  }
}

void IssueTaxonomy_Component::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.support.common.IssueTaxonomy.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IssueTaxonomy_Component::CopyFrom(const IssueTaxonomy_Component& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.support.common.IssueTaxonomy.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IssueTaxonomy_Component::IsInitialized() const {
  return true;
}

void IssueTaxonomy_Component::Swap(IssueTaxonomy_Component* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IssueTaxonomy_Component::InternalSwap(IssueTaxonomy_Component* other) {
  languages_.InternalSwap(&other->languages_);
  subcomponents_.InternalSwap(&other->subcomponents_);
  display_name_.Swap(&other->display_name_);
  template__.Swap(&other->template__);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IssueTaxonomy_Component::GetMetadata() const {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IssueTaxonomy_Component

// string display_name = 1;
void IssueTaxonomy_Component::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IssueTaxonomy_Component::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.IssueTaxonomy.Component.display_name)
  return display_name_.GetNoArena();
}
void IssueTaxonomy_Component::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.IssueTaxonomy.Component.display_name)
}
#if LANG_CXX11
void IssueTaxonomy_Component::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.IssueTaxonomy.Component.display_name)
}
#endif
void IssueTaxonomy_Component::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.IssueTaxonomy.Component.display_name)
}
void IssueTaxonomy_Component::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.IssueTaxonomy.Component.display_name)
}
::std::string* IssueTaxonomy_Component::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.IssueTaxonomy.Component.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IssueTaxonomy_Component::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.IssueTaxonomy.Component.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IssueTaxonomy_Component::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.IssueTaxonomy.Component.display_name)
}

// repeated string languages = 2;
int IssueTaxonomy_Component::languages_size() const {
  return languages_.size();
}
void IssueTaxonomy_Component::clear_languages() {
  languages_.Clear();
}
const ::std::string& IssueTaxonomy_Component::languages(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.IssueTaxonomy.Component.languages)
  return languages_.Get(index);
}
::std::string* IssueTaxonomy_Component::mutable_languages(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.IssueTaxonomy.Component.languages)
  return languages_.Mutable(index);
}
void IssueTaxonomy_Component::set_languages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.support.common.IssueTaxonomy.Component.languages)
  languages_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void IssueTaxonomy_Component::set_languages(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.support.common.IssueTaxonomy.Component.languages)
  languages_.Mutable(index)->assign(std::move(value));
}
#endif
void IssueTaxonomy_Component::set_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.IssueTaxonomy.Component.languages)
}
void IssueTaxonomy_Component::set_languages(int index, const char* value, size_t size) {
  languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.IssueTaxonomy.Component.languages)
}
::std::string* IssueTaxonomy_Component::add_languages() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.support.common.IssueTaxonomy.Component.languages)
  return languages_.Add();
}
void IssueTaxonomy_Component::add_languages(const ::std::string& value) {
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.support.common.IssueTaxonomy.Component.languages)
}
#if LANG_CXX11
void IssueTaxonomy_Component::add_languages(::std::string&& value) {
  languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.support.common.IssueTaxonomy.Component.languages)
}
#endif
void IssueTaxonomy_Component::add_languages(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.support.common.IssueTaxonomy.Component.languages)
}
void IssueTaxonomy_Component::add_languages(const char* value, size_t size) {
  languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.support.common.IssueTaxonomy.Component.languages)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
IssueTaxonomy_Component::languages() const {
  // @@protoc_insertion_point(field_list:google.cloud.support.common.IssueTaxonomy.Component.languages)
  return languages_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
IssueTaxonomy_Component::mutable_languages() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.support.common.IssueTaxonomy.Component.languages)
  return &languages_;
}

// string template = 3;
void IssueTaxonomy_Component::clear_template_() {
  template__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IssueTaxonomy_Component::template_() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.IssueTaxonomy.Component.template)
  return template__.GetNoArena();
}
void IssueTaxonomy_Component::set_template_(const ::std::string& value) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.IssueTaxonomy.Component.template)
}
#if LANG_CXX11
void IssueTaxonomy_Component::set_template_(::std::string&& value) {
  
  template__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.IssueTaxonomy.Component.template)
}
#endif
void IssueTaxonomy_Component::set_template_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.IssueTaxonomy.Component.template)
}
void IssueTaxonomy_Component::set_template_(const char* value, size_t size) {
  
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.IssueTaxonomy.Component.template)
}
::std::string* IssueTaxonomy_Component::mutable_template_() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.IssueTaxonomy.Component.template)
  return template__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IssueTaxonomy_Component::release_template_() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.IssueTaxonomy.Component.template)
  
  return template__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IssueTaxonomy_Component::set_allocated_template_(::std::string* template_) {
  if (template_ != NULL) {
    
  } else {
    
  }
  template__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), template_);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.IssueTaxonomy.Component.template)
}

// repeated .google.cloud.support.common.IssueTaxonomy.Component subcomponents = 4;
int IssueTaxonomy_Component::subcomponents_size() const {
  return subcomponents_.size();
}
void IssueTaxonomy_Component::clear_subcomponents() {
  subcomponents_.Clear();
}
const ::google::cloud::support::common::IssueTaxonomy_Component& IssueTaxonomy_Component::subcomponents(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.IssueTaxonomy.Component.subcomponents)
  return subcomponents_.Get(index);
}
::google::cloud::support::common::IssueTaxonomy_Component* IssueTaxonomy_Component::mutable_subcomponents(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.IssueTaxonomy.Component.subcomponents)
  return subcomponents_.Mutable(index);
}
::google::cloud::support::common::IssueTaxonomy_Component* IssueTaxonomy_Component::add_subcomponents() {
  // @@protoc_insertion_point(field_add:google.cloud.support.common.IssueTaxonomy.Component.subcomponents)
  return subcomponents_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::IssueTaxonomy_Component >*
IssueTaxonomy_Component::mutable_subcomponents() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.support.common.IssueTaxonomy.Component.subcomponents)
  return &subcomponents_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::support::common::IssueTaxonomy_Component >&
IssueTaxonomy_Component::subcomponents() const {
  // @@protoc_insertion_point(field_list:google.cloud.support.common.IssueTaxonomy.Component.subcomponents)
  return subcomponents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

IssueTaxonomy_Category::IssueTaxonomy_Category_ComponentsEntry::IssueTaxonomy_Category_ComponentsEntry() {}
IssueTaxonomy_Category::IssueTaxonomy_Category_ComponentsEntry::IssueTaxonomy_Category_ComponentsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata IssueTaxonomy_Category::IssueTaxonomy_Category_ComponentsEntry::GetMetadata() const {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[6];
}
void IssueTaxonomy_Category::IssueTaxonomy_Category_ComponentsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void IssueTaxonomy_Category::IssueTaxonomy_Category_ComponentsEntry::MergeFrom(const IssueTaxonomy_Category_ComponentsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IssueTaxonomy_Category::kDisplayNameFieldNumber;
const int IssueTaxonomy_Category::kComponentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IssueTaxonomy_Category::IssueTaxonomy_Category()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.support.common.IssueTaxonomy.Category)
}
IssueTaxonomy_Category::IssueTaxonomy_Category(const IssueTaxonomy_Category& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  components_.MergeFrom(from.components_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.support.common.IssueTaxonomy.Category)
}

void IssueTaxonomy_Category::SharedCtor() {
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

IssueTaxonomy_Category::~IssueTaxonomy_Category() {
  // @@protoc_insertion_point(destructor:google.cloud.support.common.IssueTaxonomy.Category)
  SharedDtor();
}

void IssueTaxonomy_Category::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IssueTaxonomy_Category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IssueTaxonomy_Category::descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IssueTaxonomy_Category& IssueTaxonomy_Category::default_instance() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

IssueTaxonomy_Category* IssueTaxonomy_Category::New(::google::protobuf::Arena* arena) const {
  IssueTaxonomy_Category* n = new IssueTaxonomy_Category;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IssueTaxonomy_Category::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.support.common.IssueTaxonomy.Category)
  components_.Clear();
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IssueTaxonomy_Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.support.common.IssueTaxonomy.Category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string display_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.IssueTaxonomy.Category.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.cloud.support.common.IssueTaxonomy.Component> components = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          IssueTaxonomy_Category_ComponentsEntry::Parser< ::google::protobuf::internal::MapField<
              IssueTaxonomy_Category_ComponentsEntry,
              ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component > > parser(&components_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.IssueTaxonomy.Category.ComponentsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.support.common.IssueTaxonomy.Category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.support.common.IssueTaxonomy.Category)
  return false;
#undef DO_
}

void IssueTaxonomy_Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.support.common.IssueTaxonomy.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.IssueTaxonomy.Category.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->display_name(), output);
  }

  // map<string, .google.cloud.support.common.IssueTaxonomy.Component> components = 2;
  if (!this->components().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.support.common.IssueTaxonomy.Category.ComponentsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->components().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->components().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >::const_iterator
          it = this->components().begin();
          it != this->components().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<IssueTaxonomy_Category_ComponentsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(components_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<IssueTaxonomy_Category_ComponentsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >::const_iterator
          it = this->components().begin();
          it != this->components().end(); ++it) {
        entry.reset(components_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.support.common.IssueTaxonomy.Category)
}

::google::protobuf::uint8* IssueTaxonomy_Category::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.support.common.IssueTaxonomy.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.support.common.IssueTaxonomy.Category.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->display_name(), target);
  }

  // map<string, .google.cloud.support.common.IssueTaxonomy.Component> components = 2;
  if (!this->components().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.support.common.IssueTaxonomy.Category.ComponentsEntry.key");
      }
    };

    if (deterministic &&
        this->components().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->components().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >::const_iterator
          it = this->components().begin();
          it != this->components().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<IssueTaxonomy_Category_ComponentsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(components_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<IssueTaxonomy_Category_ComponentsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >::const_iterator
          it = this->components().begin();
          it != this->components().end(); ++it) {
        entry.reset(components_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.support.common.IssueTaxonomy.Category)
  return target;
}

size_t IssueTaxonomy_Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.support.common.IssueTaxonomy.Category)
  size_t total_size = 0;

  // map<string, .google.cloud.support.common.IssueTaxonomy.Component> components = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->components_size());
  {
    ::google::protobuf::scoped_ptr<IssueTaxonomy_Category_ComponentsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >::const_iterator
        it = this->components().begin();
        it != this->components().end(); ++it) {
      entry.reset(components_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IssueTaxonomy_Category::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.support.common.IssueTaxonomy.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const IssueTaxonomy_Category* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IssueTaxonomy_Category>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.support.common.IssueTaxonomy.Category)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.support.common.IssueTaxonomy.Category)
    MergeFrom(*source);
  }
}

void IssueTaxonomy_Category::MergeFrom(const IssueTaxonomy_Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.support.common.IssueTaxonomy.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  components_.MergeFrom(from.components_);
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
}

void IssueTaxonomy_Category::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.support.common.IssueTaxonomy.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IssueTaxonomy_Category::CopyFrom(const IssueTaxonomy_Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.support.common.IssueTaxonomy.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IssueTaxonomy_Category::IsInitialized() const {
  return true;
}

void IssueTaxonomy_Category::Swap(IssueTaxonomy_Category* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IssueTaxonomy_Category::InternalSwap(IssueTaxonomy_Category* other) {
  components_.Swap(&other->components_);
  display_name_.Swap(&other->display_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IssueTaxonomy_Category::GetMetadata() const {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IssueTaxonomy_Category

// string display_name = 1;
void IssueTaxonomy_Category::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IssueTaxonomy_Category::display_name() const {
  // @@protoc_insertion_point(field_get:google.cloud.support.common.IssueTaxonomy.Category.display_name)
  return display_name_.GetNoArena();
}
void IssueTaxonomy_Category::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.support.common.IssueTaxonomy.Category.display_name)
}
#if LANG_CXX11
void IssueTaxonomy_Category::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.support.common.IssueTaxonomy.Category.display_name)
}
#endif
void IssueTaxonomy_Category::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.support.common.IssueTaxonomy.Category.display_name)
}
void IssueTaxonomy_Category::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.support.common.IssueTaxonomy.Category.display_name)
}
::std::string* IssueTaxonomy_Category::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.support.common.IssueTaxonomy.Category.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IssueTaxonomy_Category::release_display_name() {
  // @@protoc_insertion_point(field_release:google.cloud.support.common.IssueTaxonomy.Category.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IssueTaxonomy_Category::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.support.common.IssueTaxonomy.Category.display_name)
}

// map<string, .google.cloud.support.common.IssueTaxonomy.Component> components = 2;
int IssueTaxonomy_Category::components_size() const {
  return components_.size();
}
void IssueTaxonomy_Category::clear_components() {
  components_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >&
IssueTaxonomy_Category::components() const {
  // @@protoc_insertion_point(field_map:google.cloud.support.common.IssueTaxonomy.Category.components)
  return components_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Component >*
IssueTaxonomy_Category::mutable_components() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.support.common.IssueTaxonomy.Category.components)
  return components_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

IssueTaxonomy::IssueTaxonomy_CategoriesEntry::IssueTaxonomy_CategoriesEntry() {}
IssueTaxonomy::IssueTaxonomy_CategoriesEntry::IssueTaxonomy_CategoriesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata IssueTaxonomy::IssueTaxonomy_CategoriesEntry::GetMetadata() const {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[8];
}
void IssueTaxonomy::IssueTaxonomy_CategoriesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void IssueTaxonomy::IssueTaxonomy_CategoriesEntry::MergeFrom(const IssueTaxonomy_CategoriesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IssueTaxonomy::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IssueTaxonomy::IssueTaxonomy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.support.common.IssueTaxonomy)
}
IssueTaxonomy::IssueTaxonomy(const IssueTaxonomy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  categories_.MergeFrom(from.categories_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.support.common.IssueTaxonomy)
}

void IssueTaxonomy::SharedCtor() {
  _cached_size_ = 0;
}

IssueTaxonomy::~IssueTaxonomy() {
  // @@protoc_insertion_point(destructor:google.cloud.support.common.IssueTaxonomy)
  SharedDtor();
}

void IssueTaxonomy::SharedDtor() {
}

void IssueTaxonomy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IssueTaxonomy::descriptor() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IssueTaxonomy& IssueTaxonomy::default_instance() {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

IssueTaxonomy* IssueTaxonomy::New(::google::protobuf::Arena* arena) const {
  IssueTaxonomy* n = new IssueTaxonomy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IssueTaxonomy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.support.common.IssueTaxonomy)
  categories_.Clear();
}

bool IssueTaxonomy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.support.common.IssueTaxonomy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .google.cloud.support.common.IssueTaxonomy.Category> categories = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          IssueTaxonomy_CategoriesEntry::Parser< ::google::protobuf::internal::MapField<
              IssueTaxonomy_CategoriesEntry,
              ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category > > parser(&categories_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.support.common.IssueTaxonomy.CategoriesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.support.common.IssueTaxonomy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.support.common.IssueTaxonomy)
  return false;
#undef DO_
}

void IssueTaxonomy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.support.common.IssueTaxonomy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .google.cloud.support.common.IssueTaxonomy.Category> categories = 1;
  if (!this->categories().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.support.common.IssueTaxonomy.CategoriesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->categories().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->categories().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >::const_iterator
          it = this->categories().begin();
          it != this->categories().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<IssueTaxonomy_CategoriesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(categories_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<IssueTaxonomy_CategoriesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >::const_iterator
          it = this->categories().begin();
          it != this->categories().end(); ++it) {
        entry.reset(categories_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.support.common.IssueTaxonomy)
}

::google::protobuf::uint8* IssueTaxonomy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.support.common.IssueTaxonomy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .google.cloud.support.common.IssueTaxonomy.Category> categories = 1;
  if (!this->categories().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.cloud.support.common.IssueTaxonomy.CategoriesEntry.key");
      }
    };

    if (deterministic &&
        this->categories().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->categories().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >::const_iterator
          it = this->categories().begin();
          it != this->categories().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<IssueTaxonomy_CategoriesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(categories_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<IssueTaxonomy_CategoriesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >::const_iterator
          it = this->categories().begin();
          it != this->categories().end(); ++it) {
        entry.reset(categories_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.support.common.IssueTaxonomy)
  return target;
}

size_t IssueTaxonomy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.support.common.IssueTaxonomy)
  size_t total_size = 0;

  // map<string, .google.cloud.support.common.IssueTaxonomy.Category> categories = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->categories_size());
  {
    ::google::protobuf::scoped_ptr<IssueTaxonomy_CategoriesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >::const_iterator
        it = this->categories().begin();
        it != this->categories().end(); ++it) {
      entry.reset(categories_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IssueTaxonomy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.support.common.IssueTaxonomy)
  GOOGLE_DCHECK_NE(&from, this);
  const IssueTaxonomy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IssueTaxonomy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.support.common.IssueTaxonomy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.support.common.IssueTaxonomy)
    MergeFrom(*source);
  }
}

void IssueTaxonomy::MergeFrom(const IssueTaxonomy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.support.common.IssueTaxonomy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
}

void IssueTaxonomy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.support.common.IssueTaxonomy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IssueTaxonomy::CopyFrom(const IssueTaxonomy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.support.common.IssueTaxonomy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IssueTaxonomy::IsInitialized() const {
  return true;
}

void IssueTaxonomy::Swap(IssueTaxonomy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IssueTaxonomy::InternalSwap(IssueTaxonomy* other) {
  categories_.Swap(&other->categories_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IssueTaxonomy::GetMetadata() const {
  protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fsupport_2fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IssueTaxonomy

// map<string, .google.cloud.support.common.IssueTaxonomy.Category> categories = 1;
int IssueTaxonomy::categories_size() const {
  return categories_.size();
}
void IssueTaxonomy::clear_categories() {
  categories_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >&
IssueTaxonomy::categories() const {
  // @@protoc_insertion_point(field_map:google.cloud.support.common.IssueTaxonomy.categories)
  return categories_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::cloud::support::common::IssueTaxonomy_Category >*
IssueTaxonomy::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_map:google.cloud.support.common.IssueTaxonomy.categories)
  return categories_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace support
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)
