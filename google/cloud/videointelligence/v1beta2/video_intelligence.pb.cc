// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/videointelligence/v1beta2/video_intelligence.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/cloud/videointelligence/v1beta2/video_intelligence.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace cloud {
namespace videointelligence {
namespace v1beta2 {
class AnnotateVideoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnnotateVideoRequest> {
} _AnnotateVideoRequest_default_instance_;
class VideoContextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoContext> {
} _VideoContext_default_instance_;
class LabelDetectionConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LabelDetectionConfig> {
} _LabelDetectionConfig_default_instance_;
class ShotChangeDetectionConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShotChangeDetectionConfig> {
} _ShotChangeDetectionConfig_default_instance_;
class ExplicitContentDetectionConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExplicitContentDetectionConfig> {
} _ExplicitContentDetectionConfig_default_instance_;
class FaceDetectionConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FaceDetectionConfig> {
} _FaceDetectionConfig_default_instance_;
class VideoSegmentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoSegment> {
} _VideoSegment_default_instance_;
class LabelSegmentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LabelSegment> {
} _LabelSegment_default_instance_;
class LabelFrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LabelFrame> {
} _LabelFrame_default_instance_;
class EntityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Entity> {
} _Entity_default_instance_;
class LabelAnnotationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LabelAnnotation> {
} _LabelAnnotation_default_instance_;
class ExplicitContentFrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExplicitContentFrame> {
} _ExplicitContentFrame_default_instance_;
class ExplicitContentAnnotationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExplicitContentAnnotation> {
} _ExplicitContentAnnotation_default_instance_;
class NormalizedBoundingBoxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NormalizedBoundingBox> {
} _NormalizedBoundingBox_default_instance_;
class FaceSegmentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FaceSegment> {
} _FaceSegment_default_instance_;
class FaceFrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FaceFrame> {
} _FaceFrame_default_instance_;
class FaceAnnotationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FaceAnnotation> {
} _FaceAnnotation_default_instance_;
class VideoAnnotationResultsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoAnnotationResults> {
} _VideoAnnotationResults_default_instance_;
class AnnotateVideoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnnotateVideoResponse> {
} _AnnotateVideoResponse_default_instance_;
class VideoAnnotationProgressDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoAnnotationProgress> {
} _VideoAnnotationProgress_default_instance_;
class AnnotateVideoProgressDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnnotateVideoProgress> {
} _AnnotateVideoProgress_default_instance_;

namespace protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateVideoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateVideoRequest, input_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateVideoRequest, input_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateVideoRequest, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateVideoRequest, video_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateVideoRequest, output_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateVideoRequest, location_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoContext, segments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoContext, label_detection_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoContext, shot_change_detection_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoContext, explicit_content_detection_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoContext, face_detection_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDetectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDetectionConfig, label_detection_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDetectionConfig, stationary_camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelDetectionConfig, model_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotChangeDetectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotChangeDetectionConfig, model_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitContentDetectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitContentDetectionConfig, model_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceDetectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceDetectionConfig, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceDetectionConfig, include_bounding_boxes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoSegment, start_time_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoSegment, end_time_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSegment, segment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelSegment, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelFrame, time_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelFrame, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, language_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelAnnotation, entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelAnnotation, category_entities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelAnnotation, segments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelAnnotation, frames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitContentFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitContentFrame, time_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitContentFrame, pornography_likelihood_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitContentAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExplicitContentAnnotation, frames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBoundingBox, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBoundingBox, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBoundingBox, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizedBoundingBox, bottom_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceSegment, segment_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceFrame, normalized_bounding_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceFrame, time_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAnnotation, thumbnail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAnnotation, segments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAnnotation, frames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationResults, input_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationResults, segment_label_annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationResults, shot_label_annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationResults, frame_label_annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationResults, face_annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationResults, shot_annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationResults, explicit_annotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationResults, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateVideoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateVideoResponse, annotation_results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationProgress, input_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationProgress, progress_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationProgress, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAnnotationProgress, update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateVideoProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnotateVideoProgress, annotation_progress_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(AnnotateVideoRequest)},
  { 11, -1, sizeof(VideoContext)},
  { 21, -1, sizeof(LabelDetectionConfig)},
  { 29, -1, sizeof(ShotChangeDetectionConfig)},
  { 35, -1, sizeof(ExplicitContentDetectionConfig)},
  { 41, -1, sizeof(FaceDetectionConfig)},
  { 48, -1, sizeof(VideoSegment)},
  { 55, -1, sizeof(LabelSegment)},
  { 62, -1, sizeof(LabelFrame)},
  { 69, -1, sizeof(Entity)},
  { 77, -1, sizeof(LabelAnnotation)},
  { 86, -1, sizeof(ExplicitContentFrame)},
  { 93, -1, sizeof(ExplicitContentAnnotation)},
  { 99, -1, sizeof(NormalizedBoundingBox)},
  { 108, -1, sizeof(FaceSegment)},
  { 114, -1, sizeof(FaceFrame)},
  { 121, -1, sizeof(FaceAnnotation)},
  { 129, -1, sizeof(VideoAnnotationResults)},
  { 142, -1, sizeof(AnnotateVideoResponse)},
  { 148, -1, sizeof(VideoAnnotationProgress)},
  { 157, -1, sizeof(AnnotateVideoProgress)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnnotateVideoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LabelDetectionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShotChangeDetectionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExplicitContentDetectionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FaceDetectionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LabelSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LabelFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Entity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LabelAnnotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExplicitContentFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExplicitContentAnnotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NormalizedBoundingBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FaceSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FaceFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FaceAnnotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoAnnotationResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnnotateVideoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoAnnotationProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnnotateVideoProgress_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/cloud/videointelligence/v1beta2/video_intelligence.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

}  // namespace

void TableStruct::Shutdown() {
  _AnnotateVideoRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _VideoContext_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LabelDetectionConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ShotChangeDetectionConfig_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ExplicitContentDetectionConfig_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _FaceDetectionConfig_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _VideoSegment_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _LabelSegment_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _LabelFrame_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Entity_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _LabelAnnotation_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ExplicitContentFrame_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ExplicitContentAnnotation_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _NormalizedBoundingBox_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _FaceSegment_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _FaceFrame_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _FaceAnnotation_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _VideoAnnotationResults_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _AnnotateVideoResponse_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _VideoAnnotationProgress_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _AnnotateVideoProgress_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::InitDefaults();
  _AnnotateVideoRequest_default_instance_.DefaultConstruct();
  _VideoContext_default_instance_.DefaultConstruct();
  _LabelDetectionConfig_default_instance_.DefaultConstruct();
  _ShotChangeDetectionConfig_default_instance_.DefaultConstruct();
  _ExplicitContentDetectionConfig_default_instance_.DefaultConstruct();
  _FaceDetectionConfig_default_instance_.DefaultConstruct();
  _VideoSegment_default_instance_.DefaultConstruct();
  _LabelSegment_default_instance_.DefaultConstruct();
  _LabelFrame_default_instance_.DefaultConstruct();
  _Entity_default_instance_.DefaultConstruct();
  _LabelAnnotation_default_instance_.DefaultConstruct();
  _ExplicitContentFrame_default_instance_.DefaultConstruct();
  _ExplicitContentAnnotation_default_instance_.DefaultConstruct();
  _NormalizedBoundingBox_default_instance_.DefaultConstruct();
  _FaceSegment_default_instance_.DefaultConstruct();
  _FaceFrame_default_instance_.DefaultConstruct();
  _FaceAnnotation_default_instance_.DefaultConstruct();
  _VideoAnnotationResults_default_instance_.DefaultConstruct();
  _AnnotateVideoResponse_default_instance_.DefaultConstruct();
  _VideoAnnotationProgress_default_instance_.DefaultConstruct();
  _AnnotateVideoProgress_default_instance_.DefaultConstruct();
  _AnnotateVideoRequest_default_instance_.get_mutable()->video_context_ = const_cast< ::google::cloud::videointelligence::v1beta2::VideoContext*>(
      ::google::cloud::videointelligence::v1beta2::VideoContext::internal_default_instance());
  _VideoContext_default_instance_.get_mutable()->label_detection_config_ = const_cast< ::google::cloud::videointelligence::v1beta2::LabelDetectionConfig*>(
      ::google::cloud::videointelligence::v1beta2::LabelDetectionConfig::internal_default_instance());
  _VideoContext_default_instance_.get_mutable()->shot_change_detection_config_ = const_cast< ::google::cloud::videointelligence::v1beta2::ShotChangeDetectionConfig*>(
      ::google::cloud::videointelligence::v1beta2::ShotChangeDetectionConfig::internal_default_instance());
  _VideoContext_default_instance_.get_mutable()->explicit_content_detection_config_ = const_cast< ::google::cloud::videointelligence::v1beta2::ExplicitContentDetectionConfig*>(
      ::google::cloud::videointelligence::v1beta2::ExplicitContentDetectionConfig::internal_default_instance());
  _VideoContext_default_instance_.get_mutable()->face_detection_config_ = const_cast< ::google::cloud::videointelligence::v1beta2::FaceDetectionConfig*>(
      ::google::cloud::videointelligence::v1beta2::FaceDetectionConfig::internal_default_instance());
  _VideoSegment_default_instance_.get_mutable()->start_time_offset_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _VideoSegment_default_instance_.get_mutable()->end_time_offset_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _LabelSegment_default_instance_.get_mutable()->segment_ = const_cast< ::google::cloud::videointelligence::v1beta2::VideoSegment*>(
      ::google::cloud::videointelligence::v1beta2::VideoSegment::internal_default_instance());
  _LabelFrame_default_instance_.get_mutable()->time_offset_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _LabelAnnotation_default_instance_.get_mutable()->entity_ = const_cast< ::google::cloud::videointelligence::v1beta2::Entity*>(
      ::google::cloud::videointelligence::v1beta2::Entity::internal_default_instance());
  _ExplicitContentFrame_default_instance_.get_mutable()->time_offset_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _FaceSegment_default_instance_.get_mutable()->segment_ = const_cast< ::google::cloud::videointelligence::v1beta2::VideoSegment*>(
      ::google::cloud::videointelligence::v1beta2::VideoSegment::internal_default_instance());
  _FaceFrame_default_instance_.get_mutable()->time_offset_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _VideoAnnotationResults_default_instance_.get_mutable()->explicit_annotation_ = const_cast< ::google::cloud::videointelligence::v1beta2::ExplicitContentAnnotation*>(
      ::google::cloud::videointelligence::v1beta2::ExplicitContentAnnotation::internal_default_instance());
  _VideoAnnotationResults_default_instance_.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  _VideoAnnotationProgress_default_instance_.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _VideoAnnotationProgress_default_instance_.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\?google/cloud/videointelligence/v1beta2"
      "/video_intelligence.proto\022&google.cloud."
      "videointelligence.v1beta2\032\034google/api/an"
      "notations.proto\032#google/longrunning/oper"
      "ations.proto\032\036google/protobuf/duration.p"
      "roto\032\037google/protobuf/timestamp.proto\032\027g"
      "oogle/rpc/status.proto\"\371\001\n\024AnnotateVideo"
      "Request\022\021\n\tinput_uri\030\001 \001(\t\022\025\n\rinput_cont"
      "ent\030\006 \001(\014\022A\n\010features\030\002 \003(\0162/.google.clo"
      "ud.videointelligence.v1beta2.Feature\022K\n\r"
      "video_context\030\003 \001(\01324.google.cloud.video"
      "intelligence.v1beta2.VideoContext\022\022\n\nout"
      "put_uri\030\004 \001(\t\022\023\n\013location_id\030\005 \001(\t\"\354\003\n\014V"
      "ideoContext\022F\n\010segments\030\001 \003(\01324.google.c"
      "loud.videointelligence.v1beta2.VideoSegm"
      "ent\022\\\n\026label_detection_config\030\002 \001(\0132<.go"
      "ogle.cloud.videointelligence.v1beta2.Lab"
      "elDetectionConfig\022g\n\034shot_change_detecti"
      "on_config\030\003 \001(\0132A.google.cloud.videointe"
      "lligence.v1beta2.ShotChangeDetectionConf"
      "ig\022q\n!explicit_content_detection_config\030"
      "\004 \001(\0132F.google.cloud.videointelligence.v"
      "1beta2.ExplicitContentDetectionConfig\022Z\n"
      "\025face_detection_config\030\005 \001(\0132;.google.cl"
      "oud.videointelligence.v1beta2.FaceDetect"
      "ionConfig\"\232\001\n\024LabelDetectionConfig\022X\n\024la"
      "bel_detection_mode\030\001 \001(\0162:.google.cloud."
      "videointelligence.v1beta2.LabelDetection"
      "Mode\022\031\n\021stationary_camera\030\002 \001(\010\022\r\n\005model"
      "\030\003 \001(\t\"*\n\031ShotChangeDetectionConfig\022\r\n\005m"
      "odel\030\001 \001(\t\"/\n\036ExplicitContentDetectionCo"
      "nfig\022\r\n\005model\030\001 \001(\t\"D\n\023FaceDetectionConf"
      "ig\022\r\n\005model\030\001 \001(\t\022\036\n\026include_bounding_bo"
      "xes\030\002 \001(\010\"x\n\014VideoSegment\0224\n\021start_time_"
      "offset\030\001 \001(\0132\031.google.protobuf.Duration\022"
      "2\n\017end_time_offset\030\002 \001(\0132\031.google.protob"
      "uf.Duration\"i\n\014LabelSegment\022E\n\007segment\030\001"
      " \001(\01324.google.cloud.videointelligence.v1"
      "beta2.VideoSegment\022\022\n\nconfidence\030\002 \001(\002\"P"
      "\n\nLabelFrame\022.\n\013time_offset\030\001 \001(\0132\031.goog"
      "le.protobuf.Duration\022\022\n\nconfidence\030\002 \001(\002"
      "\"G\n\006Entity\022\021\n\tentity_id\030\001 \001(\t\022\023\n\013descrip"
      "tion\030\002 \001(\t\022\025\n\rlanguage_code\030\003 \001(\t\"\250\002\n\017La"
      "belAnnotation\022>\n\006entity\030\001 \001(\0132..google.c"
      "loud.videointelligence.v1beta2.Entity\022I\n"
      "\021category_entities\030\002 \003(\0132..google.cloud."
      "videointelligence.v1beta2.Entity\022F\n\010segm"
      "ents\030\003 \003(\01324.google.cloud.videointellige"
      "nce.v1beta2.LabelSegment\022B\n\006frames\030\004 \003(\013"
      "22.google.cloud.videointelligence.v1beta"
      "2.LabelFrame\"\232\001\n\024ExplicitContentFrame\022.\n"
      "\013time_offset\030\001 \001(\0132\031.google.protobuf.Dur"
      "ation\022R\n\026pornography_likelihood\030\002 \001(\01622."
      "google.cloud.videointelligence.v1beta2.L"
      "ikelihood\"i\n\031ExplicitContentAnnotation\022L"
      "\n\006frames\030\001 \003(\0132<.google.cloud.videointel"
      "ligence.v1beta2.ExplicitContentFrame\"Q\n\025"
      "NormalizedBoundingBox\022\014\n\004left\030\001 \001(\002\022\013\n\003t"
      "op\030\002 \001(\002\022\r\n\005right\030\003 \001(\002\022\016\n\006bottom\030\004 \001(\002\""
      "T\n\013FaceSegment\022E\n\007segment\030\001 \001(\01324.google"
      ".cloud.videointelligence.v1beta2.VideoSe"
      "gment\"\235\001\n\tFaceFrame\022`\n\031normalized_boundi"
      "ng_boxes\030\001 \003(\0132=.google.cloud.videointel"
      "ligence.v1beta2.NormalizedBoundingBox\022.\n"
      "\013time_offset\030\002 \001(\0132\031.google.protobuf.Dur"
      "ation\"\255\001\n\016FaceAnnotation\022\021\n\tthumbnail\030\001 "
      "\001(\014\022E\n\010segments\030\002 \003(\01323.google.cloud.vid"
      "eointelligence.v1beta2.FaceSegment\022A\n\006fr"
      "ames\030\003 \003(\01321.google.cloud.videointellige"
      "nce.v1beta2.FaceFrame\"\337\004\n\026VideoAnnotatio"
      "nResults\022\021\n\tinput_uri\030\001 \001(\t\022Z\n\031segment_l"
      "abel_annotations\030\002 \003(\01327.google.cloud.vi"
      "deointelligence.v1beta2.LabelAnnotation\022"
      "W\n\026shot_label_annotations\030\003 \003(\01327.google"
      ".cloud.videointelligence.v1beta2.LabelAn"
      "notation\022X\n\027frame_label_annotations\030\004 \003("
      "\01327.google.cloud.videointelligence.v1bet"
      "a2.LabelAnnotation\022P\n\020face_annotations\030\005"
      " \003(\01326.google.cloud.videointelligence.v1"
      "beta2.FaceAnnotation\022N\n\020shot_annotations"
      "\030\006 \003(\01324.google.cloud.videointelligence."
      "v1beta2.VideoSegment\022^\n\023explicit_annotat"
      "ion\030\007 \001(\0132A.google.cloud.videointelligen"
      "ce.v1beta2.ExplicitContentAnnotation\022!\n\005"
      "error\030\t \001(\0132\022.google.rpc.Status\"s\n\025Annot"
      "ateVideoResponse\022Z\n\022annotation_results\030\001"
      " \003(\0132>.google.cloud.videointelligence.v1"
      "beta2.VideoAnnotationResults\"\247\001\n\027VideoAn"
      "notationProgress\022\021\n\tinput_uri\030\001 \001(\t\022\030\n\020p"
      "rogress_percent\030\002 \001(\005\022.\n\nstart_time\030\003 \001("
      "\0132\032.google.protobuf.Timestamp\022/\n\013update_"
      "time\030\004 \001(\0132\032.google.protobuf.Timestamp\"u"
      "\n\025AnnotateVideoProgress\022\\\n\023annotation_pr"
      "ogress\030\001 \003(\0132\?.google.cloud.videointelli"
      "gence.v1beta2.VideoAnnotationProgress*\206\001"
      "\n\007Feature\022\027\n\023FEATURE_UNSPECIFIED\020\000\022\023\n\017LA"
      "BEL_DETECTION\020\001\022\031\n\025SHOT_CHANGE_DETECTION"
      "\020\002\022\036\n\032EXPLICIT_CONTENT_DETECTION\020\003\022\022\n\016FA"
      "CE_DETECTION\020\004*r\n\022LabelDetectionMode\022$\n "
      "LABEL_DETECTION_MODE_UNSPECIFIED\020\000\022\r\n\tSH"
      "OT_MODE\020\001\022\016\n\nFRAME_MODE\020\002\022\027\n\023SHOT_AND_FR"
      "AME_MODE\020\003*t\n\nLikelihood\022\032\n\026LIKELIHOOD_U"
      "NSPECIFIED\020\000\022\021\n\rVERY_UNLIKELY\020\001\022\014\n\010UNLIK"
      "ELY\020\002\022\014\n\010POSSIBLE\020\003\022\n\n\006LIKELY\020\004\022\017\n\013VERY_"
      "LIKELY\020\0052\256\001\n\030VideoIntelligenceService\022\221\001"
      "\n\rAnnotateVideo\022<.google.cloud.videointe"
      "lligence.v1beta2.AnnotateVideoRequest\032\035."
      "google.longrunning.Operation\"#\202\323\344\223\002\035\"\030/v"
      "1beta2/videos:annotate:\001*B\317\001\n*com.google"
      ".cloud.videointelligence.v1beta2B\035VideoI"
      "ntelligenceServiceProtoP\001ZWgoogle.golang"
      ".org/genproto/googleapis/cloud/videointe"
      "lligence/v1beta2;videointelligence\252\002&Goo"
      "gle.Cloud.VideoIntelligence.V1beta2b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4563);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/cloud/videointelligence/v1beta2/video_intelligence.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto

const ::google::protobuf::EnumDescriptor* Feature_descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_enum_descriptors[0];
}
bool Feature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LabelDetectionMode_descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_enum_descriptors[1];
}
bool LabelDetectionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Likelihood_descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_enum_descriptors[2];
}
bool Likelihood_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotateVideoRequest::kInputUriFieldNumber;
const int AnnotateVideoRequest::kInputContentFieldNumber;
const int AnnotateVideoRequest::kFeaturesFieldNumber;
const int AnnotateVideoRequest::kVideoContextFieldNumber;
const int AnnotateVideoRequest::kOutputUriFieldNumber;
const int AnnotateVideoRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotateVideoRequest::AnnotateVideoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
}
AnnotateVideoRequest::AnnotateVideoRequest(const AnnotateVideoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      features_(from.features_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_uri().size() > 0) {
    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output_uri().size() > 0) {
    output_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_uri_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  input_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_content().size() > 0) {
    input_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_content_);
  }
  if (from.has_video_context()) {
    video_context_ = new ::google::cloud::videointelligence::v1beta2::VideoContext(*from.video_context_);
  } else {
    video_context_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
}

void AnnotateVideoRequest::SharedCtor() {
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_context_ = NULL;
  _cached_size_ = 0;
}

AnnotateVideoRequest::~AnnotateVideoRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  SharedDtor();
}

void AnnotateVideoRequest::SharedDtor() {
  input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete video_context_;
  }
}

void AnnotateVideoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotateVideoRequest::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnotateVideoRequest& AnnotateVideoRequest::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnnotateVideoRequest* AnnotateVideoRequest::New(::google::protobuf::Arena* arena) const {
  AnnotateVideoRequest* n = new AnnotateVideoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnotateVideoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  features_.Clear();
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && video_context_ != NULL) {
    delete video_context_;
  }
  video_context_ = NULL;
}

bool AnnotateVideoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string input_uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_uri().data(), this->input_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1beta2.Feature features = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_features(static_cast< ::google::cloud::videointelligence::v1beta2::Feature >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_features(static_cast< ::google::cloud::videointelligence::v1beta2::Feature >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1beta2.VideoContext video_context = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_uri = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_uri().data(), this->output_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.output_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), this->location_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes input_content = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_input_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  return false;
#undef DO_
}

void AnnotateVideoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), this->input_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_uri(), output);
  }

  // repeated .google.cloud.videointelligence.v1beta2.Feature features = 2;
  if (this->features_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_features_cached_byte_size_);
  }
  for (int i = 0, n = this->features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->features(i), output);
  }

  // .google.cloud.videointelligence.v1beta2.VideoContext video_context = 3;
  if (this->has_video_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->video_context_, output);
  }

  // string output_uri = 4;
  if (this->output_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), this->output_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.output_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->output_uri(), output);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), this->location_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->location_id(), output);
  }

  // bytes input_content = 6;
  if (this->input_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->input_content(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
}

::google::protobuf::uint8* AnnotateVideoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), this->input_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_uri(), target);
  }

  // repeated .google.cloud.videointelligence.v1beta2.Feature features = 2;
  if (this->features_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _features_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->features_, target);
  }

  // .google.cloud.videointelligence.v1beta2.VideoContext video_context = 3;
  if (this->has_video_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->video_context_, deterministic, target);
  }

  // string output_uri = 4;
  if (this->output_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), this->output_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.output_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->output_uri(), target);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), this->location_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->location_id(), target);
  }

  // bytes input_content = 6;
  if (this->input_content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->input_content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  return target;
}

size_t AnnotateVideoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  size_t total_size = 0;

  // repeated .google.cloud.videointelligence.v1beta2.Feature features = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->features_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->features(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _features_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_uri());
  }

  // string output_uri = 4;
  if (this->output_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_uri());
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // bytes input_content = 6;
  if (this->input_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->input_content());
  }

  // .google.cloud.videointelligence.v1beta2.VideoContext video_context = 3;
  if (this->has_video_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_context_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotateVideoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotateVideoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotateVideoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
    MergeFrom(*source);
  }
}

void AnnotateVideoRequest::MergeFrom(const AnnotateVideoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (from.input_uri().size() > 0) {

    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.output_uri().size() > 0) {

    output_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_uri_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.input_content().size() > 0) {

    input_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_content_);
  }
  if (from.has_video_context()) {
    mutable_video_context()->::google::cloud::videointelligence::v1beta2::VideoContext::MergeFrom(from.video_context());
  }
}

void AnnotateVideoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotateVideoRequest::CopyFrom(const AnnotateVideoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotateVideoRequest::IsInitialized() const {
  return true;
}

void AnnotateVideoRequest::Swap(AnnotateVideoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotateVideoRequest::InternalSwap(AnnotateVideoRequest* other) {
  features_.InternalSwap(&other->features_);
  input_uri_.Swap(&other->input_uri_);
  output_uri_.Swap(&other->output_uri_);
  location_id_.Swap(&other->location_id_);
  input_content_.Swap(&other->input_content_);
  std::swap(video_context_, other->video_context_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnotateVideoRequest::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnotateVideoRequest

// string input_uri = 1;
void AnnotateVideoRequest::clear_input_uri() {
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnnotateVideoRequest::input_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_uri)
  return input_uri_.GetNoArena();
}
void AnnotateVideoRequest::set_input_uri(const ::std::string& value) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_uri)
}
#if LANG_CXX11
void AnnotateVideoRequest::set_input_uri(::std::string&& value) {
  
  input_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_uri)
}
#endif
void AnnotateVideoRequest::set_input_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_uri)
}
void AnnotateVideoRequest::set_input_uri(const char* value, size_t size) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_uri)
}
::std::string* AnnotateVideoRequest::mutable_input_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_uri)
  return input_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnnotateVideoRequest::release_input_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_uri)
  
  return input_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnnotateVideoRequest::set_allocated_input_uri(::std::string* input_uri) {
  if (input_uri != NULL) {
    
  } else {
    
  }
  input_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_uri)
}

// bytes input_content = 6;
void AnnotateVideoRequest::clear_input_content() {
  input_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnnotateVideoRequest::input_content() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_content)
  return input_content_.GetNoArena();
}
void AnnotateVideoRequest::set_input_content(const ::std::string& value) {
  
  input_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_content)
}
#if LANG_CXX11
void AnnotateVideoRequest::set_input_content(::std::string&& value) {
  
  input_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_content)
}
#endif
void AnnotateVideoRequest::set_input_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_content)
}
void AnnotateVideoRequest::set_input_content(const void* value, size_t size) {
  
  input_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_content)
}
::std::string* AnnotateVideoRequest::mutable_input_content() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_content)
  return input_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnnotateVideoRequest::release_input_content() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_content)
  
  return input_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnnotateVideoRequest::set_allocated_input_content(::std::string* input_content) {
  if (input_content != NULL) {
    
  } else {
    
  }
  input_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_content);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.input_content)
}

// repeated .google.cloud.videointelligence.v1beta2.Feature features = 2;
int AnnotateVideoRequest::features_size() const {
  return features_.size();
}
void AnnotateVideoRequest::clear_features() {
  features_.Clear();
}
::google::cloud::videointelligence::v1beta2::Feature AnnotateVideoRequest::features(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.features)
  return static_cast< ::google::cloud::videointelligence::v1beta2::Feature >(features_.Get(index));
}
void AnnotateVideoRequest::set_features(int index, ::google::cloud::videointelligence::v1beta2::Feature value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.features)
}
void AnnotateVideoRequest::add_features(::google::cloud::videointelligence::v1beta2::Feature value) {
  features_.Add(value);
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.features)
}
const ::google::protobuf::RepeatedField<int>&
AnnotateVideoRequest::features() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.features)
  return features_;
}
::google::protobuf::RepeatedField<int>*
AnnotateVideoRequest::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.features)
  return &features_;
}

// .google.cloud.videointelligence.v1beta2.VideoContext video_context = 3;
bool AnnotateVideoRequest::has_video_context() const {
  return this != internal_default_instance() && video_context_ != NULL;
}
void AnnotateVideoRequest::clear_video_context() {
  if (GetArenaNoVirtual() == NULL && video_context_ != NULL) delete video_context_;
  video_context_ = NULL;
}
const ::google::cloud::videointelligence::v1beta2::VideoContext& AnnotateVideoRequest::video_context() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.video_context)
  return video_context_ != NULL ? *video_context_
                         : *::google::cloud::videointelligence::v1beta2::VideoContext::internal_default_instance();
}
::google::cloud::videointelligence::v1beta2::VideoContext* AnnotateVideoRequest::mutable_video_context() {
  
  if (video_context_ == NULL) {
    video_context_ = new ::google::cloud::videointelligence::v1beta2::VideoContext;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.video_context)
  return video_context_;
}
::google::cloud::videointelligence::v1beta2::VideoContext* AnnotateVideoRequest::release_video_context() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.video_context)
  
  ::google::cloud::videointelligence::v1beta2::VideoContext* temp = video_context_;
  video_context_ = NULL;
  return temp;
}
void AnnotateVideoRequest::set_allocated_video_context(::google::cloud::videointelligence::v1beta2::VideoContext* video_context) {
  delete video_context_;
  video_context_ = video_context;
  if (video_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.video_context)
}

// string output_uri = 4;
void AnnotateVideoRequest::clear_output_uri() {
  output_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnnotateVideoRequest::output_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.output_uri)
  return output_uri_.GetNoArena();
}
void AnnotateVideoRequest::set_output_uri(const ::std::string& value) {
  
  output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.output_uri)
}
#if LANG_CXX11
void AnnotateVideoRequest::set_output_uri(::std::string&& value) {
  
  output_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.output_uri)
}
#endif
void AnnotateVideoRequest::set_output_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.output_uri)
}
void AnnotateVideoRequest::set_output_uri(const char* value, size_t size) {
  
  output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.output_uri)
}
::std::string* AnnotateVideoRequest::mutable_output_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.output_uri)
  return output_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnnotateVideoRequest::release_output_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.output_uri)
  
  return output_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnnotateVideoRequest::set_allocated_output_uri(::std::string* output_uri) {
  if (output_uri != NULL) {
    
  } else {
    
  }
  output_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.output_uri)
}

// string location_id = 5;
void AnnotateVideoRequest::clear_location_id() {
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnnotateVideoRequest::location_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.location_id)
  return location_id_.GetNoArena();
}
void AnnotateVideoRequest::set_location_id(const ::std::string& value) {
  
  location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.location_id)
}
#if LANG_CXX11
void AnnotateVideoRequest::set_location_id(::std::string&& value) {
  
  location_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.location_id)
}
#endif
void AnnotateVideoRequest::set_location_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.location_id)
}
void AnnotateVideoRequest::set_location_id(const char* value, size_t size) {
  
  location_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.location_id)
}
::std::string* AnnotateVideoRequest::mutable_location_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.location_id)
  return location_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnnotateVideoRequest::release_location_id() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.location_id)
  
  return location_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnnotateVideoRequest::set_allocated_location_id(::std::string* location_id) {
  if (location_id != NULL) {
    
  } else {
    
  }
  location_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.location_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoContext::kSegmentsFieldNumber;
const int VideoContext::kLabelDetectionConfigFieldNumber;
const int VideoContext::kShotChangeDetectionConfigFieldNumber;
const int VideoContext::kExplicitContentDetectionConfigFieldNumber;
const int VideoContext::kFaceDetectionConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoContext::VideoContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.VideoContext)
}
VideoContext::VideoContext(const VideoContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      segments_(from.segments_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_label_detection_config()) {
    label_detection_config_ = new ::google::cloud::videointelligence::v1beta2::LabelDetectionConfig(*from.label_detection_config_);
  } else {
    label_detection_config_ = NULL;
  }
  if (from.has_shot_change_detection_config()) {
    shot_change_detection_config_ = new ::google::cloud::videointelligence::v1beta2::ShotChangeDetectionConfig(*from.shot_change_detection_config_);
  } else {
    shot_change_detection_config_ = NULL;
  }
  if (from.has_explicit_content_detection_config()) {
    explicit_content_detection_config_ = new ::google::cloud::videointelligence::v1beta2::ExplicitContentDetectionConfig(*from.explicit_content_detection_config_);
  } else {
    explicit_content_detection_config_ = NULL;
  }
  if (from.has_face_detection_config()) {
    face_detection_config_ = new ::google::cloud::videointelligence::v1beta2::FaceDetectionConfig(*from.face_detection_config_);
  } else {
    face_detection_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.VideoContext)
}

void VideoContext::SharedCtor() {
  ::memset(&label_detection_config_, 0, reinterpret_cast<char*>(&face_detection_config_) -
    reinterpret_cast<char*>(&label_detection_config_) + sizeof(face_detection_config_));
  _cached_size_ = 0;
}

VideoContext::~VideoContext() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.VideoContext)
  SharedDtor();
}

void VideoContext::SharedDtor() {
  if (this != internal_default_instance()) {
    delete label_detection_config_;
  }
  if (this != internal_default_instance()) {
    delete shot_change_detection_config_;
  }
  if (this != internal_default_instance()) {
    delete explicit_content_detection_config_;
  }
  if (this != internal_default_instance()) {
    delete face_detection_config_;
  }
}

void VideoContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoContext::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoContext& VideoContext::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoContext* VideoContext::New(::google::protobuf::Arena* arena) const {
  VideoContext* n = new VideoContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.VideoContext)
  segments_.Clear();
  if (GetArenaNoVirtual() == NULL && label_detection_config_ != NULL) {
    delete label_detection_config_;
  }
  label_detection_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && shot_change_detection_config_ != NULL) {
    delete shot_change_detection_config_;
  }
  shot_change_detection_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && explicit_content_detection_config_ != NULL) {
    delete explicit_content_detection_config_;
  }
  explicit_content_detection_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && face_detection_config_ != NULL) {
    delete face_detection_config_;
  }
  face_detection_config_ = NULL;
}

bool VideoContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.VideoContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.videointelligence.v1beta2.VideoSegment segments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1beta2.LabelDetectionConfig label_detection_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label_detection_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig shot_change_detection_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shot_change_detection_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig explicit_content_detection_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_explicit_content_detection_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1beta2.FaceDetectionConfig face_detection_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_face_detection_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.VideoContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.VideoContext)
  return false;
#undef DO_
}

void VideoContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.VideoContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1beta2.VideoSegment segments = 1;
  for (unsigned int i = 0, n = this->segments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segments(i), output);
  }

  // .google.cloud.videointelligence.v1beta2.LabelDetectionConfig label_detection_config = 2;
  if (this->has_label_detection_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->label_detection_config_, output);
  }

  // .google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig shot_change_detection_config = 3;
  if (this->has_shot_change_detection_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->shot_change_detection_config_, output);
  }

  // .google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig explicit_content_detection_config = 4;
  if (this->has_explicit_content_detection_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->explicit_content_detection_config_, output);
  }

  // .google.cloud.videointelligence.v1beta2.FaceDetectionConfig face_detection_config = 5;
  if (this->has_face_detection_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->face_detection_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.VideoContext)
}

::google::protobuf::uint8* VideoContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.VideoContext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1beta2.VideoSegment segments = 1;
  for (unsigned int i = 0, n = this->segments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segments(i), deterministic, target);
  }

  // .google.cloud.videointelligence.v1beta2.LabelDetectionConfig label_detection_config = 2;
  if (this->has_label_detection_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->label_detection_config_, deterministic, target);
  }

  // .google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig shot_change_detection_config = 3;
  if (this->has_shot_change_detection_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->shot_change_detection_config_, deterministic, target);
  }

  // .google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig explicit_content_detection_config = 4;
  if (this->has_explicit_content_detection_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->explicit_content_detection_config_, deterministic, target);
  }

  // .google.cloud.videointelligence.v1beta2.FaceDetectionConfig face_detection_config = 5;
  if (this->has_face_detection_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->face_detection_config_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.VideoContext)
  return target;
}

size_t VideoContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.VideoContext)
  size_t total_size = 0;

  // repeated .google.cloud.videointelligence.v1beta2.VideoSegment segments = 1;
  {
    unsigned int count = this->segments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segments(i));
    }
  }

  // .google.cloud.videointelligence.v1beta2.LabelDetectionConfig label_detection_config = 2;
  if (this->has_label_detection_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->label_detection_config_);
  }

  // .google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig shot_change_detection_config = 3;
  if (this->has_shot_change_detection_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shot_change_detection_config_);
  }

  // .google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig explicit_content_detection_config = 4;
  if (this->has_explicit_content_detection_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->explicit_content_detection_config_);
  }

  // .google.cloud.videointelligence.v1beta2.FaceDetectionConfig face_detection_config = 5;
  if (this->has_face_detection_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->face_detection_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.VideoContext)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.VideoContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.VideoContext)
    MergeFrom(*source);
  }
}

void VideoContext::MergeFrom(const VideoContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.VideoContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  if (from.has_label_detection_config()) {
    mutable_label_detection_config()->::google::cloud::videointelligence::v1beta2::LabelDetectionConfig::MergeFrom(from.label_detection_config());
  }
  if (from.has_shot_change_detection_config()) {
    mutable_shot_change_detection_config()->::google::cloud::videointelligence::v1beta2::ShotChangeDetectionConfig::MergeFrom(from.shot_change_detection_config());
  }
  if (from.has_explicit_content_detection_config()) {
    mutable_explicit_content_detection_config()->::google::cloud::videointelligence::v1beta2::ExplicitContentDetectionConfig::MergeFrom(from.explicit_content_detection_config());
  }
  if (from.has_face_detection_config()) {
    mutable_face_detection_config()->::google::cloud::videointelligence::v1beta2::FaceDetectionConfig::MergeFrom(from.face_detection_config());
  }
}

void VideoContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.VideoContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoContext::CopyFrom(const VideoContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.VideoContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoContext::IsInitialized() const {
  return true;
}

void VideoContext::Swap(VideoContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoContext::InternalSwap(VideoContext* other) {
  segments_.InternalSwap(&other->segments_);
  std::swap(label_detection_config_, other->label_detection_config_);
  std::swap(shot_change_detection_config_, other->shot_change_detection_config_);
  std::swap(explicit_content_detection_config_, other->explicit_content_detection_config_);
  std::swap(face_detection_config_, other->face_detection_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoContext::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoContext

// repeated .google.cloud.videointelligence.v1beta2.VideoSegment segments = 1;
int VideoContext::segments_size() const {
  return segments_.size();
}
void VideoContext::clear_segments() {
  segments_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::VideoSegment& VideoContext::segments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoContext.segments)
  return segments_.Get(index);
}
::google::cloud::videointelligence::v1beta2::VideoSegment* VideoContext::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoContext.segments)
  return segments_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::VideoSegment* VideoContext::add_segments() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.VideoContext.segments)
  return segments_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::VideoSegment >*
VideoContext::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.VideoContext.segments)
  return &segments_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::VideoSegment >&
VideoContext::segments() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.VideoContext.segments)
  return segments_;
}

// .google.cloud.videointelligence.v1beta2.LabelDetectionConfig label_detection_config = 2;
bool VideoContext::has_label_detection_config() const {
  return this != internal_default_instance() && label_detection_config_ != NULL;
}
void VideoContext::clear_label_detection_config() {
  if (GetArenaNoVirtual() == NULL && label_detection_config_ != NULL) delete label_detection_config_;
  label_detection_config_ = NULL;
}
const ::google::cloud::videointelligence::v1beta2::LabelDetectionConfig& VideoContext::label_detection_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoContext.label_detection_config)
  return label_detection_config_ != NULL ? *label_detection_config_
                         : *::google::cloud::videointelligence::v1beta2::LabelDetectionConfig::internal_default_instance();
}
::google::cloud::videointelligence::v1beta2::LabelDetectionConfig* VideoContext::mutable_label_detection_config() {
  
  if (label_detection_config_ == NULL) {
    label_detection_config_ = new ::google::cloud::videointelligence::v1beta2::LabelDetectionConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoContext.label_detection_config)
  return label_detection_config_;
}
::google::cloud::videointelligence::v1beta2::LabelDetectionConfig* VideoContext::release_label_detection_config() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.VideoContext.label_detection_config)
  
  ::google::cloud::videointelligence::v1beta2::LabelDetectionConfig* temp = label_detection_config_;
  label_detection_config_ = NULL;
  return temp;
}
void VideoContext::set_allocated_label_detection_config(::google::cloud::videointelligence::v1beta2::LabelDetectionConfig* label_detection_config) {
  delete label_detection_config_;
  label_detection_config_ = label_detection_config;
  if (label_detection_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.VideoContext.label_detection_config)
}

// .google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig shot_change_detection_config = 3;
bool VideoContext::has_shot_change_detection_config() const {
  return this != internal_default_instance() && shot_change_detection_config_ != NULL;
}
void VideoContext::clear_shot_change_detection_config() {
  if (GetArenaNoVirtual() == NULL && shot_change_detection_config_ != NULL) delete shot_change_detection_config_;
  shot_change_detection_config_ = NULL;
}
const ::google::cloud::videointelligence::v1beta2::ShotChangeDetectionConfig& VideoContext::shot_change_detection_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoContext.shot_change_detection_config)
  return shot_change_detection_config_ != NULL ? *shot_change_detection_config_
                         : *::google::cloud::videointelligence::v1beta2::ShotChangeDetectionConfig::internal_default_instance();
}
::google::cloud::videointelligence::v1beta2::ShotChangeDetectionConfig* VideoContext::mutable_shot_change_detection_config() {
  
  if (shot_change_detection_config_ == NULL) {
    shot_change_detection_config_ = new ::google::cloud::videointelligence::v1beta2::ShotChangeDetectionConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoContext.shot_change_detection_config)
  return shot_change_detection_config_;
}
::google::cloud::videointelligence::v1beta2::ShotChangeDetectionConfig* VideoContext::release_shot_change_detection_config() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.VideoContext.shot_change_detection_config)
  
  ::google::cloud::videointelligence::v1beta2::ShotChangeDetectionConfig* temp = shot_change_detection_config_;
  shot_change_detection_config_ = NULL;
  return temp;
}
void VideoContext::set_allocated_shot_change_detection_config(::google::cloud::videointelligence::v1beta2::ShotChangeDetectionConfig* shot_change_detection_config) {
  delete shot_change_detection_config_;
  shot_change_detection_config_ = shot_change_detection_config;
  if (shot_change_detection_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.VideoContext.shot_change_detection_config)
}

// .google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig explicit_content_detection_config = 4;
bool VideoContext::has_explicit_content_detection_config() const {
  return this != internal_default_instance() && explicit_content_detection_config_ != NULL;
}
void VideoContext::clear_explicit_content_detection_config() {
  if (GetArenaNoVirtual() == NULL && explicit_content_detection_config_ != NULL) delete explicit_content_detection_config_;
  explicit_content_detection_config_ = NULL;
}
const ::google::cloud::videointelligence::v1beta2::ExplicitContentDetectionConfig& VideoContext::explicit_content_detection_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoContext.explicit_content_detection_config)
  return explicit_content_detection_config_ != NULL ? *explicit_content_detection_config_
                         : *::google::cloud::videointelligence::v1beta2::ExplicitContentDetectionConfig::internal_default_instance();
}
::google::cloud::videointelligence::v1beta2::ExplicitContentDetectionConfig* VideoContext::mutable_explicit_content_detection_config() {
  
  if (explicit_content_detection_config_ == NULL) {
    explicit_content_detection_config_ = new ::google::cloud::videointelligence::v1beta2::ExplicitContentDetectionConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoContext.explicit_content_detection_config)
  return explicit_content_detection_config_;
}
::google::cloud::videointelligence::v1beta2::ExplicitContentDetectionConfig* VideoContext::release_explicit_content_detection_config() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.VideoContext.explicit_content_detection_config)
  
  ::google::cloud::videointelligence::v1beta2::ExplicitContentDetectionConfig* temp = explicit_content_detection_config_;
  explicit_content_detection_config_ = NULL;
  return temp;
}
void VideoContext::set_allocated_explicit_content_detection_config(::google::cloud::videointelligence::v1beta2::ExplicitContentDetectionConfig* explicit_content_detection_config) {
  delete explicit_content_detection_config_;
  explicit_content_detection_config_ = explicit_content_detection_config;
  if (explicit_content_detection_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.VideoContext.explicit_content_detection_config)
}

// .google.cloud.videointelligence.v1beta2.FaceDetectionConfig face_detection_config = 5;
bool VideoContext::has_face_detection_config() const {
  return this != internal_default_instance() && face_detection_config_ != NULL;
}
void VideoContext::clear_face_detection_config() {
  if (GetArenaNoVirtual() == NULL && face_detection_config_ != NULL) delete face_detection_config_;
  face_detection_config_ = NULL;
}
const ::google::cloud::videointelligence::v1beta2::FaceDetectionConfig& VideoContext::face_detection_config() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoContext.face_detection_config)
  return face_detection_config_ != NULL ? *face_detection_config_
                         : *::google::cloud::videointelligence::v1beta2::FaceDetectionConfig::internal_default_instance();
}
::google::cloud::videointelligence::v1beta2::FaceDetectionConfig* VideoContext::mutable_face_detection_config() {
  
  if (face_detection_config_ == NULL) {
    face_detection_config_ = new ::google::cloud::videointelligence::v1beta2::FaceDetectionConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoContext.face_detection_config)
  return face_detection_config_;
}
::google::cloud::videointelligence::v1beta2::FaceDetectionConfig* VideoContext::release_face_detection_config() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.VideoContext.face_detection_config)
  
  ::google::cloud::videointelligence::v1beta2::FaceDetectionConfig* temp = face_detection_config_;
  face_detection_config_ = NULL;
  return temp;
}
void VideoContext::set_allocated_face_detection_config(::google::cloud::videointelligence::v1beta2::FaceDetectionConfig* face_detection_config) {
  delete face_detection_config_;
  face_detection_config_ = face_detection_config;
  if (face_detection_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.VideoContext.face_detection_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelDetectionConfig::kLabelDetectionModeFieldNumber;
const int LabelDetectionConfig::kStationaryCameraFieldNumber;
const int LabelDetectionConfig::kModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelDetectionConfig::LabelDetectionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
}
LabelDetectionConfig::LabelDetectionConfig(const LabelDetectionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  ::memcpy(&label_detection_mode_, &from.label_detection_mode_,
    reinterpret_cast<char*>(&stationary_camera_) -
    reinterpret_cast<char*>(&label_detection_mode_) + sizeof(stationary_camera_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
}

void LabelDetectionConfig::SharedCtor() {
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_detection_mode_, 0, reinterpret_cast<char*>(&stationary_camera_) -
    reinterpret_cast<char*>(&label_detection_mode_) + sizeof(stationary_camera_));
  _cached_size_ = 0;
}

LabelDetectionConfig::~LabelDetectionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  SharedDtor();
}

void LabelDetectionConfig::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LabelDetectionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelDetectionConfig::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelDetectionConfig& LabelDetectionConfig::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

LabelDetectionConfig* LabelDetectionConfig::New(::google::protobuf::Arena* arena) const {
  LabelDetectionConfig* n = new LabelDetectionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelDetectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&label_detection_mode_, 0, reinterpret_cast<char*>(&stationary_camera_) -
    reinterpret_cast<char*>(&label_detection_mode_) + sizeof(stationary_camera_));
}

bool LabelDetectionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.videointelligence.v1beta2.LabelDetectionMode label_detection_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_label_detection_mode(static_cast< ::google::cloud::videointelligence::v1beta2::LabelDetectionMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool stationary_camera = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stationary_camera_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1beta2.LabelDetectionConfig.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  return false;
#undef DO_
}

void LabelDetectionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1beta2.LabelDetectionMode label_detection_mode = 1;
  if (this->label_detection_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->label_detection_mode(), output);
  }

  // bool stationary_camera = 2;
  if (this->stationary_camera() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stationary_camera(), output);
  }

  // string model = 3;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.LabelDetectionConfig.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
}

::google::protobuf::uint8* LabelDetectionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1beta2.LabelDetectionMode label_detection_mode = 1;
  if (this->label_detection_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->label_detection_mode(), target);
  }

  // bool stationary_camera = 2;
  if (this->stationary_camera() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stationary_camera(), target);
  }

  // string model = 3;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.LabelDetectionConfig.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  return target;
}

size_t LabelDetectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  size_t total_size = 0;

  // string model = 3;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // .google.cloud.videointelligence.v1beta2.LabelDetectionMode label_detection_mode = 1;
  if (this->label_detection_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->label_detection_mode());
  }

  // bool stationary_camera = 2;
  if (this->stationary_camera() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelDetectionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelDetectionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelDetectionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
    MergeFrom(*source);
  }
}

void LabelDetectionConfig::MergeFrom(const LabelDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.label_detection_mode() != 0) {
    set_label_detection_mode(from.label_detection_mode());
  }
  if (from.stationary_camera() != 0) {
    set_stationary_camera(from.stationary_camera());
  }
}

void LabelDetectionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelDetectionConfig::CopyFrom(const LabelDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelDetectionConfig::IsInitialized() const {
  return true;
}

void LabelDetectionConfig::Swap(LabelDetectionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelDetectionConfig::InternalSwap(LabelDetectionConfig* other) {
  model_.Swap(&other->model_);
  std::swap(label_detection_mode_, other->label_detection_mode_);
  std::swap(stationary_camera_, other->stationary_camera_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelDetectionConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelDetectionConfig

// .google.cloud.videointelligence.v1beta2.LabelDetectionMode label_detection_mode = 1;
void LabelDetectionConfig::clear_label_detection_mode() {
  label_detection_mode_ = 0;
}
::google::cloud::videointelligence::v1beta2::LabelDetectionMode LabelDetectionConfig::label_detection_mode() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.LabelDetectionConfig.label_detection_mode)
  return static_cast< ::google::cloud::videointelligence::v1beta2::LabelDetectionMode >(label_detection_mode_);
}
void LabelDetectionConfig::set_label_detection_mode(::google::cloud::videointelligence::v1beta2::LabelDetectionMode value) {
  
  label_detection_mode_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.LabelDetectionConfig.label_detection_mode)
}

// bool stationary_camera = 2;
void LabelDetectionConfig::clear_stationary_camera() {
  stationary_camera_ = false;
}
bool LabelDetectionConfig::stationary_camera() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.LabelDetectionConfig.stationary_camera)
  return stationary_camera_;
}
void LabelDetectionConfig::set_stationary_camera(bool value) {
  
  stationary_camera_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.LabelDetectionConfig.stationary_camera)
}

// string model = 3;
void LabelDetectionConfig::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LabelDetectionConfig::model() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.LabelDetectionConfig.model)
  return model_.GetNoArena();
}
void LabelDetectionConfig::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.LabelDetectionConfig.model)
}
#if LANG_CXX11
void LabelDetectionConfig::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.LabelDetectionConfig.model)
}
#endif
void LabelDetectionConfig::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.LabelDetectionConfig.model)
}
void LabelDetectionConfig::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.LabelDetectionConfig.model)
}
::std::string* LabelDetectionConfig::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.LabelDetectionConfig.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LabelDetectionConfig::release_model() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.LabelDetectionConfig.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LabelDetectionConfig::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.LabelDetectionConfig.model)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShotChangeDetectionConfig::kModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShotChangeDetectionConfig::ShotChangeDetectionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
}
ShotChangeDetectionConfig::ShotChangeDetectionConfig(const ShotChangeDetectionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
}

void ShotChangeDetectionConfig::SharedCtor() {
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ShotChangeDetectionConfig::~ShotChangeDetectionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  SharedDtor();
}

void ShotChangeDetectionConfig::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShotChangeDetectionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShotChangeDetectionConfig::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShotChangeDetectionConfig& ShotChangeDetectionConfig::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShotChangeDetectionConfig* ShotChangeDetectionConfig::New(::google::protobuf::Arena* arena) const {
  ShotChangeDetectionConfig* n = new ShotChangeDetectionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShotChangeDetectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ShotChangeDetectionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  return false;
#undef DO_
}

void ShotChangeDetectionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
}

::google::protobuf::uint8* ShotChangeDetectionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  return target;
}

size_t ShotChangeDetectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  size_t total_size = 0;

  // string model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShotChangeDetectionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ShotChangeDetectionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShotChangeDetectionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
    MergeFrom(*source);
  }
}

void ShotChangeDetectionConfig::MergeFrom(const ShotChangeDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
}

void ShotChangeDetectionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShotChangeDetectionConfig::CopyFrom(const ShotChangeDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShotChangeDetectionConfig::IsInitialized() const {
  return true;
}

void ShotChangeDetectionConfig::Swap(ShotChangeDetectionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShotChangeDetectionConfig::InternalSwap(ShotChangeDetectionConfig* other) {
  model_.Swap(&other->model_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShotChangeDetectionConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShotChangeDetectionConfig

// string model = 1;
void ShotChangeDetectionConfig::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ShotChangeDetectionConfig::model() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.model)
  return model_.GetNoArena();
}
void ShotChangeDetectionConfig::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.model)
}
#if LANG_CXX11
void ShotChangeDetectionConfig::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.model)
}
#endif
void ShotChangeDetectionConfig::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.model)
}
void ShotChangeDetectionConfig::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.model)
}
::std::string* ShotChangeDetectionConfig::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShotChangeDetectionConfig::release_model() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShotChangeDetectionConfig::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.model)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExplicitContentDetectionConfig::kModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExplicitContentDetectionConfig::ExplicitContentDetectionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
}
ExplicitContentDetectionConfig::ExplicitContentDetectionConfig(const ExplicitContentDetectionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
}

void ExplicitContentDetectionConfig::SharedCtor() {
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ExplicitContentDetectionConfig::~ExplicitContentDetectionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  SharedDtor();
}

void ExplicitContentDetectionConfig::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExplicitContentDetectionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExplicitContentDetectionConfig::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExplicitContentDetectionConfig& ExplicitContentDetectionConfig::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExplicitContentDetectionConfig* ExplicitContentDetectionConfig::New(::google::protobuf::Arena* arena) const {
  ExplicitContentDetectionConfig* n = new ExplicitContentDetectionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExplicitContentDetectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ExplicitContentDetectionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  return false;
#undef DO_
}

void ExplicitContentDetectionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
}

::google::protobuf::uint8* ExplicitContentDetectionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  return target;
}

size_t ExplicitContentDetectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  size_t total_size = 0;

  // string model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExplicitContentDetectionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ExplicitContentDetectionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExplicitContentDetectionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
    MergeFrom(*source);
  }
}

void ExplicitContentDetectionConfig::MergeFrom(const ExplicitContentDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
}

void ExplicitContentDetectionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplicitContentDetectionConfig::CopyFrom(const ExplicitContentDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplicitContentDetectionConfig::IsInitialized() const {
  return true;
}

void ExplicitContentDetectionConfig::Swap(ExplicitContentDetectionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExplicitContentDetectionConfig::InternalSwap(ExplicitContentDetectionConfig* other) {
  model_.Swap(&other->model_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExplicitContentDetectionConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExplicitContentDetectionConfig

// string model = 1;
void ExplicitContentDetectionConfig::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ExplicitContentDetectionConfig::model() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.model)
  return model_.GetNoArena();
}
void ExplicitContentDetectionConfig::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.model)
}
#if LANG_CXX11
void ExplicitContentDetectionConfig::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.model)
}
#endif
void ExplicitContentDetectionConfig::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.model)
}
void ExplicitContentDetectionConfig::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.model)
}
::std::string* ExplicitContentDetectionConfig::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExplicitContentDetectionConfig::release_model() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExplicitContentDetectionConfig::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.model)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceDetectionConfig::kModelFieldNumber;
const int FaceDetectionConfig::kIncludeBoundingBoxesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceDetectionConfig::FaceDetectionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
}
FaceDetectionConfig::FaceDetectionConfig(const FaceDetectionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  include_bounding_boxes_ = from.include_bounding_boxes_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
}

void FaceDetectionConfig::SharedCtor() {
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  include_bounding_boxes_ = false;
  _cached_size_ = 0;
}

FaceDetectionConfig::~FaceDetectionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  SharedDtor();
}

void FaceDetectionConfig::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FaceDetectionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceDetectionConfig::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceDetectionConfig& FaceDetectionConfig::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

FaceDetectionConfig* FaceDetectionConfig::New(::google::protobuf::Arena* arena) const {
  FaceDetectionConfig* n = new FaceDetectionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceDetectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  include_bounding_boxes_ = false;
}

bool FaceDetectionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1beta2.FaceDetectionConfig.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_bounding_boxes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_bounding_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  return false;
#undef DO_
}

void FaceDetectionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.FaceDetectionConfig.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model(), output);
  }

  // bool include_bounding_boxes = 2;
  if (this->include_bounding_boxes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_bounding_boxes(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
}

::google::protobuf::uint8* FaceDetectionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.FaceDetectionConfig.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model(), target);
  }

  // bool include_bounding_boxes = 2;
  if (this->include_bounding_boxes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_bounding_boxes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  return target;
}

size_t FaceDetectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  size_t total_size = 0;

  // string model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // bool include_bounding_boxes = 2;
  if (this->include_bounding_boxes() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceDetectionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceDetectionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceDetectionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
    MergeFrom(*source);
  }
}

void FaceDetectionConfig::MergeFrom(const FaceDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.include_bounding_boxes() != 0) {
    set_include_bounding_boxes(from.include_bounding_boxes());
  }
}

void FaceDetectionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceDetectionConfig::CopyFrom(const FaceDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetectionConfig::IsInitialized() const {
  return true;
}

void FaceDetectionConfig::Swap(FaceDetectionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceDetectionConfig::InternalSwap(FaceDetectionConfig* other) {
  model_.Swap(&other->model_);
  std::swap(include_bounding_boxes_, other->include_bounding_boxes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceDetectionConfig::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceDetectionConfig

// string model = 1;
void FaceDetectionConfig::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FaceDetectionConfig::model() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.FaceDetectionConfig.model)
  return model_.GetNoArena();
}
void FaceDetectionConfig::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.FaceDetectionConfig.model)
}
#if LANG_CXX11
void FaceDetectionConfig::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.FaceDetectionConfig.model)
}
#endif
void FaceDetectionConfig::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.FaceDetectionConfig.model)
}
void FaceDetectionConfig::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.FaceDetectionConfig.model)
}
::std::string* FaceDetectionConfig::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.FaceDetectionConfig.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FaceDetectionConfig::release_model() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.FaceDetectionConfig.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaceDetectionConfig::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.FaceDetectionConfig.model)
}

// bool include_bounding_boxes = 2;
void FaceDetectionConfig::clear_include_bounding_boxes() {
  include_bounding_boxes_ = false;
}
bool FaceDetectionConfig::include_bounding_boxes() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.FaceDetectionConfig.include_bounding_boxes)
  return include_bounding_boxes_;
}
void FaceDetectionConfig::set_include_bounding_boxes(bool value) {
  
  include_bounding_boxes_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.FaceDetectionConfig.include_bounding_boxes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoSegment::kStartTimeOffsetFieldNumber;
const int VideoSegment::kEndTimeOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoSegment::VideoSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.VideoSegment)
}
VideoSegment::VideoSegment(const VideoSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_time_offset()) {
    start_time_offset_ = new ::google::protobuf::Duration(*from.start_time_offset_);
  } else {
    start_time_offset_ = NULL;
  }
  if (from.has_end_time_offset()) {
    end_time_offset_ = new ::google::protobuf::Duration(*from.end_time_offset_);
  } else {
    end_time_offset_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.VideoSegment)
}

void VideoSegment::SharedCtor() {
  ::memset(&start_time_offset_, 0, reinterpret_cast<char*>(&end_time_offset_) -
    reinterpret_cast<char*>(&start_time_offset_) + sizeof(end_time_offset_));
  _cached_size_ = 0;
}

VideoSegment::~VideoSegment() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.VideoSegment)
  SharedDtor();
}

void VideoSegment::SharedDtor() {
  if (this != internal_default_instance()) {
    delete start_time_offset_;
  }
  if (this != internal_default_instance()) {
    delete end_time_offset_;
  }
}

void VideoSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoSegment::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoSegment& VideoSegment::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoSegment* VideoSegment::New(::google::protobuf::Arena* arena) const {
  VideoSegment* n = new VideoSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.VideoSegment)
  if (GetArenaNoVirtual() == NULL && start_time_offset_ != NULL) {
    delete start_time_offset_;
  }
  start_time_offset_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_offset_ != NULL) {
    delete end_time_offset_;
  }
  end_time_offset_ = NULL;
}

bool VideoSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.VideoSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration start_time_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_time_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration end_time_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_time_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.VideoSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.VideoSegment)
  return false;
#undef DO_
}

void VideoSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.VideoSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time_offset = 1;
  if (this->has_start_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->start_time_offset_, output);
  }

  // .google.protobuf.Duration end_time_offset = 2;
  if (this->has_end_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->end_time_offset_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.VideoSegment)
}

::google::protobuf::uint8* VideoSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.VideoSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time_offset = 1;
  if (this->has_start_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->start_time_offset_, deterministic, target);
  }

  // .google.protobuf.Duration end_time_offset = 2;
  if (this->has_end_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->end_time_offset_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.VideoSegment)
  return target;
}

size_t VideoSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.VideoSegment)
  size_t total_size = 0;

  // .google.protobuf.Duration start_time_offset = 1;
  if (this->has_start_time_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_time_offset_);
  }

  // .google.protobuf.Duration end_time_offset = 2;
  if (this->has_end_time_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_time_offset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.VideoSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.VideoSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.VideoSegment)
    MergeFrom(*source);
  }
}

void VideoSegment::MergeFrom(const VideoSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.VideoSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_time_offset()) {
    mutable_start_time_offset()->::google::protobuf::Duration::MergeFrom(from.start_time_offset());
  }
  if (from.has_end_time_offset()) {
    mutable_end_time_offset()->::google::protobuf::Duration::MergeFrom(from.end_time_offset());
  }
}

void VideoSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.VideoSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoSegment::CopyFrom(const VideoSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.VideoSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSegment::IsInitialized() const {
  return true;
}

void VideoSegment::Swap(VideoSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoSegment::InternalSwap(VideoSegment* other) {
  std::swap(start_time_offset_, other->start_time_offset_);
  std::swap(end_time_offset_, other->end_time_offset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoSegment::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoSegment

// .google.protobuf.Duration start_time_offset = 1;
bool VideoSegment::has_start_time_offset() const {
  return this != internal_default_instance() && start_time_offset_ != NULL;
}
void VideoSegment::clear_start_time_offset() {
  if (GetArenaNoVirtual() == NULL && start_time_offset_ != NULL) delete start_time_offset_;
  start_time_offset_ = NULL;
}
const ::google::protobuf::Duration& VideoSegment::start_time_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoSegment.start_time_offset)
  return start_time_offset_ != NULL ? *start_time_offset_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* VideoSegment::mutable_start_time_offset() {
  
  if (start_time_offset_ == NULL) {
    start_time_offset_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoSegment.start_time_offset)
  return start_time_offset_;
}
::google::protobuf::Duration* VideoSegment::release_start_time_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.VideoSegment.start_time_offset)
  
  ::google::protobuf::Duration* temp = start_time_offset_;
  start_time_offset_ = NULL;
  return temp;
}
void VideoSegment::set_allocated_start_time_offset(::google::protobuf::Duration* start_time_offset) {
  delete start_time_offset_;
  if (start_time_offset != NULL && start_time_offset->GetArena() != NULL) {
    ::google::protobuf::Duration* new_start_time_offset = new ::google::protobuf::Duration;
    new_start_time_offset->CopyFrom(*start_time_offset);
    start_time_offset = new_start_time_offset;
  }
  start_time_offset_ = start_time_offset;
  if (start_time_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.VideoSegment.start_time_offset)
}

// .google.protobuf.Duration end_time_offset = 2;
bool VideoSegment::has_end_time_offset() const {
  return this != internal_default_instance() && end_time_offset_ != NULL;
}
void VideoSegment::clear_end_time_offset() {
  if (GetArenaNoVirtual() == NULL && end_time_offset_ != NULL) delete end_time_offset_;
  end_time_offset_ = NULL;
}
const ::google::protobuf::Duration& VideoSegment::end_time_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoSegment.end_time_offset)
  return end_time_offset_ != NULL ? *end_time_offset_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* VideoSegment::mutable_end_time_offset() {
  
  if (end_time_offset_ == NULL) {
    end_time_offset_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoSegment.end_time_offset)
  return end_time_offset_;
}
::google::protobuf::Duration* VideoSegment::release_end_time_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.VideoSegment.end_time_offset)
  
  ::google::protobuf::Duration* temp = end_time_offset_;
  end_time_offset_ = NULL;
  return temp;
}
void VideoSegment::set_allocated_end_time_offset(::google::protobuf::Duration* end_time_offset) {
  delete end_time_offset_;
  if (end_time_offset != NULL && end_time_offset->GetArena() != NULL) {
    ::google::protobuf::Duration* new_end_time_offset = new ::google::protobuf::Duration;
    new_end_time_offset->CopyFrom(*end_time_offset);
    end_time_offset = new_end_time_offset;
  }
  end_time_offset_ = end_time_offset;
  if (end_time_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.VideoSegment.end_time_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelSegment::kSegmentFieldNumber;
const int LabelSegment::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelSegment::LabelSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.LabelSegment)
}
LabelSegment::LabelSegment(const LabelSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_segment()) {
    segment_ = new ::google::cloud::videointelligence::v1beta2::VideoSegment(*from.segment_);
  } else {
    segment_ = NULL;
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.LabelSegment)
}

void LabelSegment::SharedCtor() {
  ::memset(&segment_, 0, reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&segment_) + sizeof(confidence_));
  _cached_size_ = 0;
}

LabelSegment::~LabelSegment() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.LabelSegment)
  SharedDtor();
}

void LabelSegment::SharedDtor() {
  if (this != internal_default_instance()) {
    delete segment_;
  }
}

void LabelSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelSegment::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelSegment& LabelSegment::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

LabelSegment* LabelSegment::New(::google::protobuf::Arena* arena) const {
  LabelSegment* n = new LabelSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.LabelSegment)
  if (GetArenaNoVirtual() == NULL && segment_ != NULL) {
    delete segment_;
  }
  segment_ = NULL;
  confidence_ = 0;
}

bool LabelSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.LabelSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.videointelligence.v1beta2.VideoSegment segment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.LabelSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.LabelSegment)
  return false;
#undef DO_
}

void LabelSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.LabelSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1beta2.VideoSegment segment = 1;
  if (this->has_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->segment_, output);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.LabelSegment)
}

::google::protobuf::uint8* LabelSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.LabelSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1beta2.VideoSegment segment = 1;
  if (this->has_segment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->segment_, deterministic, target);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.LabelSegment)
  return target;
}

size_t LabelSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.LabelSegment)
  size_t total_size = 0;

  // .google.cloud.videointelligence.v1beta2.VideoSegment segment = 1;
  if (this->has_segment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->segment_);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.LabelSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.LabelSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.LabelSegment)
    MergeFrom(*source);
  }
}

void LabelSegment::MergeFrom(const LabelSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.LabelSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_segment()) {
    mutable_segment()->::google::cloud::videointelligence::v1beta2::VideoSegment::MergeFrom(from.segment());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void LabelSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.LabelSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSegment::CopyFrom(const LabelSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.LabelSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSegment::IsInitialized() const {
  return true;
}

void LabelSegment::Swap(LabelSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelSegment::InternalSwap(LabelSegment* other) {
  std::swap(segment_, other->segment_);
  std::swap(confidence_, other->confidence_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelSegment::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelSegment

// .google.cloud.videointelligence.v1beta2.VideoSegment segment = 1;
bool LabelSegment::has_segment() const {
  return this != internal_default_instance() && segment_ != NULL;
}
void LabelSegment::clear_segment() {
  if (GetArenaNoVirtual() == NULL && segment_ != NULL) delete segment_;
  segment_ = NULL;
}
const ::google::cloud::videointelligence::v1beta2::VideoSegment& LabelSegment::segment() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.LabelSegment.segment)
  return segment_ != NULL ? *segment_
                         : *::google::cloud::videointelligence::v1beta2::VideoSegment::internal_default_instance();
}
::google::cloud::videointelligence::v1beta2::VideoSegment* LabelSegment::mutable_segment() {
  
  if (segment_ == NULL) {
    segment_ = new ::google::cloud::videointelligence::v1beta2::VideoSegment;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.LabelSegment.segment)
  return segment_;
}
::google::cloud::videointelligence::v1beta2::VideoSegment* LabelSegment::release_segment() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.LabelSegment.segment)
  
  ::google::cloud::videointelligence::v1beta2::VideoSegment* temp = segment_;
  segment_ = NULL;
  return temp;
}
void LabelSegment::set_allocated_segment(::google::cloud::videointelligence::v1beta2::VideoSegment* segment) {
  delete segment_;
  segment_ = segment;
  if (segment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.LabelSegment.segment)
}

// float confidence = 2;
void LabelSegment::clear_confidence() {
  confidence_ = 0;
}
float LabelSegment::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.LabelSegment.confidence)
  return confidence_;
}
void LabelSegment::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.LabelSegment.confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelFrame::kTimeOffsetFieldNumber;
const int LabelFrame::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelFrame::LabelFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.LabelFrame)
}
LabelFrame::LabelFrame(const LabelFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_offset()) {
    time_offset_ = new ::google::protobuf::Duration(*from.time_offset_);
  } else {
    time_offset_ = NULL;
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.LabelFrame)
}

void LabelFrame::SharedCtor() {
  ::memset(&time_offset_, 0, reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&time_offset_) + sizeof(confidence_));
  _cached_size_ = 0;
}

LabelFrame::~LabelFrame() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.LabelFrame)
  SharedDtor();
}

void LabelFrame::SharedDtor() {
  if (this != internal_default_instance()) {
    delete time_offset_;
  }
}

void LabelFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelFrame::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelFrame& LabelFrame::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

LabelFrame* LabelFrame::New(::google::protobuf::Arena* arena) const {
  LabelFrame* n = new LabelFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.LabelFrame)
  if (GetArenaNoVirtual() == NULL && time_offset_ != NULL) {
    delete time_offset_;
  }
  time_offset_ = NULL;
  confidence_ = 0;
}

bool LabelFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.LabelFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration time_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.LabelFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.LabelFrame)
  return false;
#undef DO_
}

void LabelFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.LabelFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration time_offset = 1;
  if (this->has_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->time_offset_, output);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.LabelFrame)
}

::google::protobuf::uint8* LabelFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.LabelFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration time_offset = 1;
  if (this->has_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->time_offset_, deterministic, target);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.LabelFrame)
  return target;
}

size_t LabelFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.LabelFrame)
  size_t total_size = 0;

  // .google.protobuf.Duration time_offset = 1;
  if (this->has_time_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_offset_);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.LabelFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.LabelFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.LabelFrame)
    MergeFrom(*source);
  }
}

void LabelFrame::MergeFrom(const LabelFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.LabelFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_offset()) {
    mutable_time_offset()->::google::protobuf::Duration::MergeFrom(from.time_offset());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void LabelFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.LabelFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelFrame::CopyFrom(const LabelFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.LabelFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelFrame::IsInitialized() const {
  return true;
}

void LabelFrame::Swap(LabelFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelFrame::InternalSwap(LabelFrame* other) {
  std::swap(time_offset_, other->time_offset_);
  std::swap(confidence_, other->confidence_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelFrame::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelFrame

// .google.protobuf.Duration time_offset = 1;
bool LabelFrame::has_time_offset() const {
  return this != internal_default_instance() && time_offset_ != NULL;
}
void LabelFrame::clear_time_offset() {
  if (GetArenaNoVirtual() == NULL && time_offset_ != NULL) delete time_offset_;
  time_offset_ = NULL;
}
const ::google::protobuf::Duration& LabelFrame::time_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.LabelFrame.time_offset)
  return time_offset_ != NULL ? *time_offset_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* LabelFrame::mutable_time_offset() {
  
  if (time_offset_ == NULL) {
    time_offset_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.LabelFrame.time_offset)
  return time_offset_;
}
::google::protobuf::Duration* LabelFrame::release_time_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.LabelFrame.time_offset)
  
  ::google::protobuf::Duration* temp = time_offset_;
  time_offset_ = NULL;
  return temp;
}
void LabelFrame::set_allocated_time_offset(::google::protobuf::Duration* time_offset) {
  delete time_offset_;
  if (time_offset != NULL && time_offset->GetArena() != NULL) {
    ::google::protobuf::Duration* new_time_offset = new ::google::protobuf::Duration;
    new_time_offset->CopyFrom(*time_offset);
    time_offset = new_time_offset;
  }
  time_offset_ = time_offset;
  if (time_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.LabelFrame.time_offset)
}

// float confidence = 2;
void LabelFrame::clear_confidence() {
  confidence_ = 0;
}
float LabelFrame::confidence() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.LabelFrame.confidence)
  return confidence_;
}
void LabelFrame::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.LabelFrame.confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entity::kEntityIdFieldNumber;
const int Entity::kDescriptionFieldNumber;
const int Entity::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entity::Entity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.Entity)
}
Entity::Entity(const Entity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.entity_id().size() > 0) {
    entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.Entity)
}

void Entity::SharedCtor() {
  entity_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  entity_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Entity& Entity::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

Entity* Entity::New(::google::protobuf::Arena* arena) const {
  Entity* n = new Entity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.Entity)
  entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entity_id().data(), this->entity_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1beta2.Entity.entity_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1beta2.Entity.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), this->language_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1beta2.Entity.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.Entity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (this->entity_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity_id().data(), this->entity_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.Entity.entity_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_id(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.Entity.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.Entity.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.Entity)
}

::google::protobuf::uint8* Entity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.Entity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_id = 1;
  if (this->entity_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity_id().data(), this->entity_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.Entity.entity_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_id(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.Entity.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.Entity.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.Entity)
  return target;
}

size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.Entity)
  size_t total_size = 0;

  // string entity_id = 1;
  if (this->entity_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity_id());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  const Entity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.Entity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.Entity)
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_id().size() > 0) {

    entity_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  return true;
}

void Entity::Swap(Entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity::InternalSwap(Entity* other) {
  entity_id_.Swap(&other->entity_id_);
  description_.Swap(&other->description_);
  language_code_.Swap(&other->language_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entity

// string entity_id = 1;
void Entity::clear_entity_id() {
  entity_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Entity::entity_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.Entity.entity_id)
  return entity_id_.GetNoArena();
}
void Entity::set_entity_id(const ::std::string& value) {
  
  entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.Entity.entity_id)
}
#if LANG_CXX11
void Entity::set_entity_id(::std::string&& value) {
  
  entity_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.Entity.entity_id)
}
#endif
void Entity::set_entity_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.Entity.entity_id)
}
void Entity::set_entity_id(const char* value, size_t size) {
  
  entity_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.Entity.entity_id)
}
::std::string* Entity::mutable_entity_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.Entity.entity_id)
  return entity_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Entity::release_entity_id() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.Entity.entity_id)
  
  return entity_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Entity::set_allocated_entity_id(::std::string* entity_id) {
  if (entity_id != NULL) {
    
  } else {
    
  }
  entity_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.Entity.entity_id)
}

// string description = 2;
void Entity::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Entity::description() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.Entity.description)
  return description_.GetNoArena();
}
void Entity::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.Entity.description)
}
#if LANG_CXX11
void Entity::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.Entity.description)
}
#endif
void Entity::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.Entity.description)
}
void Entity::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.Entity.description)
}
::std::string* Entity::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.Entity.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Entity::release_description() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.Entity.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Entity::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.Entity.description)
}

// string language_code = 3;
void Entity::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Entity::language_code() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.Entity.language_code)
  return language_code_.GetNoArena();
}
void Entity::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.Entity.language_code)
}
#if LANG_CXX11
void Entity::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.Entity.language_code)
}
#endif
void Entity::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.Entity.language_code)
}
void Entity::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.Entity.language_code)
}
::std::string* Entity::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.Entity.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Entity::release_language_code() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.Entity.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Entity::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.Entity.language_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LabelAnnotation::kEntityFieldNumber;
const int LabelAnnotation::kCategoryEntitiesFieldNumber;
const int LabelAnnotation::kSegmentsFieldNumber;
const int LabelAnnotation::kFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LabelAnnotation::LabelAnnotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.LabelAnnotation)
}
LabelAnnotation::LabelAnnotation(const LabelAnnotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      category_entities_(from.category_entities_),
      segments_(from.segments_),
      frames_(from.frames_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entity()) {
    entity_ = new ::google::cloud::videointelligence::v1beta2::Entity(*from.entity_);
  } else {
    entity_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.LabelAnnotation)
}

void LabelAnnotation::SharedCtor() {
  entity_ = NULL;
  _cached_size_ = 0;
}

LabelAnnotation::~LabelAnnotation() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  SharedDtor();
}

void LabelAnnotation::SharedDtor() {
  if (this != internal_default_instance()) {
    delete entity_;
  }
}

void LabelAnnotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelAnnotation::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LabelAnnotation& LabelAnnotation::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

LabelAnnotation* LabelAnnotation::New(::google::protobuf::Arena* arena) const {
  LabelAnnotation* n = new LabelAnnotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LabelAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  category_entities_.Clear();
  segments_.Clear();
  frames_.Clear();
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) {
    delete entity_;
  }
  entity_ = NULL;
}

bool LabelAnnotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.videointelligence.v1beta2.Entity entity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1beta2.Entity category_entities = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category_entities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1beta2.LabelSegment segments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1beta2.LabelFrame frames = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  return false;
#undef DO_
}

void LabelAnnotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1beta2.Entity entity = 1;
  if (this->has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->entity_, output);
  }

  // repeated .google.cloud.videointelligence.v1beta2.Entity category_entities = 2;
  for (unsigned int i = 0, n = this->category_entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->category_entities(i), output);
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelSegment segments = 3;
  for (unsigned int i = 0, n = this->segments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->segments(i), output);
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelFrame frames = 4;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->frames(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.LabelAnnotation)
}

::google::protobuf::uint8* LabelAnnotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1beta2.Entity entity = 1;
  if (this->has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->entity_, deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1beta2.Entity category_entities = 2;
  for (unsigned int i = 0, n = this->category_entities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->category_entities(i), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelSegment segments = 3;
  for (unsigned int i = 0, n = this->segments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->segments(i), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelFrame frames = 4;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->frames(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  return target;
}

size_t LabelAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  size_t total_size = 0;

  // repeated .google.cloud.videointelligence.v1beta2.Entity category_entities = 2;
  {
    unsigned int count = this->category_entities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->category_entities(i));
    }
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelSegment segments = 3;
  {
    unsigned int count = this->segments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segments(i));
    }
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelFrame frames = 4;
  {
    unsigned int count = this->frames_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frames(i));
    }
  }

  // .google.cloud.videointelligence.v1beta2.Entity entity = 1;
  if (this->has_entity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entity_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelAnnotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelAnnotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LabelAnnotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.LabelAnnotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.LabelAnnotation)
    MergeFrom(*source);
  }
}

void LabelAnnotation::MergeFrom(const LabelAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_entities_.MergeFrom(from.category_entities_);
  segments_.MergeFrom(from.segments_);
  frames_.MergeFrom(from.frames_);
  if (from.has_entity()) {
    mutable_entity()->::google::cloud::videointelligence::v1beta2::Entity::MergeFrom(from.entity());
  }
}

void LabelAnnotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelAnnotation::CopyFrom(const LabelAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.LabelAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelAnnotation::IsInitialized() const {
  return true;
}

void LabelAnnotation::Swap(LabelAnnotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LabelAnnotation::InternalSwap(LabelAnnotation* other) {
  category_entities_.InternalSwap(&other->category_entities_);
  segments_.InternalSwap(&other->segments_);
  frames_.InternalSwap(&other->frames_);
  std::swap(entity_, other->entity_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LabelAnnotation::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LabelAnnotation

// .google.cloud.videointelligence.v1beta2.Entity entity = 1;
bool LabelAnnotation::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
void LabelAnnotation::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
}
const ::google::cloud::videointelligence::v1beta2::Entity& LabelAnnotation::entity() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.LabelAnnotation.entity)
  return entity_ != NULL ? *entity_
                         : *::google::cloud::videointelligence::v1beta2::Entity::internal_default_instance();
}
::google::cloud::videointelligence::v1beta2::Entity* LabelAnnotation::mutable_entity() {
  
  if (entity_ == NULL) {
    entity_ = new ::google::cloud::videointelligence::v1beta2::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.LabelAnnotation.entity)
  return entity_;
}
::google::cloud::videointelligence::v1beta2::Entity* LabelAnnotation::release_entity() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.LabelAnnotation.entity)
  
  ::google::cloud::videointelligence::v1beta2::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
void LabelAnnotation::set_allocated_entity(::google::cloud::videointelligence::v1beta2::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.LabelAnnotation.entity)
}

// repeated .google.cloud.videointelligence.v1beta2.Entity category_entities = 2;
int LabelAnnotation::category_entities_size() const {
  return category_entities_.size();
}
void LabelAnnotation::clear_category_entities() {
  category_entities_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::Entity& LabelAnnotation::category_entities(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.LabelAnnotation.category_entities)
  return category_entities_.Get(index);
}
::google::cloud::videointelligence::v1beta2::Entity* LabelAnnotation::mutable_category_entities(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.LabelAnnotation.category_entities)
  return category_entities_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::Entity* LabelAnnotation::add_category_entities() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.LabelAnnotation.category_entities)
  return category_entities_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::Entity >*
LabelAnnotation::mutable_category_entities() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.LabelAnnotation.category_entities)
  return &category_entities_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::Entity >&
LabelAnnotation::category_entities() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.LabelAnnotation.category_entities)
  return category_entities_;
}

// repeated .google.cloud.videointelligence.v1beta2.LabelSegment segments = 3;
int LabelAnnotation::segments_size() const {
  return segments_.size();
}
void LabelAnnotation::clear_segments() {
  segments_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::LabelSegment& LabelAnnotation::segments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.LabelAnnotation.segments)
  return segments_.Get(index);
}
::google::cloud::videointelligence::v1beta2::LabelSegment* LabelAnnotation::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.LabelAnnotation.segments)
  return segments_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::LabelSegment* LabelAnnotation::add_segments() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.LabelAnnotation.segments)
  return segments_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::LabelSegment >*
LabelAnnotation::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.LabelAnnotation.segments)
  return &segments_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::LabelSegment >&
LabelAnnotation::segments() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.LabelAnnotation.segments)
  return segments_;
}

// repeated .google.cloud.videointelligence.v1beta2.LabelFrame frames = 4;
int LabelAnnotation::frames_size() const {
  return frames_.size();
}
void LabelAnnotation::clear_frames() {
  frames_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::LabelFrame& LabelAnnotation::frames(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.LabelAnnotation.frames)
  return frames_.Get(index);
}
::google::cloud::videointelligence::v1beta2::LabelFrame* LabelAnnotation::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.LabelAnnotation.frames)
  return frames_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::LabelFrame* LabelAnnotation::add_frames() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.LabelAnnotation.frames)
  return frames_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::LabelFrame >*
LabelAnnotation::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.LabelAnnotation.frames)
  return &frames_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::LabelFrame >&
LabelAnnotation::frames() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.LabelAnnotation.frames)
  return frames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExplicitContentFrame::kTimeOffsetFieldNumber;
const int ExplicitContentFrame::kPornographyLikelihoodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExplicitContentFrame::ExplicitContentFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
}
ExplicitContentFrame::ExplicitContentFrame(const ExplicitContentFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_offset()) {
    time_offset_ = new ::google::protobuf::Duration(*from.time_offset_);
  } else {
    time_offset_ = NULL;
  }
  pornography_likelihood_ = from.pornography_likelihood_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
}

void ExplicitContentFrame::SharedCtor() {
  ::memset(&time_offset_, 0, reinterpret_cast<char*>(&pornography_likelihood_) -
    reinterpret_cast<char*>(&time_offset_) + sizeof(pornography_likelihood_));
  _cached_size_ = 0;
}

ExplicitContentFrame::~ExplicitContentFrame() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  SharedDtor();
}

void ExplicitContentFrame::SharedDtor() {
  if (this != internal_default_instance()) {
    delete time_offset_;
  }
}

void ExplicitContentFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExplicitContentFrame::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExplicitContentFrame& ExplicitContentFrame::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExplicitContentFrame* ExplicitContentFrame::New(::google::protobuf::Arena* arena) const {
  ExplicitContentFrame* n = new ExplicitContentFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExplicitContentFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  if (GetArenaNoVirtual() == NULL && time_offset_ != NULL) {
    delete time_offset_;
  }
  time_offset_ = NULL;
  pornography_likelihood_ = 0;
}

bool ExplicitContentFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration time_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1beta2.Likelihood pornography_likelihood = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pornography_likelihood(static_cast< ::google::cloud::videointelligence::v1beta2::Likelihood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  return false;
#undef DO_
}

void ExplicitContentFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration time_offset = 1;
  if (this->has_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->time_offset_, output);
  }

  // .google.cloud.videointelligence.v1beta2.Likelihood pornography_likelihood = 2;
  if (this->pornography_likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pornography_likelihood(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
}

::google::protobuf::uint8* ExplicitContentFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration time_offset = 1;
  if (this->has_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->time_offset_, deterministic, target);
  }

  // .google.cloud.videointelligence.v1beta2.Likelihood pornography_likelihood = 2;
  if (this->pornography_likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pornography_likelihood(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  return target;
}

size_t ExplicitContentFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  size_t total_size = 0;

  // .google.protobuf.Duration time_offset = 1;
  if (this->has_time_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_offset_);
  }

  // .google.cloud.videointelligence.v1beta2.Likelihood pornography_likelihood = 2;
  if (this->pornography_likelihood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pornography_likelihood());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExplicitContentFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const ExplicitContentFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExplicitContentFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
    MergeFrom(*source);
  }
}

void ExplicitContentFrame::MergeFrom(const ExplicitContentFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_offset()) {
    mutable_time_offset()->::google::protobuf::Duration::MergeFrom(from.time_offset());
  }
  if (from.pornography_likelihood() != 0) {
    set_pornography_likelihood(from.pornography_likelihood());
  }
}

void ExplicitContentFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplicitContentFrame::CopyFrom(const ExplicitContentFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplicitContentFrame::IsInitialized() const {
  return true;
}

void ExplicitContentFrame::Swap(ExplicitContentFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExplicitContentFrame::InternalSwap(ExplicitContentFrame* other) {
  std::swap(time_offset_, other->time_offset_);
  std::swap(pornography_likelihood_, other->pornography_likelihood_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExplicitContentFrame::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExplicitContentFrame

// .google.protobuf.Duration time_offset = 1;
bool ExplicitContentFrame::has_time_offset() const {
  return this != internal_default_instance() && time_offset_ != NULL;
}
void ExplicitContentFrame::clear_time_offset() {
  if (GetArenaNoVirtual() == NULL && time_offset_ != NULL) delete time_offset_;
  time_offset_ = NULL;
}
const ::google::protobuf::Duration& ExplicitContentFrame::time_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.ExplicitContentFrame.time_offset)
  return time_offset_ != NULL ? *time_offset_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* ExplicitContentFrame::mutable_time_offset() {
  
  if (time_offset_ == NULL) {
    time_offset_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.ExplicitContentFrame.time_offset)
  return time_offset_;
}
::google::protobuf::Duration* ExplicitContentFrame::release_time_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.ExplicitContentFrame.time_offset)
  
  ::google::protobuf::Duration* temp = time_offset_;
  time_offset_ = NULL;
  return temp;
}
void ExplicitContentFrame::set_allocated_time_offset(::google::protobuf::Duration* time_offset) {
  delete time_offset_;
  if (time_offset != NULL && time_offset->GetArena() != NULL) {
    ::google::protobuf::Duration* new_time_offset = new ::google::protobuf::Duration;
    new_time_offset->CopyFrom(*time_offset);
    time_offset = new_time_offset;
  }
  time_offset_ = time_offset;
  if (time_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.ExplicitContentFrame.time_offset)
}

// .google.cloud.videointelligence.v1beta2.Likelihood pornography_likelihood = 2;
void ExplicitContentFrame::clear_pornography_likelihood() {
  pornography_likelihood_ = 0;
}
::google::cloud::videointelligence::v1beta2::Likelihood ExplicitContentFrame::pornography_likelihood() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.ExplicitContentFrame.pornography_likelihood)
  return static_cast< ::google::cloud::videointelligence::v1beta2::Likelihood >(pornography_likelihood_);
}
void ExplicitContentFrame::set_pornography_likelihood(::google::cloud::videointelligence::v1beta2::Likelihood value) {
  
  pornography_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.ExplicitContentFrame.pornography_likelihood)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExplicitContentAnnotation::kFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExplicitContentAnnotation::ExplicitContentAnnotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
}
ExplicitContentAnnotation::ExplicitContentAnnotation(const ExplicitContentAnnotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      frames_(from.frames_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
}

void ExplicitContentAnnotation::SharedCtor() {
  _cached_size_ = 0;
}

ExplicitContentAnnotation::~ExplicitContentAnnotation() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  SharedDtor();
}

void ExplicitContentAnnotation::SharedDtor() {
}

void ExplicitContentAnnotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExplicitContentAnnotation::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExplicitContentAnnotation& ExplicitContentAnnotation::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExplicitContentAnnotation* ExplicitContentAnnotation::New(::google::protobuf::Arena* arena) const {
  ExplicitContentAnnotation* n = new ExplicitContentAnnotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExplicitContentAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  frames_.Clear();
}

bool ExplicitContentAnnotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.videointelligence.v1beta2.ExplicitContentFrame frames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  return false;
#undef DO_
}

void ExplicitContentAnnotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1beta2.ExplicitContentFrame frames = 1;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frames(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
}

::google::protobuf::uint8* ExplicitContentAnnotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1beta2.ExplicitContentFrame frames = 1;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->frames(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  return target;
}

size_t ExplicitContentAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  size_t total_size = 0;

  // repeated .google.cloud.videointelligence.v1beta2.ExplicitContentFrame frames = 1;
  {
    unsigned int count = this->frames_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frames(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExplicitContentAnnotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  const ExplicitContentAnnotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExplicitContentAnnotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
    MergeFrom(*source);
  }
}

void ExplicitContentAnnotation::MergeFrom(const ExplicitContentAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
}

void ExplicitContentAnnotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplicitContentAnnotation::CopyFrom(const ExplicitContentAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplicitContentAnnotation::IsInitialized() const {
  return true;
}

void ExplicitContentAnnotation::Swap(ExplicitContentAnnotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExplicitContentAnnotation::InternalSwap(ExplicitContentAnnotation* other) {
  frames_.InternalSwap(&other->frames_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExplicitContentAnnotation::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExplicitContentAnnotation

// repeated .google.cloud.videointelligence.v1beta2.ExplicitContentFrame frames = 1;
int ExplicitContentAnnotation::frames_size() const {
  return frames_.size();
}
void ExplicitContentAnnotation::clear_frames() {
  frames_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::ExplicitContentFrame& ExplicitContentAnnotation::frames(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.frames)
  return frames_.Get(index);
}
::google::cloud::videointelligence::v1beta2::ExplicitContentFrame* ExplicitContentAnnotation::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.frames)
  return frames_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::ExplicitContentFrame* ExplicitContentAnnotation::add_frames() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.frames)
  return frames_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::ExplicitContentFrame >*
ExplicitContentAnnotation::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.frames)
  return &frames_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::ExplicitContentFrame >&
ExplicitContentAnnotation::frames() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.frames)
  return frames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizedBoundingBox::kLeftFieldNumber;
const int NormalizedBoundingBox::kTopFieldNumber;
const int NormalizedBoundingBox::kRightFieldNumber;
const int NormalizedBoundingBox::kBottomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizedBoundingBox::NormalizedBoundingBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
}
NormalizedBoundingBox::NormalizedBoundingBox(const NormalizedBoundingBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
}

void NormalizedBoundingBox::SharedCtor() {
  ::memset(&left_, 0, reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_) + sizeof(bottom_));
  _cached_size_ = 0;
}

NormalizedBoundingBox::~NormalizedBoundingBox() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  SharedDtor();
}

void NormalizedBoundingBox::SharedDtor() {
}

void NormalizedBoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalizedBoundingBox::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalizedBoundingBox& NormalizedBoundingBox::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

NormalizedBoundingBox* NormalizedBoundingBox::New(::google::protobuf::Arena* arena) const {
  NormalizedBoundingBox* n = new NormalizedBoundingBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NormalizedBoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  ::memset(&left_, 0, reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_) + sizeof(bottom_));
}

bool NormalizedBoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float top = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float bottom = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  return false;
#undef DO_
}

void NormalizedBoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left(), output);
  }

  // float top = 2;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->top(), output);
  }

  // float right = 3;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->right(), output);
  }

  // float bottom = 4;
  if (this->bottom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bottom(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
}

::google::protobuf::uint8* NormalizedBoundingBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left(), target);
  }

  // float top = 2;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->top(), target);
  }

  // float right = 3;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->right(), target);
  }

  // float bottom = 4;
  if (this->bottom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bottom(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  return target;
}

size_t NormalizedBoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  size_t total_size = 0;

  // float left = 1;
  if (this->left() != 0) {
    total_size += 1 + 4;
  }

  // float top = 2;
  if (this->top() != 0) {
    total_size += 1 + 4;
  }

  // float right = 3;
  if (this->right() != 0) {
    total_size += 1 + 4;
  }

  // float bottom = 4;
  if (this->bottom() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalizedBoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedBoundingBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalizedBoundingBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
    MergeFrom(*source);
  }
}

void NormalizedBoundingBox::MergeFrom(const NormalizedBoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
  if (from.bottom() != 0) {
    set_bottom(from.bottom());
  }
}

void NormalizedBoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedBoundingBox::CopyFrom(const NormalizedBoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedBoundingBox::IsInitialized() const {
  return true;
}

void NormalizedBoundingBox::Swap(NormalizedBoundingBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalizedBoundingBox::InternalSwap(NormalizedBoundingBox* other) {
  std::swap(left_, other->left_);
  std::swap(top_, other->top_);
  std::swap(right_, other->right_);
  std::swap(bottom_, other->bottom_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NormalizedBoundingBox::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NormalizedBoundingBox

// float left = 1;
void NormalizedBoundingBox::clear_left() {
  left_ = 0;
}
float NormalizedBoundingBox::left() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.left)
  return left_;
}
void NormalizedBoundingBox::set_left(float value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.left)
}

// float top = 2;
void NormalizedBoundingBox::clear_top() {
  top_ = 0;
}
float NormalizedBoundingBox::top() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.top)
  return top_;
}
void NormalizedBoundingBox::set_top(float value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.top)
}

// float right = 3;
void NormalizedBoundingBox::clear_right() {
  right_ = 0;
}
float NormalizedBoundingBox::right() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.right)
  return right_;
}
void NormalizedBoundingBox::set_right(float value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.right)
}

// float bottom = 4;
void NormalizedBoundingBox::clear_bottom() {
  bottom_ = 0;
}
float NormalizedBoundingBox::bottom() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.bottom)
  return bottom_;
}
void NormalizedBoundingBox::set_bottom(float value) {
  
  bottom_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.bottom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceSegment::kSegmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceSegment::FaceSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.FaceSegment)
}
FaceSegment::FaceSegment(const FaceSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_segment()) {
    segment_ = new ::google::cloud::videointelligence::v1beta2::VideoSegment(*from.segment_);
  } else {
    segment_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.FaceSegment)
}

void FaceSegment::SharedCtor() {
  segment_ = NULL;
  _cached_size_ = 0;
}

FaceSegment::~FaceSegment() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.FaceSegment)
  SharedDtor();
}

void FaceSegment::SharedDtor() {
  if (this != internal_default_instance()) {
    delete segment_;
  }
}

void FaceSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceSegment::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceSegment& FaceSegment::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

FaceSegment* FaceSegment::New(::google::protobuf::Arena* arena) const {
  FaceSegment* n = new FaceSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.FaceSegment)
  if (GetArenaNoVirtual() == NULL && segment_ != NULL) {
    delete segment_;
  }
  segment_ = NULL;
}

bool FaceSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.FaceSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.videointelligence.v1beta2.VideoSegment segment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.FaceSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.FaceSegment)
  return false;
#undef DO_
}

void FaceSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.FaceSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1beta2.VideoSegment segment = 1;
  if (this->has_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->segment_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.FaceSegment)
}

::google::protobuf::uint8* FaceSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.FaceSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.videointelligence.v1beta2.VideoSegment segment = 1;
  if (this->has_segment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->segment_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.FaceSegment)
  return target;
}

size_t FaceSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.FaceSegment)
  size_t total_size = 0;

  // .google.cloud.videointelligence.v1beta2.VideoSegment segment = 1;
  if (this->has_segment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->segment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.FaceSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.FaceSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.FaceSegment)
    MergeFrom(*source);
  }
}

void FaceSegment::MergeFrom(const FaceSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.FaceSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_segment()) {
    mutable_segment()->::google::cloud::videointelligence::v1beta2::VideoSegment::MergeFrom(from.segment());
  }
}

void FaceSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.FaceSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceSegment::CopyFrom(const FaceSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.FaceSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceSegment::IsInitialized() const {
  return true;
}

void FaceSegment::Swap(FaceSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceSegment::InternalSwap(FaceSegment* other) {
  std::swap(segment_, other->segment_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceSegment::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceSegment

// .google.cloud.videointelligence.v1beta2.VideoSegment segment = 1;
bool FaceSegment::has_segment() const {
  return this != internal_default_instance() && segment_ != NULL;
}
void FaceSegment::clear_segment() {
  if (GetArenaNoVirtual() == NULL && segment_ != NULL) delete segment_;
  segment_ = NULL;
}
const ::google::cloud::videointelligence::v1beta2::VideoSegment& FaceSegment::segment() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.FaceSegment.segment)
  return segment_ != NULL ? *segment_
                         : *::google::cloud::videointelligence::v1beta2::VideoSegment::internal_default_instance();
}
::google::cloud::videointelligence::v1beta2::VideoSegment* FaceSegment::mutable_segment() {
  
  if (segment_ == NULL) {
    segment_ = new ::google::cloud::videointelligence::v1beta2::VideoSegment;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.FaceSegment.segment)
  return segment_;
}
::google::cloud::videointelligence::v1beta2::VideoSegment* FaceSegment::release_segment() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.FaceSegment.segment)
  
  ::google::cloud::videointelligence::v1beta2::VideoSegment* temp = segment_;
  segment_ = NULL;
  return temp;
}
void FaceSegment::set_allocated_segment(::google::cloud::videointelligence::v1beta2::VideoSegment* segment) {
  delete segment_;
  segment_ = segment;
  if (segment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.FaceSegment.segment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceFrame::kNormalizedBoundingBoxesFieldNumber;
const int FaceFrame::kTimeOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceFrame::FaceFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.FaceFrame)
}
FaceFrame::FaceFrame(const FaceFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      normalized_bounding_boxes_(from.normalized_bounding_boxes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_offset()) {
    time_offset_ = new ::google::protobuf::Duration(*from.time_offset_);
  } else {
    time_offset_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.FaceFrame)
}

void FaceFrame::SharedCtor() {
  time_offset_ = NULL;
  _cached_size_ = 0;
}

FaceFrame::~FaceFrame() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.FaceFrame)
  SharedDtor();
}

void FaceFrame::SharedDtor() {
  if (this != internal_default_instance()) {
    delete time_offset_;
  }
}

void FaceFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceFrame::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceFrame& FaceFrame::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

FaceFrame* FaceFrame::New(::google::protobuf::Arena* arena) const {
  FaceFrame* n = new FaceFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.FaceFrame)
  normalized_bounding_boxes_.Clear();
  if (GetArenaNoVirtual() == NULL && time_offset_ != NULL) {
    delete time_offset_;
  }
  time_offset_ = NULL;
}

bool FaceFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.FaceFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.videointelligence.v1beta2.NormalizedBoundingBox normalized_bounding_boxes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normalized_bounding_boxes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration time_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.FaceFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.FaceFrame)
  return false;
#undef DO_
}

void FaceFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.FaceFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1beta2.NormalizedBoundingBox normalized_bounding_boxes = 1;
  for (unsigned int i = 0, n = this->normalized_bounding_boxes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->normalized_bounding_boxes(i), output);
  }

  // .google.protobuf.Duration time_offset = 2;
  if (this->has_time_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->time_offset_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.FaceFrame)
}

::google::protobuf::uint8* FaceFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.FaceFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1beta2.NormalizedBoundingBox normalized_bounding_boxes = 1;
  for (unsigned int i = 0, n = this->normalized_bounding_boxes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->normalized_bounding_boxes(i), deterministic, target);
  }

  // .google.protobuf.Duration time_offset = 2;
  if (this->has_time_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->time_offset_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.FaceFrame)
  return target;
}

size_t FaceFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.FaceFrame)
  size_t total_size = 0;

  // repeated .google.cloud.videointelligence.v1beta2.NormalizedBoundingBox normalized_bounding_boxes = 1;
  {
    unsigned int count = this->normalized_bounding_boxes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normalized_bounding_boxes(i));
    }
  }

  // .google.protobuf.Duration time_offset = 2;
  if (this->has_time_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_offset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.FaceFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.FaceFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.FaceFrame)
    MergeFrom(*source);
  }
}

void FaceFrame::MergeFrom(const FaceFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.FaceFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  normalized_bounding_boxes_.MergeFrom(from.normalized_bounding_boxes_);
  if (from.has_time_offset()) {
    mutable_time_offset()->::google::protobuf::Duration::MergeFrom(from.time_offset());
  }
}

void FaceFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.FaceFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceFrame::CopyFrom(const FaceFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.FaceFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceFrame::IsInitialized() const {
  return true;
}

void FaceFrame::Swap(FaceFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceFrame::InternalSwap(FaceFrame* other) {
  normalized_bounding_boxes_.InternalSwap(&other->normalized_bounding_boxes_);
  std::swap(time_offset_, other->time_offset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceFrame::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceFrame

// repeated .google.cloud.videointelligence.v1beta2.NormalizedBoundingBox normalized_bounding_boxes = 1;
int FaceFrame::normalized_bounding_boxes_size() const {
  return normalized_bounding_boxes_.size();
}
void FaceFrame::clear_normalized_bounding_boxes() {
  normalized_bounding_boxes_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::NormalizedBoundingBox& FaceFrame::normalized_bounding_boxes(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.FaceFrame.normalized_bounding_boxes)
  return normalized_bounding_boxes_.Get(index);
}
::google::cloud::videointelligence::v1beta2::NormalizedBoundingBox* FaceFrame::mutable_normalized_bounding_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.FaceFrame.normalized_bounding_boxes)
  return normalized_bounding_boxes_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::NormalizedBoundingBox* FaceFrame::add_normalized_bounding_boxes() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.FaceFrame.normalized_bounding_boxes)
  return normalized_bounding_boxes_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::NormalizedBoundingBox >*
FaceFrame::mutable_normalized_bounding_boxes() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.FaceFrame.normalized_bounding_boxes)
  return &normalized_bounding_boxes_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::NormalizedBoundingBox >&
FaceFrame::normalized_bounding_boxes() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.FaceFrame.normalized_bounding_boxes)
  return normalized_bounding_boxes_;
}

// .google.protobuf.Duration time_offset = 2;
bool FaceFrame::has_time_offset() const {
  return this != internal_default_instance() && time_offset_ != NULL;
}
void FaceFrame::clear_time_offset() {
  if (GetArenaNoVirtual() == NULL && time_offset_ != NULL) delete time_offset_;
  time_offset_ = NULL;
}
const ::google::protobuf::Duration& FaceFrame::time_offset() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.FaceFrame.time_offset)
  return time_offset_ != NULL ? *time_offset_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* FaceFrame::mutable_time_offset() {
  
  if (time_offset_ == NULL) {
    time_offset_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.FaceFrame.time_offset)
  return time_offset_;
}
::google::protobuf::Duration* FaceFrame::release_time_offset() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.FaceFrame.time_offset)
  
  ::google::protobuf::Duration* temp = time_offset_;
  time_offset_ = NULL;
  return temp;
}
void FaceFrame::set_allocated_time_offset(::google::protobuf::Duration* time_offset) {
  delete time_offset_;
  if (time_offset != NULL && time_offset->GetArena() != NULL) {
    ::google::protobuf::Duration* new_time_offset = new ::google::protobuf::Duration;
    new_time_offset->CopyFrom(*time_offset);
    time_offset = new_time_offset;
  }
  time_offset_ = time_offset;
  if (time_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.FaceFrame.time_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceAnnotation::kThumbnailFieldNumber;
const int FaceAnnotation::kSegmentsFieldNumber;
const int FaceAnnotation::kFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceAnnotation::FaceAnnotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.FaceAnnotation)
}
FaceAnnotation::FaceAnnotation(const FaceAnnotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      segments_(from.segments_),
      frames_(from.frames_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thumbnail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thumbnail().size() > 0) {
    thumbnail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_);
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.FaceAnnotation)
}

void FaceAnnotation::SharedCtor() {
  thumbnail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FaceAnnotation::~FaceAnnotation() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  SharedDtor();
}

void FaceAnnotation::SharedDtor() {
  thumbnail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FaceAnnotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceAnnotation::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaceAnnotation& FaceAnnotation::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

FaceAnnotation* FaceAnnotation::New(::google::protobuf::Arena* arena) const {
  FaceAnnotation* n = new FaceAnnotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  segments_.Clear();
  frames_.Clear();
  thumbnail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FaceAnnotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes thumbnail = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_thumbnail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1beta2.FaceSegment segments = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1beta2.FaceFrame frames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  return false;
#undef DO_
}

void FaceAnnotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes thumbnail = 1;
  if (this->thumbnail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->thumbnail(), output);
  }

  // repeated .google.cloud.videointelligence.v1beta2.FaceSegment segments = 2;
  for (unsigned int i = 0, n = this->segments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->segments(i), output);
  }

  // repeated .google.cloud.videointelligence.v1beta2.FaceFrame frames = 3;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->frames(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.FaceAnnotation)
}

::google::protobuf::uint8* FaceAnnotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes thumbnail = 1;
  if (this->thumbnail().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->thumbnail(), target);
  }

  // repeated .google.cloud.videointelligence.v1beta2.FaceSegment segments = 2;
  for (unsigned int i = 0, n = this->segments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->segments(i), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1beta2.FaceFrame frames = 3;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->frames(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  return target;
}

size_t FaceAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  size_t total_size = 0;

  // repeated .google.cloud.videointelligence.v1beta2.FaceSegment segments = 2;
  {
    unsigned int count = this->segments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segments(i));
    }
  }

  // repeated .google.cloud.videointelligence.v1beta2.FaceFrame frames = 3;
  {
    unsigned int count = this->frames_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frames(i));
    }
  }

  // bytes thumbnail = 1;
  if (this->thumbnail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->thumbnail());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceAnnotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceAnnotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceAnnotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.FaceAnnotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.FaceAnnotation)
    MergeFrom(*source);
  }
}

void FaceAnnotation::MergeFrom(const FaceAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  frames_.MergeFrom(from.frames_);
  if (from.thumbnail().size() > 0) {

    thumbnail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_);
  }
}

void FaceAnnotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceAnnotation::CopyFrom(const FaceAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.FaceAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceAnnotation::IsInitialized() const {
  return true;
}

void FaceAnnotation::Swap(FaceAnnotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceAnnotation::InternalSwap(FaceAnnotation* other) {
  segments_.InternalSwap(&other->segments_);
  frames_.InternalSwap(&other->frames_);
  thumbnail_.Swap(&other->thumbnail_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceAnnotation::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceAnnotation

// bytes thumbnail = 1;
void FaceAnnotation::clear_thumbnail() {
  thumbnail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FaceAnnotation::thumbnail() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.FaceAnnotation.thumbnail)
  return thumbnail_.GetNoArena();
}
void FaceAnnotation::set_thumbnail(const ::std::string& value) {
  
  thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.FaceAnnotation.thumbnail)
}
#if LANG_CXX11
void FaceAnnotation::set_thumbnail(::std::string&& value) {
  
  thumbnail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.FaceAnnotation.thumbnail)
}
#endif
void FaceAnnotation::set_thumbnail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.FaceAnnotation.thumbnail)
}
void FaceAnnotation::set_thumbnail(const void* value, size_t size) {
  
  thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.FaceAnnotation.thumbnail)
}
::std::string* FaceAnnotation::mutable_thumbnail() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.FaceAnnotation.thumbnail)
  return thumbnail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FaceAnnotation::release_thumbnail() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.FaceAnnotation.thumbnail)
  
  return thumbnail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FaceAnnotation::set_allocated_thumbnail(::std::string* thumbnail) {
  if (thumbnail != NULL) {
    
  } else {
    
  }
  thumbnail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.FaceAnnotation.thumbnail)
}

// repeated .google.cloud.videointelligence.v1beta2.FaceSegment segments = 2;
int FaceAnnotation::segments_size() const {
  return segments_.size();
}
void FaceAnnotation::clear_segments() {
  segments_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::FaceSegment& FaceAnnotation::segments(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.FaceAnnotation.segments)
  return segments_.Get(index);
}
::google::cloud::videointelligence::v1beta2::FaceSegment* FaceAnnotation::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.FaceAnnotation.segments)
  return segments_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::FaceSegment* FaceAnnotation::add_segments() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.FaceAnnotation.segments)
  return segments_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::FaceSegment >*
FaceAnnotation::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.FaceAnnotation.segments)
  return &segments_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::FaceSegment >&
FaceAnnotation::segments() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.FaceAnnotation.segments)
  return segments_;
}

// repeated .google.cloud.videointelligence.v1beta2.FaceFrame frames = 3;
int FaceAnnotation::frames_size() const {
  return frames_.size();
}
void FaceAnnotation::clear_frames() {
  frames_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::FaceFrame& FaceAnnotation::frames(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.FaceAnnotation.frames)
  return frames_.Get(index);
}
::google::cloud::videointelligence::v1beta2::FaceFrame* FaceAnnotation::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.FaceAnnotation.frames)
  return frames_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::FaceFrame* FaceAnnotation::add_frames() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.FaceAnnotation.frames)
  return frames_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::FaceFrame >*
FaceAnnotation::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.FaceAnnotation.frames)
  return &frames_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::FaceFrame >&
FaceAnnotation::frames() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.FaceAnnotation.frames)
  return frames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoAnnotationResults::kInputUriFieldNumber;
const int VideoAnnotationResults::kSegmentLabelAnnotationsFieldNumber;
const int VideoAnnotationResults::kShotLabelAnnotationsFieldNumber;
const int VideoAnnotationResults::kFrameLabelAnnotationsFieldNumber;
const int VideoAnnotationResults::kFaceAnnotationsFieldNumber;
const int VideoAnnotationResults::kShotAnnotationsFieldNumber;
const int VideoAnnotationResults::kExplicitAnnotationFieldNumber;
const int VideoAnnotationResults::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoAnnotationResults::VideoAnnotationResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
}
VideoAnnotationResults::VideoAnnotationResults(const VideoAnnotationResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      segment_label_annotations_(from.segment_label_annotations_),
      shot_label_annotations_(from.shot_label_annotations_),
      frame_label_annotations_(from.frame_label_annotations_),
      face_annotations_(from.face_annotations_),
      shot_annotations_(from.shot_annotations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_uri().size() > 0) {
    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_explicit_annotation()) {
    explicit_annotation_ = new ::google::cloud::videointelligence::v1beta2::ExplicitContentAnnotation(*from.explicit_annotation_);
  } else {
    explicit_annotation_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
}

void VideoAnnotationResults::SharedCtor() {
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&explicit_annotation_, 0, reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&explicit_annotation_) + sizeof(error_));
  _cached_size_ = 0;
}

VideoAnnotationResults::~VideoAnnotationResults() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  SharedDtor();
}

void VideoAnnotationResults::SharedDtor() {
  input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete explicit_annotation_;
  }
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void VideoAnnotationResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoAnnotationResults::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoAnnotationResults& VideoAnnotationResults::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoAnnotationResults* VideoAnnotationResults::New(::google::protobuf::Arena* arena) const {
  VideoAnnotationResults* n = new VideoAnnotationResults;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoAnnotationResults::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  segment_label_annotations_.Clear();
  shot_label_annotations_.Clear();
  frame_label_annotations_.Clear();
  face_annotations_.Clear();
  shot_annotations_.Clear();
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && explicit_annotation_ != NULL) {
    delete explicit_annotation_;
  }
  explicit_annotation_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}

bool VideoAnnotationResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string input_uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_uri().data(), this->input_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1beta2.VideoAnnotationResults.input_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation segment_label_annotations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segment_label_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation shot_label_annotations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shot_label_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation frame_label_annotations = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frame_label_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1beta2.FaceAnnotation face_annotations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_face_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.cloud.videointelligence.v1beta2.VideoSegment shot_annotations = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shot_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation explicit_annotation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_explicit_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.rpc.Status error = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  return false;
#undef DO_
}

void VideoAnnotationResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), this->input_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.VideoAnnotationResults.input_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_uri(), output);
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation segment_label_annotations = 2;
  for (unsigned int i = 0, n = this->segment_label_annotations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->segment_label_annotations(i), output);
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation shot_label_annotations = 3;
  for (unsigned int i = 0, n = this->shot_label_annotations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shot_label_annotations(i), output);
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation frame_label_annotations = 4;
  for (unsigned int i = 0, n = this->frame_label_annotations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->frame_label_annotations(i), output);
  }

  // repeated .google.cloud.videointelligence.v1beta2.FaceAnnotation face_annotations = 5;
  for (unsigned int i = 0, n = this->face_annotations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->face_annotations(i), output);
  }

  // repeated .google.cloud.videointelligence.v1beta2.VideoSegment shot_annotations = 6;
  for (unsigned int i = 0, n = this->shot_annotations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->shot_annotations(i), output);
  }

  // .google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation explicit_annotation = 7;
  if (this->has_explicit_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->explicit_annotation_, output);
  }

  // .google.rpc.Status error = 9;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
}

::google::protobuf::uint8* VideoAnnotationResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), this->input_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.VideoAnnotationResults.input_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_uri(), target);
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation segment_label_annotations = 2;
  for (unsigned int i = 0, n = this->segment_label_annotations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->segment_label_annotations(i), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation shot_label_annotations = 3;
  for (unsigned int i = 0, n = this->shot_label_annotations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->shot_label_annotations(i), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation frame_label_annotations = 4;
  for (unsigned int i = 0, n = this->frame_label_annotations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->frame_label_annotations(i), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1beta2.FaceAnnotation face_annotations = 5;
  for (unsigned int i = 0, n = this->face_annotations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->face_annotations(i), deterministic, target);
  }

  // repeated .google.cloud.videointelligence.v1beta2.VideoSegment shot_annotations = 6;
  for (unsigned int i = 0, n = this->shot_annotations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->shot_annotations(i), deterministic, target);
  }

  // .google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation explicit_annotation = 7;
  if (this->has_explicit_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->explicit_annotation_, deterministic, target);
  }

  // .google.rpc.Status error = 9;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->error_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  return target;
}

size_t VideoAnnotationResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  size_t total_size = 0;

  // repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation segment_label_annotations = 2;
  {
    unsigned int count = this->segment_label_annotations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segment_label_annotations(i));
    }
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation shot_label_annotations = 3;
  {
    unsigned int count = this->shot_label_annotations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shot_label_annotations(i));
    }
  }

  // repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation frame_label_annotations = 4;
  {
    unsigned int count = this->frame_label_annotations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame_label_annotations(i));
    }
  }

  // repeated .google.cloud.videointelligence.v1beta2.FaceAnnotation face_annotations = 5;
  {
    unsigned int count = this->face_annotations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->face_annotations(i));
    }
  }

  // repeated .google.cloud.videointelligence.v1beta2.VideoSegment shot_annotations = 6;
  {
    unsigned int count = this->shot_annotations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shot_annotations(i));
    }
  }

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_uri());
  }

  // .google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation explicit_annotation = 7;
  if (this->has_explicit_annotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->explicit_annotation_);
  }

  // .google.rpc.Status error = 9;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoAnnotationResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoAnnotationResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoAnnotationResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
    MergeFrom(*source);
  }
}

void VideoAnnotationResults::MergeFrom(const VideoAnnotationResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_label_annotations_.MergeFrom(from.segment_label_annotations_);
  shot_label_annotations_.MergeFrom(from.shot_label_annotations_);
  frame_label_annotations_.MergeFrom(from.frame_label_annotations_);
  face_annotations_.MergeFrom(from.face_annotations_);
  shot_annotations_.MergeFrom(from.shot_annotations_);
  if (from.input_uri().size() > 0) {

    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_explicit_annotation()) {
    mutable_explicit_annotation()->::google::cloud::videointelligence::v1beta2::ExplicitContentAnnotation::MergeFrom(from.explicit_annotation());
  }
  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
}

void VideoAnnotationResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoAnnotationResults::CopyFrom(const VideoAnnotationResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoAnnotationResults::IsInitialized() const {
  return true;
}

void VideoAnnotationResults::Swap(VideoAnnotationResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoAnnotationResults::InternalSwap(VideoAnnotationResults* other) {
  segment_label_annotations_.InternalSwap(&other->segment_label_annotations_);
  shot_label_annotations_.InternalSwap(&other->shot_label_annotations_);
  frame_label_annotations_.InternalSwap(&other->frame_label_annotations_);
  face_annotations_.InternalSwap(&other->face_annotations_);
  shot_annotations_.InternalSwap(&other->shot_annotations_);
  input_uri_.Swap(&other->input_uri_);
  std::swap(explicit_annotation_, other->explicit_annotation_);
  std::swap(error_, other->error_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoAnnotationResults::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoAnnotationResults

// string input_uri = 1;
void VideoAnnotationResults::clear_input_uri() {
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoAnnotationResults::input_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.input_uri)
  return input_uri_.GetNoArena();
}
void VideoAnnotationResults::set_input_uri(const ::std::string& value) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.input_uri)
}
#if LANG_CXX11
void VideoAnnotationResults::set_input_uri(::std::string&& value) {
  
  input_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.input_uri)
}
#endif
void VideoAnnotationResults::set_input_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.input_uri)
}
void VideoAnnotationResults::set_input_uri(const char* value, size_t size) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.input_uri)
}
::std::string* VideoAnnotationResults::mutable_input_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.input_uri)
  return input_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoAnnotationResults::release_input_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.input_uri)
  
  return input_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoAnnotationResults::set_allocated_input_uri(::std::string* input_uri) {
  if (input_uri != NULL) {
    
  } else {
    
  }
  input_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.input_uri)
}

// repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation segment_label_annotations = 2;
int VideoAnnotationResults::segment_label_annotations_size() const {
  return segment_label_annotations_.size();
}
void VideoAnnotationResults::clear_segment_label_annotations() {
  segment_label_annotations_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::LabelAnnotation& VideoAnnotationResults::segment_label_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.segment_label_annotations)
  return segment_label_annotations_.Get(index);
}
::google::cloud::videointelligence::v1beta2::LabelAnnotation* VideoAnnotationResults::mutable_segment_label_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.segment_label_annotations)
  return segment_label_annotations_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::LabelAnnotation* VideoAnnotationResults::add_segment_label_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.segment_label_annotations)
  return segment_label_annotations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::LabelAnnotation >*
VideoAnnotationResults::mutable_segment_label_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.segment_label_annotations)
  return &segment_label_annotations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::LabelAnnotation >&
VideoAnnotationResults::segment_label_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.segment_label_annotations)
  return segment_label_annotations_;
}

// repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation shot_label_annotations = 3;
int VideoAnnotationResults::shot_label_annotations_size() const {
  return shot_label_annotations_.size();
}
void VideoAnnotationResults::clear_shot_label_annotations() {
  shot_label_annotations_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::LabelAnnotation& VideoAnnotationResults::shot_label_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shot_label_annotations)
  return shot_label_annotations_.Get(index);
}
::google::cloud::videointelligence::v1beta2::LabelAnnotation* VideoAnnotationResults::mutable_shot_label_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shot_label_annotations)
  return shot_label_annotations_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::LabelAnnotation* VideoAnnotationResults::add_shot_label_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shot_label_annotations)
  return shot_label_annotations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::LabelAnnotation >*
VideoAnnotationResults::mutable_shot_label_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shot_label_annotations)
  return &shot_label_annotations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::LabelAnnotation >&
VideoAnnotationResults::shot_label_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shot_label_annotations)
  return shot_label_annotations_;
}

// repeated .google.cloud.videointelligence.v1beta2.LabelAnnotation frame_label_annotations = 4;
int VideoAnnotationResults::frame_label_annotations_size() const {
  return frame_label_annotations_.size();
}
void VideoAnnotationResults::clear_frame_label_annotations() {
  frame_label_annotations_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::LabelAnnotation& VideoAnnotationResults::frame_label_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.frame_label_annotations)
  return frame_label_annotations_.Get(index);
}
::google::cloud::videointelligence::v1beta2::LabelAnnotation* VideoAnnotationResults::mutable_frame_label_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.frame_label_annotations)
  return frame_label_annotations_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::LabelAnnotation* VideoAnnotationResults::add_frame_label_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.frame_label_annotations)
  return frame_label_annotations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::LabelAnnotation >*
VideoAnnotationResults::mutable_frame_label_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.frame_label_annotations)
  return &frame_label_annotations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::LabelAnnotation >&
VideoAnnotationResults::frame_label_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.frame_label_annotations)
  return frame_label_annotations_;
}

// repeated .google.cloud.videointelligence.v1beta2.FaceAnnotation face_annotations = 5;
int VideoAnnotationResults::face_annotations_size() const {
  return face_annotations_.size();
}
void VideoAnnotationResults::clear_face_annotations() {
  face_annotations_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::FaceAnnotation& VideoAnnotationResults::face_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.face_annotations)
  return face_annotations_.Get(index);
}
::google::cloud::videointelligence::v1beta2::FaceAnnotation* VideoAnnotationResults::mutable_face_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.face_annotations)
  return face_annotations_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::FaceAnnotation* VideoAnnotationResults::add_face_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.face_annotations)
  return face_annotations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::FaceAnnotation >*
VideoAnnotationResults::mutable_face_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.face_annotations)
  return &face_annotations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::FaceAnnotation >&
VideoAnnotationResults::face_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.face_annotations)
  return face_annotations_;
}

// repeated .google.cloud.videointelligence.v1beta2.VideoSegment shot_annotations = 6;
int VideoAnnotationResults::shot_annotations_size() const {
  return shot_annotations_.size();
}
void VideoAnnotationResults::clear_shot_annotations() {
  shot_annotations_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::VideoSegment& VideoAnnotationResults::shot_annotations(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shot_annotations)
  return shot_annotations_.Get(index);
}
::google::cloud::videointelligence::v1beta2::VideoSegment* VideoAnnotationResults::mutable_shot_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shot_annotations)
  return shot_annotations_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::VideoSegment* VideoAnnotationResults::add_shot_annotations() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shot_annotations)
  return shot_annotations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::VideoSegment >*
VideoAnnotationResults::mutable_shot_annotations() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shot_annotations)
  return &shot_annotations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::VideoSegment >&
VideoAnnotationResults::shot_annotations() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shot_annotations)
  return shot_annotations_;
}

// .google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation explicit_annotation = 7;
bool VideoAnnotationResults::has_explicit_annotation() const {
  return this != internal_default_instance() && explicit_annotation_ != NULL;
}
void VideoAnnotationResults::clear_explicit_annotation() {
  if (GetArenaNoVirtual() == NULL && explicit_annotation_ != NULL) delete explicit_annotation_;
  explicit_annotation_ = NULL;
}
const ::google::cloud::videointelligence::v1beta2::ExplicitContentAnnotation& VideoAnnotationResults::explicit_annotation() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.explicit_annotation)
  return explicit_annotation_ != NULL ? *explicit_annotation_
                         : *::google::cloud::videointelligence::v1beta2::ExplicitContentAnnotation::internal_default_instance();
}
::google::cloud::videointelligence::v1beta2::ExplicitContentAnnotation* VideoAnnotationResults::mutable_explicit_annotation() {
  
  if (explicit_annotation_ == NULL) {
    explicit_annotation_ = new ::google::cloud::videointelligence::v1beta2::ExplicitContentAnnotation;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.explicit_annotation)
  return explicit_annotation_;
}
::google::cloud::videointelligence::v1beta2::ExplicitContentAnnotation* VideoAnnotationResults::release_explicit_annotation() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.explicit_annotation)
  
  ::google::cloud::videointelligence::v1beta2::ExplicitContentAnnotation* temp = explicit_annotation_;
  explicit_annotation_ = NULL;
  return temp;
}
void VideoAnnotationResults::set_allocated_explicit_annotation(::google::cloud::videointelligence::v1beta2::ExplicitContentAnnotation* explicit_annotation) {
  delete explicit_annotation_;
  explicit_annotation_ = explicit_annotation;
  if (explicit_annotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.explicit_annotation)
}

// .google.rpc.Status error = 9;
bool VideoAnnotationResults::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void VideoAnnotationResults::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::google::rpc::Status& VideoAnnotationResults::error() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.error)
  return error_ != NULL ? *error_
                         : *::google::rpc::Status::internal_default_instance();
}
::google::rpc::Status* VideoAnnotationResults::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.error)
  return error_;
}
::google::rpc::Status* VideoAnnotationResults::release_error() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = NULL;
  return temp;
}
void VideoAnnotationResults::set_allocated_error(::google::rpc::Status* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.VideoAnnotationResults.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotateVideoResponse::kAnnotationResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotateVideoResponse::AnnotateVideoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
}
AnnotateVideoResponse::AnnotateVideoResponse(const AnnotateVideoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      annotation_results_(from.annotation_results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
}

void AnnotateVideoResponse::SharedCtor() {
  _cached_size_ = 0;
}

AnnotateVideoResponse::~AnnotateVideoResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  SharedDtor();
}

void AnnotateVideoResponse::SharedDtor() {
}

void AnnotateVideoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotateVideoResponse::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnotateVideoResponse& AnnotateVideoResponse::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnnotateVideoResponse* AnnotateVideoResponse::New(::google::protobuf::Arena* arena) const {
  AnnotateVideoResponse* n = new AnnotateVideoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnotateVideoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  annotation_results_.Clear();
}

bool AnnotateVideoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.videointelligence.v1beta2.VideoAnnotationResults annotation_results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_annotation_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  return false;
#undef DO_
}

void AnnotateVideoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1beta2.VideoAnnotationResults annotation_results = 1;
  for (unsigned int i = 0, n = this->annotation_results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->annotation_results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
}

::google::protobuf::uint8* AnnotateVideoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1beta2.VideoAnnotationResults annotation_results = 1;
  for (unsigned int i = 0, n = this->annotation_results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->annotation_results(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  return target;
}

size_t AnnotateVideoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  size_t total_size = 0;

  // repeated .google.cloud.videointelligence.v1beta2.VideoAnnotationResults annotation_results = 1;
  {
    unsigned int count = this->annotation_results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->annotation_results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotateVideoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotateVideoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotateVideoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
    MergeFrom(*source);
  }
}

void AnnotateVideoResponse::MergeFrom(const AnnotateVideoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_results_.MergeFrom(from.annotation_results_);
}

void AnnotateVideoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotateVideoResponse::CopyFrom(const AnnotateVideoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotateVideoResponse::IsInitialized() const {
  return true;
}

void AnnotateVideoResponse::Swap(AnnotateVideoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotateVideoResponse::InternalSwap(AnnotateVideoResponse* other) {
  annotation_results_.InternalSwap(&other->annotation_results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnotateVideoResponse::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnotateVideoResponse

// repeated .google.cloud.videointelligence.v1beta2.VideoAnnotationResults annotation_results = 1;
int AnnotateVideoResponse::annotation_results_size() const {
  return annotation_results_.size();
}
void AnnotateVideoResponse::clear_annotation_results() {
  annotation_results_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::VideoAnnotationResults& AnnotateVideoResponse::annotation_results(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse.annotation_results)
  return annotation_results_.Get(index);
}
::google::cloud::videointelligence::v1beta2::VideoAnnotationResults* AnnotateVideoResponse::mutable_annotation_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse.annotation_results)
  return annotation_results_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::VideoAnnotationResults* AnnotateVideoResponse::add_annotation_results() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse.annotation_results)
  return annotation_results_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::VideoAnnotationResults >*
AnnotateVideoResponse::mutable_annotation_results() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse.annotation_results)
  return &annotation_results_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::VideoAnnotationResults >&
AnnotateVideoResponse::annotation_results() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.AnnotateVideoResponse.annotation_results)
  return annotation_results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoAnnotationProgress::kInputUriFieldNumber;
const int VideoAnnotationProgress::kProgressPercentFieldNumber;
const int VideoAnnotationProgress::kStartTimeFieldNumber;
const int VideoAnnotationProgress::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoAnnotationProgress::VideoAnnotationProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
}
VideoAnnotationProgress::VideoAnnotationProgress(const VideoAnnotationProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_uri().size() > 0) {
    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = NULL;
  }
  progress_percent_ = from.progress_percent_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
}

void VideoAnnotationProgress::SharedCtor() {
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, reinterpret_cast<char*>(&progress_percent_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(progress_percent_));
  _cached_size_ = 0;
}

VideoAnnotationProgress::~VideoAnnotationProgress() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  SharedDtor();
}

void VideoAnnotationProgress::SharedDtor() {
  input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete start_time_;
  }
  if (this != internal_default_instance()) {
    delete update_time_;
  }
}

void VideoAnnotationProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoAnnotationProgress::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoAnnotationProgress& VideoAnnotationProgress::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoAnnotationProgress* VideoAnnotationProgress::New(::google::protobuf::Arena* arena) const {
  VideoAnnotationProgress* n = new VideoAnnotationProgress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoAnnotationProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) {
    delete update_time_;
  }
  update_time_ = NULL;
  progress_percent_ = 0;
}

bool VideoAnnotationProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string input_uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_uri().data(), this->input_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.input_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 progress_percent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  return false;
#undef DO_
}

void VideoAnnotationProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), this->input_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.input_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_uri(), output);
  }

  // int32 progress_percent = 2;
  if (this->progress_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->progress_percent(), output);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->start_time_, output);
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->update_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
}

::google::protobuf::uint8* VideoAnnotationProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), this->input_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.input_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_uri(), target);
  }

  // int32 progress_percent = 2;
  if (this->progress_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->progress_percent(), target);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->start_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->update_time_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  return target;
}

size_t VideoAnnotationProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  size_t total_size = 0;

  // string input_uri = 1;
  if (this->input_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_uri());
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_time_);
  }

  // .google.protobuf.Timestamp update_time = 4;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_time_);
  }

  // int32 progress_percent = 2;
  if (this->progress_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress_percent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoAnnotationProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoAnnotationProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoAnnotationProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
    MergeFrom(*source);
  }
}

void VideoAnnotationProgress::MergeFrom(const VideoAnnotationProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_uri().size() > 0) {

    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.progress_percent() != 0) {
    set_progress_percent(from.progress_percent());
  }
}

void VideoAnnotationProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoAnnotationProgress::CopyFrom(const VideoAnnotationProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoAnnotationProgress::IsInitialized() const {
  return true;
}

void VideoAnnotationProgress::Swap(VideoAnnotationProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoAnnotationProgress::InternalSwap(VideoAnnotationProgress* other) {
  input_uri_.Swap(&other->input_uri_);
  std::swap(start_time_, other->start_time_);
  std::swap(update_time_, other->update_time_);
  std::swap(progress_percent_, other->progress_percent_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoAnnotationProgress::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoAnnotationProgress

// string input_uri = 1;
void VideoAnnotationProgress::clear_input_uri() {
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoAnnotationProgress::input_uri() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.input_uri)
  return input_uri_.GetNoArena();
}
void VideoAnnotationProgress::set_input_uri(const ::std::string& value) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.input_uri)
}
#if LANG_CXX11
void VideoAnnotationProgress::set_input_uri(::std::string&& value) {
  
  input_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.input_uri)
}
#endif
void VideoAnnotationProgress::set_input_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.input_uri)
}
void VideoAnnotationProgress::set_input_uri(const char* value, size_t size) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.input_uri)
}
::std::string* VideoAnnotationProgress::mutable_input_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.input_uri)
  return input_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoAnnotationProgress::release_input_uri() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.input_uri)
  
  return input_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoAnnotationProgress::set_allocated_input_uri(::std::string* input_uri) {
  if (input_uri != NULL) {
    
  } else {
    
  }
  input_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_uri);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.input_uri)
}

// int32 progress_percent = 2;
void VideoAnnotationProgress::clear_progress_percent() {
  progress_percent_ = 0;
}
::google::protobuf::int32 VideoAnnotationProgress::progress_percent() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.progress_percent)
  return progress_percent_;
}
void VideoAnnotationProgress::set_progress_percent(::google::protobuf::int32 value) {
  
  progress_percent_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.progress_percent)
}

// .google.protobuf.Timestamp start_time = 3;
bool VideoAnnotationProgress::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
void VideoAnnotationProgress::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
}
const ::google::protobuf::Timestamp& VideoAnnotationProgress::start_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.start_time)
  return start_time_ != NULL ? *start_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* VideoAnnotationProgress::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.start_time)
  return start_time_;
}
::google::protobuf::Timestamp* VideoAnnotationProgress::release_start_time() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
void VideoAnnotationProgress::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  delete start_time_;
  if (start_time != NULL && start_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_start_time = new ::google::protobuf::Timestamp;
    new_start_time->CopyFrom(*start_time);
    start_time = new_start_time;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.start_time)
}

// .google.protobuf.Timestamp update_time = 4;
bool VideoAnnotationProgress::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
void VideoAnnotationProgress::clear_update_time() {
  if (GetArenaNoVirtual() == NULL && update_time_ != NULL) delete update_time_;
  update_time_ = NULL;
}
const ::google::protobuf::Timestamp& VideoAnnotationProgress::update_time() const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.update_time)
  return update_time_ != NULL ? *update_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* VideoAnnotationProgress::mutable_update_time() {
  
  if (update_time_ == NULL) {
    update_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.update_time)
  return update_time_;
}
::google::protobuf::Timestamp* VideoAnnotationProgress::release_update_time() {
  // @@protoc_insertion_point(field_release:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
void VideoAnnotationProgress::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  delete update_time_;
  if (update_time != NULL && update_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_update_time = new ::google::protobuf::Timestamp;
    new_update_time->CopyFrom(*update_time);
    update_time = new_update_time;
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.update_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnotateVideoProgress::kAnnotationProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnotateVideoProgress::AnnotateVideoProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
}
AnnotateVideoProgress::AnnotateVideoProgress(const AnnotateVideoProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      annotation_progress_(from.annotation_progress_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
}

void AnnotateVideoProgress::SharedCtor() {
  _cached_size_ = 0;
}

AnnotateVideoProgress::~AnnotateVideoProgress() {
  // @@protoc_insertion_point(destructor:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  SharedDtor();
}

void AnnotateVideoProgress::SharedDtor() {
}

void AnnotateVideoProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnotateVideoProgress::descriptor() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnnotateVideoProgress& AnnotateVideoProgress::default_instance() {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnnotateVideoProgress* AnnotateVideoProgress::New(::google::protobuf::Arena* arena) const {
  AnnotateVideoProgress* n = new AnnotateVideoProgress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnnotateVideoProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  annotation_progress_.Clear();
}

bool AnnotateVideoProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.cloud.videointelligence.v1beta2.VideoAnnotationProgress annotation_progress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_annotation_progress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  return false;
#undef DO_
}

void AnnotateVideoProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1beta2.VideoAnnotationProgress annotation_progress = 1;
  for (unsigned int i = 0, n = this->annotation_progress_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->annotation_progress(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
}

::google::protobuf::uint8* AnnotateVideoProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.videointelligence.v1beta2.VideoAnnotationProgress annotation_progress = 1;
  for (unsigned int i = 0, n = this->annotation_progress_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->annotation_progress(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  return target;
}

size_t AnnotateVideoProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  size_t total_size = 0;

  // repeated .google.cloud.videointelligence.v1beta2.VideoAnnotationProgress annotation_progress = 1;
  {
    unsigned int count = this->annotation_progress_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->annotation_progress(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnotateVideoProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotateVideoProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnnotateVideoProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
    MergeFrom(*source);
  }
}

void AnnotateVideoProgress::MergeFrom(const AnnotateVideoProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_progress_.MergeFrom(from.annotation_progress_);
}

void AnnotateVideoProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotateVideoProgress::CopyFrom(const AnnotateVideoProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotateVideoProgress::IsInitialized() const {
  return true;
}

void AnnotateVideoProgress::Swap(AnnotateVideoProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnotateVideoProgress::InternalSwap(AnnotateVideoProgress* other) {
  annotation_progress_.InternalSwap(&other->annotation_progress_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnnotateVideoProgress::GetMetadata() const {
  protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcloud_2fvideointelligence_2fv1beta2_2fvideo_5fintelligence_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnnotateVideoProgress

// repeated .google.cloud.videointelligence.v1beta2.VideoAnnotationProgress annotation_progress = 1;
int AnnotateVideoProgress::annotation_progress_size() const {
  return annotation_progress_.size();
}
void AnnotateVideoProgress::clear_annotation_progress() {
  annotation_progress_.Clear();
}
const ::google::cloud::videointelligence::v1beta2::VideoAnnotationProgress& AnnotateVideoProgress::annotation_progress(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress.annotation_progress)
  return annotation_progress_.Get(index);
}
::google::cloud::videointelligence::v1beta2::VideoAnnotationProgress* AnnotateVideoProgress::mutable_annotation_progress(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress.annotation_progress)
  return annotation_progress_.Mutable(index);
}
::google::cloud::videointelligence::v1beta2::VideoAnnotationProgress* AnnotateVideoProgress::add_annotation_progress() {
  // @@protoc_insertion_point(field_add:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress.annotation_progress)
  return annotation_progress_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::VideoAnnotationProgress >*
AnnotateVideoProgress::mutable_annotation_progress() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress.annotation_progress)
  return &annotation_progress_;
}
const ::google::protobuf::RepeatedPtrField< ::google::cloud::videointelligence::v1beta2::VideoAnnotationProgress >&
AnnotateVideoProgress::annotation_progress() const {
  // @@protoc_insertion_point(field_list:google.cloud.videointelligence.v1beta2.AnnotateVideoProgress.annotation_progress)
  return annotation_progress_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta2
}  // namespace videointelligence
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)
