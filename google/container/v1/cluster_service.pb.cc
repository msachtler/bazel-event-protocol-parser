// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/container/v1/cluster_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/container/v1/cluster_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace container {
namespace v1 {
class NodeConfig_MetadataEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeConfig::NodeConfig_MetadataEntry> {
} _NodeConfig_MetadataEntry_default_instance_;
class NodeConfig_LabelsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeConfig::NodeConfig_LabelsEntry> {
} _NodeConfig_LabelsEntry_default_instance_;
class NodeConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeConfig> {
} _NodeConfig_default_instance_;
class MasterAuthDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MasterAuth> {
} _MasterAuth_default_instance_;
class ClientCertificateConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientCertificateConfig> {
} _ClientCertificateConfig_default_instance_;
class AddonsConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AddonsConfig> {
} _AddonsConfig_default_instance_;
class HttpLoadBalancingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HttpLoadBalancing> {
} _HttpLoadBalancing_default_instance_;
class HorizontalPodAutoscalingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HorizontalPodAutoscaling> {
} _HorizontalPodAutoscaling_default_instance_;
class KubernetesDashboardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KubernetesDashboard> {
} _KubernetesDashboard_default_instance_;
class MasterAuthorizedNetworksConfig_CidrBlockDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MasterAuthorizedNetworksConfig_CidrBlock> {
} _MasterAuthorizedNetworksConfig_CidrBlock_default_instance_;
class MasterAuthorizedNetworksConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MasterAuthorizedNetworksConfig> {
} _MasterAuthorizedNetworksConfig_default_instance_;
class LegacyAbacDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LegacyAbac> {
} _LegacyAbac_default_instance_;
class NetworkPolicyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkPolicy> {
} _NetworkPolicy_default_instance_;
class IPAllocationPolicyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IPAllocationPolicy> {
} _IPAllocationPolicy_default_instance_;
class Cluster_ResourceLabelsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Cluster::Cluster_ResourceLabelsEntry> {
} _Cluster_ResourceLabelsEntry_default_instance_;
class ClusterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Cluster> {
} _Cluster_default_instance_;
class ClusterUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClusterUpdate> {
} _ClusterUpdate_default_instance_;
class OperationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Operation> {
} _Operation_default_instance_;
class CreateClusterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateClusterRequest> {
} _CreateClusterRequest_default_instance_;
class GetClusterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetClusterRequest> {
} _GetClusterRequest_default_instance_;
class UpdateClusterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateClusterRequest> {
} _UpdateClusterRequest_default_instance_;
class UpdateNodePoolRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateNodePoolRequest> {
} _UpdateNodePoolRequest_default_instance_;
class SetNodePoolAutoscalingRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetNodePoolAutoscalingRequest> {
} _SetNodePoolAutoscalingRequest_default_instance_;
class SetLoggingServiceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetLoggingServiceRequest> {
} _SetLoggingServiceRequest_default_instance_;
class SetMonitoringServiceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetMonitoringServiceRequest> {
} _SetMonitoringServiceRequest_default_instance_;
class SetAddonsConfigRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetAddonsConfigRequest> {
} _SetAddonsConfigRequest_default_instance_;
class SetLocationsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetLocationsRequest> {
} _SetLocationsRequest_default_instance_;
class UpdateMasterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateMasterRequest> {
} _UpdateMasterRequest_default_instance_;
class SetMasterAuthRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetMasterAuthRequest> {
} _SetMasterAuthRequest_default_instance_;
class DeleteClusterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteClusterRequest> {
} _DeleteClusterRequest_default_instance_;
class ListClustersRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListClustersRequest> {
} _ListClustersRequest_default_instance_;
class ListClustersResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListClustersResponse> {
} _ListClustersResponse_default_instance_;
class GetOperationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetOperationRequest> {
} _GetOperationRequest_default_instance_;
class ListOperationsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListOperationsRequest> {
} _ListOperationsRequest_default_instance_;
class CancelOperationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CancelOperationRequest> {
} _CancelOperationRequest_default_instance_;
class ListOperationsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListOperationsResponse> {
} _ListOperationsResponse_default_instance_;
class GetServerConfigRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetServerConfigRequest> {
} _GetServerConfigRequest_default_instance_;
class ServerConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerConfig> {
} _ServerConfig_default_instance_;
class CreateNodePoolRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateNodePoolRequest> {
} _CreateNodePoolRequest_default_instance_;
class DeleteNodePoolRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeleteNodePoolRequest> {
} _DeleteNodePoolRequest_default_instance_;
class ListNodePoolsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListNodePoolsRequest> {
} _ListNodePoolsRequest_default_instance_;
class GetNodePoolRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetNodePoolRequest> {
} _GetNodePoolRequest_default_instance_;
class NodePoolDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodePool> {
} _NodePool_default_instance_;
class NodeManagementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeManagement> {
} _NodeManagement_default_instance_;
class AutoUpgradeOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoUpgradeOptions> {
} _AutoUpgradeOptions_default_instance_;
class SetNodePoolManagementRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetNodePoolManagementRequest> {
} _SetNodePoolManagementRequest_default_instance_;
class SetNodePoolSizeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetNodePoolSizeRequest> {
} _SetNodePoolSizeRequest_default_instance_;
class RollbackNodePoolUpgradeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RollbackNodePoolUpgradeRequest> {
} _RollbackNodePoolUpgradeRequest_default_instance_;
class ListNodePoolsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListNodePoolsResponse> {
} _ListNodePoolsResponse_default_instance_;
class NodePoolAutoscalingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodePoolAutoscaling> {
} _NodePoolAutoscaling_default_instance_;
class SetLabelsRequest_ResourceLabelsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetLabelsRequest::SetLabelsRequest_ResourceLabelsEntry> {
} _SetLabelsRequest_ResourceLabelsEntry_default_instance_;
class SetLabelsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetLabelsRequest> {
} _SetLabelsRequest_default_instance_;
class SetLegacyAbacRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetLegacyAbacRequest> {
} _SetLegacyAbacRequest_default_instance_;
class StartIPRotationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StartIPRotationRequest> {
} _StartIPRotationRequest_default_instance_;
class CompleteIPRotationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompleteIPRotationRequest> {
} _CompleteIPRotationRequest_default_instance_;
class AcceleratorConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AcceleratorConfig> {
} _AcceleratorConfig_default_instance_;
class SetNetworkPolicyRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetNetworkPolicyRequest> {
} _SetNetworkPolicyRequest_default_instance_;

namespace protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[57];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, machine_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, disk_size_gb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, oauth_scopes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, service_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, image_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, local_ssd_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, preemptible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfig, accelerators_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuth, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuth, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuth, client_certificate_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuth, cluster_ca_certificate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuth, client_certificate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuth, client_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCertificateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCertificateConfig, issue_client_certificate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddonsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddonsConfig, http_load_balancing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddonsConfig, horizontal_pod_autoscaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddonsConfig, kubernetes_dashboard_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpLoadBalancing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpLoadBalancing, disabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorizontalPodAutoscaling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorizontalPodAutoscaling, disabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KubernetesDashboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KubernetesDashboard, disabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuthorizedNetworksConfig_CidrBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuthorizedNetworksConfig_CidrBlock, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuthorizedNetworksConfig_CidrBlock, cidr_block_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuthorizedNetworksConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuthorizedNetworksConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterAuthorizedNetworksConfig, cidr_blocks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacyAbac, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacyAbac, enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkPolicy, provider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkPolicy, enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAllocationPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAllocationPolicy, use_ip_aliases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAllocationPolicy, create_subnetwork_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAllocationPolicy, subnetwork_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAllocationPolicy, cluster_ipv4_cidr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAllocationPolicy, node_ipv4_cidr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAllocationPolicy, services_ipv4_cidr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, initial_node_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, node_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, master_auth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, logging_service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, monitoring_service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, network_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, cluster_ipv4_cidr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, addons_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, subnetwork_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, node_pools_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, locations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, enable_kubernetes_alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, resource_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, label_fingerprint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, legacy_abac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, network_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, ip_allocation_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, master_authorized_networks_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, self_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, endpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, initial_cluster_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, current_master_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, current_node_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, status_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, node_ipv4_cidr_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, services_ipv4_cidr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, instance_group_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, current_node_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, expire_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterUpdate, desired_node_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterUpdate, desired_monitoring_service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterUpdate, desired_addons_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterUpdate, desired_node_pool_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterUpdate, desired_image_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterUpdate, desired_node_pool_autoscaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterUpdate, desired_locations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterUpdate, desired_master_authorized_networks_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterUpdate, desired_master_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, operation_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, status_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, self_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, target_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateClusterRequest, cluster_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterRequest, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClusterRequest, update_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNodePoolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNodePoolRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNodePoolRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNodePoolRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNodePoolRequest, node_pool_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNodePoolRequest, node_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNodePoolRequest, image_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolAutoscalingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolAutoscalingRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolAutoscalingRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolAutoscalingRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolAutoscalingRequest, node_pool_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolAutoscalingRequest, autoscaling_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLoggingServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLoggingServiceRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLoggingServiceRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLoggingServiceRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLoggingServiceRequest, logging_service_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMonitoringServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMonitoringServiceRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMonitoringServiceRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMonitoringServiceRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMonitoringServiceRequest, monitoring_service_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddonsConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddonsConfigRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddonsConfigRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddonsConfigRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddonsConfigRequest, addons_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLocationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLocationsRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLocationsRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLocationsRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLocationsRequest, locations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMasterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMasterRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMasterRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMasterRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMasterRequest, master_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMasterAuthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMasterAuthRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMasterAuthRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMasterAuthRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMasterAuthRequest, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMasterAuthRequest, update_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteClusterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteClusterRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteClusterRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteClusterRequest, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersRequest, zone_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersResponse, clusters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListClustersResponse, missing_zones_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOperationRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOperationRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOperationRequest, operation_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOperationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOperationsRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOperationsRequest, zone_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOperationRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOperationRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOperationRequest, operation_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOperationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOperationsResponse, operations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOperationsResponse, missing_zones_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerConfigRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerConfigRequest, zone_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, default_cluster_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, valid_node_versions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, default_image_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, valid_image_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, valid_master_versions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNodePoolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNodePoolRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNodePoolRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNodePoolRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateNodePoolRequest, node_pool_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNodePoolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNodePoolRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNodePoolRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNodePoolRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteNodePoolRequest, node_pool_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNodePoolsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNodePoolsRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNodePoolsRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNodePoolsRequest, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodePoolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodePoolRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodePoolRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodePoolRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNodePoolRequest, node_pool_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePool, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePool, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePool, initial_node_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePool, self_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePool, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePool, instance_group_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePool, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePool, status_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePool, autoscaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePool, management_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeManagement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeManagement, auto_upgrade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeManagement, auto_repair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeManagement, upgrade_options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoUpgradeOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoUpgradeOptions, auto_upgrade_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoUpgradeOptions, description_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolManagementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolManagementRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolManagementRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolManagementRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolManagementRequest, node_pool_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolManagementRequest, management_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolSizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolSizeRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolSizeRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolSizeRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolSizeRequest, node_pool_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNodePoolSizeRequest, node_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackNodePoolUpgradeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackNodePoolUpgradeRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackNodePoolUpgradeRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackNodePoolUpgradeRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackNodePoolUpgradeRequest, node_pool_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNodePoolsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListNodePoolsResponse, node_pools_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePoolAutoscaling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePoolAutoscaling, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePoolAutoscaling, min_node_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePoolAutoscaling, max_node_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLabelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLabelsRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLabelsRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLabelsRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLabelsRequest, resource_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLabelsRequest, label_fingerprint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLegacyAbacRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLegacyAbacRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLegacyAbacRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLegacyAbacRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLegacyAbacRequest, enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartIPRotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartIPRotationRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartIPRotationRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartIPRotationRequest, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteIPRotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteIPRotationRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteIPRotationRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteIPRotationRequest, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceleratorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceleratorConfig, accelerator_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceleratorConfig, accelerator_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNetworkPolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNetworkPolicyRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNetworkPolicyRequest, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNetworkPolicyRequest, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNetworkPolicyRequest, network_policy_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(NodeConfig)},
  { 16, -1, sizeof(MasterAuth)},
  { 27, -1, sizeof(ClientCertificateConfig)},
  { 33, -1, sizeof(AddonsConfig)},
  { 41, -1, sizeof(HttpLoadBalancing)},
  { 47, -1, sizeof(HorizontalPodAutoscaling)},
  { 53, -1, sizeof(KubernetesDashboard)},
  { 59, -1, sizeof(MasterAuthorizedNetworksConfig_CidrBlock)},
  { 66, -1, sizeof(MasterAuthorizedNetworksConfig)},
  { 73, -1, sizeof(LegacyAbac)},
  { 79, -1, sizeof(NetworkPolicy)},
  { 86, -1, sizeof(IPAllocationPolicy)},
  { 97, -1, sizeof(Cluster)},
  { 136, -1, sizeof(ClusterUpdate)},
  { 150, -1, sizeof(Operation)},
  { 165, -1, sizeof(CreateClusterRequest)},
  { 173, -1, sizeof(GetClusterRequest)},
  { 181, -1, sizeof(UpdateClusterRequest)},
  { 190, -1, sizeof(UpdateNodePoolRequest)},
  { 201, -1, sizeof(SetNodePoolAutoscalingRequest)},
  { 211, -1, sizeof(SetLoggingServiceRequest)},
  { 220, -1, sizeof(SetMonitoringServiceRequest)},
  { 229, -1, sizeof(SetAddonsConfigRequest)},
  { 238, -1, sizeof(SetLocationsRequest)},
  { 247, -1, sizeof(UpdateMasterRequest)},
  { 256, -1, sizeof(SetMasterAuthRequest)},
  { 266, -1, sizeof(DeleteClusterRequest)},
  { 274, -1, sizeof(ListClustersRequest)},
  { 281, -1, sizeof(ListClustersResponse)},
  { 288, -1, sizeof(GetOperationRequest)},
  { 296, -1, sizeof(ListOperationsRequest)},
  { 303, -1, sizeof(CancelOperationRequest)},
  { 311, -1, sizeof(ListOperationsResponse)},
  { 318, -1, sizeof(GetServerConfigRequest)},
  { 325, -1, sizeof(ServerConfig)},
  { 335, -1, sizeof(CreateNodePoolRequest)},
  { 344, -1, sizeof(DeleteNodePoolRequest)},
  { 353, -1, sizeof(ListNodePoolsRequest)},
  { 361, -1, sizeof(GetNodePoolRequest)},
  { 370, -1, sizeof(NodePool)},
  { 385, -1, sizeof(NodeManagement)},
  { 393, -1, sizeof(AutoUpgradeOptions)},
  { 400, -1, sizeof(SetNodePoolManagementRequest)},
  { 410, -1, sizeof(SetNodePoolSizeRequest)},
  { 420, -1, sizeof(RollbackNodePoolUpgradeRequest)},
  { 429, -1, sizeof(ListNodePoolsResponse)},
  { 435, -1, sizeof(NodePoolAutoscaling)},
  { 443, -1, sizeof(SetLabelsRequest)},
  { 453, -1, sizeof(SetLegacyAbacRequest)},
  { 462, -1, sizeof(StartIPRotationRequest)},
  { 470, -1, sizeof(CompleteIPRotationRequest)},
  { 478, -1, sizeof(AcceleratorConfig)},
  { 485, -1, sizeof(SetNetworkPolicyRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeConfig_MetadataEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeConfig_LabelsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MasterAuth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientCertificateConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddonsConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HttpLoadBalancing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HorizontalPodAutoscaling_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KubernetesDashboard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MasterAuthorizedNetworksConfig_CidrBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MasterAuthorizedNetworksConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LegacyAbac_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetworkPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IPAllocationPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cluster_ResourceLabelsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Operation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateClusterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetClusterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateClusterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateNodePoolRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetNodePoolAutoscalingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetLoggingServiceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetMonitoringServiceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetAddonsConfigRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetLocationsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateMasterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetMasterAuthRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteClusterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListClustersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListClustersResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetOperationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListOperationsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CancelOperationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListOperationsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetServerConfigRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateNodePoolRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteNodePoolRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListNodePoolsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetNodePoolRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodePool_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeManagement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoUpgradeOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetNodePoolManagementRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetNodePoolSizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RollbackNodePoolUpgradeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListNodePoolsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodePoolAutoscaling_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetLabelsRequest_ResourceLabelsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetLabelsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetLegacyAbacRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartIPRotationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompleteIPRotationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AcceleratorConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetNetworkPolicyRequest_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/container/v1/cluster_service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[0].reflection = NodeConfig::NodeConfig_MetadataEntry::CreateReflection(file_level_metadata[0].descriptor, _NodeConfig_MetadataEntry_default_instance_.get_mutable());
file_level_metadata[1].reflection = NodeConfig::NodeConfig_LabelsEntry::CreateReflection(file_level_metadata[1].descriptor, _NodeConfig_LabelsEntry_default_instance_.get_mutable());
file_level_metadata[14].reflection = Cluster::Cluster_ResourceLabelsEntry::CreateReflection(file_level_metadata[14].descriptor, _Cluster_ResourceLabelsEntry_default_instance_.get_mutable());
file_level_metadata[50].reflection = SetLabelsRequest::SetLabelsRequest_ResourceLabelsEntry::CreateReflection(file_level_metadata[50].descriptor, _SetLabelsRequest_ResourceLabelsEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 57);
}

}  // namespace

void TableStruct::Shutdown() {
  _NodeConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MasterAuth_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ClientCertificateConfig_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _AddonsConfig_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _HttpLoadBalancing_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _HorizontalPodAutoscaling_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _KubernetesDashboard_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _MasterAuthorizedNetworksConfig_CidrBlock_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _MasterAuthorizedNetworksConfig_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _LegacyAbac_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _NetworkPolicy_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _IPAllocationPolicy_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Cluster_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _ClusterUpdate_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _Operation_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CreateClusterRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _GetClusterRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _UpdateClusterRequest_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _UpdateNodePoolRequest_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _SetNodePoolAutoscalingRequest_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _SetLoggingServiceRequest_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _SetMonitoringServiceRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _SetAddonsConfigRequest_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _SetLocationsRequest_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _UpdateMasterRequest_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _SetMasterAuthRequest_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _DeleteClusterRequest_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _ListClustersRequest_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _ListClustersResponse_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _GetOperationRequest_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _ListOperationsRequest_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CancelOperationRequest_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _ListOperationsResponse_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _GetServerConfigRequest_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _ServerConfig_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CreateNodePoolRequest_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _DeleteNodePoolRequest_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _ListNodePoolsRequest_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _GetNodePoolRequest_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _NodePool_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _NodeManagement_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _AutoUpgradeOptions_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _SetNodePoolManagementRequest_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _SetNodePoolSizeRequest_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _RollbackNodePoolUpgradeRequest_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _ListNodePoolsResponse_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _NodePoolAutoscaling_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _SetLabelsRequest_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _SetLegacyAbacRequest_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _StartIPRotationRequest_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CompleteIPRotationRequest_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _AcceleratorConfig_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _SetNetworkPolicyRequest_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  delete file_level_metadata[0].reflection;
  delete file_level_metadata[1].reflection;
  delete file_level_metadata[14].reflection;
  delete file_level_metadata[50].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::InitDefaults();
  _NodeConfig_MetadataEntry_default_instance_.DefaultConstruct();
  _NodeConfig_LabelsEntry_default_instance_.DefaultConstruct();
  _NodeConfig_default_instance_.DefaultConstruct();
  _MasterAuth_default_instance_.DefaultConstruct();
  _ClientCertificateConfig_default_instance_.DefaultConstruct();
  _AddonsConfig_default_instance_.DefaultConstruct();
  _HttpLoadBalancing_default_instance_.DefaultConstruct();
  _HorizontalPodAutoscaling_default_instance_.DefaultConstruct();
  _KubernetesDashboard_default_instance_.DefaultConstruct();
  _MasterAuthorizedNetworksConfig_CidrBlock_default_instance_.DefaultConstruct();
  _MasterAuthorizedNetworksConfig_default_instance_.DefaultConstruct();
  _LegacyAbac_default_instance_.DefaultConstruct();
  _NetworkPolicy_default_instance_.DefaultConstruct();
  _IPAllocationPolicy_default_instance_.DefaultConstruct();
  _Cluster_ResourceLabelsEntry_default_instance_.DefaultConstruct();
  _Cluster_default_instance_.DefaultConstruct();
  _ClusterUpdate_default_instance_.DefaultConstruct();
  _Operation_default_instance_.DefaultConstruct();
  _CreateClusterRequest_default_instance_.DefaultConstruct();
  _GetClusterRequest_default_instance_.DefaultConstruct();
  _UpdateClusterRequest_default_instance_.DefaultConstruct();
  _UpdateNodePoolRequest_default_instance_.DefaultConstruct();
  _SetNodePoolAutoscalingRequest_default_instance_.DefaultConstruct();
  _SetLoggingServiceRequest_default_instance_.DefaultConstruct();
  _SetMonitoringServiceRequest_default_instance_.DefaultConstruct();
  _SetAddonsConfigRequest_default_instance_.DefaultConstruct();
  _SetLocationsRequest_default_instance_.DefaultConstruct();
  _UpdateMasterRequest_default_instance_.DefaultConstruct();
  _SetMasterAuthRequest_default_instance_.DefaultConstruct();
  _DeleteClusterRequest_default_instance_.DefaultConstruct();
  _ListClustersRequest_default_instance_.DefaultConstruct();
  _ListClustersResponse_default_instance_.DefaultConstruct();
  _GetOperationRequest_default_instance_.DefaultConstruct();
  _ListOperationsRequest_default_instance_.DefaultConstruct();
  _CancelOperationRequest_default_instance_.DefaultConstruct();
  _ListOperationsResponse_default_instance_.DefaultConstruct();
  _GetServerConfigRequest_default_instance_.DefaultConstruct();
  _ServerConfig_default_instance_.DefaultConstruct();
  _CreateNodePoolRequest_default_instance_.DefaultConstruct();
  _DeleteNodePoolRequest_default_instance_.DefaultConstruct();
  _ListNodePoolsRequest_default_instance_.DefaultConstruct();
  _GetNodePoolRequest_default_instance_.DefaultConstruct();
  _NodePool_default_instance_.DefaultConstruct();
  _NodeManagement_default_instance_.DefaultConstruct();
  _AutoUpgradeOptions_default_instance_.DefaultConstruct();
  _SetNodePoolManagementRequest_default_instance_.DefaultConstruct();
  _SetNodePoolSizeRequest_default_instance_.DefaultConstruct();
  _RollbackNodePoolUpgradeRequest_default_instance_.DefaultConstruct();
  _ListNodePoolsResponse_default_instance_.DefaultConstruct();
  _NodePoolAutoscaling_default_instance_.DefaultConstruct();
  _SetLabelsRequest_ResourceLabelsEntry_default_instance_.DefaultConstruct();
  _SetLabelsRequest_default_instance_.DefaultConstruct();
  _SetLegacyAbacRequest_default_instance_.DefaultConstruct();
  _StartIPRotationRequest_default_instance_.DefaultConstruct();
  _CompleteIPRotationRequest_default_instance_.DefaultConstruct();
  _AcceleratorConfig_default_instance_.DefaultConstruct();
  _SetNetworkPolicyRequest_default_instance_.DefaultConstruct();
  _NodeConfig_MetadataEntry_default_instance_.get_mutable()->set_default_instance(_NodeConfig_MetadataEntry_default_instance_.get_mutable());
  _NodeConfig_MetadataEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _NodeConfig_LabelsEntry_default_instance_.get_mutable()->set_default_instance(_NodeConfig_LabelsEntry_default_instance_.get_mutable());
  _NodeConfig_LabelsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _MasterAuth_default_instance_.get_mutable()->client_certificate_config_ = const_cast< ::google::container::v1::ClientCertificateConfig*>(
      ::google::container::v1::ClientCertificateConfig::internal_default_instance());
  _AddonsConfig_default_instance_.get_mutable()->http_load_balancing_ = const_cast< ::google::container::v1::HttpLoadBalancing*>(
      ::google::container::v1::HttpLoadBalancing::internal_default_instance());
  _AddonsConfig_default_instance_.get_mutable()->horizontal_pod_autoscaling_ = const_cast< ::google::container::v1::HorizontalPodAutoscaling*>(
      ::google::container::v1::HorizontalPodAutoscaling::internal_default_instance());
  _AddonsConfig_default_instance_.get_mutable()->kubernetes_dashboard_ = const_cast< ::google::container::v1::KubernetesDashboard*>(
      ::google::container::v1::KubernetesDashboard::internal_default_instance());
  _Cluster_ResourceLabelsEntry_default_instance_.get_mutable()->set_default_instance(_Cluster_ResourceLabelsEntry_default_instance_.get_mutable());
  _Cluster_ResourceLabelsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Cluster_default_instance_.get_mutable()->node_config_ = const_cast< ::google::container::v1::NodeConfig*>(
      ::google::container::v1::NodeConfig::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->master_auth_ = const_cast< ::google::container::v1::MasterAuth*>(
      ::google::container::v1::MasterAuth::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->addons_config_ = const_cast< ::google::container::v1::AddonsConfig*>(
      ::google::container::v1::AddonsConfig::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->legacy_abac_ = const_cast< ::google::container::v1::LegacyAbac*>(
      ::google::container::v1::LegacyAbac::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->network_policy_ = const_cast< ::google::container::v1::NetworkPolicy*>(
      ::google::container::v1::NetworkPolicy::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->ip_allocation_policy_ = const_cast< ::google::container::v1::IPAllocationPolicy*>(
      ::google::container::v1::IPAllocationPolicy::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->master_authorized_networks_config_ = const_cast< ::google::container::v1::MasterAuthorizedNetworksConfig*>(
      ::google::container::v1::MasterAuthorizedNetworksConfig::internal_default_instance());
  _ClusterUpdate_default_instance_.get_mutable()->desired_addons_config_ = const_cast< ::google::container::v1::AddonsConfig*>(
      ::google::container::v1::AddonsConfig::internal_default_instance());
  _ClusterUpdate_default_instance_.get_mutable()->desired_node_pool_autoscaling_ = const_cast< ::google::container::v1::NodePoolAutoscaling*>(
      ::google::container::v1::NodePoolAutoscaling::internal_default_instance());
  _ClusterUpdate_default_instance_.get_mutable()->desired_master_authorized_networks_config_ = const_cast< ::google::container::v1::MasterAuthorizedNetworksConfig*>(
      ::google::container::v1::MasterAuthorizedNetworksConfig::internal_default_instance());
  _CreateClusterRequest_default_instance_.get_mutable()->cluster_ = const_cast< ::google::container::v1::Cluster*>(
      ::google::container::v1::Cluster::internal_default_instance());
  _UpdateClusterRequest_default_instance_.get_mutable()->update_ = const_cast< ::google::container::v1::ClusterUpdate*>(
      ::google::container::v1::ClusterUpdate::internal_default_instance());
  _SetNodePoolAutoscalingRequest_default_instance_.get_mutable()->autoscaling_ = const_cast< ::google::container::v1::NodePoolAutoscaling*>(
      ::google::container::v1::NodePoolAutoscaling::internal_default_instance());
  _SetAddonsConfigRequest_default_instance_.get_mutable()->addons_config_ = const_cast< ::google::container::v1::AddonsConfig*>(
      ::google::container::v1::AddonsConfig::internal_default_instance());
  _SetMasterAuthRequest_default_instance_.get_mutable()->update_ = const_cast< ::google::container::v1::MasterAuth*>(
      ::google::container::v1::MasterAuth::internal_default_instance());
  _CreateNodePoolRequest_default_instance_.get_mutable()->node_pool_ = const_cast< ::google::container::v1::NodePool*>(
      ::google::container::v1::NodePool::internal_default_instance());
  _NodePool_default_instance_.get_mutable()->config_ = const_cast< ::google::container::v1::NodeConfig*>(
      ::google::container::v1::NodeConfig::internal_default_instance());
  _NodePool_default_instance_.get_mutable()->autoscaling_ = const_cast< ::google::container::v1::NodePoolAutoscaling*>(
      ::google::container::v1::NodePoolAutoscaling::internal_default_instance());
  _NodePool_default_instance_.get_mutable()->management_ = const_cast< ::google::container::v1::NodeManagement*>(
      ::google::container::v1::NodeManagement::internal_default_instance());
  _NodeManagement_default_instance_.get_mutable()->upgrade_options_ = const_cast< ::google::container::v1::AutoUpgradeOptions*>(
      ::google::container::v1::AutoUpgradeOptions::internal_default_instance());
  _SetNodePoolManagementRequest_default_instance_.get_mutable()->management_ = const_cast< ::google::container::v1::NodeManagement*>(
      ::google::container::v1::NodeManagement::internal_default_instance());
  _SetLabelsRequest_ResourceLabelsEntry_default_instance_.get_mutable()->set_default_instance(_SetLabelsRequest_ResourceLabelsEntry_default_instance_.get_mutable());
  _SetLabelsRequest_ResourceLabelsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _SetNetworkPolicyRequest_default_instance_.get_mutable()->network_policy_ = const_cast< ::google::container::v1::NetworkPolicy*>(
      ::google::container::v1::NetworkPolicy::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n)google/container/v1/cluster_service.pr"
      "oto\022\023google.container.v1\032\034google/api/ann"
      "otations.proto\032\033google/protobuf/empty.pr"
      "oto\"\323\003\n\nNodeConfig\022\024\n\014machine_type\030\001 \001(\t"
      "\022\024\n\014disk_size_gb\030\002 \001(\005\022\024\n\014oauth_scopes\030\003"
      " \003(\t\022\027\n\017service_account\030\t \001(\t\022\?\n\010metadat"
      "a\030\004 \003(\0132-.google.container.v1.NodeConfig"
      ".MetadataEntry\022\022\n\nimage_type\030\005 \001(\t\022;\n\006la"
      "bels\030\006 \003(\0132+.google.container.v1.NodeCon"
      "fig.LabelsEntry\022\027\n\017local_ssd_count\030\007 \001(\005"
      "\022\014\n\004tags\030\010 \003(\t\022\023\n\013preemptible\030\n \001(\010\022<\n\014a"
      "ccelerators\030\013 \003(\0132&.google.container.v1."
      "AcceleratorConfig\032/\n\rMetadataEntry\022\013\n\003ke"
      "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032-\n\013LabelsEntr"
      "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\321\001\n\nMa"
      "sterAuth\022\020\n\010username\030\001 \001(\t\022\020\n\010password\030\002"
      " \001(\t\022O\n\031client_certificate_config\030\003 \001(\0132"
      ",.google.container.v1.ClientCertificateC"
      "onfig\022\036\n\026cluster_ca_certificate\030d \001(\t\022\032\n"
      "\022client_certificate\030e \001(\t\022\022\n\nclient_key\030"
      "f \001(\t\";\n\027ClientCertificateConfig\022 \n\030issu"
      "e_client_certificate\030\001 \001(\010\"\356\001\n\014AddonsCon"
      "fig\022C\n\023http_load_balancing\030\001 \001(\0132&.googl"
      "e.container.v1.HttpLoadBalancing\022Q\n\032hori"
      "zontal_pod_autoscaling\030\002 \001(\0132-.google.co"
      "ntainer.v1.HorizontalPodAutoscaling\022F\n\024k"
      "ubernetes_dashboard\030\003 \001(\0132(.google.conta"
      "iner.v1.KubernetesDashboard\"%\n\021HttpLoadB"
      "alancing\022\020\n\010disabled\030\001 \001(\010\",\n\030Horizontal"
      "PodAutoscaling\022\020\n\010disabled\030\001 \001(\010\"\'\n\023Kube"
      "rnetesDashboard\022\020\n\010disabled\030\001 \001(\010\"\274\001\n\036Ma"
      "sterAuthorizedNetworksConfig\022\017\n\007enabled\030"
      "\001 \001(\010\022R\n\013cidr_blocks\030\002 \003(\0132=.google.cont"
      "ainer.v1.MasterAuthorizedNetworksConfig."
      "CidrBlock\0325\n\tCidrBlock\022\024\n\014display_name\030\001"
      " \001(\t\022\022\n\ncidr_block\030\002 \001(\t\"\035\n\nLegacyAbac\022\017"
      "\n\007enabled\030\001 \001(\010\"\221\001\n\rNetworkPolicy\022=\n\010pro"
      "vider\030\001 \001(\0162+.google.container.v1.Networ"
      "kPolicy.Provider\022\017\n\007enabled\030\002 \001(\010\"0\n\010Pro"
      "vider\022\030\n\024PROVIDER_UNSPECIFIED\020\000\022\n\n\006CALIC"
      "O\020\001\"\257\001\n\022IPAllocationPolicy\022\026\n\016use_ip_ali"
      "ases\030\001 \001(\010\022\031\n\021create_subnetwork\030\002 \001(\010\022\027\n"
      "\017subnetwork_name\030\003 \001(\t\022\031\n\021cluster_ipv4_c"
      "idr\030\004 \001(\t\022\026\n\016node_ipv4_cidr\030\005 \001(\t\022\032\n\022ser"
      "vices_ipv4_cidr\030\006 \001(\t\"\346\n\n\007Cluster\022\014\n\004nam"
      "e\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\032\n\022initial_"
      "node_count\030\003 \001(\005\0224\n\013node_config\030\004 \001(\0132\037."
      "google.container.v1.NodeConfig\0224\n\013master"
      "_auth\030\005 \001(\0132\037.google.container.v1.Master"
      "Auth\022\027\n\017logging_service\030\006 \001(\t\022\032\n\022monitor"
      "ing_service\030\007 \001(\t\022\017\n\007network\030\010 \001(\t\022\031\n\021cl"
      "uster_ipv4_cidr\030\t \001(\t\0228\n\raddons_config\030\n"
      " \001(\0132!.google.container.v1.AddonsConfig\022"
      "\022\n\nsubnetwork\030\013 \001(\t\0221\n\nnode_pools\030\014 \003(\0132"
      "\035.google.container.v1.NodePool\022\021\n\tlocati"
      "ons\030\r \003(\t\022\037\n\027enable_kubernetes_alpha\030\016 \001"
      "(\010\022I\n\017resource_labels\030\017 \003(\01320.google.con"
      "tainer.v1.Cluster.ResourceLabelsEntry\022\031\n"
      "\021label_fingerprint\030\020 \001(\t\0224\n\013legacy_abac\030"
      "\022 \001(\0132\037.google.container.v1.LegacyAbac\022:"
      "\n\016network_policy\030\023 \001(\0132\".google.containe"
      "r.v1.NetworkPolicy\022E\n\024ip_allocation_poli"
      "cy\030\024 \001(\0132\'.google.container.v1.IPAllocat"
      "ionPolicy\022^\n!master_authorized_networks_"
      "config\030\026 \001(\01323.google.container.v1.Maste"
      "rAuthorizedNetworksConfig\022\021\n\tself_link\030d"
      " \001(\t\022\014\n\004zone\030e \001(\t\022\020\n\010endpoint\030f \001(\t\022\037\n\027"
      "initial_cluster_version\030g \001(\t\022\036\n\026current"
      "_master_version\030h \001(\t\022\034\n\024current_node_ve"
      "rsion\030i \001(\t\022\023\n\013create_time\030j \001(\t\0223\n\006stat"
      "us\030k \001(\0162#.google.container.v1.Cluster.S"
      "tatus\022\026\n\016status_message\030l \001(\t\022\033\n\023node_ip"
      "v4_cidr_size\030m \001(\005\022\032\n\022services_ipv4_cidr"
      "\030n \001(\t\022\033\n\023instance_group_urls\030o \003(\t\022\032\n\022c"
      "urrent_node_count\030p \001(\005\022\023\n\013expire_time\030q"
      " \001(\t\0325\n\023ResourceLabelsEntry\022\013\n\003key\030\001 \001(\t"
      "\022\r\n\005value\030\002 \001(\t:\0028\001\"i\n\006Status\022\026\n\022STATUS_"
      "UNSPECIFIED\020\000\022\020\n\014PROVISIONING\020\001\022\013\n\007RUNNI"
      "NG\020\002\022\017\n\013RECONCILING\020\003\022\014\n\010STOPPING\020\004\022\t\n\005E"
      "RROR\020\005\"\301\003\n\rClusterUpdate\022\034\n\024desired_node"
      "_version\030\004 \001(\t\022\"\n\032desired_monitoring_ser"
      "vice\030\005 \001(\t\022@\n\025desired_addons_config\030\006 \001("
      "\0132!.google.container.v1.AddonsConfig\022\034\n\024"
      "desired_node_pool_id\030\007 \001(\t\022\032\n\022desired_im"
      "age_type\030\010 \001(\t\022O\n\035desired_node_pool_auto"
      "scaling\030\t \001(\0132(.google.container.v1.Node"
      "PoolAutoscaling\022\031\n\021desired_locations\030\n \003"
      "(\t\022f\n)desired_master_authorized_networks"
      "_config\030\014 \001(\01323.google.container.v1.Mast"
      "erAuthorizedNetworksConfig\022\036\n\026desired_ma"
      "ster_version\030d \001(\t\"\311\005\n\tOperation\022\014\n\004name"
      "\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022;\n\016operation_type\030\003"
      " \001(\0162#.google.container.v1.Operation.Typ"
      "e\0225\n\006status\030\004 \001(\0162%.google.container.v1."
      "Operation.Status\022\016\n\006detail\030\010 \001(\t\022\026\n\016stat"
      "us_message\030\005 \001(\t\022\021\n\tself_link\030\006 \001(\t\022\023\n\013t"
      "arget_link\030\007 \001(\t\022\022\n\nstart_time\030\n \001(\t\022\020\n\010"
      "end_time\030\013 \001(\t\"R\n\006Status\022\026\n\022STATUS_UNSPE"
      "CIFIED\020\000\022\013\n\007PENDING\020\001\022\013\n\007RUNNING\020\002\022\010\n\004DO"
      "NE\020\003\022\014\n\010ABORTING\020\004\"\341\002\n\004Type\022\024\n\020TYPE_UNSP"
      "ECIFIED\020\000\022\022\n\016CREATE_CLUSTER\020\001\022\022\n\016DELETE_"
      "CLUSTER\020\002\022\022\n\016UPGRADE_MASTER\020\003\022\021\n\rUPGRADE"
      "_NODES\020\004\022\022\n\016REPAIR_CLUSTER\020\005\022\022\n\016UPDATE_C"
      "LUSTER\020\006\022\024\n\020CREATE_NODE_POOL\020\007\022\024\n\020DELETE"
      "_NODE_POOL\020\010\022\034\n\030SET_NODE_POOL_MANAGEMENT"
      "\020\t\022\025\n\021AUTO_REPAIR_NODES\020\n\022\026\n\022AUTO_UPGRAD"
      "E_NODES\020\013\022\016\n\nSET_LABELS\020\014\022\023\n\017SET_MASTER_"
      "AUTH\020\r\022\026\n\022SET_NODE_POOL_SIZE\020\016\022\026\n\022SET_NE"
      "TWORK_POLICY\020\017\"g\n\024CreateClusterRequest\022\022"
      "\n\nproject_id\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022-\n\007clus"
      "ter\030\003 \001(\0132\034.google.container.v1.Cluster\""
      "I\n\021GetClusterRequest\022\022\n\nproject_id\030\001 \001(\t"
      "\022\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t\"\200\001\n\024U"
      "pdateClusterRequest\022\022\n\nproject_id\030\001 \001(\t\022"
      "\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t\0222\n\006upd"
      "ate\030\004 \001(\0132\".google.container.v1.ClusterU"
      "pdate\"\215\001\n\025UpdateNodePoolRequest\022\022\n\nproje"
      "ct_id\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030"
      "\003 \001(\t\022\024\n\014node_pool_id\030\004 \001(\t\022\024\n\014node_vers"
      "ion\030\005 \001(\t\022\022\n\nimage_type\030\006 \001(\t\"\252\001\n\035SetNod"
      "ePoolAutoscalingRequest\022\022\n\nproject_id\030\001 "
      "\001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t\022\024\n"
      "\014node_pool_id\030\004 \001(\t\022=\n\013autoscaling\030\005 \001(\013"
      "2(.google.container.v1.NodePoolAutoscali"
      "ng\"i\n\030SetLoggingServiceRequest\022\022\n\nprojec"
      "t_id\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003"
      " \001(\t\022\027\n\017logging_service\030\004 \001(\t\"o\n\033SetMoni"
      "toringServiceRequest\022\022\n\nproject_id\030\001 \001(\t"
      "\022\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t\022\032\n\022mo"
      "nitoring_service\030\004 \001(\t\"\210\001\n\026SetAddonsConf"
      "igRequest\022\022\n\nproject_id\030\001 \001(\t\022\014\n\004zone\030\002 "
      "\001(\t\022\022\n\ncluster_id\030\003 \001(\t\0228\n\raddons_config"
      "\030\004 \001(\0132!.google.container.v1.AddonsConfi"
      "g\"^\n\023SetLocationsRequest\022\022\n\nproject_id\030\001"
      " \001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t\022\021"
      "\n\tlocations\030\004 \003(\t\"c\n\023UpdateMasterRequest"
      "\022\022\n\nproject_id\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\ncl"
      "uster_id\030\003 \001(\t\022\026\n\016master_version\030\004 \001(\t\"\377"
      "\001\n\024SetMasterAuthRequest\022\022\n\nproject_id\030\001 "
      "\001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t\022@\n"
      "\006action\030\004 \001(\01620.google.container.v1.SetM"
      "asterAuthRequest.Action\022/\n\006update\030\005 \001(\0132"
      "\037.google.container.v1.MasterAuth\">\n\006Acti"
      "on\022\013\n\007UNKNOWN\020\000\022\020\n\014SET_PASSWORD\020\001\022\025\n\021GEN"
      "ERATE_PASSWORD\020\002\"L\n\024DeleteClusterRequest"
      "\022\022\n\nproject_id\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\ncl"
      "uster_id\030\003 \001(\t\"7\n\023ListClustersRequest\022\022\n"
      "\nproject_id\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\"]\n\024ListC"
      "lustersResponse\022.\n\010clusters\030\001 \003(\0132\034.goog"
      "le.container.v1.Cluster\022\025\n\rmissing_zones"
      "\030\002 \003(\t\"M\n\023GetOperationRequest\022\022\n\nproject"
      "_id\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022\024\n\014operation_id\030"
      "\003 \001(\t\"9\n\025ListOperationsRequest\022\022\n\nprojec"
      "t_id\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\"P\n\026CancelOperat"
      "ionRequest\022\022\n\nproject_id\030\001 \001(\t\022\014\n\004zone\030\002"
      " \001(\t\022\024\n\014operation_id\030\003 \001(\t\"c\n\026ListOperat"
      "ionsResponse\0222\n\noperations\030\001 \003(\0132\036.googl"
      "e.container.v1.Operation\022\025\n\rmissing_zone"
      "s\030\002 \003(\t\":\n\026GetServerConfigRequest\022\022\n\npro"
      "ject_id\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\"\242\001\n\014ServerCo"
      "nfig\022\037\n\027default_cluster_version\030\001 \001(\t\022\033\n"
      "\023valid_node_versions\030\003 \003(\t\022\032\n\022default_im"
      "age_type\030\004 \001(\t\022\031\n\021valid_image_types\030\005 \003("
      "\t\022\035\n\025valid_master_versions\030\006 \003(\t\"\177\n\025Crea"
      "teNodePoolRequest\022\022\n\nproject_id\030\001 \001(\t\022\014\n"
      "\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t\0220\n\tnode_"
      "pool\030\004 \001(\0132\035.google.container.v1.NodePoo"
      "l\"c\n\025DeleteNodePoolRequest\022\022\n\nproject_id"
      "\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t"
      "\022\024\n\014node_pool_id\030\004 \001(\t\"L\n\024ListNodePoolsR"
      "equest\022\022\n\nproject_id\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t"
      "\022\022\n\ncluster_id\030\003 \001(\t\"`\n\022GetNodePoolReque"
      "st\022\022\n\nproject_id\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\n"
      "cluster_id\030\003 \001(\t\022\024\n\014node_pool_id\030\004 \001(\t\"\360"
      "\003\n\010NodePool\022\014\n\004name\030\001 \001(\t\022/\n\006config\030\002 \001("
      "\0132\037.google.container.v1.NodeConfig\022\032\n\022in"
      "itial_node_count\030\003 \001(\005\022\021\n\tself_link\030d \001("
      "\t\022\017\n\007version\030e \001(\t\022\033\n\023instance_group_url"
      "s\030f \003(\t\0224\n\006status\030g \001(\0162$.google.contain"
      "er.v1.NodePool.Status\022\026\n\016status_message\030"
      "h \001(\t\022=\n\013autoscaling\030\004 \001(\0132(.google.cont"
      "ainer.v1.NodePoolAutoscaling\0227\n\nmanageme"
      "nt\030\005 \001(\0132#.google.container.v1.NodeManag"
      "ement\"\201\001\n\006Status\022\026\n\022STATUS_UNSPECIFIED\020\000"
      "\022\020\n\014PROVISIONING\020\001\022\013\n\007RUNNING\020\002\022\026\n\022RUNNI"
      "NG_WITH_ERROR\020\003\022\017\n\013RECONCILING\020\004\022\014\n\010STOP"
      "PING\020\005\022\t\n\005ERROR\020\006\"}\n\016NodeManagement\022\024\n\014a"
      "uto_upgrade\030\001 \001(\010\022\023\n\013auto_repair\030\002 \001(\010\022@"
      "\n\017upgrade_options\030\n \001(\0132\'.google.contain"
      "er.v1.AutoUpgradeOptions\"J\n\022AutoUpgradeO"
      "ptions\022\037\n\027auto_upgrade_start_time\030\001 \001(\t\022"
      "\023\n\013description\030\002 \001(\t\"\243\001\n\034SetNodePoolMana"
      "gementRequest\022\022\n\nproject_id\030\001 \001(\t\022\014\n\004zon"
      "e\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t\022\024\n\014node_pool"
      "_id\030\004 \001(\t\0227\n\nmanagement\030\005 \001(\0132#.google.c"
      "ontainer.v1.NodeManagement\"x\n\026SetNodePoo"
      "lSizeRequest\022\022\n\nproject_id\030\001 \001(\t\022\014\n\004zone"
      "\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t\022\024\n\014node_pool_"
      "id\030\004 \001(\t\022\022\n\nnode_count\030\005 \001(\005\"l\n\036Rollback"
      "NodePoolUpgradeRequest\022\022\n\nproject_id\030\001 \001"
      "(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t\022\024\n\014"
      "node_pool_id\030\004 \001(\t\"J\n\025ListNodePoolsRespo"
      "nse\0221\n\nnode_pools\030\001 \003(\0132\035.google.contain"
      "er.v1.NodePool\"V\n\023NodePoolAutoscaling\022\017\n"
      "\007enabled\030\001 \001(\010\022\026\n\016min_node_count\030\002 \001(\005\022\026"
      "\n\016max_node_count\030\003 \001(\005\"\356\001\n\020SetLabelsRequ"
      "est\022\022\n\nproject_id\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n"
      "\ncluster_id\030\003 \001(\t\022R\n\017resource_labels\030\004 \003"
      "(\01329.google.container.v1.SetLabelsReques"
      "t.ResourceLabelsEntry\022\031\n\021label_fingerpri"
      "nt\030\005 \001(\t\0325\n\023ResourceLabelsEntry\022\013\n\003key\030\001"
      " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"]\n\024SetLegacyAbac"
      "Request\022\022\n\nproject_id\030\001 \001(\t\022\014\n\004zone\030\002 \001("
      "\t\022\022\n\ncluster_id\030\003 \001(\t\022\017\n\007enabled\030\004 \001(\010\"N"
      "\n\026StartIPRotationRequest\022\022\n\nproject_id\030\001"
      " \001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t\"Q"
      "\n\031CompleteIPRotationRequest\022\022\n\nproject_i"
      "d\030\001 \001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001("
      "\t\"H\n\021AcceleratorConfig\022\031\n\021accelerator_co"
      "unt\030\001 \001(\003\022\030\n\020accelerator_type\030\002 \001(\t\"\213\001\n\027"
      "SetNetworkPolicyRequest\022\022\n\nproject_id\030\001 "
      "\001(\t\022\014\n\004zone\030\002 \001(\t\022\022\n\ncluster_id\030\003 \001(\t\022:\n"
      "\016network_policy\030\004 \001(\0132\".google.container"
      ".v1.NetworkPolicy2\232)\n\016ClusterManager\022\234\001\n"
      "\014ListClusters\022(.google.container.v1.List"
      "ClustersRequest\032).google.container.v1.Li"
      "stClustersResponse\"7\202\323\344\223\0021\022//v1/projects"
      "/{project_id}/zones/{zone}/clusters\022\230\001\n\n"
      "GetCluster\022&.google.container.v1.GetClus"
      "terRequest\032\034.google.container.v1.Cluster"
      "\"D\202\323\344\223\002>\022</v1/projects/{project_id}/zone"
      "s/{zone}/clusters/{cluster_id}\022\226\001\n\rCreat"
      "eCluster\022).google.container.v1.CreateClu"
      "sterRequest\032\036.google.container.v1.Operat"
      "ion\":\202\323\344\223\0024\"//v1/projects/{project_id}/z"
      "ones/{zone}/clusters:\001*\022\243\001\n\rUpdateCluste"
      "r\022).google.container.v1.UpdateClusterReq"
      "uest\032\036.google.container.v1.Operation\"G\202\323"
      "\344\223\002A\032</v1/projects/{project_id}/zones/{z"
      "one}/clusters/{cluster_id}:\001*\022\305\001\n\016Update"
      "NodePool\022*.google.container.v1.UpdateNod"
      "ePoolRequest\032\036.google.container.v1.Opera"
      "tion\"g\202\323\344\223\002a\"\\/v1/projects/{project_id}/"
      "zones/{zone}/clusters/{cluster_id}/nodeP"
      "ools/{node_pool_id}/update:\001*\022\332\001\n\026SetNod"
      "ePoolAutoscaling\0222.google.container.v1.S"
      "etNodePoolAutoscalingRequest\032\036.google.co"
      "ntainer.v1.Operation\"l\202\323\344\223\002f\"a/v1/projec"
      "ts/{project_id}/zones/{zone}/clusters/{c"
      "luster_id}/nodePools/{node_pool_id}/auto"
      "scaling:\001*\022\263\001\n\021SetLoggingService\022-.googl"
      "e.container.v1.SetLoggingServiceRequest\032"
      "\036.google.container.v1.Operation\"O\202\323\344\223\002I\""
      "D/v1/projects/{project_id}/zones/{zone}/"
      "clusters/{cluster_id}/logging:\001*\022\274\001\n\024Set"
      "MonitoringService\0220.google.container.v1."
      "SetMonitoringServiceRequest\032\036.google.con"
      "tainer.v1.Operation\"R\202\323\344\223\002L\"G/v1/project"
      "s/{project_id}/zones/{zone}/clusters/{cl"
      "uster_id}/monitoring:\001*\022\256\001\n\017SetAddonsCon"
      "fig\022+.google.container.v1.SetAddonsConfi"
      "gRequest\032\036.google.container.v1.Operation"
      "\"N\202\323\344\223\002H\"C/v1/projects/{project_id}/zone"
      "s/{zone}/clusters/{cluster_id}/addons:\001*"
      "\022\253\001\n\014SetLocations\022(.google.container.v1."
      "SetLocationsRequest\032\036.google.container.v"
      "1.Operation\"Q\202\323\344\223\002K\"F/v1/projects/{proje"
      "ct_id}/zones/{zone}/clusters/{cluster_id"
      "}/locations:\001*\022\250\001\n\014UpdateMaster\022(.google"
      ".container.v1.UpdateMasterRequest\032\036.goog"
      "le.container.v1.Operation\"N\202\323\344\223\002H\"C/v1/p"
      "rojects/{project_id}/zones/{zone}/cluste"
      "rs/{cluster_id}/master:\001*\022\261\001\n\rSetMasterA"
      "uth\022).google.container.v1.SetMasterAuthR"
      "equest\032\036.google.container.v1.Operation\"U"
      "\202\323\344\223\002O\"J/v1/projects/{project_id}/zones/"
      "{zone}/clusters/{cluster_id}:setMasterAu"
      "th:\001*\022\240\001\n\rDeleteCluster\022).google.contain"
      "er.v1.DeleteClusterRequest\032\036.google.cont"
      "ainer.v1.Operation\"D\202\323\344\223\002>*</v1/projects"
      "/{project_id}/zones/{zone}/clusters/{clu"
      "ster_id}\022\244\001\n\016ListOperations\022*.google.con"
      "tainer.v1.ListOperationsRequest\032+.google"
      ".container.v1.ListOperationsResponse\"9\202\323"
      "\344\223\0023\0221/v1/projects/{project_id}/zones/{z"
      "one}/operations\022\242\001\n\014GetOperation\022(.googl"
      "e.container.v1.GetOperationRequest\032\036.goo"
      "gle.container.v1.Operation\"H\202\323\344\223\002B\022@/v1/"
      "projects/{project_id}/zones/{zone}/opera"
      "tions/{operation_id}\022\252\001\n\017CancelOperation"
      "\022+.google.container.v1.CancelOperationRe"
      "quest\032\026.google.protobuf.Empty\"R\202\323\344\223\002L\"G/"
      "v1/projects/{project_id}/zones/{zone}/op"
      "erations/{operation_id}:cancel:\001*\022\236\001\n\017Ge"
      "tServerConfig\022+.google.container.v1.GetS"
      "erverConfigRequest\032!.google.container.v1"
      ".ServerConfig\";\202\323\344\223\0025\0223/v1/projects/{pro"
      "ject_id}/zones/{zone}/serverconfig\022\266\001\n\rL"
      "istNodePools\022).google.container.v1.ListN"
      "odePoolsRequest\032*.google.container.v1.Li"
      "stNodePoolsResponse\"N\202\323\344\223\002H\022F/v1/project"
      "s/{project_id}/zones/{zone}/clusters/{cl"
      "uster_id}/nodePools\022\264\001\n\013GetNodePool\022\'.go"
      "ogle.container.v1.GetNodePoolRequest\032\035.g"
      "oogle.container.v1.NodePool\"]\202\323\344\223\002W\022U/v1"
      "/projects/{project_id}/zones/{zone}/clus"
      "ters/{cluster_id}/nodePools/{node_pool_i"
      "d}\022\257\001\n\016CreateNodePool\022*.google.container"
      ".v1.CreateNodePoolRequest\032\036.google.conta"
      "iner.v1.Operation\"Q\202\323\344\223\002K\"F/v1/projects/"
      "{project_id}/zones/{zone}/clusters/{clus"
      "ter_id}/nodePools:\001*\022\273\001\n\016DeleteNodePool\022"
      "*.google.container.v1.DeleteNodePoolRequ"
      "est\032\036.google.container.v1.Operation\"]\202\323\344"
      "\223\002W*U/v1/projects/{project_id}/zones/{zo"
      "ne}/clusters/{cluster_id}/nodePools/{nod"
      "e_pool_id}\022\331\001\n\027RollbackNodePoolUpgrade\0223"
      ".google.container.v1.RollbackNodePoolUpg"
      "radeRequest\032\036.google.container.v1.Operat"
      "ion\"i\202\323\344\223\002c\"^/v1/projects/{project_id}/z"
      "ones/{zone}/clusters/{cluster_id}/nodePo"
      "ols/{node_pool_id}:rollback:\001*\022\332\001\n\025SetNo"
      "dePoolManagement\0221.google.container.v1.S"
      "etNodePoolManagementRequest\032\036.google.con"
      "tainer.v1.Operation\"n\202\323\344\223\002h\"c/v1/project"
      "s/{project_id}/zones/{zone}/clusters/{cl"
      "uster_id}/nodePools/{node_pool_id}/setMa"
      "nagement:\001*\022\252\001\n\tSetLabels\022%.google.conta"
      "iner.v1.SetLabelsRequest\032\036.google.contai"
      "ner.v1.Operation\"V\202\323\344\223\002P\"K/v1/projects/{"
      "project_id}/zones/{zone}/clusters/{clust"
      "er_id}/resourceLabels:\001*\022\256\001\n\rSetLegacyAb"
      "ac\022).google.container.v1.SetLegacyAbacRe"
      "quest\032\036.google.container.v1.Operation\"R\202"
      "\323\344\223\002L\"G/v1/projects/{project_id}/zones/{"
      "zone}/clusters/{cluster_id}/legacyAbac:\001"
      "*\022\267\001\n\017StartIPRotation\022+.google.container"
      ".v1.StartIPRotationRequest\032\036.google.cont"
      "ainer.v1.Operation\"W\202\323\344\223\002Q\"L/v1/projects"
      "/{project_id}/zones/{zone}/clusters/{clu"
      "ster_id}:startIpRotation:\001*\022\300\001\n\022Complete"
      "IPRotation\022..google.container.v1.Complet"
      "eIPRotationRequest\032\036.google.container.v1"
      ".Operation\"Z\202\323\344\223\002T\"O/v1/projects/{projec"
      "t_id}/zones/{zone}/clusters/{cluster_id}"
      ":completeIpRotation:\001*\022\310\001\n\017SetNodePoolSi"
      "ze\022+.google.container.v1.SetNodePoolSize"
      "Request\032\036.google.container.v1.Operation\""
      "h\202\323\344\223\002b\"]/v1/projects/{project_id}/zones"
      "/{zone}/clusters/{cluster_id}/nodePools/"
      "{node_pool_id}/setSize:\001*\022\272\001\n\020SetNetwork"
      "Policy\022,.google.container.v1.SetNetworkP"
      "olicyRequest\032\036.google.container.v1.Opera"
      "tion\"X\202\323\344\223\002R\"M/v1/projects/{project_id}/"
      "zones/{zone}/clusters/{cluster_id}:setNe"
      "tworkPolicy:\001*Bn\n\027com.google.container.v"
      "1B\023ClusterServiceProtoP\001Z<google.golang."
      "org/genproto/googleapis/container/v1;con"
      "tainerb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 14334);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/container/v1/cluster_service.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto

const ::google::protobuf::EnumDescriptor* NetworkPolicy_Provider_descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_enum_descriptors[0];
}
bool NetworkPolicy_Provider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetworkPolicy_Provider NetworkPolicy::PROVIDER_UNSPECIFIED;
const NetworkPolicy_Provider NetworkPolicy::CALICO;
const NetworkPolicy_Provider NetworkPolicy::Provider_MIN;
const NetworkPolicy_Provider NetworkPolicy::Provider_MAX;
const int NetworkPolicy::Provider_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Cluster_Status_descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_enum_descriptors[1];
}
bool Cluster_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cluster_Status Cluster::STATUS_UNSPECIFIED;
const Cluster_Status Cluster::PROVISIONING;
const Cluster_Status Cluster::RUNNING;
const Cluster_Status Cluster::RECONCILING;
const Cluster_Status Cluster::STOPPING;
const Cluster_Status Cluster::ERROR;
const Cluster_Status Cluster::Status_MIN;
const Cluster_Status Cluster::Status_MAX;
const int Cluster::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Operation_Status_descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_enum_descriptors[2];
}
bool Operation_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Operation_Status Operation::STATUS_UNSPECIFIED;
const Operation_Status Operation::PENDING;
const Operation_Status Operation::RUNNING;
const Operation_Status Operation::DONE;
const Operation_Status Operation::ABORTING;
const Operation_Status Operation::Status_MIN;
const Operation_Status Operation::Status_MAX;
const int Operation::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Operation_Type_descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_enum_descriptors[3];
}
bool Operation_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Operation_Type Operation::TYPE_UNSPECIFIED;
const Operation_Type Operation::CREATE_CLUSTER;
const Operation_Type Operation::DELETE_CLUSTER;
const Operation_Type Operation::UPGRADE_MASTER;
const Operation_Type Operation::UPGRADE_NODES;
const Operation_Type Operation::REPAIR_CLUSTER;
const Operation_Type Operation::UPDATE_CLUSTER;
const Operation_Type Operation::CREATE_NODE_POOL;
const Operation_Type Operation::DELETE_NODE_POOL;
const Operation_Type Operation::SET_NODE_POOL_MANAGEMENT;
const Operation_Type Operation::AUTO_REPAIR_NODES;
const Operation_Type Operation::AUTO_UPGRADE_NODES;
const Operation_Type Operation::SET_LABELS;
const Operation_Type Operation::SET_MASTER_AUTH;
const Operation_Type Operation::SET_NODE_POOL_SIZE;
const Operation_Type Operation::SET_NETWORK_POLICY;
const Operation_Type Operation::Type_MIN;
const Operation_Type Operation::Type_MAX;
const int Operation::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SetMasterAuthRequest_Action_descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_enum_descriptors[4];
}
bool SetMasterAuthRequest_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SetMasterAuthRequest_Action SetMasterAuthRequest::UNKNOWN;
const SetMasterAuthRequest_Action SetMasterAuthRequest::SET_PASSWORD;
const SetMasterAuthRequest_Action SetMasterAuthRequest::GENERATE_PASSWORD;
const SetMasterAuthRequest_Action SetMasterAuthRequest::Action_MIN;
const SetMasterAuthRequest_Action SetMasterAuthRequest::Action_MAX;
const int SetMasterAuthRequest::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NodePool_Status_descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_enum_descriptors[5];
}
bool NodePool_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NodePool_Status NodePool::STATUS_UNSPECIFIED;
const NodePool_Status NodePool::PROVISIONING;
const NodePool_Status NodePool::RUNNING;
const NodePool_Status NodePool::RUNNING_WITH_ERROR;
const NodePool_Status NodePool::RECONCILING;
const NodePool_Status NodePool::STOPPING;
const NodePool_Status NodePool::ERROR;
const NodePool_Status NodePool::Status_MIN;
const NodePool_Status NodePool::Status_MAX;
const int NodePool::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

NodeConfig::NodeConfig_MetadataEntry::NodeConfig_MetadataEntry() {}
NodeConfig::NodeConfig_MetadataEntry::NodeConfig_MetadataEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata NodeConfig::NodeConfig_MetadataEntry::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[0];
}
void NodeConfig::NodeConfig_MetadataEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void NodeConfig::NodeConfig_MetadataEntry::MergeFrom(const NodeConfig_MetadataEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

NodeConfig::NodeConfig_LabelsEntry::NodeConfig_LabelsEntry() {}
NodeConfig::NodeConfig_LabelsEntry::NodeConfig_LabelsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata NodeConfig::NodeConfig_LabelsEntry::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[1];
}
void NodeConfig::NodeConfig_LabelsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void NodeConfig::NodeConfig_LabelsEntry::MergeFrom(const NodeConfig_LabelsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeConfig::kMachineTypeFieldNumber;
const int NodeConfig::kDiskSizeGbFieldNumber;
const int NodeConfig::kOauthScopesFieldNumber;
const int NodeConfig::kServiceAccountFieldNumber;
const int NodeConfig::kMetadataFieldNumber;
const int NodeConfig::kImageTypeFieldNumber;
const int NodeConfig::kLabelsFieldNumber;
const int NodeConfig::kLocalSsdCountFieldNumber;
const int NodeConfig::kTagsFieldNumber;
const int NodeConfig::kPreemptibleFieldNumber;
const int NodeConfig::kAcceleratorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeConfig::NodeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.NodeConfig)
}
NodeConfig::NodeConfig(const NodeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      oauth_scopes_(from.oauth_scopes_),
      tags_(from.tags_),
      accelerators_(from.accelerators_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  labels_.MergeFrom(from.labels_);
  machine_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.machine_type().size() > 0) {
    machine_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_type_);
  }
  image_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_type().size() > 0) {
    image_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_type_);
  }
  service_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_account().size() > 0) {
    service_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_account_);
  }
  ::memcpy(&disk_size_gb_, &from.disk_size_gb_,
    reinterpret_cast<char*>(&preemptible_) -
    reinterpret_cast<char*>(&disk_size_gb_) + sizeof(preemptible_));
  // @@protoc_insertion_point(copy_constructor:google.container.v1.NodeConfig)
}

void NodeConfig::SharedCtor() {
  machine_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&disk_size_gb_, 0, reinterpret_cast<char*>(&preemptible_) -
    reinterpret_cast<char*>(&disk_size_gb_) + sizeof(preemptible_));
  _cached_size_ = 0;
}

NodeConfig::~NodeConfig() {
  // @@protoc_insertion_point(destructor:google.container.v1.NodeConfig)
  SharedDtor();
}

void NodeConfig::SharedDtor() {
  machine_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeConfig::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeConfig& NodeConfig::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeConfig* NodeConfig::New(::google::protobuf::Arena* arena) const {
  NodeConfig* n = new NodeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.NodeConfig)
  oauth_scopes_.Clear();
  metadata_.Clear();
  labels_.Clear();
  tags_.Clear();
  accelerators_.Clear();
  machine_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&disk_size_gb_, 0, reinterpret_cast<char*>(&preemptible_) -
    reinterpret_cast<char*>(&disk_size_gb_) + sizeof(preemptible_));
}

bool NodeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.NodeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string machine_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine_type().data(), this->machine_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodeConfig.machine_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 disk_size_gb = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disk_size_gb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string oauth_scopes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_oauth_scopes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->oauth_scopes(this->oauth_scopes_size() - 1).data(),
            this->oauth_scopes(this->oauth_scopes_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodeConfig.oauth_scopes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> metadata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          NodeConfig_MetadataEntry::Parser< ::google::protobuf::internal::MapField<
              NodeConfig_MetadataEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&metadata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodeConfig.MetadataEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodeConfig.MetadataEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_type().data(), this->image_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodeConfig.image_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          NodeConfig_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              NodeConfig_LabelsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodeConfig.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodeConfig.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 local_ssd_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_ssd_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodeConfig.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_account = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_account().data(), this->service_account().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodeConfig.service_account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool preemptible = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preemptible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.container.v1.AcceleratorConfig accelerators = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accelerators()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.NodeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.NodeConfig)
  return false;
#undef DO_
}

void NodeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.NodeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string machine_type = 1;
  if (this->machine_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodeConfig.machine_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->machine_type(), output);
  }

  // int32 disk_size_gb = 2;
  if (this->disk_size_gb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->disk_size_gb(), output);
  }

  // repeated string oauth_scopes = 3;
  for (int i = 0, n = this->oauth_scopes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oauth_scopes(i).data(), this->oauth_scopes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodeConfig.oauth_scopes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->oauth_scopes(i), output);
  }

  // map<string, string> metadata = 4;
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.NodeConfig.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.NodeConfig.MetadataEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<NodeConfig_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<NodeConfig_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string image_type = 5;
  if (this->image_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_type().data(), this->image_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodeConfig.image_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->image_type(), output);
  }

  // map<string, string> labels = 6;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.NodeConfig.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.NodeConfig.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<NodeConfig_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<NodeConfig_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // int32 local_ssd_count = 7;
  if (this->local_ssd_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->local_ssd_count(), output);
  }

  // repeated string tags = 8;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodeConfig.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->tags(i), output);
  }

  // string service_account = 9;
  if (this->service_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_account().data(), this->service_account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodeConfig.service_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->service_account(), output);
  }

  // bool preemptible = 10;
  if (this->preemptible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->preemptible(), output);
  }

  // repeated .google.container.v1.AcceleratorConfig accelerators = 11;
  for (unsigned int i = 0, n = this->accelerators_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->accelerators(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.NodeConfig)
}

::google::protobuf::uint8* NodeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.NodeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string machine_type = 1;
  if (this->machine_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodeConfig.machine_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->machine_type(), target);
  }

  // int32 disk_size_gb = 2;
  if (this->disk_size_gb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->disk_size_gb(), target);
  }

  // repeated string oauth_scopes = 3;
  for (int i = 0, n = this->oauth_scopes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oauth_scopes(i).data(), this->oauth_scopes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodeConfig.oauth_scopes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->oauth_scopes(i), target);
  }

  // map<string, string> metadata = 4;
  if (!this->metadata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.NodeConfig.MetadataEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.NodeConfig.MetadataEntry.value");
      }
    };

    if (deterministic &&
        this->metadata().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->metadata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<NodeConfig_MetadataEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(metadata_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<NodeConfig_MetadataEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->metadata().begin();
          it != this->metadata().end(); ++it) {
        entry.reset(metadata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string image_type = 5;
  if (this->image_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_type().data(), this->image_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodeConfig.image_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->image_type(), target);
  }

  // map<string, string> labels = 6;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.NodeConfig.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.NodeConfig.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<NodeConfig_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<NodeConfig_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // int32 local_ssd_count = 7;
  if (this->local_ssd_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->local_ssd_count(), target);
  }

  // repeated string tags = 8;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodeConfig.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->tags(i), target);
  }

  // string service_account = 9;
  if (this->service_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_account().data(), this->service_account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodeConfig.service_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->service_account(), target);
  }

  // bool preemptible = 10;
  if (this->preemptible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->preemptible(), target);
  }

  // repeated .google.container.v1.AcceleratorConfig accelerators = 11;
  for (unsigned int i = 0, n = this->accelerators_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->accelerators(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.NodeConfig)
  return target;
}

size_t NodeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.NodeConfig)
  size_t total_size = 0;

  // repeated string oauth_scopes = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->oauth_scopes_size());
  for (int i = 0, n = this->oauth_scopes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->oauth_scopes(i));
  }

  // map<string, string> metadata = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metadata_size());
  {
    ::google::protobuf::scoped_ptr<NodeConfig_MetadataEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->metadata().begin();
        it != this->metadata().end(); ++it) {
      entry.reset(metadata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> labels = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<NodeConfig_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string tags = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated .google.container.v1.AcceleratorConfig accelerators = 11;
  {
    unsigned int count = this->accelerators_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accelerators(i));
    }
  }

  // string machine_type = 1;
  if (this->machine_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine_type());
  }

  // string image_type = 5;
  if (this->image_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_type());
  }

  // string service_account = 9;
  if (this->service_account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_account());
  }

  // int32 disk_size_gb = 2;
  if (this->disk_size_gb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->disk_size_gb());
  }

  // int32 local_ssd_count = 7;
  if (this->local_ssd_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_ssd_count());
  }

  // bool preemptible = 10;
  if (this->preemptible() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.NodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.NodeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.NodeConfig)
    MergeFrom(*source);
  }
}

void NodeConfig::MergeFrom(const NodeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.NodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  oauth_scopes_.MergeFrom(from.oauth_scopes_);
  metadata_.MergeFrom(from.metadata_);
  labels_.MergeFrom(from.labels_);
  tags_.MergeFrom(from.tags_);
  accelerators_.MergeFrom(from.accelerators_);
  if (from.machine_type().size() > 0) {

    machine_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_type_);
  }
  if (from.image_type().size() > 0) {

    image_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_type_);
  }
  if (from.service_account().size() > 0) {

    service_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_account_);
  }
  if (from.disk_size_gb() != 0) {
    set_disk_size_gb(from.disk_size_gb());
  }
  if (from.local_ssd_count() != 0) {
    set_local_ssd_count(from.local_ssd_count());
  }
  if (from.preemptible() != 0) {
    set_preemptible(from.preemptible());
  }
}

void NodeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.NodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeConfig::CopyFrom(const NodeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.NodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeConfig::IsInitialized() const {
  return true;
}

void NodeConfig::Swap(NodeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeConfig::InternalSwap(NodeConfig* other) {
  oauth_scopes_.InternalSwap(&other->oauth_scopes_);
  metadata_.Swap(&other->metadata_);
  labels_.Swap(&other->labels_);
  tags_.InternalSwap(&other->tags_);
  accelerators_.InternalSwap(&other->accelerators_);
  machine_type_.Swap(&other->machine_type_);
  image_type_.Swap(&other->image_type_);
  service_account_.Swap(&other->service_account_);
  std::swap(disk_size_gb_, other->disk_size_gb_);
  std::swap(local_ssd_count_, other->local_ssd_count_);
  std::swap(preemptible_, other->preemptible_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeConfig::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeConfig

// string machine_type = 1;
void NodeConfig::clear_machine_type() {
  machine_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeConfig::machine_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.machine_type)
  return machine_type_.GetNoArena();
}
void NodeConfig::set_machine_type(const ::std::string& value) {
  
  machine_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.machine_type)
}
#if LANG_CXX11
void NodeConfig::set_machine_type(::std::string&& value) {
  
  machine_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.machine_type)
}
#endif
void NodeConfig::set_machine_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  machine_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.machine_type)
}
void NodeConfig::set_machine_type(const char* value, size_t size) {
  
  machine_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.machine_type)
}
::std::string* NodeConfig::mutable_machine_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.machine_type)
  return machine_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeConfig::release_machine_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.machine_type)
  
  return machine_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeConfig::set_allocated_machine_type(::std::string* machine_type) {
  if (machine_type != NULL) {
    
  } else {
    
  }
  machine_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.machine_type)
}

// int32 disk_size_gb = 2;
void NodeConfig::clear_disk_size_gb() {
  disk_size_gb_ = 0;
}
::google::protobuf::int32 NodeConfig::disk_size_gb() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.disk_size_gb)
  return disk_size_gb_;
}
void NodeConfig::set_disk_size_gb(::google::protobuf::int32 value) {
  
  disk_size_gb_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.disk_size_gb)
}

// repeated string oauth_scopes = 3;
int NodeConfig::oauth_scopes_size() const {
  return oauth_scopes_.size();
}
void NodeConfig::clear_oauth_scopes() {
  oauth_scopes_.Clear();
}
const ::std::string& NodeConfig::oauth_scopes(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_.Get(index);
}
::std::string* NodeConfig::mutable_oauth_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_.Mutable(index);
}
void NodeConfig::set_oauth_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.oauth_scopes)
  oauth_scopes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NodeConfig::set_oauth_scopes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.oauth_scopes)
  oauth_scopes_.Mutable(index)->assign(std::move(value));
}
#endif
void NodeConfig::set_oauth_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  oauth_scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.oauth_scopes)
}
void NodeConfig::set_oauth_scopes(int index, const char* value, size_t size) {
  oauth_scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.oauth_scopes)
}
::std::string* NodeConfig::add_oauth_scopes() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_.Add();
}
void NodeConfig::add_oauth_scopes(const ::std::string& value) {
  oauth_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.oauth_scopes)
}
#if LANG_CXX11
void NodeConfig::add_oauth_scopes(::std::string&& value) {
  oauth_scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.oauth_scopes)
}
#endif
void NodeConfig::add_oauth_scopes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  oauth_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.NodeConfig.oauth_scopes)
}
void NodeConfig::add_oauth_scopes(const char* value, size_t size) {
  oauth_scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.NodeConfig.oauth_scopes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeConfig::oauth_scopes() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodeConfig::mutable_oauth_scopes() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodeConfig.oauth_scopes)
  return &oauth_scopes_;
}

// string service_account = 9;
void NodeConfig::clear_service_account() {
  service_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeConfig::service_account() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.service_account)
  return service_account_.GetNoArena();
}
void NodeConfig::set_service_account(const ::std::string& value) {
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.service_account)
}
#if LANG_CXX11
void NodeConfig::set_service_account(::std::string&& value) {
  
  service_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.service_account)
}
#endif
void NodeConfig::set_service_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.service_account)
}
void NodeConfig::set_service_account(const char* value, size_t size) {
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.service_account)
}
::std::string* NodeConfig::mutable_service_account() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.service_account)
  return service_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeConfig::release_service_account() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.service_account)
  
  return service_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeConfig::set_allocated_service_account(::std::string* service_account) {
  if (service_account != NULL) {
    
  } else {
    
  }
  service_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_account);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.service_account)
}

// map<string, string> metadata = 4;
int NodeConfig::metadata_size() const {
  return metadata_.size();
}
void NodeConfig::clear_metadata() {
  metadata_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
NodeConfig::metadata() const {
  // @@protoc_insertion_point(field_map:google.container.v1.NodeConfig.metadata)
  return metadata_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
NodeConfig::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.NodeConfig.metadata)
  return metadata_.MutableMap();
}

// string image_type = 5;
void NodeConfig::clear_image_type() {
  image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeConfig::image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.image_type)
  return image_type_.GetNoArena();
}
void NodeConfig::set_image_type(const ::std::string& value) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.image_type)
}
#if LANG_CXX11
void NodeConfig::set_image_type(::std::string&& value) {
  
  image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.image_type)
}
#endif
void NodeConfig::set_image_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.image_type)
}
void NodeConfig::set_image_type(const char* value, size_t size) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.image_type)
}
::std::string* NodeConfig::mutable_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.image_type)
  return image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeConfig::release_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.image_type)
  
  return image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeConfig::set_allocated_image_type(::std::string* image_type) {
  if (image_type != NULL) {
    
  } else {
    
  }
  image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.image_type)
}

// map<string, string> labels = 6;
int NodeConfig::labels_size() const {
  return labels_.size();
}
void NodeConfig::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
NodeConfig::labels() const {
  // @@protoc_insertion_point(field_map:google.container.v1.NodeConfig.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
NodeConfig::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.NodeConfig.labels)
  return labels_.MutableMap();
}

// int32 local_ssd_count = 7;
void NodeConfig::clear_local_ssd_count() {
  local_ssd_count_ = 0;
}
::google::protobuf::int32 NodeConfig::local_ssd_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.local_ssd_count)
  return local_ssd_count_;
}
void NodeConfig::set_local_ssd_count(::google::protobuf::int32 value) {
  
  local_ssd_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.local_ssd_count)
}

// repeated string tags = 8;
int NodeConfig::tags_size() const {
  return tags_.size();
}
void NodeConfig::clear_tags() {
  tags_.Clear();
}
const ::std::string& NodeConfig::tags(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.tags)
  return tags_.Get(index);
}
::std::string* NodeConfig::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.tags)
  return tags_.Mutable(index);
}
void NodeConfig::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NodeConfig::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void NodeConfig::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.tags)
}
void NodeConfig::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.tags)
}
::std::string* NodeConfig::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.NodeConfig.tags)
  return tags_.Add();
}
void NodeConfig::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.tags)
}
#if LANG_CXX11
void NodeConfig::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.tags)
}
#endif
void NodeConfig::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.NodeConfig.tags)
}
void NodeConfig::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.NodeConfig.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeConfig::tags() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodeConfig.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodeConfig::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodeConfig.tags)
  return &tags_;
}

// bool preemptible = 10;
void NodeConfig::clear_preemptible() {
  preemptible_ = false;
}
bool NodeConfig::preemptible() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.preemptible)
  return preemptible_;
}
void NodeConfig::set_preemptible(bool value) {
  
  preemptible_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.preemptible)
}

// repeated .google.container.v1.AcceleratorConfig accelerators = 11;
int NodeConfig::accelerators_size() const {
  return accelerators_.size();
}
void NodeConfig::clear_accelerators() {
  accelerators_.Clear();
}
const ::google::container::v1::AcceleratorConfig& NodeConfig::accelerators(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.accelerators)
  return accelerators_.Get(index);
}
::google::container::v1::AcceleratorConfig* NodeConfig::mutable_accelerators(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.accelerators)
  return accelerators_.Mutable(index);
}
::google::container::v1::AcceleratorConfig* NodeConfig::add_accelerators() {
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.accelerators)
  return accelerators_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::container::v1::AcceleratorConfig >*
NodeConfig::mutable_accelerators() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodeConfig.accelerators)
  return &accelerators_;
}
const ::google::protobuf::RepeatedPtrField< ::google::container::v1::AcceleratorConfig >&
NodeConfig::accelerators() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodeConfig.accelerators)
  return accelerators_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterAuth::kUsernameFieldNumber;
const int MasterAuth::kPasswordFieldNumber;
const int MasterAuth::kClientCertificateConfigFieldNumber;
const int MasterAuth::kClusterCaCertificateFieldNumber;
const int MasterAuth::kClientCertificateFieldNumber;
const int MasterAuth::kClientKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterAuth::MasterAuth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.MasterAuth)
}
MasterAuth::MasterAuth(const MasterAuth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  cluster_ca_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_ca_certificate().size() > 0) {
    cluster_ca_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_ca_certificate_);
  }
  client_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_certificate().size() > 0) {
    client_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_certificate_);
  }
  client_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_key().size() > 0) {
    client_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_key_);
  }
  if (from.has_client_certificate_config()) {
    client_certificate_config_ = new ::google::container::v1::ClientCertificateConfig(*from.client_certificate_config_);
  } else {
    client_certificate_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.MasterAuth)
}

void MasterAuth::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ca_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_certificate_config_ = NULL;
  _cached_size_ = 0;
}

MasterAuth::~MasterAuth() {
  // @@protoc_insertion_point(destructor:google.container.v1.MasterAuth)
  SharedDtor();
}

void MasterAuth::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ca_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete client_certificate_config_;
  }
}

void MasterAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterAuth::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MasterAuth& MasterAuth::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

MasterAuth* MasterAuth::New(::google::protobuf::Arena* arena) const {
  MasterAuth* n = new MasterAuth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.MasterAuth)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ca_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && client_certificate_config_ != NULL) {
    delete client_certificate_config_;
  }
  client_certificate_config_ = NULL;
}

bool MasterAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.MasterAuth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.MasterAuth.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.MasterAuth.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.ClientCertificateConfig client_certificate_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_certificate_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_ca_certificate = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_ca_certificate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_ca_certificate().data(), this->cluster_ca_certificate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.MasterAuth.cluster_ca_certificate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_certificate = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(810u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_certificate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_certificate().data(), this->client_certificate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.MasterAuth.client_certificate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_key = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(818u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_key().data(), this->client_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.MasterAuth.client_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.MasterAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.MasterAuth)
  return false;
#undef DO_
}

void MasterAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.MasterAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuth.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuth.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // .google.container.v1.ClientCertificateConfig client_certificate_config = 3;
  if (this->has_client_certificate_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->client_certificate_config_, output);
  }

  // string cluster_ca_certificate = 100;
  if (this->cluster_ca_certificate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_ca_certificate().data(), this->cluster_ca_certificate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuth.cluster_ca_certificate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->cluster_ca_certificate(), output);
  }

  // string client_certificate = 101;
  if (this->client_certificate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_certificate().data(), this->client_certificate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuth.client_certificate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->client_certificate(), output);
  }

  // string client_key = 102;
  if (this->client_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_key().data(), this->client_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuth.client_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      102, this->client_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.MasterAuth)
}

::google::protobuf::uint8* MasterAuth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.MasterAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuth.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuth.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // .google.container.v1.ClientCertificateConfig client_certificate_config = 3;
  if (this->has_client_certificate_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->client_certificate_config_, deterministic, target);
  }

  // string cluster_ca_certificate = 100;
  if (this->cluster_ca_certificate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_ca_certificate().data(), this->cluster_ca_certificate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuth.cluster_ca_certificate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->cluster_ca_certificate(), target);
  }

  // string client_certificate = 101;
  if (this->client_certificate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_certificate().data(), this->client_certificate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuth.client_certificate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->client_certificate(), target);
  }

  // string client_key = 102;
  if (this->client_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_key().data(), this->client_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuth.client_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->client_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.MasterAuth)
  return target;
}

size_t MasterAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.MasterAuth)
  size_t total_size = 0;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string cluster_ca_certificate = 100;
  if (this->cluster_ca_certificate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_ca_certificate());
  }

  // string client_certificate = 101;
  if (this->client_certificate().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_certificate());
  }

  // string client_key = 102;
  if (this->client_key().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_key());
  }

  // .google.container.v1.ClientCertificateConfig client_certificate_config = 3;
  if (this->has_client_certificate_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_certificate_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.MasterAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterAuth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterAuth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.MasterAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.MasterAuth)
    MergeFrom(*source);
  }
}

void MasterAuth::MergeFrom(const MasterAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.MasterAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.cluster_ca_certificate().size() > 0) {

    cluster_ca_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_ca_certificate_);
  }
  if (from.client_certificate().size() > 0) {

    client_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_certificate_);
  }
  if (from.client_key().size() > 0) {

    client_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_key_);
  }
  if (from.has_client_certificate_config()) {
    mutable_client_certificate_config()->::google::container::v1::ClientCertificateConfig::MergeFrom(from.client_certificate_config());
  }
}

void MasterAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.MasterAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterAuth::CopyFrom(const MasterAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.MasterAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterAuth::IsInitialized() const {
  return true;
}

void MasterAuth::Swap(MasterAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterAuth::InternalSwap(MasterAuth* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  cluster_ca_certificate_.Swap(&other->cluster_ca_certificate_);
  client_certificate_.Swap(&other->client_certificate_);
  client_key_.Swap(&other->client_key_);
  std::swap(client_certificate_config_, other->client_certificate_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterAuth::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MasterAuth

// string username = 1;
void MasterAuth::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MasterAuth::username() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.username)
  return username_.GetNoArena();
}
void MasterAuth::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.username)
}
#if LANG_CXX11
void MasterAuth::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.username)
}
#endif
void MasterAuth::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.username)
}
void MasterAuth::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.username)
}
::std::string* MasterAuth::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MasterAuth::release_username() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MasterAuth::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.username)
}

// string password = 2;
void MasterAuth::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MasterAuth::password() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.password)
  return password_.GetNoArena();
}
void MasterAuth::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.password)
}
#if LANG_CXX11
void MasterAuth::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.password)
}
#endif
void MasterAuth::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.password)
}
void MasterAuth::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.password)
}
::std::string* MasterAuth::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MasterAuth::release_password() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MasterAuth::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.password)
}

// .google.container.v1.ClientCertificateConfig client_certificate_config = 3;
bool MasterAuth::has_client_certificate_config() const {
  return this != internal_default_instance() && client_certificate_config_ != NULL;
}
void MasterAuth::clear_client_certificate_config() {
  if (GetArenaNoVirtual() == NULL && client_certificate_config_ != NULL) delete client_certificate_config_;
  client_certificate_config_ = NULL;
}
const ::google::container::v1::ClientCertificateConfig& MasterAuth::client_certificate_config() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.client_certificate_config)
  return client_certificate_config_ != NULL ? *client_certificate_config_
                         : *::google::container::v1::ClientCertificateConfig::internal_default_instance();
}
::google::container::v1::ClientCertificateConfig* MasterAuth::mutable_client_certificate_config() {
  
  if (client_certificate_config_ == NULL) {
    client_certificate_config_ = new ::google::container::v1::ClientCertificateConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.client_certificate_config)
  return client_certificate_config_;
}
::google::container::v1::ClientCertificateConfig* MasterAuth::release_client_certificate_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.client_certificate_config)
  
  ::google::container::v1::ClientCertificateConfig* temp = client_certificate_config_;
  client_certificate_config_ = NULL;
  return temp;
}
void MasterAuth::set_allocated_client_certificate_config(::google::container::v1::ClientCertificateConfig* client_certificate_config) {
  delete client_certificate_config_;
  client_certificate_config_ = client_certificate_config;
  if (client_certificate_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.client_certificate_config)
}

// string cluster_ca_certificate = 100;
void MasterAuth::clear_cluster_ca_certificate() {
  cluster_ca_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MasterAuth::cluster_ca_certificate() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.cluster_ca_certificate)
  return cluster_ca_certificate_.GetNoArena();
}
void MasterAuth::set_cluster_ca_certificate(const ::std::string& value) {
  
  cluster_ca_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.cluster_ca_certificate)
}
#if LANG_CXX11
void MasterAuth::set_cluster_ca_certificate(::std::string&& value) {
  
  cluster_ca_certificate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.cluster_ca_certificate)
}
#endif
void MasterAuth::set_cluster_ca_certificate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_ca_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.cluster_ca_certificate)
}
void MasterAuth::set_cluster_ca_certificate(const char* value, size_t size) {
  
  cluster_ca_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.cluster_ca_certificate)
}
::std::string* MasterAuth::mutable_cluster_ca_certificate() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.cluster_ca_certificate)
  return cluster_ca_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MasterAuth::release_cluster_ca_certificate() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.cluster_ca_certificate)
  
  return cluster_ca_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MasterAuth::set_allocated_cluster_ca_certificate(::std::string* cluster_ca_certificate) {
  if (cluster_ca_certificate != NULL) {
    
  } else {
    
  }
  cluster_ca_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ca_certificate);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.cluster_ca_certificate)
}

// string client_certificate = 101;
void MasterAuth::clear_client_certificate() {
  client_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MasterAuth::client_certificate() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.client_certificate)
  return client_certificate_.GetNoArena();
}
void MasterAuth::set_client_certificate(const ::std::string& value) {
  
  client_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.client_certificate)
}
#if LANG_CXX11
void MasterAuth::set_client_certificate(::std::string&& value) {
  
  client_certificate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.client_certificate)
}
#endif
void MasterAuth::set_client_certificate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.client_certificate)
}
void MasterAuth::set_client_certificate(const char* value, size_t size) {
  
  client_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.client_certificate)
}
::std::string* MasterAuth::mutable_client_certificate() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.client_certificate)
  return client_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MasterAuth::release_client_certificate() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.client_certificate)
  
  return client_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MasterAuth::set_allocated_client_certificate(::std::string* client_certificate) {
  if (client_certificate != NULL) {
    
  } else {
    
  }
  client_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_certificate);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.client_certificate)
}

// string client_key = 102;
void MasterAuth::clear_client_key() {
  client_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MasterAuth::client_key() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.client_key)
  return client_key_.GetNoArena();
}
void MasterAuth::set_client_key(const ::std::string& value) {
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.client_key)
}
#if LANG_CXX11
void MasterAuth::set_client_key(::std::string&& value) {
  
  client_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.client_key)
}
#endif
void MasterAuth::set_client_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.client_key)
}
void MasterAuth::set_client_key(const char* value, size_t size) {
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.client_key)
}
::std::string* MasterAuth::mutable_client_key() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.client_key)
  return client_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MasterAuth::release_client_key() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.client_key)
  
  return client_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MasterAuth::set_allocated_client_key(::std::string* client_key) {
  if (client_key != NULL) {
    
  } else {
    
  }
  client_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_key);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.client_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientCertificateConfig::kIssueClientCertificateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientCertificateConfig::ClientCertificateConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.ClientCertificateConfig)
}
ClientCertificateConfig::ClientCertificateConfig(const ClientCertificateConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issue_client_certificate_ = from.issue_client_certificate_;
  // @@protoc_insertion_point(copy_constructor:google.container.v1.ClientCertificateConfig)
}

void ClientCertificateConfig::SharedCtor() {
  issue_client_certificate_ = false;
  _cached_size_ = 0;
}

ClientCertificateConfig::~ClientCertificateConfig() {
  // @@protoc_insertion_point(destructor:google.container.v1.ClientCertificateConfig)
  SharedDtor();
}

void ClientCertificateConfig::SharedDtor() {
}

void ClientCertificateConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCertificateConfig::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientCertificateConfig& ClientCertificateConfig::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientCertificateConfig* ClientCertificateConfig::New(::google::protobuf::Arena* arena) const {
  ClientCertificateConfig* n = new ClientCertificateConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientCertificateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.ClientCertificateConfig)
  issue_client_certificate_ = false;
}

bool ClientCertificateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.ClientCertificateConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool issue_client_certificate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issue_client_certificate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.ClientCertificateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.ClientCertificateConfig)
  return false;
#undef DO_
}

void ClientCertificateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.ClientCertificateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool issue_client_certificate = 1;
  if (this->issue_client_certificate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issue_client_certificate(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.ClientCertificateConfig)
}

::google::protobuf::uint8* ClientCertificateConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.ClientCertificateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool issue_client_certificate = 1;
  if (this->issue_client_certificate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issue_client_certificate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.ClientCertificateConfig)
  return target;
}

size_t ClientCertificateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.ClientCertificateConfig)
  size_t total_size = 0;

  // bool issue_client_certificate = 1;
  if (this->issue_client_certificate() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCertificateConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.ClientCertificateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientCertificateConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientCertificateConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.ClientCertificateConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.ClientCertificateConfig)
    MergeFrom(*source);
  }
}

void ClientCertificateConfig::MergeFrom(const ClientCertificateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.ClientCertificateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.issue_client_certificate() != 0) {
    set_issue_client_certificate(from.issue_client_certificate());
  }
}

void ClientCertificateConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.ClientCertificateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCertificateConfig::CopyFrom(const ClientCertificateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.ClientCertificateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCertificateConfig::IsInitialized() const {
  return true;
}

void ClientCertificateConfig::Swap(ClientCertificateConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientCertificateConfig::InternalSwap(ClientCertificateConfig* other) {
  std::swap(issue_client_certificate_, other->issue_client_certificate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientCertificateConfig::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientCertificateConfig

// bool issue_client_certificate = 1;
void ClientCertificateConfig::clear_issue_client_certificate() {
  issue_client_certificate_ = false;
}
bool ClientCertificateConfig::issue_client_certificate() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClientCertificateConfig.issue_client_certificate)
  return issue_client_certificate_;
}
void ClientCertificateConfig::set_issue_client_certificate(bool value) {
  
  issue_client_certificate_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ClientCertificateConfig.issue_client_certificate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddonsConfig::kHttpLoadBalancingFieldNumber;
const int AddonsConfig::kHorizontalPodAutoscalingFieldNumber;
const int AddonsConfig::kKubernetesDashboardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddonsConfig::AddonsConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.AddonsConfig)
}
AddonsConfig::AddonsConfig(const AddonsConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_http_load_balancing()) {
    http_load_balancing_ = new ::google::container::v1::HttpLoadBalancing(*from.http_load_balancing_);
  } else {
    http_load_balancing_ = NULL;
  }
  if (from.has_horizontal_pod_autoscaling()) {
    horizontal_pod_autoscaling_ = new ::google::container::v1::HorizontalPodAutoscaling(*from.horizontal_pod_autoscaling_);
  } else {
    horizontal_pod_autoscaling_ = NULL;
  }
  if (from.has_kubernetes_dashboard()) {
    kubernetes_dashboard_ = new ::google::container::v1::KubernetesDashboard(*from.kubernetes_dashboard_);
  } else {
    kubernetes_dashboard_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.AddonsConfig)
}

void AddonsConfig::SharedCtor() {
  ::memset(&http_load_balancing_, 0, reinterpret_cast<char*>(&kubernetes_dashboard_) -
    reinterpret_cast<char*>(&http_load_balancing_) + sizeof(kubernetes_dashboard_));
  _cached_size_ = 0;
}

AddonsConfig::~AddonsConfig() {
  // @@protoc_insertion_point(destructor:google.container.v1.AddonsConfig)
  SharedDtor();
}

void AddonsConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete http_load_balancing_;
  }
  if (this != internal_default_instance()) {
    delete horizontal_pod_autoscaling_;
  }
  if (this != internal_default_instance()) {
    delete kubernetes_dashboard_;
  }
}

void AddonsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddonsConfig::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddonsConfig& AddonsConfig::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddonsConfig* AddonsConfig::New(::google::protobuf::Arena* arena) const {
  AddonsConfig* n = new AddonsConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddonsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.AddonsConfig)
  if (GetArenaNoVirtual() == NULL && http_load_balancing_ != NULL) {
    delete http_load_balancing_;
  }
  http_load_balancing_ = NULL;
  if (GetArenaNoVirtual() == NULL && horizontal_pod_autoscaling_ != NULL) {
    delete horizontal_pod_autoscaling_;
  }
  horizontal_pod_autoscaling_ = NULL;
  if (GetArenaNoVirtual() == NULL && kubernetes_dashboard_ != NULL) {
    delete kubernetes_dashboard_;
  }
  kubernetes_dashboard_ = NULL;
}

bool AddonsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.AddonsConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.container.v1.HttpLoadBalancing http_load_balancing = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http_load_balancing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.HorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horizontal_pod_autoscaling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.KubernetesDashboard kubernetes_dashboard = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kubernetes_dashboard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.AddonsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.AddonsConfig)
  return false;
#undef DO_
}

void AddonsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.AddonsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.container.v1.HttpLoadBalancing http_load_balancing = 1;
  if (this->has_http_load_balancing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->http_load_balancing_, output);
  }

  // .google.container.v1.HorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
  if (this->has_horizontal_pod_autoscaling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->horizontal_pod_autoscaling_, output);
  }

  // .google.container.v1.KubernetesDashboard kubernetes_dashboard = 3;
  if (this->has_kubernetes_dashboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->kubernetes_dashboard_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.AddonsConfig)
}

::google::protobuf::uint8* AddonsConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.AddonsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.container.v1.HttpLoadBalancing http_load_balancing = 1;
  if (this->has_http_load_balancing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->http_load_balancing_, deterministic, target);
  }

  // .google.container.v1.HorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
  if (this->has_horizontal_pod_autoscaling()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->horizontal_pod_autoscaling_, deterministic, target);
  }

  // .google.container.v1.KubernetesDashboard kubernetes_dashboard = 3;
  if (this->has_kubernetes_dashboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->kubernetes_dashboard_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.AddonsConfig)
  return target;
}

size_t AddonsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.AddonsConfig)
  size_t total_size = 0;

  // .google.container.v1.HttpLoadBalancing http_load_balancing = 1;
  if (this->has_http_load_balancing()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->http_load_balancing_);
  }

  // .google.container.v1.HorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
  if (this->has_horizontal_pod_autoscaling()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->horizontal_pod_autoscaling_);
  }

  // .google.container.v1.KubernetesDashboard kubernetes_dashboard = 3;
  if (this->has_kubernetes_dashboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kubernetes_dashboard_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddonsConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.AddonsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AddonsConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddonsConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.AddonsConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.AddonsConfig)
    MergeFrom(*source);
  }
}

void AddonsConfig::MergeFrom(const AddonsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.AddonsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_http_load_balancing()) {
    mutable_http_load_balancing()->::google::container::v1::HttpLoadBalancing::MergeFrom(from.http_load_balancing());
  }
  if (from.has_horizontal_pod_autoscaling()) {
    mutable_horizontal_pod_autoscaling()->::google::container::v1::HorizontalPodAutoscaling::MergeFrom(from.horizontal_pod_autoscaling());
  }
  if (from.has_kubernetes_dashboard()) {
    mutable_kubernetes_dashboard()->::google::container::v1::KubernetesDashboard::MergeFrom(from.kubernetes_dashboard());
  }
}

void AddonsConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.AddonsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddonsConfig::CopyFrom(const AddonsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.AddonsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddonsConfig::IsInitialized() const {
  return true;
}

void AddonsConfig::Swap(AddonsConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddonsConfig::InternalSwap(AddonsConfig* other) {
  std::swap(http_load_balancing_, other->http_load_balancing_);
  std::swap(horizontal_pod_autoscaling_, other->horizontal_pod_autoscaling_);
  std::swap(kubernetes_dashboard_, other->kubernetes_dashboard_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddonsConfig::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddonsConfig

// .google.container.v1.HttpLoadBalancing http_load_balancing = 1;
bool AddonsConfig::has_http_load_balancing() const {
  return this != internal_default_instance() && http_load_balancing_ != NULL;
}
void AddonsConfig::clear_http_load_balancing() {
  if (GetArenaNoVirtual() == NULL && http_load_balancing_ != NULL) delete http_load_balancing_;
  http_load_balancing_ = NULL;
}
const ::google::container::v1::HttpLoadBalancing& AddonsConfig::http_load_balancing() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.http_load_balancing)
  return http_load_balancing_ != NULL ? *http_load_balancing_
                         : *::google::container::v1::HttpLoadBalancing::internal_default_instance();
}
::google::container::v1::HttpLoadBalancing* AddonsConfig::mutable_http_load_balancing() {
  
  if (http_load_balancing_ == NULL) {
    http_load_balancing_ = new ::google::container::v1::HttpLoadBalancing;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.http_load_balancing)
  return http_load_balancing_;
}
::google::container::v1::HttpLoadBalancing* AddonsConfig::release_http_load_balancing() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.http_load_balancing)
  
  ::google::container::v1::HttpLoadBalancing* temp = http_load_balancing_;
  http_load_balancing_ = NULL;
  return temp;
}
void AddonsConfig::set_allocated_http_load_balancing(::google::container::v1::HttpLoadBalancing* http_load_balancing) {
  delete http_load_balancing_;
  http_load_balancing_ = http_load_balancing;
  if (http_load_balancing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.http_load_balancing)
}

// .google.container.v1.HorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
bool AddonsConfig::has_horizontal_pod_autoscaling() const {
  return this != internal_default_instance() && horizontal_pod_autoscaling_ != NULL;
}
void AddonsConfig::clear_horizontal_pod_autoscaling() {
  if (GetArenaNoVirtual() == NULL && horizontal_pod_autoscaling_ != NULL) delete horizontal_pod_autoscaling_;
  horizontal_pod_autoscaling_ = NULL;
}
const ::google::container::v1::HorizontalPodAutoscaling& AddonsConfig::horizontal_pod_autoscaling() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
  return horizontal_pod_autoscaling_ != NULL ? *horizontal_pod_autoscaling_
                         : *::google::container::v1::HorizontalPodAutoscaling::internal_default_instance();
}
::google::container::v1::HorizontalPodAutoscaling* AddonsConfig::mutable_horizontal_pod_autoscaling() {
  
  if (horizontal_pod_autoscaling_ == NULL) {
    horizontal_pod_autoscaling_ = new ::google::container::v1::HorizontalPodAutoscaling;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
  return horizontal_pod_autoscaling_;
}
::google::container::v1::HorizontalPodAutoscaling* AddonsConfig::release_horizontal_pod_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
  
  ::google::container::v1::HorizontalPodAutoscaling* temp = horizontal_pod_autoscaling_;
  horizontal_pod_autoscaling_ = NULL;
  return temp;
}
void AddonsConfig::set_allocated_horizontal_pod_autoscaling(::google::container::v1::HorizontalPodAutoscaling* horizontal_pod_autoscaling) {
  delete horizontal_pod_autoscaling_;
  horizontal_pod_autoscaling_ = horizontal_pod_autoscaling;
  if (horizontal_pod_autoscaling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
}

// .google.container.v1.KubernetesDashboard kubernetes_dashboard = 3;
bool AddonsConfig::has_kubernetes_dashboard() const {
  return this != internal_default_instance() && kubernetes_dashboard_ != NULL;
}
void AddonsConfig::clear_kubernetes_dashboard() {
  if (GetArenaNoVirtual() == NULL && kubernetes_dashboard_ != NULL) delete kubernetes_dashboard_;
  kubernetes_dashboard_ = NULL;
}
const ::google::container::v1::KubernetesDashboard& AddonsConfig::kubernetes_dashboard() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.kubernetes_dashboard)
  return kubernetes_dashboard_ != NULL ? *kubernetes_dashboard_
                         : *::google::container::v1::KubernetesDashboard::internal_default_instance();
}
::google::container::v1::KubernetesDashboard* AddonsConfig::mutable_kubernetes_dashboard() {
  
  if (kubernetes_dashboard_ == NULL) {
    kubernetes_dashboard_ = new ::google::container::v1::KubernetesDashboard;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.kubernetes_dashboard)
  return kubernetes_dashboard_;
}
::google::container::v1::KubernetesDashboard* AddonsConfig::release_kubernetes_dashboard() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.kubernetes_dashboard)
  
  ::google::container::v1::KubernetesDashboard* temp = kubernetes_dashboard_;
  kubernetes_dashboard_ = NULL;
  return temp;
}
void AddonsConfig::set_allocated_kubernetes_dashboard(::google::container::v1::KubernetesDashboard* kubernetes_dashboard) {
  delete kubernetes_dashboard_;
  kubernetes_dashboard_ = kubernetes_dashboard;
  if (kubernetes_dashboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.kubernetes_dashboard)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpLoadBalancing::kDisabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpLoadBalancing::HttpLoadBalancing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.HttpLoadBalancing)
}
HttpLoadBalancing::HttpLoadBalancing(const HttpLoadBalancing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disabled_ = from.disabled_;
  // @@protoc_insertion_point(copy_constructor:google.container.v1.HttpLoadBalancing)
}

void HttpLoadBalancing::SharedCtor() {
  disabled_ = false;
  _cached_size_ = 0;
}

HttpLoadBalancing::~HttpLoadBalancing() {
  // @@protoc_insertion_point(destructor:google.container.v1.HttpLoadBalancing)
  SharedDtor();
}

void HttpLoadBalancing::SharedDtor() {
}

void HttpLoadBalancing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpLoadBalancing::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpLoadBalancing& HttpLoadBalancing::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

HttpLoadBalancing* HttpLoadBalancing::New(::google::protobuf::Arena* arena) const {
  HttpLoadBalancing* n = new HttpLoadBalancing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpLoadBalancing::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.HttpLoadBalancing)
  disabled_ = false;
}

bool HttpLoadBalancing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.HttpLoadBalancing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool disabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.HttpLoadBalancing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.HttpLoadBalancing)
  return false;
#undef DO_
}

void HttpLoadBalancing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.HttpLoadBalancing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disabled = 1;
  if (this->disabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disabled(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.HttpLoadBalancing)
}

::google::protobuf::uint8* HttpLoadBalancing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.HttpLoadBalancing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disabled = 1;
  if (this->disabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disabled(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.HttpLoadBalancing)
  return target;
}

size_t HttpLoadBalancing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.HttpLoadBalancing)
  size_t total_size = 0;

  // bool disabled = 1;
  if (this->disabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpLoadBalancing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.HttpLoadBalancing)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpLoadBalancing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpLoadBalancing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.HttpLoadBalancing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.HttpLoadBalancing)
    MergeFrom(*source);
  }
}

void HttpLoadBalancing::MergeFrom(const HttpLoadBalancing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.HttpLoadBalancing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.disabled() != 0) {
    set_disabled(from.disabled());
  }
}

void HttpLoadBalancing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.HttpLoadBalancing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpLoadBalancing::CopyFrom(const HttpLoadBalancing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.HttpLoadBalancing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpLoadBalancing::IsInitialized() const {
  return true;
}

void HttpLoadBalancing::Swap(HttpLoadBalancing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpLoadBalancing::InternalSwap(HttpLoadBalancing* other) {
  std::swap(disabled_, other->disabled_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpLoadBalancing::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpLoadBalancing

// bool disabled = 1;
void HttpLoadBalancing::clear_disabled() {
  disabled_ = false;
}
bool HttpLoadBalancing::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.HttpLoadBalancing.disabled)
  return disabled_;
}
void HttpLoadBalancing::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.HttpLoadBalancing.disabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HorizontalPodAutoscaling::kDisabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HorizontalPodAutoscaling::HorizontalPodAutoscaling()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.HorizontalPodAutoscaling)
}
HorizontalPodAutoscaling::HorizontalPodAutoscaling(const HorizontalPodAutoscaling& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disabled_ = from.disabled_;
  // @@protoc_insertion_point(copy_constructor:google.container.v1.HorizontalPodAutoscaling)
}

void HorizontalPodAutoscaling::SharedCtor() {
  disabled_ = false;
  _cached_size_ = 0;
}

HorizontalPodAutoscaling::~HorizontalPodAutoscaling() {
  // @@protoc_insertion_point(destructor:google.container.v1.HorizontalPodAutoscaling)
  SharedDtor();
}

void HorizontalPodAutoscaling::SharedDtor() {
}

void HorizontalPodAutoscaling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HorizontalPodAutoscaling::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HorizontalPodAutoscaling& HorizontalPodAutoscaling::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

HorizontalPodAutoscaling* HorizontalPodAutoscaling::New(::google::protobuf::Arena* arena) const {
  HorizontalPodAutoscaling* n = new HorizontalPodAutoscaling;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HorizontalPodAutoscaling::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.HorizontalPodAutoscaling)
  disabled_ = false;
}

bool HorizontalPodAutoscaling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.HorizontalPodAutoscaling)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool disabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.HorizontalPodAutoscaling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.HorizontalPodAutoscaling)
  return false;
#undef DO_
}

void HorizontalPodAutoscaling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.HorizontalPodAutoscaling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disabled = 1;
  if (this->disabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disabled(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.HorizontalPodAutoscaling)
}

::google::protobuf::uint8* HorizontalPodAutoscaling::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.HorizontalPodAutoscaling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disabled = 1;
  if (this->disabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disabled(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.HorizontalPodAutoscaling)
  return target;
}

size_t HorizontalPodAutoscaling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.HorizontalPodAutoscaling)
  size_t total_size = 0;

  // bool disabled = 1;
  if (this->disabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HorizontalPodAutoscaling::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.HorizontalPodAutoscaling)
  GOOGLE_DCHECK_NE(&from, this);
  const HorizontalPodAutoscaling* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HorizontalPodAutoscaling>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.HorizontalPodAutoscaling)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.HorizontalPodAutoscaling)
    MergeFrom(*source);
  }
}

void HorizontalPodAutoscaling::MergeFrom(const HorizontalPodAutoscaling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.HorizontalPodAutoscaling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.disabled() != 0) {
    set_disabled(from.disabled());
  }
}

void HorizontalPodAutoscaling::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.HorizontalPodAutoscaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorizontalPodAutoscaling::CopyFrom(const HorizontalPodAutoscaling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.HorizontalPodAutoscaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorizontalPodAutoscaling::IsInitialized() const {
  return true;
}

void HorizontalPodAutoscaling::Swap(HorizontalPodAutoscaling* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HorizontalPodAutoscaling::InternalSwap(HorizontalPodAutoscaling* other) {
  std::swap(disabled_, other->disabled_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HorizontalPodAutoscaling::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HorizontalPodAutoscaling

// bool disabled = 1;
void HorizontalPodAutoscaling::clear_disabled() {
  disabled_ = false;
}
bool HorizontalPodAutoscaling::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.HorizontalPodAutoscaling.disabled)
  return disabled_;
}
void HorizontalPodAutoscaling::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.HorizontalPodAutoscaling.disabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KubernetesDashboard::kDisabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KubernetesDashboard::KubernetesDashboard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.KubernetesDashboard)
}
KubernetesDashboard::KubernetesDashboard(const KubernetesDashboard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disabled_ = from.disabled_;
  // @@protoc_insertion_point(copy_constructor:google.container.v1.KubernetesDashboard)
}

void KubernetesDashboard::SharedCtor() {
  disabled_ = false;
  _cached_size_ = 0;
}

KubernetesDashboard::~KubernetesDashboard() {
  // @@protoc_insertion_point(destructor:google.container.v1.KubernetesDashboard)
  SharedDtor();
}

void KubernetesDashboard::SharedDtor() {
}

void KubernetesDashboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KubernetesDashboard::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KubernetesDashboard& KubernetesDashboard::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

KubernetesDashboard* KubernetesDashboard::New(::google::protobuf::Arena* arena) const {
  KubernetesDashboard* n = new KubernetesDashboard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KubernetesDashboard::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.KubernetesDashboard)
  disabled_ = false;
}

bool KubernetesDashboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.KubernetesDashboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool disabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.KubernetesDashboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.KubernetesDashboard)
  return false;
#undef DO_
}

void KubernetesDashboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.KubernetesDashboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disabled = 1;
  if (this->disabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disabled(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.KubernetesDashboard)
}

::google::protobuf::uint8* KubernetesDashboard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.KubernetesDashboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disabled = 1;
  if (this->disabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disabled(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.KubernetesDashboard)
  return target;
}

size_t KubernetesDashboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.KubernetesDashboard)
  size_t total_size = 0;

  // bool disabled = 1;
  if (this->disabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KubernetesDashboard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.KubernetesDashboard)
  GOOGLE_DCHECK_NE(&from, this);
  const KubernetesDashboard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KubernetesDashboard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.KubernetesDashboard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.KubernetesDashboard)
    MergeFrom(*source);
  }
}

void KubernetesDashboard::MergeFrom(const KubernetesDashboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.KubernetesDashboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.disabled() != 0) {
    set_disabled(from.disabled());
  }
}

void KubernetesDashboard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.KubernetesDashboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KubernetesDashboard::CopyFrom(const KubernetesDashboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.KubernetesDashboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KubernetesDashboard::IsInitialized() const {
  return true;
}

void KubernetesDashboard::Swap(KubernetesDashboard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KubernetesDashboard::InternalSwap(KubernetesDashboard* other) {
  std::swap(disabled_, other->disabled_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KubernetesDashboard::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KubernetesDashboard

// bool disabled = 1;
void KubernetesDashboard::clear_disabled() {
  disabled_ = false;
}
bool KubernetesDashboard::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.KubernetesDashboard.disabled)
  return disabled_;
}
void KubernetesDashboard::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.KubernetesDashboard.disabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterAuthorizedNetworksConfig_CidrBlock::kDisplayNameFieldNumber;
const int MasterAuthorizedNetworksConfig_CidrBlock::kCidrBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterAuthorizedNetworksConfig_CidrBlock::MasterAuthorizedNetworksConfig_CidrBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
}
MasterAuthorizedNetworksConfig_CidrBlock::MasterAuthorizedNetworksConfig_CidrBlock(const MasterAuthorizedNetworksConfig_CidrBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  cidr_block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cidr_block().size() > 0) {
    cidr_block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cidr_block_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
}

void MasterAuthorizedNetworksConfig_CidrBlock::SharedCtor() {
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cidr_block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MasterAuthorizedNetworksConfig_CidrBlock::~MasterAuthorizedNetworksConfig_CidrBlock() {
  // @@protoc_insertion_point(destructor:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  SharedDtor();
}

void MasterAuthorizedNetworksConfig_CidrBlock::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cidr_block_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MasterAuthorizedNetworksConfig_CidrBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterAuthorizedNetworksConfig_CidrBlock::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MasterAuthorizedNetworksConfig_CidrBlock& MasterAuthorizedNetworksConfig_CidrBlock::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

MasterAuthorizedNetworksConfig_CidrBlock* MasterAuthorizedNetworksConfig_CidrBlock::New(::google::protobuf::Arena* arena) const {
  MasterAuthorizedNetworksConfig_CidrBlock* n = new MasterAuthorizedNetworksConfig_CidrBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterAuthorizedNetworksConfig_CidrBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MasterAuthorizedNetworksConfig_CidrBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string display_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cidr_block = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cidr_block()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cidr_block().data(), this->cidr_block().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  return false;
#undef DO_
}

void MasterAuthorizedNetworksConfig_CidrBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->display_name(), output);
  }

  // string cidr_block = 2;
  if (this->cidr_block().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cidr_block().data(), this->cidr_block().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cidr_block(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
}

::google::protobuf::uint8* MasterAuthorizedNetworksConfig_CidrBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->display_name(), target);
  }

  // string cidr_block = 2;
  if (this->cidr_block().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cidr_block().data(), this->cidr_block().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cidr_block(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  return target;
}

size_t MasterAuthorizedNetworksConfig_CidrBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  size_t total_size = 0;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string cidr_block = 2;
  if (this->cidr_block().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cidr_block());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterAuthorizedNetworksConfig_CidrBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterAuthorizedNetworksConfig_CidrBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterAuthorizedNetworksConfig_CidrBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
    MergeFrom(*source);
  }
}

void MasterAuthorizedNetworksConfig_CidrBlock::MergeFrom(const MasterAuthorizedNetworksConfig_CidrBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.cidr_block().size() > 0) {

    cidr_block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cidr_block_);
  }
}

void MasterAuthorizedNetworksConfig_CidrBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterAuthorizedNetworksConfig_CidrBlock::CopyFrom(const MasterAuthorizedNetworksConfig_CidrBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterAuthorizedNetworksConfig_CidrBlock::IsInitialized() const {
  return true;
}

void MasterAuthorizedNetworksConfig_CidrBlock::Swap(MasterAuthorizedNetworksConfig_CidrBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterAuthorizedNetworksConfig_CidrBlock::InternalSwap(MasterAuthorizedNetworksConfig_CidrBlock* other) {
  display_name_.Swap(&other->display_name_);
  cidr_block_.Swap(&other->cidr_block_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterAuthorizedNetworksConfig_CidrBlock::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MasterAuthorizedNetworksConfig_CidrBlock

// string display_name = 1;
void MasterAuthorizedNetworksConfig_CidrBlock::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MasterAuthorizedNetworksConfig_CidrBlock::display_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
  return display_name_.GetNoArena();
}
void MasterAuthorizedNetworksConfig_CidrBlock::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}
#if LANG_CXX11
void MasterAuthorizedNetworksConfig_CidrBlock::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}
#endif
void MasterAuthorizedNetworksConfig_CidrBlock::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}
void MasterAuthorizedNetworksConfig_CidrBlock::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}
::std::string* MasterAuthorizedNetworksConfig_CidrBlock::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MasterAuthorizedNetworksConfig_CidrBlock::release_display_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MasterAuthorizedNetworksConfig_CidrBlock::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}

// string cidr_block = 2;
void MasterAuthorizedNetworksConfig_CidrBlock::clear_cidr_block() {
  cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MasterAuthorizedNetworksConfig_CidrBlock::cidr_block() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
  return cidr_block_.GetNoArena();
}
void MasterAuthorizedNetworksConfig_CidrBlock::set_cidr_block(const ::std::string& value) {
  
  cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}
#if LANG_CXX11
void MasterAuthorizedNetworksConfig_CidrBlock::set_cidr_block(::std::string&& value) {
  
  cidr_block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}
#endif
void MasterAuthorizedNetworksConfig_CidrBlock::set_cidr_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}
void MasterAuthorizedNetworksConfig_CidrBlock::set_cidr_block(const char* value, size_t size) {
  
  cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}
::std::string* MasterAuthorizedNetworksConfig_CidrBlock::mutable_cidr_block() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
  return cidr_block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MasterAuthorizedNetworksConfig_CidrBlock::release_cidr_block() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
  
  return cidr_block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MasterAuthorizedNetworksConfig_CidrBlock::set_allocated_cidr_block(::std::string* cidr_block) {
  if (cidr_block != NULL) {
    
  } else {
    
  }
  cidr_block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cidr_block);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterAuthorizedNetworksConfig::kEnabledFieldNumber;
const int MasterAuthorizedNetworksConfig::kCidrBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterAuthorizedNetworksConfig::MasterAuthorizedNetworksConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.MasterAuthorizedNetworksConfig)
}
MasterAuthorizedNetworksConfig::MasterAuthorizedNetworksConfig(const MasterAuthorizedNetworksConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cidr_blocks_(from.cidr_blocks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:google.container.v1.MasterAuthorizedNetworksConfig)
}

void MasterAuthorizedNetworksConfig::SharedCtor() {
  enabled_ = false;
  _cached_size_ = 0;
}

MasterAuthorizedNetworksConfig::~MasterAuthorizedNetworksConfig() {
  // @@protoc_insertion_point(destructor:google.container.v1.MasterAuthorizedNetworksConfig)
  SharedDtor();
}

void MasterAuthorizedNetworksConfig::SharedDtor() {
}

void MasterAuthorizedNetworksConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterAuthorizedNetworksConfig::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MasterAuthorizedNetworksConfig& MasterAuthorizedNetworksConfig::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

MasterAuthorizedNetworksConfig* MasterAuthorizedNetworksConfig::New(::google::protobuf::Arena* arena) const {
  MasterAuthorizedNetworksConfig* n = new MasterAuthorizedNetworksConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterAuthorizedNetworksConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.MasterAuthorizedNetworksConfig)
  cidr_blocks_.Clear();
  enabled_ = false;
}

bool MasterAuthorizedNetworksConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.MasterAuthorizedNetworksConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock cidr_blocks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cidr_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.MasterAuthorizedNetworksConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.MasterAuthorizedNetworksConfig)
  return false;
#undef DO_
}

void MasterAuthorizedNetworksConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.MasterAuthorizedNetworksConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // repeated .google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock cidr_blocks = 2;
  for (unsigned int i = 0, n = this->cidr_blocks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cidr_blocks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.MasterAuthorizedNetworksConfig)
}

::google::protobuf::uint8* MasterAuthorizedNetworksConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.MasterAuthorizedNetworksConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // repeated .google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock cidr_blocks = 2;
  for (unsigned int i = 0, n = this->cidr_blocks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->cidr_blocks(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.MasterAuthorizedNetworksConfig)
  return target;
}

size_t MasterAuthorizedNetworksConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.MasterAuthorizedNetworksConfig)
  size_t total_size = 0;

  // repeated .google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock cidr_blocks = 2;
  {
    unsigned int count = this->cidr_blocks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cidr_blocks(i));
    }
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterAuthorizedNetworksConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.MasterAuthorizedNetworksConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterAuthorizedNetworksConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterAuthorizedNetworksConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.MasterAuthorizedNetworksConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.MasterAuthorizedNetworksConfig)
    MergeFrom(*source);
  }
}

void MasterAuthorizedNetworksConfig::MergeFrom(const MasterAuthorizedNetworksConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.MasterAuthorizedNetworksConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cidr_blocks_.MergeFrom(from.cidr_blocks_);
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void MasterAuthorizedNetworksConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.MasterAuthorizedNetworksConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterAuthorizedNetworksConfig::CopyFrom(const MasterAuthorizedNetworksConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.MasterAuthorizedNetworksConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterAuthorizedNetworksConfig::IsInitialized() const {
  return true;
}

void MasterAuthorizedNetworksConfig::Swap(MasterAuthorizedNetworksConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterAuthorizedNetworksConfig::InternalSwap(MasterAuthorizedNetworksConfig* other) {
  cidr_blocks_.InternalSwap(&other->cidr_blocks_);
  std::swap(enabled_, other->enabled_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterAuthorizedNetworksConfig::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MasterAuthorizedNetworksConfig

// bool enabled = 1;
void MasterAuthorizedNetworksConfig::clear_enabled() {
  enabled_ = false;
}
bool MasterAuthorizedNetworksConfig::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuthorizedNetworksConfig.enabled)
  return enabled_;
}
void MasterAuthorizedNetworksConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuthorizedNetworksConfig.enabled)
}

// repeated .google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock cidr_blocks = 2;
int MasterAuthorizedNetworksConfig::cidr_blocks_size() const {
  return cidr_blocks_.size();
}
void MasterAuthorizedNetworksConfig::clear_cidr_blocks() {
  cidr_blocks_.Clear();
}
const ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock& MasterAuthorizedNetworksConfig::cidr_blocks(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return cidr_blocks_.Get(index);
}
::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock* MasterAuthorizedNetworksConfig::mutable_cidr_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return cidr_blocks_.Mutable(index);
}
::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock* MasterAuthorizedNetworksConfig::add_cidr_blocks() {
  // @@protoc_insertion_point(field_add:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return cidr_blocks_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock >*
MasterAuthorizedNetworksConfig::mutable_cidr_blocks() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return &cidr_blocks_;
}
const ::google::protobuf::RepeatedPtrField< ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock >&
MasterAuthorizedNetworksConfig::cidr_blocks() const {
  // @@protoc_insertion_point(field_list:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return cidr_blocks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegacyAbac::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LegacyAbac::LegacyAbac()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.LegacyAbac)
}
LegacyAbac::LegacyAbac(const LegacyAbac& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:google.container.v1.LegacyAbac)
}

void LegacyAbac::SharedCtor() {
  enabled_ = false;
  _cached_size_ = 0;
}

LegacyAbac::~LegacyAbac() {
  // @@protoc_insertion_point(destructor:google.container.v1.LegacyAbac)
  SharedDtor();
}

void LegacyAbac::SharedDtor() {
}

void LegacyAbac::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegacyAbac::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LegacyAbac& LegacyAbac::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

LegacyAbac* LegacyAbac::New(::google::protobuf::Arena* arena) const {
  LegacyAbac* n = new LegacyAbac;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LegacyAbac::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.LegacyAbac)
  enabled_ = false;
}

bool LegacyAbac::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.LegacyAbac)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.LegacyAbac)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.LegacyAbac)
  return false;
#undef DO_
}

void LegacyAbac::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.LegacyAbac)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.LegacyAbac)
}

::google::protobuf::uint8* LegacyAbac::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.LegacyAbac)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.LegacyAbac)
  return target;
}

size_t LegacyAbac::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.LegacyAbac)
  size_t total_size = 0;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegacyAbac::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.LegacyAbac)
  GOOGLE_DCHECK_NE(&from, this);
  const LegacyAbac* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LegacyAbac>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.LegacyAbac)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.LegacyAbac)
    MergeFrom(*source);
  }
}

void LegacyAbac::MergeFrom(const LegacyAbac& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.LegacyAbac)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void LegacyAbac::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.LegacyAbac)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegacyAbac::CopyFrom(const LegacyAbac& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.LegacyAbac)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegacyAbac::IsInitialized() const {
  return true;
}

void LegacyAbac::Swap(LegacyAbac* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LegacyAbac::InternalSwap(LegacyAbac* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LegacyAbac::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LegacyAbac

// bool enabled = 1;
void LegacyAbac::clear_enabled() {
  enabled_ = false;
}
bool LegacyAbac::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.LegacyAbac.enabled)
  return enabled_;
}
void LegacyAbac::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.LegacyAbac.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkPolicy::kProviderFieldNumber;
const int NetworkPolicy::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkPolicy::NetworkPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.NetworkPolicy)
}
NetworkPolicy::NetworkPolicy(const NetworkPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&provider_, &from.provider_,
    reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&provider_) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:google.container.v1.NetworkPolicy)
}

void NetworkPolicy::SharedCtor() {
  ::memset(&provider_, 0, reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&provider_) + sizeof(enabled_));
  _cached_size_ = 0;
}

NetworkPolicy::~NetworkPolicy() {
  // @@protoc_insertion_point(destructor:google.container.v1.NetworkPolicy)
  SharedDtor();
}

void NetworkPolicy::SharedDtor() {
}

void NetworkPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkPolicy::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkPolicy& NetworkPolicy::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkPolicy* NetworkPolicy::New(::google::protobuf::Arena* arena) const {
  NetworkPolicy* n = new NetworkPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.NetworkPolicy)
  ::memset(&provider_, 0, reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&provider_) + sizeof(enabled_));
}

bool NetworkPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.NetworkPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.container.v1.NetworkPolicy.Provider provider = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_provider(static_cast< ::google::container::v1::NetworkPolicy_Provider >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.NetworkPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.NetworkPolicy)
  return false;
#undef DO_
}

void NetworkPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.NetworkPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.container.v1.NetworkPolicy.Provider provider = 1;
  if (this->provider() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->provider(), output);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.NetworkPolicy)
}

::google::protobuf::uint8* NetworkPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.NetworkPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.container.v1.NetworkPolicy.Provider provider = 1;
  if (this->provider() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->provider(), target);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.NetworkPolicy)
  return target;
}

size_t NetworkPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.NetworkPolicy)
  size_t total_size = 0;

  // .google.container.v1.NetworkPolicy.Provider provider = 1;
  if (this->provider() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.NetworkPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.NetworkPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.NetworkPolicy)
    MergeFrom(*source);
  }
}

void NetworkPolicy::MergeFrom(const NetworkPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.NetworkPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.provider() != 0) {
    set_provider(from.provider());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void NetworkPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.NetworkPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkPolicy::CopyFrom(const NetworkPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.NetworkPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkPolicy::IsInitialized() const {
  return true;
}

void NetworkPolicy::Swap(NetworkPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkPolicy::InternalSwap(NetworkPolicy* other) {
  std::swap(provider_, other->provider_);
  std::swap(enabled_, other->enabled_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkPolicy::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkPolicy

// .google.container.v1.NetworkPolicy.Provider provider = 1;
void NetworkPolicy::clear_provider() {
  provider_ = 0;
}
::google::container::v1::NetworkPolicy_Provider NetworkPolicy::provider() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NetworkPolicy.provider)
  return static_cast< ::google::container::v1::NetworkPolicy_Provider >(provider_);
}
void NetworkPolicy::set_provider(::google::container::v1::NetworkPolicy_Provider value) {
  
  provider_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NetworkPolicy.provider)
}

// bool enabled = 2;
void NetworkPolicy::clear_enabled() {
  enabled_ = false;
}
bool NetworkPolicy::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NetworkPolicy.enabled)
  return enabled_;
}
void NetworkPolicy::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NetworkPolicy.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPAllocationPolicy::kUseIpAliasesFieldNumber;
const int IPAllocationPolicy::kCreateSubnetworkFieldNumber;
const int IPAllocationPolicy::kSubnetworkNameFieldNumber;
const int IPAllocationPolicy::kClusterIpv4CidrFieldNumber;
const int IPAllocationPolicy::kNodeIpv4CidrFieldNumber;
const int IPAllocationPolicy::kServicesIpv4CidrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPAllocationPolicy::IPAllocationPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.IPAllocationPolicy)
}
IPAllocationPolicy::IPAllocationPolicy(const IPAllocationPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subnetwork_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subnetwork_name().size() > 0) {
    subnetwork_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subnetwork_name_);
  }
  cluster_ipv4_cidr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_ipv4_cidr().size() > 0) {
    cluster_ipv4_cidr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_ipv4_cidr_);
  }
  node_ipv4_cidr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_ipv4_cidr().size() > 0) {
    node_ipv4_cidr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_ipv4_cidr_);
  }
  services_ipv4_cidr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.services_ipv4_cidr().size() > 0) {
    services_ipv4_cidr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.services_ipv4_cidr_);
  }
  ::memcpy(&use_ip_aliases_, &from.use_ip_aliases_,
    reinterpret_cast<char*>(&create_subnetwork_) -
    reinterpret_cast<char*>(&use_ip_aliases_) + sizeof(create_subnetwork_));
  // @@protoc_insertion_point(copy_constructor:google.container.v1.IPAllocationPolicy)
}

void IPAllocationPolicy::SharedCtor() {
  subnetwork_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ipv4_cidr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ipv4_cidr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  services_ipv4_cidr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_ip_aliases_, 0, reinterpret_cast<char*>(&create_subnetwork_) -
    reinterpret_cast<char*>(&use_ip_aliases_) + sizeof(create_subnetwork_));
  _cached_size_ = 0;
}

IPAllocationPolicy::~IPAllocationPolicy() {
  // @@protoc_insertion_point(destructor:google.container.v1.IPAllocationPolicy)
  SharedDtor();
}

void IPAllocationPolicy::SharedDtor() {
  subnetwork_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ipv4_cidr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ipv4_cidr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  services_ipv4_cidr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IPAllocationPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPAllocationPolicy::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IPAllocationPolicy& IPAllocationPolicy::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

IPAllocationPolicy* IPAllocationPolicy::New(::google::protobuf::Arena* arena) const {
  IPAllocationPolicy* n = new IPAllocationPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IPAllocationPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.IPAllocationPolicy)
  subnetwork_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  services_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_ip_aliases_, 0, reinterpret_cast<char*>(&create_subnetwork_) -
    reinterpret_cast<char*>(&use_ip_aliases_) + sizeof(create_subnetwork_));
}

bool IPAllocationPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.IPAllocationPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool use_ip_aliases = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ip_aliases_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool create_subnetwork = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_subnetwork_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subnetwork_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subnetwork_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subnetwork_name().data(), this->subnetwork_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.IPAllocationPolicy.subnetwork_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_ipv4_cidr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_ipv4_cidr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_ipv4_cidr().data(), this->cluster_ipv4_cidr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_ipv4_cidr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_ipv4_cidr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_ipv4_cidr().data(), this->node_ipv4_cidr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.IPAllocationPolicy.node_ipv4_cidr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string services_ipv4_cidr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_services_ipv4_cidr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->services_ipv4_cidr().data(), this->services_ipv4_cidr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.IPAllocationPolicy.services_ipv4_cidr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.IPAllocationPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.IPAllocationPolicy)
  return false;
#undef DO_
}

void IPAllocationPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.IPAllocationPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_ip_aliases = 1;
  if (this->use_ip_aliases() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_ip_aliases(), output);
  }

  // bool create_subnetwork = 2;
  if (this->create_subnetwork() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->create_subnetwork(), output);
  }

  // string subnetwork_name = 3;
  if (this->subnetwork_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subnetwork_name().data(), this->subnetwork_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.IPAllocationPolicy.subnetwork_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->subnetwork_name(), output);
  }

  // string cluster_ipv4_cidr = 4;
  if (this->cluster_ipv4_cidr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_ipv4_cidr().data(), this->cluster_ipv4_cidr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cluster_ipv4_cidr(), output);
  }

  // string node_ipv4_cidr = 5;
  if (this->node_ipv4_cidr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_ipv4_cidr().data(), this->node_ipv4_cidr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.IPAllocationPolicy.node_ipv4_cidr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->node_ipv4_cidr(), output);
  }

  // string services_ipv4_cidr = 6;
  if (this->services_ipv4_cidr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->services_ipv4_cidr().data(), this->services_ipv4_cidr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.IPAllocationPolicy.services_ipv4_cidr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->services_ipv4_cidr(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.IPAllocationPolicy)
}

::google::protobuf::uint8* IPAllocationPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.IPAllocationPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_ip_aliases = 1;
  if (this->use_ip_aliases() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_ip_aliases(), target);
  }

  // bool create_subnetwork = 2;
  if (this->create_subnetwork() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->create_subnetwork(), target);
  }

  // string subnetwork_name = 3;
  if (this->subnetwork_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subnetwork_name().data(), this->subnetwork_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.IPAllocationPolicy.subnetwork_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subnetwork_name(), target);
  }

  // string cluster_ipv4_cidr = 4;
  if (this->cluster_ipv4_cidr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_ipv4_cidr().data(), this->cluster_ipv4_cidr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cluster_ipv4_cidr(), target);
  }

  // string node_ipv4_cidr = 5;
  if (this->node_ipv4_cidr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_ipv4_cidr().data(), this->node_ipv4_cidr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.IPAllocationPolicy.node_ipv4_cidr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->node_ipv4_cidr(), target);
  }

  // string services_ipv4_cidr = 6;
  if (this->services_ipv4_cidr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->services_ipv4_cidr().data(), this->services_ipv4_cidr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.IPAllocationPolicy.services_ipv4_cidr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->services_ipv4_cidr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.IPAllocationPolicy)
  return target;
}

size_t IPAllocationPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.IPAllocationPolicy)
  size_t total_size = 0;

  // string subnetwork_name = 3;
  if (this->subnetwork_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subnetwork_name());
  }

  // string cluster_ipv4_cidr = 4;
  if (this->cluster_ipv4_cidr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_ipv4_cidr());
  }

  // string node_ipv4_cidr = 5;
  if (this->node_ipv4_cidr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_ipv4_cidr());
  }

  // string services_ipv4_cidr = 6;
  if (this->services_ipv4_cidr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->services_ipv4_cidr());
  }

  // bool use_ip_aliases = 1;
  if (this->use_ip_aliases() != 0) {
    total_size += 1 + 1;
  }

  // bool create_subnetwork = 2;
  if (this->create_subnetwork() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPAllocationPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.IPAllocationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const IPAllocationPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IPAllocationPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.IPAllocationPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.IPAllocationPolicy)
    MergeFrom(*source);
  }
}

void IPAllocationPolicy::MergeFrom(const IPAllocationPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.IPAllocationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subnetwork_name().size() > 0) {

    subnetwork_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subnetwork_name_);
  }
  if (from.cluster_ipv4_cidr().size() > 0) {

    cluster_ipv4_cidr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_ipv4_cidr_);
  }
  if (from.node_ipv4_cidr().size() > 0) {

    node_ipv4_cidr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_ipv4_cidr_);
  }
  if (from.services_ipv4_cidr().size() > 0) {

    services_ipv4_cidr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.services_ipv4_cidr_);
  }
  if (from.use_ip_aliases() != 0) {
    set_use_ip_aliases(from.use_ip_aliases());
  }
  if (from.create_subnetwork() != 0) {
    set_create_subnetwork(from.create_subnetwork());
  }
}

void IPAllocationPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.IPAllocationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAllocationPolicy::CopyFrom(const IPAllocationPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.IPAllocationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAllocationPolicy::IsInitialized() const {
  return true;
}

void IPAllocationPolicy::Swap(IPAllocationPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPAllocationPolicy::InternalSwap(IPAllocationPolicy* other) {
  subnetwork_name_.Swap(&other->subnetwork_name_);
  cluster_ipv4_cidr_.Swap(&other->cluster_ipv4_cidr_);
  node_ipv4_cidr_.Swap(&other->node_ipv4_cidr_);
  services_ipv4_cidr_.Swap(&other->services_ipv4_cidr_);
  std::swap(use_ip_aliases_, other->use_ip_aliases_);
  std::swap(create_subnetwork_, other->create_subnetwork_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IPAllocationPolicy::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IPAllocationPolicy

// bool use_ip_aliases = 1;
void IPAllocationPolicy::clear_use_ip_aliases() {
  use_ip_aliases_ = false;
}
bool IPAllocationPolicy::use_ip_aliases() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.use_ip_aliases)
  return use_ip_aliases_;
}
void IPAllocationPolicy::set_use_ip_aliases(bool value) {
  
  use_ip_aliases_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.use_ip_aliases)
}

// bool create_subnetwork = 2;
void IPAllocationPolicy::clear_create_subnetwork() {
  create_subnetwork_ = false;
}
bool IPAllocationPolicy::create_subnetwork() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.create_subnetwork)
  return create_subnetwork_;
}
void IPAllocationPolicy::set_create_subnetwork(bool value) {
  
  create_subnetwork_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.create_subnetwork)
}

// string subnetwork_name = 3;
void IPAllocationPolicy::clear_subnetwork_name() {
  subnetwork_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IPAllocationPolicy::subnetwork_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.subnetwork_name)
  return subnetwork_name_.GetNoArena();
}
void IPAllocationPolicy::set_subnetwork_name(const ::std::string& value) {
  
  subnetwork_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.subnetwork_name)
}
#if LANG_CXX11
void IPAllocationPolicy::set_subnetwork_name(::std::string&& value) {
  
  subnetwork_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.subnetwork_name)
}
#endif
void IPAllocationPolicy::set_subnetwork_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subnetwork_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.subnetwork_name)
}
void IPAllocationPolicy::set_subnetwork_name(const char* value, size_t size) {
  
  subnetwork_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.subnetwork_name)
}
::std::string* IPAllocationPolicy::mutable_subnetwork_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.subnetwork_name)
  return subnetwork_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IPAllocationPolicy::release_subnetwork_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.subnetwork_name)
  
  return subnetwork_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPAllocationPolicy::set_allocated_subnetwork_name(::std::string* subnetwork_name) {
  if (subnetwork_name != NULL) {
    
  } else {
    
  }
  subnetwork_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetwork_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.subnetwork_name)
}

// string cluster_ipv4_cidr = 4;
void IPAllocationPolicy::clear_cluster_ipv4_cidr() {
  cluster_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IPAllocationPolicy::cluster_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.GetNoArena();
}
void IPAllocationPolicy::set_cluster_ipv4_cidr(const ::std::string& value) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}
#if LANG_CXX11
void IPAllocationPolicy::set_cluster_ipv4_cidr(::std::string&& value) {
  
  cluster_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}
#endif
void IPAllocationPolicy::set_cluster_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}
void IPAllocationPolicy::set_cluster_ipv4_cidr(const char* value, size_t size) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}
::std::string* IPAllocationPolicy::mutable_cluster_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IPAllocationPolicy::release_cluster_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
  
  return cluster_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPAllocationPolicy::set_allocated_cluster_ipv4_cidr(::std::string* cluster_ipv4_cidr) {
  if (cluster_ipv4_cidr != NULL) {
    
  } else {
    
  }
  cluster_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}

// string node_ipv4_cidr = 5;
void IPAllocationPolicy::clear_node_ipv4_cidr() {
  node_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IPAllocationPolicy::node_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
  return node_ipv4_cidr_.GetNoArena();
}
void IPAllocationPolicy::set_node_ipv4_cidr(const ::std::string& value) {
  
  node_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}
#if LANG_CXX11
void IPAllocationPolicy::set_node_ipv4_cidr(::std::string&& value) {
  
  node_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}
#endif
void IPAllocationPolicy::set_node_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}
void IPAllocationPolicy::set_node_ipv4_cidr(const char* value, size_t size) {
  
  node_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}
::std::string* IPAllocationPolicy::mutable_node_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
  return node_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IPAllocationPolicy::release_node_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
  
  return node_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPAllocationPolicy::set_allocated_node_ipv4_cidr(::std::string* node_ipv4_cidr) {
  if (node_ipv4_cidr != NULL) {
    
  } else {
    
  }
  node_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}

// string services_ipv4_cidr = 6;
void IPAllocationPolicy::clear_services_ipv4_cidr() {
  services_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& IPAllocationPolicy::services_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
  return services_ipv4_cidr_.GetNoArena();
}
void IPAllocationPolicy::set_services_ipv4_cidr(const ::std::string& value) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}
#if LANG_CXX11
void IPAllocationPolicy::set_services_ipv4_cidr(::std::string&& value) {
  
  services_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}
#endif
void IPAllocationPolicy::set_services_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}
void IPAllocationPolicy::set_services_ipv4_cidr(const char* value, size_t size) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}
::std::string* IPAllocationPolicy::mutable_services_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
  return services_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IPAllocationPolicy::release_services_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
  
  return services_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPAllocationPolicy::set_allocated_services_ipv4_cidr(::std::string* services_ipv4_cidr) {
  if (services_ipv4_cidr != NULL) {
    
  } else {
    
  }
  services_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Cluster::Cluster_ResourceLabelsEntry::Cluster_ResourceLabelsEntry() {}
Cluster::Cluster_ResourceLabelsEntry::Cluster_ResourceLabelsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Cluster::Cluster_ResourceLabelsEntry::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[14];
}
void Cluster::Cluster_ResourceLabelsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Cluster::Cluster_ResourceLabelsEntry::MergeFrom(const Cluster_ResourceLabelsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cluster::kNameFieldNumber;
const int Cluster::kDescriptionFieldNumber;
const int Cluster::kInitialNodeCountFieldNumber;
const int Cluster::kNodeConfigFieldNumber;
const int Cluster::kMasterAuthFieldNumber;
const int Cluster::kLoggingServiceFieldNumber;
const int Cluster::kMonitoringServiceFieldNumber;
const int Cluster::kNetworkFieldNumber;
const int Cluster::kClusterIpv4CidrFieldNumber;
const int Cluster::kAddonsConfigFieldNumber;
const int Cluster::kSubnetworkFieldNumber;
const int Cluster::kNodePoolsFieldNumber;
const int Cluster::kLocationsFieldNumber;
const int Cluster::kEnableKubernetesAlphaFieldNumber;
const int Cluster::kResourceLabelsFieldNumber;
const int Cluster::kLabelFingerprintFieldNumber;
const int Cluster::kLegacyAbacFieldNumber;
const int Cluster::kNetworkPolicyFieldNumber;
const int Cluster::kIpAllocationPolicyFieldNumber;
const int Cluster::kMasterAuthorizedNetworksConfigFieldNumber;
const int Cluster::kSelfLinkFieldNumber;
const int Cluster::kZoneFieldNumber;
const int Cluster::kEndpointFieldNumber;
const int Cluster::kInitialClusterVersionFieldNumber;
const int Cluster::kCurrentMasterVersionFieldNumber;
const int Cluster::kCurrentNodeVersionFieldNumber;
const int Cluster::kCreateTimeFieldNumber;
const int Cluster::kStatusFieldNumber;
const int Cluster::kStatusMessageFieldNumber;
const int Cluster::kNodeIpv4CidrSizeFieldNumber;
const int Cluster::kServicesIpv4CidrFieldNumber;
const int Cluster::kInstanceGroupUrlsFieldNumber;
const int Cluster::kCurrentNodeCountFieldNumber;
const int Cluster::kExpireTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cluster::Cluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.Cluster)
}
Cluster::Cluster(const Cluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_pools_(from.node_pools_),
      locations_(from.locations_),
      instance_group_urls_(from.instance_group_urls_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resource_labels_.MergeFrom(from.resource_labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  logging_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.logging_service().size() > 0) {
    logging_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logging_service_);
  }
  monitoring_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.monitoring_service().size() > 0) {
    monitoring_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitoring_service_);
  }
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.network().size() > 0) {
    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  cluster_ipv4_cidr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_ipv4_cidr().size() > 0) {
    cluster_ipv4_cidr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_ipv4_cidr_);
  }
  subnetwork_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subnetwork().size() > 0) {
    subnetwork_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subnetwork_);
  }
  label_fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.label_fingerprint().size() > 0) {
    label_fingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_fingerprint_);
  }
  self_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.self_link().size() > 0) {
    self_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.self_link_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.endpoint().size() > 0) {
    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  initial_cluster_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.initial_cluster_version().size() > 0) {
    initial_cluster_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initial_cluster_version_);
  }
  current_master_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.current_master_version().size() > 0) {
    current_master_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_master_version_);
  }
  current_node_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.current_node_version().size() > 0) {
    current_node_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_node_version_);
  }
  create_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.create_time().size() > 0) {
    create_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_time_);
  }
  status_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status_message().size() > 0) {
    status_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_message_);
  }
  services_ipv4_cidr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.services_ipv4_cidr().size() > 0) {
    services_ipv4_cidr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.services_ipv4_cidr_);
  }
  expire_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expire_time().size() > 0) {
    expire_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expire_time_);
  }
  if (from.has_node_config()) {
    node_config_ = new ::google::container::v1::NodeConfig(*from.node_config_);
  } else {
    node_config_ = NULL;
  }
  if (from.has_master_auth()) {
    master_auth_ = new ::google::container::v1::MasterAuth(*from.master_auth_);
  } else {
    master_auth_ = NULL;
  }
  if (from.has_addons_config()) {
    addons_config_ = new ::google::container::v1::AddonsConfig(*from.addons_config_);
  } else {
    addons_config_ = NULL;
  }
  if (from.has_legacy_abac()) {
    legacy_abac_ = new ::google::container::v1::LegacyAbac(*from.legacy_abac_);
  } else {
    legacy_abac_ = NULL;
  }
  if (from.has_network_policy()) {
    network_policy_ = new ::google::container::v1::NetworkPolicy(*from.network_policy_);
  } else {
    network_policy_ = NULL;
  }
  if (from.has_ip_allocation_policy()) {
    ip_allocation_policy_ = new ::google::container::v1::IPAllocationPolicy(*from.ip_allocation_policy_);
  } else {
    ip_allocation_policy_ = NULL;
  }
  if (from.has_master_authorized_networks_config()) {
    master_authorized_networks_config_ = new ::google::container::v1::MasterAuthorizedNetworksConfig(*from.master_authorized_networks_config_);
  } else {
    master_authorized_networks_config_ = NULL;
  }
  ::memcpy(&initial_node_count_, &from.initial_node_count_,
    reinterpret_cast<char*>(&node_ipv4_cidr_size_) -
    reinterpret_cast<char*>(&initial_node_count_) + sizeof(node_ipv4_cidr_size_));
  // @@protoc_insertion_point(copy_constructor:google.container.v1.Cluster)
}

void Cluster::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logging_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitoring_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ipv4_cidr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subnetwork_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_cluster_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_master_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_node_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  services_ipv4_cidr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_config_, 0, reinterpret_cast<char*>(&node_ipv4_cidr_size_) -
    reinterpret_cast<char*>(&node_config_) + sizeof(node_ipv4_cidr_size_));
  _cached_size_ = 0;
}

Cluster::~Cluster() {
  // @@protoc_insertion_point(destructor:google.container.v1.Cluster)
  SharedDtor();
}

void Cluster::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logging_service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitoring_service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ipv4_cidr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subnetwork_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_fingerprint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_cluster_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_master_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_node_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  services_ipv4_cidr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete node_config_;
  }
  if (this != internal_default_instance()) {
    delete master_auth_;
  }
  if (this != internal_default_instance()) {
    delete addons_config_;
  }
  if (this != internal_default_instance()) {
    delete legacy_abac_;
  }
  if (this != internal_default_instance()) {
    delete network_policy_;
  }
  if (this != internal_default_instance()) {
    delete ip_allocation_policy_;
  }
  if (this != internal_default_instance()) {
    delete master_authorized_networks_config_;
  }
}

void Cluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cluster& Cluster::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cluster* Cluster::New(::google::protobuf::Arena* arena) const {
  Cluster* n = new Cluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cluster::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.Cluster)
  node_pools_.Clear();
  locations_.Clear();
  resource_labels_.Clear();
  instance_group_urls_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logging_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subnetwork_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initial_cluster_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  services_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && node_config_ != NULL) {
    delete node_config_;
  }
  node_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && master_auth_ != NULL) {
    delete master_auth_;
  }
  master_auth_ = NULL;
  if (GetArenaNoVirtual() == NULL && addons_config_ != NULL) {
    delete addons_config_;
  }
  addons_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && legacy_abac_ != NULL) {
    delete legacy_abac_;
  }
  legacy_abac_ = NULL;
  if (GetArenaNoVirtual() == NULL && network_policy_ != NULL) {
    delete network_policy_;
  }
  network_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && ip_allocation_policy_ != NULL) {
    delete ip_allocation_policy_;
  }
  ip_allocation_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && master_authorized_networks_config_ != NULL) {
    delete master_authorized_networks_config_;
  }
  master_authorized_networks_config_ = NULL;
  ::memset(&initial_node_count_, 0, reinterpret_cast<char*>(&node_ipv4_cidr_size_) -
    reinterpret_cast<char*>(&initial_node_count_) + sizeof(node_ipv4_cidr_size_));
}

bool Cluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.Cluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 initial_node_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_node_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.NodeConfig node_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.MasterAuth master_auth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string logging_service = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logging_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logging_service().data(), this->logging_service().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.logging_service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string monitoring_service = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitoring_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitoring_service().data(), this->monitoring_service().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.monitoring_service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string network = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.network"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_ipv4_cidr = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_ipv4_cidr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_ipv4_cidr().data(), this->cluster_ipv4_cidr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.cluster_ipv4_cidr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.AddonsConfig addons_config = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addons_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subnetwork = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subnetwork()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subnetwork().data(), this->subnetwork().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.subnetwork"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.container.v1.NodePool node_pools = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_pools()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string locations = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_locations()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->locations(this->locations_size() - 1).data(),
            this->locations(this->locations_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.locations"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_kubernetes_alpha = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_kubernetes_alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> resource_labels = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          Cluster_ResourceLabelsEntry::Parser< ::google::protobuf::internal::MapField<
              Cluster_ResourceLabelsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&resource_labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.ResourceLabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.ResourceLabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string label_fingerprint = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_fingerprint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label_fingerprint().data(), this->label_fingerprint().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.label_fingerprint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.LegacyAbac legacy_abac = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legacy_abac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.NetworkPolicy network_policy = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.IPAllocationPolicy ip_allocation_policy = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ip_allocation_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.MasterAuthorizedNetworksConfig master_authorized_networks_config = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_authorized_networks_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string self_link = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_self_link()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->self_link().data(), this->self_link().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.self_link"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(810u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string endpoint = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(818u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->endpoint().data(), this->endpoint().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string initial_cluster_version = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(826u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initial_cluster_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->initial_cluster_version().data(), this->initial_cluster_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.initial_cluster_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string current_master_version = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(834u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_master_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->current_master_version().data(), this->current_master_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.current_master_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string current_node_version = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(842u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_node_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->current_node_version().data(), this->current_node_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.current_node_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string create_time = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(850u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->create_time().data(), this->create_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.create_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.Cluster.Status status = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(856u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::google::container::v1::Cluster_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status_message = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(866u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status_message().data(), this->status_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.status_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_ipv4_cidr_size = 109;
      case 109: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(872u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_ipv4_cidr_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string services_ipv4_cidr = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(882u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_services_ipv4_cidr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->services_ipv4_cidr().data(), this->services_ipv4_cidr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.services_ipv4_cidr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string instance_group_urls = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(890u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_instance_group_urls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_group_urls(this->instance_group_urls_size() - 1).data(),
            this->instance_group_urls(this->instance_group_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.instance_group_urls"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_node_count = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(896u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_node_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expire_time = 113;
      case 113: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(906u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expire_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expire_time().data(), this->expire_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Cluster.expire_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.Cluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.Cluster)
  return false;
#undef DO_
}

void Cluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // int32 initial_node_count = 3;
  if (this->initial_node_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->initial_node_count(), output);
  }

  // .google.container.v1.NodeConfig node_config = 4;
  if (this->has_node_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->node_config_, output);
  }

  // .google.container.v1.MasterAuth master_auth = 5;
  if (this->has_master_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->master_auth_, output);
  }

  // string logging_service = 6;
  if (this->logging_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logging_service().data(), this->logging_service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.logging_service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->logging_service(), output);
  }

  // string monitoring_service = 7;
  if (this->monitoring_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoring_service().data(), this->monitoring_service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.monitoring_service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->monitoring_service(), output);
  }

  // string network = 8;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->network(), output);
  }

  // string cluster_ipv4_cidr = 9;
  if (this->cluster_ipv4_cidr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_ipv4_cidr().data(), this->cluster_ipv4_cidr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.cluster_ipv4_cidr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->cluster_ipv4_cidr(), output);
  }

  // .google.container.v1.AddonsConfig addons_config = 10;
  if (this->has_addons_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->addons_config_, output);
  }

  // string subnetwork = 11;
  if (this->subnetwork().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subnetwork().data(), this->subnetwork().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.subnetwork");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->subnetwork(), output);
  }

  // repeated .google.container.v1.NodePool node_pools = 12;
  for (unsigned int i = 0, n = this->node_pools_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->node_pools(i), output);
  }

  // repeated string locations = 13;
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locations(i).data(), this->locations(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.locations");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->locations(i), output);
  }

  // bool enable_kubernetes_alpha = 14;
  if (this->enable_kubernetes_alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->enable_kubernetes_alpha(), output);
  }

  // map<string, string> resource_labels = 15;
  if (!this->resource_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.Cluster.ResourceLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.Cluster.ResourceLabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->resource_labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->resource_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->resource_labels().begin();
          it != this->resource_labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Cluster_ResourceLabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(resource_labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Cluster_ResourceLabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->resource_labels().begin();
          it != this->resource_labels().end(); ++it) {
        entry.reset(resource_labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string label_fingerprint = 16;
  if (this->label_fingerprint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label_fingerprint().data(), this->label_fingerprint().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.label_fingerprint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->label_fingerprint(), output);
  }

  // .google.container.v1.LegacyAbac legacy_abac = 18;
  if (this->has_legacy_abac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->legacy_abac_, output);
  }

  // .google.container.v1.NetworkPolicy network_policy = 19;
  if (this->has_network_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->network_policy_, output);
  }

  // .google.container.v1.IPAllocationPolicy ip_allocation_policy = 20;
  if (this->has_ip_allocation_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->ip_allocation_policy_, output);
  }

  // .google.container.v1.MasterAuthorizedNetworksConfig master_authorized_networks_config = 22;
  if (this->has_master_authorized_networks_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->master_authorized_networks_config_, output);
  }

  // string self_link = 100;
  if (this->self_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->self_link().data(), this->self_link().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.self_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->self_link(), output);
  }

  // string zone = 101;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->zone(), output);
  }

  // string endpoint = 102;
  if (this->endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      102, this->endpoint(), output);
  }

  // string initial_cluster_version = 103;
  if (this->initial_cluster_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->initial_cluster_version().data(), this->initial_cluster_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.initial_cluster_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      103, this->initial_cluster_version(), output);
  }

  // string current_master_version = 104;
  if (this->current_master_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_master_version().data(), this->current_master_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.current_master_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      104, this->current_master_version(), output);
  }

  // string current_node_version = 105;
  if (this->current_node_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_node_version().data(), this->current_node_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.current_node_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      105, this->current_node_version(), output);
  }

  // string create_time = 106;
  if (this->create_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->create_time().data(), this->create_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.create_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      106, this->create_time(), output);
  }

  // .google.container.v1.Cluster.Status status = 107;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      107, this->status(), output);
  }

  // string status_message = 108;
  if (this->status_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_message().data(), this->status_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.status_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      108, this->status_message(), output);
  }

  // int32 node_ipv4_cidr_size = 109;
  if (this->node_ipv4_cidr_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(109, this->node_ipv4_cidr_size(), output);
  }

  // string services_ipv4_cidr = 110;
  if (this->services_ipv4_cidr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->services_ipv4_cidr().data(), this->services_ipv4_cidr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.services_ipv4_cidr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      110, this->services_ipv4_cidr(), output);
  }

  // repeated string instance_group_urls = 111;
  for (int i = 0, n = this->instance_group_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_group_urls(i).data(), this->instance_group_urls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.instance_group_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      111, this->instance_group_urls(i), output);
  }

  // int32 current_node_count = 112;
  if (this->current_node_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(112, this->current_node_count(), output);
  }

  // string expire_time = 113;
  if (this->expire_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expire_time().data(), this->expire_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.expire_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      113, this->expire_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.Cluster)
}

::google::protobuf::uint8* Cluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // int32 initial_node_count = 3;
  if (this->initial_node_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->initial_node_count(), target);
  }

  // .google.container.v1.NodeConfig node_config = 4;
  if (this->has_node_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->node_config_, deterministic, target);
  }

  // .google.container.v1.MasterAuth master_auth = 5;
  if (this->has_master_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->master_auth_, deterministic, target);
  }

  // string logging_service = 6;
  if (this->logging_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logging_service().data(), this->logging_service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.logging_service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->logging_service(), target);
  }

  // string monitoring_service = 7;
  if (this->monitoring_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoring_service().data(), this->monitoring_service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.monitoring_service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->monitoring_service(), target);
  }

  // string network = 8;
  if (this->network().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->network(), target);
  }

  // string cluster_ipv4_cidr = 9;
  if (this->cluster_ipv4_cidr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_ipv4_cidr().data(), this->cluster_ipv4_cidr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.cluster_ipv4_cidr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->cluster_ipv4_cidr(), target);
  }

  // .google.container.v1.AddonsConfig addons_config = 10;
  if (this->has_addons_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->addons_config_, deterministic, target);
  }

  // string subnetwork = 11;
  if (this->subnetwork().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subnetwork().data(), this->subnetwork().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.subnetwork");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->subnetwork(), target);
  }

  // repeated .google.container.v1.NodePool node_pools = 12;
  for (unsigned int i = 0, n = this->node_pools_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->node_pools(i), deterministic, target);
  }

  // repeated string locations = 13;
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locations(i).data(), this->locations(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.locations");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->locations(i), target);
  }

  // bool enable_kubernetes_alpha = 14;
  if (this->enable_kubernetes_alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->enable_kubernetes_alpha(), target);
  }

  // map<string, string> resource_labels = 15;
  if (!this->resource_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.Cluster.ResourceLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.Cluster.ResourceLabelsEntry.value");
      }
    };

    if (deterministic &&
        this->resource_labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->resource_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->resource_labels().begin();
          it != this->resource_labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Cluster_ResourceLabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(resource_labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Cluster_ResourceLabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->resource_labels().begin();
          it != this->resource_labels().end(); ++it) {
        entry.reset(resource_labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string label_fingerprint = 16;
  if (this->label_fingerprint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label_fingerprint().data(), this->label_fingerprint().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.label_fingerprint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->label_fingerprint(), target);
  }

  // .google.container.v1.LegacyAbac legacy_abac = 18;
  if (this->has_legacy_abac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->legacy_abac_, deterministic, target);
  }

  // .google.container.v1.NetworkPolicy network_policy = 19;
  if (this->has_network_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->network_policy_, deterministic, target);
  }

  // .google.container.v1.IPAllocationPolicy ip_allocation_policy = 20;
  if (this->has_ip_allocation_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->ip_allocation_policy_, deterministic, target);
  }

  // .google.container.v1.MasterAuthorizedNetworksConfig master_authorized_networks_config = 22;
  if (this->has_master_authorized_networks_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->master_authorized_networks_config_, deterministic, target);
  }

  // string self_link = 100;
  if (this->self_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->self_link().data(), this->self_link().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.self_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->self_link(), target);
  }

  // string zone = 101;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->zone(), target);
  }

  // string endpoint = 102;
  if (this->endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->endpoint(), target);
  }

  // string initial_cluster_version = 103;
  if (this->initial_cluster_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->initial_cluster_version().data(), this->initial_cluster_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.initial_cluster_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        103, this->initial_cluster_version(), target);
  }

  // string current_master_version = 104;
  if (this->current_master_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_master_version().data(), this->current_master_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.current_master_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        104, this->current_master_version(), target);
  }

  // string current_node_version = 105;
  if (this->current_node_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_node_version().data(), this->current_node_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.current_node_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        105, this->current_node_version(), target);
  }

  // string create_time = 106;
  if (this->create_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->create_time().data(), this->create_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.create_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        106, this->create_time(), target);
  }

  // .google.container.v1.Cluster.Status status = 107;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      107, this->status(), target);
  }

  // string status_message = 108;
  if (this->status_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_message().data(), this->status_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.status_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        108, this->status_message(), target);
  }

  // int32 node_ipv4_cidr_size = 109;
  if (this->node_ipv4_cidr_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(109, this->node_ipv4_cidr_size(), target);
  }

  // string services_ipv4_cidr = 110;
  if (this->services_ipv4_cidr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->services_ipv4_cidr().data(), this->services_ipv4_cidr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.services_ipv4_cidr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        110, this->services_ipv4_cidr(), target);
  }

  // repeated string instance_group_urls = 111;
  for (int i = 0, n = this->instance_group_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_group_urls(i).data(), this->instance_group_urls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.instance_group_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(111, this->instance_group_urls(i), target);
  }

  // int32 current_node_count = 112;
  if (this->current_node_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(112, this->current_node_count(), target);
  }

  // string expire_time = 113;
  if (this->expire_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expire_time().data(), this->expire_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Cluster.expire_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        113, this->expire_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.Cluster)
  return target;
}

size_t Cluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.Cluster)
  size_t total_size = 0;

  // repeated .google.container.v1.NodePool node_pools = 12;
  {
    unsigned int count = this->node_pools_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_pools(i));
    }
  }

  // repeated string locations = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->locations_size());
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->locations(i));
  }

  // map<string, string> resource_labels = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->resource_labels_size());
  {
    ::google::protobuf::scoped_ptr<Cluster_ResourceLabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->resource_labels().begin();
        it != this->resource_labels().end(); ++it) {
      entry.reset(resource_labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string instance_group_urls = 111;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->instance_group_urls_size());
  for (int i = 0, n = this->instance_group_urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->instance_group_urls(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string logging_service = 6;
  if (this->logging_service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logging_service());
  }

  // string monitoring_service = 7;
  if (this->monitoring_service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitoring_service());
  }

  // string network = 8;
  if (this->network().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network());
  }

  // string cluster_ipv4_cidr = 9;
  if (this->cluster_ipv4_cidr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_ipv4_cidr());
  }

  // string subnetwork = 11;
  if (this->subnetwork().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subnetwork());
  }

  // string label_fingerprint = 16;
  if (this->label_fingerprint().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label_fingerprint());
  }

  // string self_link = 100;
  if (this->self_link().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->self_link());
  }

  // string zone = 101;
  if (this->zone().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string endpoint = 102;
  if (this->endpoint().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->endpoint());
  }

  // string initial_cluster_version = 103;
  if (this->initial_cluster_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->initial_cluster_version());
  }

  // string current_master_version = 104;
  if (this->current_master_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->current_master_version());
  }

  // string current_node_version = 105;
  if (this->current_node_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->current_node_version());
  }

  // string create_time = 106;
  if (this->create_time().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->create_time());
  }

  // string status_message = 108;
  if (this->status_message().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status_message());
  }

  // string services_ipv4_cidr = 110;
  if (this->services_ipv4_cidr().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->services_ipv4_cidr());
  }

  // string expire_time = 113;
  if (this->expire_time().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expire_time());
  }

  // .google.container.v1.NodeConfig node_config = 4;
  if (this->has_node_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_config_);
  }

  // .google.container.v1.MasterAuth master_auth = 5;
  if (this->has_master_auth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->master_auth_);
  }

  // .google.container.v1.AddonsConfig addons_config = 10;
  if (this->has_addons_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->addons_config_);
  }

  // .google.container.v1.LegacyAbac legacy_abac = 18;
  if (this->has_legacy_abac()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->legacy_abac_);
  }

  // .google.container.v1.NetworkPolicy network_policy = 19;
  if (this->has_network_policy()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->network_policy_);
  }

  // .google.container.v1.IPAllocationPolicy ip_allocation_policy = 20;
  if (this->has_ip_allocation_policy()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ip_allocation_policy_);
  }

  // .google.container.v1.MasterAuthorizedNetworksConfig master_authorized_networks_config = 22;
  if (this->has_master_authorized_networks_config()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->master_authorized_networks_config_);
  }

  // int32 initial_node_count = 3;
  if (this->initial_node_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->initial_node_count());
  }

  // bool enable_kubernetes_alpha = 14;
  if (this->enable_kubernetes_alpha() != 0) {
    total_size += 1 + 1;
  }

  // int32 current_node_count = 112;
  if (this->current_node_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_node_count());
  }

  // .google.container.v1.Cluster.Status status = 107;
  if (this->status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // int32 node_ipv4_cidr_size = 109;
  if (this->node_ipv4_cidr_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_ipv4_cidr_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  const Cluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.Cluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.Cluster)
    MergeFrom(*source);
  }
}

void Cluster::MergeFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_pools_.MergeFrom(from.node_pools_);
  locations_.MergeFrom(from.locations_);
  resource_labels_.MergeFrom(from.resource_labels_);
  instance_group_urls_.MergeFrom(from.instance_group_urls_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.logging_service().size() > 0) {

    logging_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logging_service_);
  }
  if (from.monitoring_service().size() > 0) {

    monitoring_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitoring_service_);
  }
  if (from.network().size() > 0) {

    network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  if (from.cluster_ipv4_cidr().size() > 0) {

    cluster_ipv4_cidr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_ipv4_cidr_);
  }
  if (from.subnetwork().size() > 0) {

    subnetwork_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subnetwork_);
  }
  if (from.label_fingerprint().size() > 0) {

    label_fingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_fingerprint_);
  }
  if (from.self_link().size() > 0) {

    self_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.self_link_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.endpoint().size() > 0) {

    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  if (from.initial_cluster_version().size() > 0) {

    initial_cluster_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initial_cluster_version_);
  }
  if (from.current_master_version().size() > 0) {

    current_master_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_master_version_);
  }
  if (from.current_node_version().size() > 0) {

    current_node_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_node_version_);
  }
  if (from.create_time().size() > 0) {

    create_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_time_);
  }
  if (from.status_message().size() > 0) {

    status_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_message_);
  }
  if (from.services_ipv4_cidr().size() > 0) {

    services_ipv4_cidr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.services_ipv4_cidr_);
  }
  if (from.expire_time().size() > 0) {

    expire_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expire_time_);
  }
  if (from.has_node_config()) {
    mutable_node_config()->::google::container::v1::NodeConfig::MergeFrom(from.node_config());
  }
  if (from.has_master_auth()) {
    mutable_master_auth()->::google::container::v1::MasterAuth::MergeFrom(from.master_auth());
  }
  if (from.has_addons_config()) {
    mutable_addons_config()->::google::container::v1::AddonsConfig::MergeFrom(from.addons_config());
  }
  if (from.has_legacy_abac()) {
    mutable_legacy_abac()->::google::container::v1::LegacyAbac::MergeFrom(from.legacy_abac());
  }
  if (from.has_network_policy()) {
    mutable_network_policy()->::google::container::v1::NetworkPolicy::MergeFrom(from.network_policy());
  }
  if (from.has_ip_allocation_policy()) {
    mutable_ip_allocation_policy()->::google::container::v1::IPAllocationPolicy::MergeFrom(from.ip_allocation_policy());
  }
  if (from.has_master_authorized_networks_config()) {
    mutable_master_authorized_networks_config()->::google::container::v1::MasterAuthorizedNetworksConfig::MergeFrom(from.master_authorized_networks_config());
  }
  if (from.initial_node_count() != 0) {
    set_initial_node_count(from.initial_node_count());
  }
  if (from.enable_kubernetes_alpha() != 0) {
    set_enable_kubernetes_alpha(from.enable_kubernetes_alpha());
  }
  if (from.current_node_count() != 0) {
    set_current_node_count(from.current_node_count());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.node_ipv4_cidr_size() != 0) {
    set_node_ipv4_cidr_size(from.node_ipv4_cidr_size());
  }
}

void Cluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {
  return true;
}

void Cluster::Swap(Cluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cluster::InternalSwap(Cluster* other) {
  node_pools_.InternalSwap(&other->node_pools_);
  locations_.InternalSwap(&other->locations_);
  resource_labels_.Swap(&other->resource_labels_);
  instance_group_urls_.InternalSwap(&other->instance_group_urls_);
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  logging_service_.Swap(&other->logging_service_);
  monitoring_service_.Swap(&other->monitoring_service_);
  network_.Swap(&other->network_);
  cluster_ipv4_cidr_.Swap(&other->cluster_ipv4_cidr_);
  subnetwork_.Swap(&other->subnetwork_);
  label_fingerprint_.Swap(&other->label_fingerprint_);
  self_link_.Swap(&other->self_link_);
  zone_.Swap(&other->zone_);
  endpoint_.Swap(&other->endpoint_);
  initial_cluster_version_.Swap(&other->initial_cluster_version_);
  current_master_version_.Swap(&other->current_master_version_);
  current_node_version_.Swap(&other->current_node_version_);
  create_time_.Swap(&other->create_time_);
  status_message_.Swap(&other->status_message_);
  services_ipv4_cidr_.Swap(&other->services_ipv4_cidr_);
  expire_time_.Swap(&other->expire_time_);
  std::swap(node_config_, other->node_config_);
  std::swap(master_auth_, other->master_auth_);
  std::swap(addons_config_, other->addons_config_);
  std::swap(legacy_abac_, other->legacy_abac_);
  std::swap(network_policy_, other->network_policy_);
  std::swap(ip_allocation_policy_, other->ip_allocation_policy_);
  std::swap(master_authorized_networks_config_, other->master_authorized_networks_config_);
  std::swap(initial_node_count_, other->initial_node_count_);
  std::swap(enable_kubernetes_alpha_, other->enable_kubernetes_alpha_);
  std::swap(current_node_count_, other->current_node_count_);
  std::swap(status_, other->status_);
  std::swap(node_ipv4_cidr_size_, other->node_ipv4_cidr_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cluster::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cluster

// string name = 1;
void Cluster::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.name)
  return name_.GetNoArena();
}
void Cluster::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.name)
}
#if LANG_CXX11
void Cluster::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.name)
}
#endif
void Cluster::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.name)
}
void Cluster::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.name)
}
::std::string* Cluster::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.name)
}

// string description = 2;
void Cluster::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::description() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.description)
  return description_.GetNoArena();
}
void Cluster::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.description)
}
#if LANG_CXX11
void Cluster::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.description)
}
#endif
void Cluster::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.description)
}
void Cluster::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.description)
}
::std::string* Cluster::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_description() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.description)
}

// int32 initial_node_count = 3;
void Cluster::clear_initial_node_count() {
  initial_node_count_ = 0;
}
::google::protobuf::int32 Cluster::initial_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.initial_node_count)
  return initial_node_count_;
}
void Cluster::set_initial_node_count(::google::protobuf::int32 value) {
  
  initial_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.initial_node_count)
}

// .google.container.v1.NodeConfig node_config = 4;
bool Cluster::has_node_config() const {
  return this != internal_default_instance() && node_config_ != NULL;
}
void Cluster::clear_node_config() {
  if (GetArenaNoVirtual() == NULL && node_config_ != NULL) delete node_config_;
  node_config_ = NULL;
}
const ::google::container::v1::NodeConfig& Cluster::node_config() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.node_config)
  return node_config_ != NULL ? *node_config_
                         : *::google::container::v1::NodeConfig::internal_default_instance();
}
::google::container::v1::NodeConfig* Cluster::mutable_node_config() {
  
  if (node_config_ == NULL) {
    node_config_ = new ::google::container::v1::NodeConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.node_config)
  return node_config_;
}
::google::container::v1::NodeConfig* Cluster::release_node_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.node_config)
  
  ::google::container::v1::NodeConfig* temp = node_config_;
  node_config_ = NULL;
  return temp;
}
void Cluster::set_allocated_node_config(::google::container::v1::NodeConfig* node_config) {
  delete node_config_;
  node_config_ = node_config;
  if (node_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.node_config)
}

// .google.container.v1.MasterAuth master_auth = 5;
bool Cluster::has_master_auth() const {
  return this != internal_default_instance() && master_auth_ != NULL;
}
void Cluster::clear_master_auth() {
  if (GetArenaNoVirtual() == NULL && master_auth_ != NULL) delete master_auth_;
  master_auth_ = NULL;
}
const ::google::container::v1::MasterAuth& Cluster::master_auth() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.master_auth)
  return master_auth_ != NULL ? *master_auth_
                         : *::google::container::v1::MasterAuth::internal_default_instance();
}
::google::container::v1::MasterAuth* Cluster::mutable_master_auth() {
  
  if (master_auth_ == NULL) {
    master_auth_ = new ::google::container::v1::MasterAuth;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.master_auth)
  return master_auth_;
}
::google::container::v1::MasterAuth* Cluster::release_master_auth() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.master_auth)
  
  ::google::container::v1::MasterAuth* temp = master_auth_;
  master_auth_ = NULL;
  return temp;
}
void Cluster::set_allocated_master_auth(::google::container::v1::MasterAuth* master_auth) {
  delete master_auth_;
  master_auth_ = master_auth;
  if (master_auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.master_auth)
}

// string logging_service = 6;
void Cluster::clear_logging_service() {
  logging_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::logging_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.logging_service)
  return logging_service_.GetNoArena();
}
void Cluster::set_logging_service(const ::std::string& value) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.logging_service)
}
#if LANG_CXX11
void Cluster::set_logging_service(::std::string&& value) {
  
  logging_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.logging_service)
}
#endif
void Cluster::set_logging_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.logging_service)
}
void Cluster::set_logging_service(const char* value, size_t size) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.logging_service)
}
::std::string* Cluster::mutable_logging_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.logging_service)
  return logging_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_logging_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.logging_service)
  
  return logging_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_logging_service(::std::string* logging_service) {
  if (logging_service != NULL) {
    
  } else {
    
  }
  logging_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logging_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.logging_service)
}

// string monitoring_service = 7;
void Cluster::clear_monitoring_service() {
  monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::monitoring_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.monitoring_service)
  return monitoring_service_.GetNoArena();
}
void Cluster::set_monitoring_service(const ::std::string& value) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.monitoring_service)
}
#if LANG_CXX11
void Cluster::set_monitoring_service(::std::string&& value) {
  
  monitoring_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.monitoring_service)
}
#endif
void Cluster::set_monitoring_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.monitoring_service)
}
void Cluster::set_monitoring_service(const char* value, size_t size) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.monitoring_service)
}
::std::string* Cluster::mutable_monitoring_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.monitoring_service)
  return monitoring_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_monitoring_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.monitoring_service)
  
  return monitoring_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_monitoring_service(::std::string* monitoring_service) {
  if (monitoring_service != NULL) {
    
  } else {
    
  }
  monitoring_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitoring_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.monitoring_service)
}

// string network = 8;
void Cluster::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::network() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.network)
  return network_.GetNoArena();
}
void Cluster::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.network)
}
#if LANG_CXX11
void Cluster::set_network(::std::string&& value) {
  
  network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.network)
}
#endif
void Cluster::set_network(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.network)
}
void Cluster::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.network)
}
::std::string* Cluster::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_network() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.network)
}

// string cluster_ipv4_cidr = 9;
void Cluster::clear_cluster_ipv4_cidr() {
  cluster_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::cluster_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.GetNoArena();
}
void Cluster::set_cluster_ipv4_cidr(const ::std::string& value) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.cluster_ipv4_cidr)
}
#if LANG_CXX11
void Cluster::set_cluster_ipv4_cidr(::std::string&& value) {
  
  cluster_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.cluster_ipv4_cidr)
}
#endif
void Cluster::set_cluster_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.cluster_ipv4_cidr)
}
void Cluster::set_cluster_ipv4_cidr(const char* value, size_t size) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.cluster_ipv4_cidr)
}
::std::string* Cluster::mutable_cluster_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_cluster_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.cluster_ipv4_cidr)
  
  return cluster_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_cluster_ipv4_cidr(::std::string* cluster_ipv4_cidr) {
  if (cluster_ipv4_cidr != NULL) {
    
  } else {
    
  }
  cluster_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.cluster_ipv4_cidr)
}

// .google.container.v1.AddonsConfig addons_config = 10;
bool Cluster::has_addons_config() const {
  return this != internal_default_instance() && addons_config_ != NULL;
}
void Cluster::clear_addons_config() {
  if (GetArenaNoVirtual() == NULL && addons_config_ != NULL) delete addons_config_;
  addons_config_ = NULL;
}
const ::google::container::v1::AddonsConfig& Cluster::addons_config() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.addons_config)
  return addons_config_ != NULL ? *addons_config_
                         : *::google::container::v1::AddonsConfig::internal_default_instance();
}
::google::container::v1::AddonsConfig* Cluster::mutable_addons_config() {
  
  if (addons_config_ == NULL) {
    addons_config_ = new ::google::container::v1::AddonsConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.addons_config)
  return addons_config_;
}
::google::container::v1::AddonsConfig* Cluster::release_addons_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.addons_config)
  
  ::google::container::v1::AddonsConfig* temp = addons_config_;
  addons_config_ = NULL;
  return temp;
}
void Cluster::set_allocated_addons_config(::google::container::v1::AddonsConfig* addons_config) {
  delete addons_config_;
  addons_config_ = addons_config;
  if (addons_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.addons_config)
}

// string subnetwork = 11;
void Cluster::clear_subnetwork() {
  subnetwork_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::subnetwork() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.subnetwork)
  return subnetwork_.GetNoArena();
}
void Cluster::set_subnetwork(const ::std::string& value) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.subnetwork)
}
#if LANG_CXX11
void Cluster::set_subnetwork(::std::string&& value) {
  
  subnetwork_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.subnetwork)
}
#endif
void Cluster::set_subnetwork(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.subnetwork)
}
void Cluster::set_subnetwork(const char* value, size_t size) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.subnetwork)
}
::std::string* Cluster::mutable_subnetwork() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.subnetwork)
  return subnetwork_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_subnetwork() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.subnetwork)
  
  return subnetwork_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_subnetwork(::std::string* subnetwork) {
  if (subnetwork != NULL) {
    
  } else {
    
  }
  subnetwork_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetwork);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.subnetwork)
}

// repeated .google.container.v1.NodePool node_pools = 12;
int Cluster::node_pools_size() const {
  return node_pools_.size();
}
void Cluster::clear_node_pools() {
  node_pools_.Clear();
}
const ::google::container::v1::NodePool& Cluster::node_pools(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.node_pools)
  return node_pools_.Get(index);
}
::google::container::v1::NodePool* Cluster::mutable_node_pools(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.node_pools)
  return node_pools_.Mutable(index);
}
::google::container::v1::NodePool* Cluster::add_node_pools() {
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.node_pools)
  return node_pools_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >*
Cluster::mutable_node_pools() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Cluster.node_pools)
  return &node_pools_;
}
const ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >&
Cluster::node_pools() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Cluster.node_pools)
  return node_pools_;
}

// repeated string locations = 13;
int Cluster::locations_size() const {
  return locations_.size();
}
void Cluster::clear_locations() {
  locations_.Clear();
}
const ::std::string& Cluster::locations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.locations)
  return locations_.Get(index);
}
::std::string* Cluster::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.locations)
  return locations_.Mutable(index);
}
void Cluster::set_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.locations)
  locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Cluster::set_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.locations)
  locations_.Mutable(index)->assign(std::move(value));
}
#endif
void Cluster::set_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.locations)
}
void Cluster::set_locations(int index, const char* value, size_t size) {
  locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.locations)
}
::std::string* Cluster::add_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.Cluster.locations)
  return locations_.Add();
}
void Cluster::add_locations(const ::std::string& value) {
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.locations)
}
#if LANG_CXX11
void Cluster::add_locations(::std::string&& value) {
  locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.locations)
}
#endif
void Cluster::add_locations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.Cluster.locations)
}
void Cluster::add_locations(const char* value, size_t size) {
  locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.Cluster.locations)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Cluster::locations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Cluster.locations)
  return locations_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Cluster::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Cluster.locations)
  return &locations_;
}

// bool enable_kubernetes_alpha = 14;
void Cluster::clear_enable_kubernetes_alpha() {
  enable_kubernetes_alpha_ = false;
}
bool Cluster::enable_kubernetes_alpha() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.enable_kubernetes_alpha)
  return enable_kubernetes_alpha_;
}
void Cluster::set_enable_kubernetes_alpha(bool value) {
  
  enable_kubernetes_alpha_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.enable_kubernetes_alpha)
}

// map<string, string> resource_labels = 15;
int Cluster::resource_labels_size() const {
  return resource_labels_.size();
}
void Cluster::clear_resource_labels() {
  resource_labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Cluster::resource_labels() const {
  // @@protoc_insertion_point(field_map:google.container.v1.Cluster.resource_labels)
  return resource_labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Cluster::mutable_resource_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.Cluster.resource_labels)
  return resource_labels_.MutableMap();
}

// string label_fingerprint = 16;
void Cluster::clear_label_fingerprint() {
  label_fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::label_fingerprint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.label_fingerprint)
  return label_fingerprint_.GetNoArena();
}
void Cluster::set_label_fingerprint(const ::std::string& value) {
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.label_fingerprint)
}
#if LANG_CXX11
void Cluster::set_label_fingerprint(::std::string&& value) {
  
  label_fingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.label_fingerprint)
}
#endif
void Cluster::set_label_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.label_fingerprint)
}
void Cluster::set_label_fingerprint(const char* value, size_t size) {
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.label_fingerprint)
}
::std::string* Cluster::mutable_label_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.label_fingerprint)
  return label_fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_label_fingerprint() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.label_fingerprint)
  
  return label_fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_label_fingerprint(::std::string* label_fingerprint) {
  if (label_fingerprint != NULL) {
    
  } else {
    
  }
  label_fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_fingerprint);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.label_fingerprint)
}

// .google.container.v1.LegacyAbac legacy_abac = 18;
bool Cluster::has_legacy_abac() const {
  return this != internal_default_instance() && legacy_abac_ != NULL;
}
void Cluster::clear_legacy_abac() {
  if (GetArenaNoVirtual() == NULL && legacy_abac_ != NULL) delete legacy_abac_;
  legacy_abac_ = NULL;
}
const ::google::container::v1::LegacyAbac& Cluster::legacy_abac() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.legacy_abac)
  return legacy_abac_ != NULL ? *legacy_abac_
                         : *::google::container::v1::LegacyAbac::internal_default_instance();
}
::google::container::v1::LegacyAbac* Cluster::mutable_legacy_abac() {
  
  if (legacy_abac_ == NULL) {
    legacy_abac_ = new ::google::container::v1::LegacyAbac;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.legacy_abac)
  return legacy_abac_;
}
::google::container::v1::LegacyAbac* Cluster::release_legacy_abac() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.legacy_abac)
  
  ::google::container::v1::LegacyAbac* temp = legacy_abac_;
  legacy_abac_ = NULL;
  return temp;
}
void Cluster::set_allocated_legacy_abac(::google::container::v1::LegacyAbac* legacy_abac) {
  delete legacy_abac_;
  legacy_abac_ = legacy_abac;
  if (legacy_abac) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.legacy_abac)
}

// .google.container.v1.NetworkPolicy network_policy = 19;
bool Cluster::has_network_policy() const {
  return this != internal_default_instance() && network_policy_ != NULL;
}
void Cluster::clear_network_policy() {
  if (GetArenaNoVirtual() == NULL && network_policy_ != NULL) delete network_policy_;
  network_policy_ = NULL;
}
const ::google::container::v1::NetworkPolicy& Cluster::network_policy() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.network_policy)
  return network_policy_ != NULL ? *network_policy_
                         : *::google::container::v1::NetworkPolicy::internal_default_instance();
}
::google::container::v1::NetworkPolicy* Cluster::mutable_network_policy() {
  
  if (network_policy_ == NULL) {
    network_policy_ = new ::google::container::v1::NetworkPolicy;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.network_policy)
  return network_policy_;
}
::google::container::v1::NetworkPolicy* Cluster::release_network_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.network_policy)
  
  ::google::container::v1::NetworkPolicy* temp = network_policy_;
  network_policy_ = NULL;
  return temp;
}
void Cluster::set_allocated_network_policy(::google::container::v1::NetworkPolicy* network_policy) {
  delete network_policy_;
  network_policy_ = network_policy;
  if (network_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.network_policy)
}

// .google.container.v1.IPAllocationPolicy ip_allocation_policy = 20;
bool Cluster::has_ip_allocation_policy() const {
  return this != internal_default_instance() && ip_allocation_policy_ != NULL;
}
void Cluster::clear_ip_allocation_policy() {
  if (GetArenaNoVirtual() == NULL && ip_allocation_policy_ != NULL) delete ip_allocation_policy_;
  ip_allocation_policy_ = NULL;
}
const ::google::container::v1::IPAllocationPolicy& Cluster::ip_allocation_policy() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.ip_allocation_policy)
  return ip_allocation_policy_ != NULL ? *ip_allocation_policy_
                         : *::google::container::v1::IPAllocationPolicy::internal_default_instance();
}
::google::container::v1::IPAllocationPolicy* Cluster::mutable_ip_allocation_policy() {
  
  if (ip_allocation_policy_ == NULL) {
    ip_allocation_policy_ = new ::google::container::v1::IPAllocationPolicy;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.ip_allocation_policy)
  return ip_allocation_policy_;
}
::google::container::v1::IPAllocationPolicy* Cluster::release_ip_allocation_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.ip_allocation_policy)
  
  ::google::container::v1::IPAllocationPolicy* temp = ip_allocation_policy_;
  ip_allocation_policy_ = NULL;
  return temp;
}
void Cluster::set_allocated_ip_allocation_policy(::google::container::v1::IPAllocationPolicy* ip_allocation_policy) {
  delete ip_allocation_policy_;
  ip_allocation_policy_ = ip_allocation_policy;
  if (ip_allocation_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.ip_allocation_policy)
}

// .google.container.v1.MasterAuthorizedNetworksConfig master_authorized_networks_config = 22;
bool Cluster::has_master_authorized_networks_config() const {
  return this != internal_default_instance() && master_authorized_networks_config_ != NULL;
}
void Cluster::clear_master_authorized_networks_config() {
  if (GetArenaNoVirtual() == NULL && master_authorized_networks_config_ != NULL) delete master_authorized_networks_config_;
  master_authorized_networks_config_ = NULL;
}
const ::google::container::v1::MasterAuthorizedNetworksConfig& Cluster::master_authorized_networks_config() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.master_authorized_networks_config)
  return master_authorized_networks_config_ != NULL ? *master_authorized_networks_config_
                         : *::google::container::v1::MasterAuthorizedNetworksConfig::internal_default_instance();
}
::google::container::v1::MasterAuthorizedNetworksConfig* Cluster::mutable_master_authorized_networks_config() {
  
  if (master_authorized_networks_config_ == NULL) {
    master_authorized_networks_config_ = new ::google::container::v1::MasterAuthorizedNetworksConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.master_authorized_networks_config)
  return master_authorized_networks_config_;
}
::google::container::v1::MasterAuthorizedNetworksConfig* Cluster::release_master_authorized_networks_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.master_authorized_networks_config)
  
  ::google::container::v1::MasterAuthorizedNetworksConfig* temp = master_authorized_networks_config_;
  master_authorized_networks_config_ = NULL;
  return temp;
}
void Cluster::set_allocated_master_authorized_networks_config(::google::container::v1::MasterAuthorizedNetworksConfig* master_authorized_networks_config) {
  delete master_authorized_networks_config_;
  master_authorized_networks_config_ = master_authorized_networks_config;
  if (master_authorized_networks_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.master_authorized_networks_config)
}

// string self_link = 100;
void Cluster::clear_self_link() {
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::self_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.self_link)
  return self_link_.GetNoArena();
}
void Cluster::set_self_link(const ::std::string& value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.self_link)
}
#if LANG_CXX11
void Cluster::set_self_link(::std::string&& value) {
  
  self_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.self_link)
}
#endif
void Cluster::set_self_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.self_link)
}
void Cluster::set_self_link(const char* value, size_t size) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.self_link)
}
::std::string* Cluster::mutable_self_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.self_link)
  return self_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_self_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.self_link)
  
  return self_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_self_link(::std::string* self_link) {
  if (self_link != NULL) {
    
  } else {
    
  }
  self_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.self_link)
}

// string zone = 101;
void Cluster::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.zone)
  return zone_.GetNoArena();
}
void Cluster::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.zone)
}
#if LANG_CXX11
void Cluster::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.zone)
}
#endif
void Cluster::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.zone)
}
void Cluster::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.zone)
}
::std::string* Cluster::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.zone)
}

// string endpoint = 102;
void Cluster::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::endpoint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.endpoint)
  return endpoint_.GetNoArena();
}
void Cluster::set_endpoint(const ::std::string& value) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.endpoint)
}
#if LANG_CXX11
void Cluster::set_endpoint(::std::string&& value) {
  
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.endpoint)
}
#endif
void Cluster::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.endpoint)
}
void Cluster::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.endpoint)
}
::std::string* Cluster::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_endpoint() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.endpoint)
  
  return endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.endpoint)
}

// string initial_cluster_version = 103;
void Cluster::clear_initial_cluster_version() {
  initial_cluster_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::initial_cluster_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.initial_cluster_version)
  return initial_cluster_version_.GetNoArena();
}
void Cluster::set_initial_cluster_version(const ::std::string& value) {
  
  initial_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.initial_cluster_version)
}
#if LANG_CXX11
void Cluster::set_initial_cluster_version(::std::string&& value) {
  
  initial_cluster_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.initial_cluster_version)
}
#endif
void Cluster::set_initial_cluster_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  initial_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.initial_cluster_version)
}
void Cluster::set_initial_cluster_version(const char* value, size_t size) {
  
  initial_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.initial_cluster_version)
}
::std::string* Cluster::mutable_initial_cluster_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.initial_cluster_version)
  return initial_cluster_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_initial_cluster_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.initial_cluster_version)
  
  return initial_cluster_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_initial_cluster_version(::std::string* initial_cluster_version) {
  if (initial_cluster_version != NULL) {
    
  } else {
    
  }
  initial_cluster_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initial_cluster_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.initial_cluster_version)
}

// string current_master_version = 104;
void Cluster::clear_current_master_version() {
  current_master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::current_master_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.current_master_version)
  return current_master_version_.GetNoArena();
}
void Cluster::set_current_master_version(const ::std::string& value) {
  
  current_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.current_master_version)
}
#if LANG_CXX11
void Cluster::set_current_master_version(::std::string&& value) {
  
  current_master_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.current_master_version)
}
#endif
void Cluster::set_current_master_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  current_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.current_master_version)
}
void Cluster::set_current_master_version(const char* value, size_t size) {
  
  current_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.current_master_version)
}
::std::string* Cluster::mutable_current_master_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.current_master_version)
  return current_master_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_current_master_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.current_master_version)
  
  return current_master_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_current_master_version(::std::string* current_master_version) {
  if (current_master_version != NULL) {
    
  } else {
    
  }
  current_master_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_master_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.current_master_version)
}

// string current_node_version = 105;
void Cluster::clear_current_node_version() {
  current_node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::current_node_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.current_node_version)
  return current_node_version_.GetNoArena();
}
void Cluster::set_current_node_version(const ::std::string& value) {
  
  current_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.current_node_version)
}
#if LANG_CXX11
void Cluster::set_current_node_version(::std::string&& value) {
  
  current_node_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.current_node_version)
}
#endif
void Cluster::set_current_node_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  current_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.current_node_version)
}
void Cluster::set_current_node_version(const char* value, size_t size) {
  
  current_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.current_node_version)
}
::std::string* Cluster::mutable_current_node_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.current_node_version)
  return current_node_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_current_node_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.current_node_version)
  
  return current_node_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_current_node_version(::std::string* current_node_version) {
  if (current_node_version != NULL) {
    
  } else {
    
  }
  current_node_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_node_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.current_node_version)
}

// string create_time = 106;
void Cluster::clear_create_time() {
  create_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::create_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.create_time)
  return create_time_.GetNoArena();
}
void Cluster::set_create_time(const ::std::string& value) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.create_time)
}
#if LANG_CXX11
void Cluster::set_create_time(::std::string&& value) {
  
  create_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.create_time)
}
#endif
void Cluster::set_create_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.create_time)
}
void Cluster::set_create_time(const char* value, size_t size) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.create_time)
}
::std::string* Cluster::mutable_create_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.create_time)
  return create_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_create_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.create_time)
  
  return create_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_create_time(::std::string* create_time) {
  if (create_time != NULL) {
    
  } else {
    
  }
  create_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.create_time)
}

// .google.container.v1.Cluster.Status status = 107;
void Cluster::clear_status() {
  status_ = 0;
}
::google::container::v1::Cluster_Status Cluster::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.status)
  return static_cast< ::google::container::v1::Cluster_Status >(status_);
}
void Cluster::set_status(::google::container::v1::Cluster_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.status)
}

// string status_message = 108;
void Cluster::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::status_message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.status_message)
  return status_message_.GetNoArena();
}
void Cluster::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.status_message)
}
#if LANG_CXX11
void Cluster::set_status_message(::std::string&& value) {
  
  status_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.status_message)
}
#endif
void Cluster::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.status_message)
}
void Cluster::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.status_message)
}
::std::string* Cluster::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_status_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_status_message(::std::string* status_message) {
  if (status_message != NULL) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.status_message)
}

// int32 node_ipv4_cidr_size = 109;
void Cluster::clear_node_ipv4_cidr_size() {
  node_ipv4_cidr_size_ = 0;
}
::google::protobuf::int32 Cluster::node_ipv4_cidr_size() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.node_ipv4_cidr_size)
  return node_ipv4_cidr_size_;
}
void Cluster::set_node_ipv4_cidr_size(::google::protobuf::int32 value) {
  
  node_ipv4_cidr_size_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.node_ipv4_cidr_size)
}

// string services_ipv4_cidr = 110;
void Cluster::clear_services_ipv4_cidr() {
  services_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::services_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.services_ipv4_cidr)
  return services_ipv4_cidr_.GetNoArena();
}
void Cluster::set_services_ipv4_cidr(const ::std::string& value) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.services_ipv4_cidr)
}
#if LANG_CXX11
void Cluster::set_services_ipv4_cidr(::std::string&& value) {
  
  services_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.services_ipv4_cidr)
}
#endif
void Cluster::set_services_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.services_ipv4_cidr)
}
void Cluster::set_services_ipv4_cidr(const char* value, size_t size) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.services_ipv4_cidr)
}
::std::string* Cluster::mutable_services_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.services_ipv4_cidr)
  return services_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_services_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.services_ipv4_cidr)
  
  return services_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_services_ipv4_cidr(::std::string* services_ipv4_cidr) {
  if (services_ipv4_cidr != NULL) {
    
  } else {
    
  }
  services_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.services_ipv4_cidr)
}

// repeated string instance_group_urls = 111;
int Cluster::instance_group_urls_size() const {
  return instance_group_urls_.size();
}
void Cluster::clear_instance_group_urls() {
  instance_group_urls_.Clear();
}
const ::std::string& Cluster::instance_group_urls(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_.Get(index);
}
::std::string* Cluster::mutable_instance_group_urls(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_.Mutable(index);
}
void Cluster::set_instance_group_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Cluster::set_instance_group_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(std::move(value));
}
#endif
void Cluster::set_instance_group_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instance_group_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.instance_group_urls)
}
void Cluster::set_instance_group_urls(int index, const char* value, size_t size) {
  instance_group_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.instance_group_urls)
}
::std::string* Cluster::add_instance_group_urls() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_.Add();
}
void Cluster::add_instance_group_urls(const ::std::string& value) {
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.instance_group_urls)
}
#if LANG_CXX11
void Cluster::add_instance_group_urls(::std::string&& value) {
  instance_group_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.instance_group_urls)
}
#endif
void Cluster::add_instance_group_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.Cluster.instance_group_urls)
}
void Cluster::add_instance_group_urls(const char* value, size_t size) {
  instance_group_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.Cluster.instance_group_urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Cluster::instance_group_urls() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Cluster::mutable_instance_group_urls() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Cluster.instance_group_urls)
  return &instance_group_urls_;
}

// int32 current_node_count = 112;
void Cluster::clear_current_node_count() {
  current_node_count_ = 0;
}
::google::protobuf::int32 Cluster::current_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.current_node_count)
  return current_node_count_;
}
void Cluster::set_current_node_count(::google::protobuf::int32 value) {
  
  current_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.current_node_count)
}

// string expire_time = 113;
void Cluster::clear_expire_time() {
  expire_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::expire_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.expire_time)
  return expire_time_.GetNoArena();
}
void Cluster::set_expire_time(const ::std::string& value) {
  
  expire_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.expire_time)
}
#if LANG_CXX11
void Cluster::set_expire_time(::std::string&& value) {
  
  expire_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.expire_time)
}
#endif
void Cluster::set_expire_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expire_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.expire_time)
}
void Cluster::set_expire_time(const char* value, size_t size) {
  
  expire_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.expire_time)
}
::std::string* Cluster::mutable_expire_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.expire_time)
  return expire_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_expire_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.expire_time)
  
  return expire_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_expire_time(::std::string* expire_time) {
  if (expire_time != NULL) {
    
  } else {
    
  }
  expire_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expire_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.expire_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterUpdate::kDesiredNodeVersionFieldNumber;
const int ClusterUpdate::kDesiredMonitoringServiceFieldNumber;
const int ClusterUpdate::kDesiredAddonsConfigFieldNumber;
const int ClusterUpdate::kDesiredNodePoolIdFieldNumber;
const int ClusterUpdate::kDesiredImageTypeFieldNumber;
const int ClusterUpdate::kDesiredNodePoolAutoscalingFieldNumber;
const int ClusterUpdate::kDesiredLocationsFieldNumber;
const int ClusterUpdate::kDesiredMasterAuthorizedNetworksConfigFieldNumber;
const int ClusterUpdate::kDesiredMasterVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterUpdate::ClusterUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.ClusterUpdate)
}
ClusterUpdate::ClusterUpdate(const ClusterUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      desired_locations_(from.desired_locations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desired_node_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desired_node_version().size() > 0) {
    desired_node_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desired_node_version_);
  }
  desired_monitoring_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desired_monitoring_service().size() > 0) {
    desired_monitoring_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desired_monitoring_service_);
  }
  desired_node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desired_node_pool_id().size() > 0) {
    desired_node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desired_node_pool_id_);
  }
  desired_image_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desired_image_type().size() > 0) {
    desired_image_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desired_image_type_);
  }
  desired_master_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desired_master_version().size() > 0) {
    desired_master_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desired_master_version_);
  }
  if (from.has_desired_addons_config()) {
    desired_addons_config_ = new ::google::container::v1::AddonsConfig(*from.desired_addons_config_);
  } else {
    desired_addons_config_ = NULL;
  }
  if (from.has_desired_node_pool_autoscaling()) {
    desired_node_pool_autoscaling_ = new ::google::container::v1::NodePoolAutoscaling(*from.desired_node_pool_autoscaling_);
  } else {
    desired_node_pool_autoscaling_ = NULL;
  }
  if (from.has_desired_master_authorized_networks_config()) {
    desired_master_authorized_networks_config_ = new ::google::container::v1::MasterAuthorizedNetworksConfig(*from.desired_master_authorized_networks_config_);
  } else {
    desired_master_authorized_networks_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.ClusterUpdate)
}

void ClusterUpdate::SharedCtor() {
  desired_node_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desired_monitoring_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desired_node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desired_image_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desired_master_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&desired_addons_config_, 0, reinterpret_cast<char*>(&desired_master_authorized_networks_config_) -
    reinterpret_cast<char*>(&desired_addons_config_) + sizeof(desired_master_authorized_networks_config_));
  _cached_size_ = 0;
}

ClusterUpdate::~ClusterUpdate() {
  // @@protoc_insertion_point(destructor:google.container.v1.ClusterUpdate)
  SharedDtor();
}

void ClusterUpdate::SharedDtor() {
  desired_node_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desired_monitoring_service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desired_node_pool_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desired_image_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desired_master_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete desired_addons_config_;
  }
  if (this != internal_default_instance()) {
    delete desired_node_pool_autoscaling_;
  }
  if (this != internal_default_instance()) {
    delete desired_master_authorized_networks_config_;
  }
}

void ClusterUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterUpdate::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClusterUpdate& ClusterUpdate::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterUpdate* ClusterUpdate::New(::google::protobuf::Arena* arena) const {
  ClusterUpdate* n = new ClusterUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.ClusterUpdate)
  desired_locations_.Clear();
  desired_node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desired_monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desired_node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desired_image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desired_master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && desired_addons_config_ != NULL) {
    delete desired_addons_config_;
  }
  desired_addons_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && desired_node_pool_autoscaling_ != NULL) {
    delete desired_node_pool_autoscaling_;
  }
  desired_node_pool_autoscaling_ = NULL;
  if (GetArenaNoVirtual() == NULL && desired_master_authorized_networks_config_ != NULL) {
    delete desired_master_authorized_networks_config_;
  }
  desired_master_authorized_networks_config_ = NULL;
}

bool ClusterUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.ClusterUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string desired_node_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desired_node_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desired_node_version().data(), this->desired_node_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ClusterUpdate.desired_node_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desired_monitoring_service = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desired_monitoring_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desired_monitoring_service().data(), this->desired_monitoring_service().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ClusterUpdate.desired_monitoring_service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.AddonsConfig desired_addons_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desired_addons_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desired_node_pool_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desired_node_pool_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desired_node_pool_id().data(), this->desired_node_pool_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ClusterUpdate.desired_node_pool_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desired_image_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desired_image_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desired_image_type().data(), this->desired_image_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ClusterUpdate.desired_image_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.NodePoolAutoscaling desired_node_pool_autoscaling = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desired_node_pool_autoscaling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string desired_locations = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_desired_locations()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desired_locations(this->desired_locations_size() - 1).data(),
            this->desired_locations(this->desired_locations_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ClusterUpdate.desired_locations"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.MasterAuthorizedNetworksConfig desired_master_authorized_networks_config = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desired_master_authorized_networks_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desired_master_version = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desired_master_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desired_master_version().data(), this->desired_master_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ClusterUpdate.desired_master_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.ClusterUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.ClusterUpdate)
  return false;
#undef DO_
}

void ClusterUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.ClusterUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string desired_node_version = 4;
  if (this->desired_node_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_node_version().data(), this->desired_node_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ClusterUpdate.desired_node_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desired_node_version(), output);
  }

  // string desired_monitoring_service = 5;
  if (this->desired_monitoring_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_monitoring_service().data(), this->desired_monitoring_service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ClusterUpdate.desired_monitoring_service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->desired_monitoring_service(), output);
  }

  // .google.container.v1.AddonsConfig desired_addons_config = 6;
  if (this->has_desired_addons_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->desired_addons_config_, output);
  }

  // string desired_node_pool_id = 7;
  if (this->desired_node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_node_pool_id().data(), this->desired_node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ClusterUpdate.desired_node_pool_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->desired_node_pool_id(), output);
  }

  // string desired_image_type = 8;
  if (this->desired_image_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_image_type().data(), this->desired_image_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ClusterUpdate.desired_image_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->desired_image_type(), output);
  }

  // .google.container.v1.NodePoolAutoscaling desired_node_pool_autoscaling = 9;
  if (this->has_desired_node_pool_autoscaling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->desired_node_pool_autoscaling_, output);
  }

  // repeated string desired_locations = 10;
  for (int i = 0, n = this->desired_locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_locations(i).data(), this->desired_locations(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ClusterUpdate.desired_locations");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->desired_locations(i), output);
  }

  // .google.container.v1.MasterAuthorizedNetworksConfig desired_master_authorized_networks_config = 12;
  if (this->has_desired_master_authorized_networks_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->desired_master_authorized_networks_config_, output);
  }

  // string desired_master_version = 100;
  if (this->desired_master_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_master_version().data(), this->desired_master_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ClusterUpdate.desired_master_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->desired_master_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.ClusterUpdate)
}

::google::protobuf::uint8* ClusterUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.ClusterUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string desired_node_version = 4;
  if (this->desired_node_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_node_version().data(), this->desired_node_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ClusterUpdate.desired_node_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desired_node_version(), target);
  }

  // string desired_monitoring_service = 5;
  if (this->desired_monitoring_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_monitoring_service().data(), this->desired_monitoring_service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ClusterUpdate.desired_monitoring_service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desired_monitoring_service(), target);
  }

  // .google.container.v1.AddonsConfig desired_addons_config = 6;
  if (this->has_desired_addons_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->desired_addons_config_, deterministic, target);
  }

  // string desired_node_pool_id = 7;
  if (this->desired_node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_node_pool_id().data(), this->desired_node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ClusterUpdate.desired_node_pool_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->desired_node_pool_id(), target);
  }

  // string desired_image_type = 8;
  if (this->desired_image_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_image_type().data(), this->desired_image_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ClusterUpdate.desired_image_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->desired_image_type(), target);
  }

  // .google.container.v1.NodePoolAutoscaling desired_node_pool_autoscaling = 9;
  if (this->has_desired_node_pool_autoscaling()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->desired_node_pool_autoscaling_, deterministic, target);
  }

  // repeated string desired_locations = 10;
  for (int i = 0, n = this->desired_locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_locations(i).data(), this->desired_locations(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ClusterUpdate.desired_locations");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->desired_locations(i), target);
  }

  // .google.container.v1.MasterAuthorizedNetworksConfig desired_master_authorized_networks_config = 12;
  if (this->has_desired_master_authorized_networks_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->desired_master_authorized_networks_config_, deterministic, target);
  }

  // string desired_master_version = 100;
  if (this->desired_master_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desired_master_version().data(), this->desired_master_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ClusterUpdate.desired_master_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->desired_master_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.ClusterUpdate)
  return target;
}

size_t ClusterUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.ClusterUpdate)
  size_t total_size = 0;

  // repeated string desired_locations = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->desired_locations_size());
  for (int i = 0, n = this->desired_locations_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->desired_locations(i));
  }

  // string desired_node_version = 4;
  if (this->desired_node_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desired_node_version());
  }

  // string desired_monitoring_service = 5;
  if (this->desired_monitoring_service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desired_monitoring_service());
  }

  // string desired_node_pool_id = 7;
  if (this->desired_node_pool_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desired_node_pool_id());
  }

  // string desired_image_type = 8;
  if (this->desired_image_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desired_image_type());
  }

  // string desired_master_version = 100;
  if (this->desired_master_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desired_master_version());
  }

  // .google.container.v1.AddonsConfig desired_addons_config = 6;
  if (this->has_desired_addons_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->desired_addons_config_);
  }

  // .google.container.v1.NodePoolAutoscaling desired_node_pool_autoscaling = 9;
  if (this->has_desired_node_pool_autoscaling()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->desired_node_pool_autoscaling_);
  }

  // .google.container.v1.MasterAuthorizedNetworksConfig desired_master_authorized_networks_config = 12;
  if (this->has_desired_master_authorized_networks_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->desired_master_authorized_networks_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.ClusterUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.ClusterUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.ClusterUpdate)
    MergeFrom(*source);
  }
}

void ClusterUpdate::MergeFrom(const ClusterUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.ClusterUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  desired_locations_.MergeFrom(from.desired_locations_);
  if (from.desired_node_version().size() > 0) {

    desired_node_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desired_node_version_);
  }
  if (from.desired_monitoring_service().size() > 0) {

    desired_monitoring_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desired_monitoring_service_);
  }
  if (from.desired_node_pool_id().size() > 0) {

    desired_node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desired_node_pool_id_);
  }
  if (from.desired_image_type().size() > 0) {

    desired_image_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desired_image_type_);
  }
  if (from.desired_master_version().size() > 0) {

    desired_master_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desired_master_version_);
  }
  if (from.has_desired_addons_config()) {
    mutable_desired_addons_config()->::google::container::v1::AddonsConfig::MergeFrom(from.desired_addons_config());
  }
  if (from.has_desired_node_pool_autoscaling()) {
    mutable_desired_node_pool_autoscaling()->::google::container::v1::NodePoolAutoscaling::MergeFrom(from.desired_node_pool_autoscaling());
  }
  if (from.has_desired_master_authorized_networks_config()) {
    mutable_desired_master_authorized_networks_config()->::google::container::v1::MasterAuthorizedNetworksConfig::MergeFrom(from.desired_master_authorized_networks_config());
  }
}

void ClusterUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.ClusterUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterUpdate::CopyFrom(const ClusterUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.ClusterUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterUpdate::IsInitialized() const {
  return true;
}

void ClusterUpdate::Swap(ClusterUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterUpdate::InternalSwap(ClusterUpdate* other) {
  desired_locations_.InternalSwap(&other->desired_locations_);
  desired_node_version_.Swap(&other->desired_node_version_);
  desired_monitoring_service_.Swap(&other->desired_monitoring_service_);
  desired_node_pool_id_.Swap(&other->desired_node_pool_id_);
  desired_image_type_.Swap(&other->desired_image_type_);
  desired_master_version_.Swap(&other->desired_master_version_);
  std::swap(desired_addons_config_, other->desired_addons_config_);
  std::swap(desired_node_pool_autoscaling_, other->desired_node_pool_autoscaling_);
  std::swap(desired_master_authorized_networks_config_, other->desired_master_authorized_networks_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterUpdate::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterUpdate

// string desired_node_version = 4;
void ClusterUpdate::clear_desired_node_version() {
  desired_node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterUpdate::desired_node_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_node_version)
  return desired_node_version_.GetNoArena();
}
void ClusterUpdate::set_desired_node_version(const ::std::string& value) {
  
  desired_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_node_version)
}
#if LANG_CXX11
void ClusterUpdate::set_desired_node_version(::std::string&& value) {
  
  desired_node_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_node_version)
}
#endif
void ClusterUpdate::set_desired_node_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desired_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_node_version)
}
void ClusterUpdate::set_desired_node_version(const char* value, size_t size) {
  
  desired_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_node_version)
}
::std::string* ClusterUpdate::mutable_desired_node_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_node_version)
  return desired_node_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterUpdate::release_desired_node_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_node_version)
  
  return desired_node_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterUpdate::set_allocated_desired_node_version(::std::string* desired_node_version) {
  if (desired_node_version != NULL) {
    
  } else {
    
  }
  desired_node_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_node_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_node_version)
}

// string desired_monitoring_service = 5;
void ClusterUpdate::clear_desired_monitoring_service() {
  desired_monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterUpdate::desired_monitoring_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_monitoring_service)
  return desired_monitoring_service_.GetNoArena();
}
void ClusterUpdate::set_desired_monitoring_service(const ::std::string& value) {
  
  desired_monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
#if LANG_CXX11
void ClusterUpdate::set_desired_monitoring_service(::std::string&& value) {
  
  desired_monitoring_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
#endif
void ClusterUpdate::set_desired_monitoring_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desired_monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
void ClusterUpdate::set_desired_monitoring_service(const char* value, size_t size) {
  
  desired_monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
::std::string* ClusterUpdate::mutable_desired_monitoring_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_monitoring_service)
  return desired_monitoring_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterUpdate::release_desired_monitoring_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_monitoring_service)
  
  return desired_monitoring_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterUpdate::set_allocated_desired_monitoring_service(::std::string* desired_monitoring_service) {
  if (desired_monitoring_service != NULL) {
    
  } else {
    
  }
  desired_monitoring_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_monitoring_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_monitoring_service)
}

// .google.container.v1.AddonsConfig desired_addons_config = 6;
bool ClusterUpdate::has_desired_addons_config() const {
  return this != internal_default_instance() && desired_addons_config_ != NULL;
}
void ClusterUpdate::clear_desired_addons_config() {
  if (GetArenaNoVirtual() == NULL && desired_addons_config_ != NULL) delete desired_addons_config_;
  desired_addons_config_ = NULL;
}
const ::google::container::v1::AddonsConfig& ClusterUpdate::desired_addons_config() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_addons_config)
  return desired_addons_config_ != NULL ? *desired_addons_config_
                         : *::google::container::v1::AddonsConfig::internal_default_instance();
}
::google::container::v1::AddonsConfig* ClusterUpdate::mutable_desired_addons_config() {
  
  if (desired_addons_config_ == NULL) {
    desired_addons_config_ = new ::google::container::v1::AddonsConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_addons_config)
  return desired_addons_config_;
}
::google::container::v1::AddonsConfig* ClusterUpdate::release_desired_addons_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_addons_config)
  
  ::google::container::v1::AddonsConfig* temp = desired_addons_config_;
  desired_addons_config_ = NULL;
  return temp;
}
void ClusterUpdate::set_allocated_desired_addons_config(::google::container::v1::AddonsConfig* desired_addons_config) {
  delete desired_addons_config_;
  desired_addons_config_ = desired_addons_config;
  if (desired_addons_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_addons_config)
}

// string desired_node_pool_id = 7;
void ClusterUpdate::clear_desired_node_pool_id() {
  desired_node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterUpdate::desired_node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_node_pool_id)
  return desired_node_pool_id_.GetNoArena();
}
void ClusterUpdate::set_desired_node_pool_id(const ::std::string& value) {
  
  desired_node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_node_pool_id)
}
#if LANG_CXX11
void ClusterUpdate::set_desired_node_pool_id(::std::string&& value) {
  
  desired_node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_node_pool_id)
}
#endif
void ClusterUpdate::set_desired_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desired_node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_node_pool_id)
}
void ClusterUpdate::set_desired_node_pool_id(const char* value, size_t size) {
  
  desired_node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_node_pool_id)
}
::std::string* ClusterUpdate::mutable_desired_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_node_pool_id)
  return desired_node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterUpdate::release_desired_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_node_pool_id)
  
  return desired_node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterUpdate::set_allocated_desired_node_pool_id(::std::string* desired_node_pool_id) {
  if (desired_node_pool_id != NULL) {
    
  } else {
    
  }
  desired_node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_node_pool_id)
}

// string desired_image_type = 8;
void ClusterUpdate::clear_desired_image_type() {
  desired_image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterUpdate::desired_image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_image_type)
  return desired_image_type_.GetNoArena();
}
void ClusterUpdate::set_desired_image_type(const ::std::string& value) {
  
  desired_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_image_type)
}
#if LANG_CXX11
void ClusterUpdate::set_desired_image_type(::std::string&& value) {
  
  desired_image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_image_type)
}
#endif
void ClusterUpdate::set_desired_image_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desired_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_image_type)
}
void ClusterUpdate::set_desired_image_type(const char* value, size_t size) {
  
  desired_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_image_type)
}
::std::string* ClusterUpdate::mutable_desired_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_image_type)
  return desired_image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterUpdate::release_desired_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_image_type)
  
  return desired_image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterUpdate::set_allocated_desired_image_type(::std::string* desired_image_type) {
  if (desired_image_type != NULL) {
    
  } else {
    
  }
  desired_image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_image_type)
}

// .google.container.v1.NodePoolAutoscaling desired_node_pool_autoscaling = 9;
bool ClusterUpdate::has_desired_node_pool_autoscaling() const {
  return this != internal_default_instance() && desired_node_pool_autoscaling_ != NULL;
}
void ClusterUpdate::clear_desired_node_pool_autoscaling() {
  if (GetArenaNoVirtual() == NULL && desired_node_pool_autoscaling_ != NULL) delete desired_node_pool_autoscaling_;
  desired_node_pool_autoscaling_ = NULL;
}
const ::google::container::v1::NodePoolAutoscaling& ClusterUpdate::desired_node_pool_autoscaling() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_node_pool_autoscaling)
  return desired_node_pool_autoscaling_ != NULL ? *desired_node_pool_autoscaling_
                         : *::google::container::v1::NodePoolAutoscaling::internal_default_instance();
}
::google::container::v1::NodePoolAutoscaling* ClusterUpdate::mutable_desired_node_pool_autoscaling() {
  
  if (desired_node_pool_autoscaling_ == NULL) {
    desired_node_pool_autoscaling_ = new ::google::container::v1::NodePoolAutoscaling;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_node_pool_autoscaling)
  return desired_node_pool_autoscaling_;
}
::google::container::v1::NodePoolAutoscaling* ClusterUpdate::release_desired_node_pool_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_node_pool_autoscaling)
  
  ::google::container::v1::NodePoolAutoscaling* temp = desired_node_pool_autoscaling_;
  desired_node_pool_autoscaling_ = NULL;
  return temp;
}
void ClusterUpdate::set_allocated_desired_node_pool_autoscaling(::google::container::v1::NodePoolAutoscaling* desired_node_pool_autoscaling) {
  delete desired_node_pool_autoscaling_;
  desired_node_pool_autoscaling_ = desired_node_pool_autoscaling;
  if (desired_node_pool_autoscaling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_node_pool_autoscaling)
}

// repeated string desired_locations = 10;
int ClusterUpdate::desired_locations_size() const {
  return desired_locations_.size();
}
void ClusterUpdate::clear_desired_locations() {
  desired_locations_.Clear();
}
const ::std::string& ClusterUpdate::desired_locations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_locations)
  return desired_locations_.Get(index);
}
::std::string* ClusterUpdate::mutable_desired_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_locations)
  return desired_locations_.Mutable(index);
}
void ClusterUpdate::set_desired_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_locations)
  desired_locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ClusterUpdate::set_desired_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_locations)
  desired_locations_.Mutable(index)->assign(std::move(value));
}
#endif
void ClusterUpdate::set_desired_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  desired_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_locations)
}
void ClusterUpdate::set_desired_locations(int index, const char* value, size_t size) {
  desired_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_locations)
}
::std::string* ClusterUpdate::add_desired_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ClusterUpdate.desired_locations)
  return desired_locations_.Add();
}
void ClusterUpdate::add_desired_locations(const ::std::string& value) {
  desired_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ClusterUpdate.desired_locations)
}
#if LANG_CXX11
void ClusterUpdate::add_desired_locations(::std::string&& value) {
  desired_locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ClusterUpdate.desired_locations)
}
#endif
void ClusterUpdate::add_desired_locations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  desired_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ClusterUpdate.desired_locations)
}
void ClusterUpdate::add_desired_locations(const char* value, size_t size) {
  desired_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ClusterUpdate.desired_locations)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClusterUpdate::desired_locations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ClusterUpdate.desired_locations)
  return desired_locations_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ClusterUpdate::mutable_desired_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ClusterUpdate.desired_locations)
  return &desired_locations_;
}

// .google.container.v1.MasterAuthorizedNetworksConfig desired_master_authorized_networks_config = 12;
bool ClusterUpdate::has_desired_master_authorized_networks_config() const {
  return this != internal_default_instance() && desired_master_authorized_networks_config_ != NULL;
}
void ClusterUpdate::clear_desired_master_authorized_networks_config() {
  if (GetArenaNoVirtual() == NULL && desired_master_authorized_networks_config_ != NULL) delete desired_master_authorized_networks_config_;
  desired_master_authorized_networks_config_ = NULL;
}
const ::google::container::v1::MasterAuthorizedNetworksConfig& ClusterUpdate::desired_master_authorized_networks_config() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_master_authorized_networks_config)
  return desired_master_authorized_networks_config_ != NULL ? *desired_master_authorized_networks_config_
                         : *::google::container::v1::MasterAuthorizedNetworksConfig::internal_default_instance();
}
::google::container::v1::MasterAuthorizedNetworksConfig* ClusterUpdate::mutable_desired_master_authorized_networks_config() {
  
  if (desired_master_authorized_networks_config_ == NULL) {
    desired_master_authorized_networks_config_ = new ::google::container::v1::MasterAuthorizedNetworksConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_master_authorized_networks_config)
  return desired_master_authorized_networks_config_;
}
::google::container::v1::MasterAuthorizedNetworksConfig* ClusterUpdate::release_desired_master_authorized_networks_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_master_authorized_networks_config)
  
  ::google::container::v1::MasterAuthorizedNetworksConfig* temp = desired_master_authorized_networks_config_;
  desired_master_authorized_networks_config_ = NULL;
  return temp;
}
void ClusterUpdate::set_allocated_desired_master_authorized_networks_config(::google::container::v1::MasterAuthorizedNetworksConfig* desired_master_authorized_networks_config) {
  delete desired_master_authorized_networks_config_;
  desired_master_authorized_networks_config_ = desired_master_authorized_networks_config;
  if (desired_master_authorized_networks_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_master_authorized_networks_config)
}

// string desired_master_version = 100;
void ClusterUpdate::clear_desired_master_version() {
  desired_master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterUpdate::desired_master_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_master_version)
  return desired_master_version_.GetNoArena();
}
void ClusterUpdate::set_desired_master_version(const ::std::string& value) {
  
  desired_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_master_version)
}
#if LANG_CXX11
void ClusterUpdate::set_desired_master_version(::std::string&& value) {
  
  desired_master_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_master_version)
}
#endif
void ClusterUpdate::set_desired_master_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desired_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_master_version)
}
void ClusterUpdate::set_desired_master_version(const char* value, size_t size) {
  
  desired_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_master_version)
}
::std::string* ClusterUpdate::mutable_desired_master_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_master_version)
  return desired_master_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterUpdate::release_desired_master_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_master_version)
  
  return desired_master_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterUpdate::set_allocated_desired_master_version(::std::string* desired_master_version) {
  if (desired_master_version != NULL) {
    
  } else {
    
  }
  desired_master_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_master_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_master_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operation::kNameFieldNumber;
const int Operation::kZoneFieldNumber;
const int Operation::kOperationTypeFieldNumber;
const int Operation::kStatusFieldNumber;
const int Operation::kDetailFieldNumber;
const int Operation::kStatusMessageFieldNumber;
const int Operation::kSelfLinkFieldNumber;
const int Operation::kTargetLinkFieldNumber;
const int Operation::kStartTimeFieldNumber;
const int Operation::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operation::Operation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.Operation)
}
Operation::Operation(const Operation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  status_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status_message().size() > 0) {
    status_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_message_);
  }
  self_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.self_link().size() > 0) {
    self_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.self_link_);
  }
  target_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.target_link().size() > 0) {
    target_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_link_);
  }
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.detail().size() > 0) {
    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_time().size() > 0) {
    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_time().size() > 0) {
    end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_);
  }
  ::memcpy(&operation_type_, &from.operation_type_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&operation_type_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:google.container.v1.Operation)
}

void Operation::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&operation_type_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&operation_type_) + sizeof(status_));
  _cached_size_ = 0;
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:google.container.v1.Operation)
  SharedDtor();
}

void Operation::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Operation& Operation::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

Operation* Operation::New(::google::protobuf::Arena* arena) const {
  Operation* n = new Operation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.Operation)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&operation_type_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&operation_type_) + sizeof(status_));
}

bool Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.Operation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Operation.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Operation.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.Operation.Type operation_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation_type(static_cast< ::google::container::v1::Operation_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.Operation.Status status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::google::container::v1::Operation_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status_message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status_message().data(), this->status_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Operation.status_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string self_link = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_self_link()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->self_link().data(), this->self_link().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Operation.self_link"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string target_link = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_link()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_link().data(), this->target_link().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Operation.target_link"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detail = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detail().data(), this->detail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Operation.detail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string start_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Operation.start_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string end_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->end_time().data(), this->end_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.Operation.end_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.Operation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.Operation)
  return false;
#undef DO_
}

void Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.Operation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // .google.container.v1.Operation.Type operation_type = 3;
  if (this->operation_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operation_type(), output);
  }

  // .google.container.v1.Operation.Status status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // string status_message = 5;
  if (this->status_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_message().data(), this->status_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.status_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->status_message(), output);
  }

  // string self_link = 6;
  if (this->self_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->self_link().data(), this->self_link().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.self_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->self_link(), output);
  }

  // string target_link = 7;
  if (this->target_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_link().data(), this->target_link().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.target_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->target_link(), output);
  }

  // string detail = 8;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->detail(), output);
  }

  // string start_time = 10;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->start_time(), output);
  }

  // string end_time = 11;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.end_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->end_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.Operation)
}

::google::protobuf::uint8* Operation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.Operation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // .google.container.v1.Operation.Type operation_type = 3;
  if (this->operation_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operation_type(), target);
  }

  // .google.container.v1.Operation.Status status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // string status_message = 5;
  if (this->status_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_message().data(), this->status_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.status_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->status_message(), target);
  }

  // string self_link = 6;
  if (this->self_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->self_link().data(), this->self_link().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.self_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->self_link(), target);
  }

  // string target_link = 7;
  if (this->target_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_link().data(), this->target_link().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.target_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->target_link(), target);
  }

  // string detail = 8;
  if (this->detail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detail().data(), this->detail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->detail(), target);
  }

  // string start_time = 10;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.start_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->start_time(), target);
  }

  // string end_time = 11;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.Operation.end_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->end_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.Operation)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string status_message = 5;
  if (this->status_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status_message());
  }

  // string self_link = 6;
  if (this->self_link().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->self_link());
  }

  // string target_link = 7;
  if (this->target_link().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_link());
  }

  // string detail = 8;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detail());
  }

  // string start_time = 10;
  if (this->start_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_time());
  }

  // string end_time = 11;
  if (this->end_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_time());
  }

  // .google.container.v1.Operation.Type operation_type = 3;
  if (this->operation_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation_type());
  }

  // .google.container.v1.Operation.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  const Operation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Operation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.Operation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.Operation)
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.status_message().size() > 0) {

    status_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_message_);
  }
  if (from.self_link().size() > 0) {

    self_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.self_link_);
  }
  if (from.target_link().size() > 0) {

    target_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_link_);
  }
  if (from.detail().size() > 0) {

    detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.start_time().size() > 0) {

    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  if (from.end_time().size() > 0) {

    end_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_);
  }
  if (from.operation_type() != 0) {
    set_operation_type(from.operation_type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Operation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::Swap(Operation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operation::InternalSwap(Operation* other) {
  name_.Swap(&other->name_);
  zone_.Swap(&other->zone_);
  status_message_.Swap(&other->status_message_);
  self_link_.Swap(&other->self_link_);
  target_link_.Swap(&other->target_link_);
  detail_.Swap(&other->detail_);
  start_time_.Swap(&other->start_time_);
  end_time_.Swap(&other->end_time_);
  std::swap(operation_type_, other->operation_type_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Operation::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Operation

// string name = 1;
void Operation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Operation::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.name)
  return name_.GetNoArena();
}
void Operation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.name)
}
#if LANG_CXX11
void Operation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.name)
}
#endif
void Operation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.name)
}
void Operation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.name)
}
::std::string* Operation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Operation::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.name)
}

// string zone = 2;
void Operation::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Operation::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.zone)
  return zone_.GetNoArena();
}
void Operation::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.zone)
}
#if LANG_CXX11
void Operation::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.zone)
}
#endif
void Operation::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.zone)
}
void Operation::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.zone)
}
::std::string* Operation::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Operation::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operation::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.zone)
}

// .google.container.v1.Operation.Type operation_type = 3;
void Operation::clear_operation_type() {
  operation_type_ = 0;
}
::google::container::v1::Operation_Type Operation::operation_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.operation_type)
  return static_cast< ::google::container::v1::Operation_Type >(operation_type_);
}
void Operation::set_operation_type(::google::container::v1::Operation_Type value) {
  
  operation_type_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.operation_type)
}

// .google.container.v1.Operation.Status status = 4;
void Operation::clear_status() {
  status_ = 0;
}
::google::container::v1::Operation_Status Operation::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.status)
  return static_cast< ::google::container::v1::Operation_Status >(status_);
}
void Operation::set_status(::google::container::v1::Operation_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.status)
}

// string detail = 8;
void Operation::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Operation::detail() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.detail)
  return detail_.GetNoArena();
}
void Operation::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.detail)
}
#if LANG_CXX11
void Operation::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.detail)
}
#endif
void Operation::set_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.detail)
}
void Operation::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.detail)
}
::std::string* Operation::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Operation::release_detail() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operation::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.detail)
}

// string status_message = 5;
void Operation::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Operation::status_message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.status_message)
  return status_message_.GetNoArena();
}
void Operation::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.status_message)
}
#if LANG_CXX11
void Operation::set_status_message(::std::string&& value) {
  
  status_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.status_message)
}
#endif
void Operation::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.status_message)
}
void Operation::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.status_message)
}
::std::string* Operation::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Operation::release_status_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operation::set_allocated_status_message(::std::string* status_message) {
  if (status_message != NULL) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.status_message)
}

// string self_link = 6;
void Operation::clear_self_link() {
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Operation::self_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.self_link)
  return self_link_.GetNoArena();
}
void Operation::set_self_link(const ::std::string& value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.self_link)
}
#if LANG_CXX11
void Operation::set_self_link(::std::string&& value) {
  
  self_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.self_link)
}
#endif
void Operation::set_self_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.self_link)
}
void Operation::set_self_link(const char* value, size_t size) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.self_link)
}
::std::string* Operation::mutable_self_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.self_link)
  return self_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Operation::release_self_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.self_link)
  
  return self_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operation::set_allocated_self_link(::std::string* self_link) {
  if (self_link != NULL) {
    
  } else {
    
  }
  self_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.self_link)
}

// string target_link = 7;
void Operation::clear_target_link() {
  target_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Operation::target_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.target_link)
  return target_link_.GetNoArena();
}
void Operation::set_target_link(const ::std::string& value) {
  
  target_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.target_link)
}
#if LANG_CXX11
void Operation::set_target_link(::std::string&& value) {
  
  target_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.target_link)
}
#endif
void Operation::set_target_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  target_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.target_link)
}
void Operation::set_target_link(const char* value, size_t size) {
  
  target_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.target_link)
}
::std::string* Operation::mutable_target_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.target_link)
  return target_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Operation::release_target_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.target_link)
  
  return target_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operation::set_allocated_target_link(::std::string* target_link) {
  if (target_link != NULL) {
    
  } else {
    
  }
  target_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.target_link)
}

// string start_time = 10;
void Operation::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Operation::start_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.start_time)
  return start_time_.GetNoArena();
}
void Operation::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.start_time)
}
#if LANG_CXX11
void Operation::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.start_time)
}
#endif
void Operation::set_start_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.start_time)
}
void Operation::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.start_time)
}
::std::string* Operation::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Operation::release_start_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operation::set_allocated_start_time(::std::string* start_time) {
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.start_time)
}

// string end_time = 11;
void Operation::clear_end_time() {
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Operation::end_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.end_time)
  return end_time_.GetNoArena();
}
void Operation::set_end_time(const ::std::string& value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.end_time)
}
#if LANG_CXX11
void Operation::set_end_time(::std::string&& value) {
  
  end_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.end_time)
}
#endif
void Operation::set_end_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.end_time)
}
void Operation::set_end_time(const char* value, size_t size) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.end_time)
}
::std::string* Operation::mutable_end_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.end_time)
  return end_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Operation::release_end_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.end_time)
  
  return end_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Operation::set_allocated_end_time(::std::string* end_time) {
  if (end_time != NULL) {
    
  } else {
    
  }
  end_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateClusterRequest::kProjectIdFieldNumber;
const int CreateClusterRequest::kZoneFieldNumber;
const int CreateClusterRequest::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateClusterRequest::CreateClusterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.CreateClusterRequest)
}
CreateClusterRequest::CreateClusterRequest(const CreateClusterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.has_cluster()) {
    cluster_ = new ::google::container::v1::Cluster(*from.cluster_);
  } else {
    cluster_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.CreateClusterRequest)
}

void CreateClusterRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_ = NULL;
  _cached_size_ = 0;
}

CreateClusterRequest::~CreateClusterRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.CreateClusterRequest)
  SharedDtor();
}

void CreateClusterRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete cluster_;
  }
}

void CreateClusterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateClusterRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateClusterRequest& CreateClusterRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateClusterRequest* CreateClusterRequest::New(::google::protobuf::Arena* arena) const {
  CreateClusterRequest* n = new CreateClusterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.CreateClusterRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) {
    delete cluster_;
  }
  cluster_ = NULL;
}

bool CreateClusterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.CreateClusterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.CreateClusterRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.CreateClusterRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.Cluster cluster = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.CreateClusterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.CreateClusterRequest)
  return false;
#undef DO_
}

void CreateClusterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.CreateClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CreateClusterRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CreateClusterRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // .google.container.v1.Cluster cluster = 3;
  if (this->has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cluster_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.CreateClusterRequest)
}

::google::protobuf::uint8* CreateClusterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.CreateClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CreateClusterRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CreateClusterRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // .google.container.v1.Cluster cluster = 3;
  if (this->has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cluster_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.CreateClusterRequest)
  return target;
}

size_t CreateClusterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.CreateClusterRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // .google.container.v1.Cluster cluster = 3;
  if (this->has_cluster()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cluster_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateClusterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.CreateClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateClusterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateClusterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.CreateClusterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.CreateClusterRequest)
    MergeFrom(*source);
  }
}

void CreateClusterRequest::MergeFrom(const CreateClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.CreateClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.has_cluster()) {
    mutable_cluster()->::google::container::v1::Cluster::MergeFrom(from.cluster());
  }
}

void CreateClusterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.CreateClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateClusterRequest::CopyFrom(const CreateClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.CreateClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateClusterRequest::IsInitialized() const {
  return true;
}

void CreateClusterRequest::Swap(CreateClusterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateClusterRequest::InternalSwap(CreateClusterRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  std::swap(cluster_, other->cluster_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateClusterRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateClusterRequest

// string project_id = 1;
void CreateClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.project_id)
  return project_id_.GetNoArena();
}
void CreateClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateClusterRequest.project_id)
}
#if LANG_CXX11
void CreateClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateClusterRequest.project_id)
}
#endif
void CreateClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateClusterRequest.project_id)
}
void CreateClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateClusterRequest.project_id)
}
::std::string* CreateClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.project_id)
}

// string zone = 2;
void CreateClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.zone)
  return zone_.GetNoArena();
}
void CreateClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateClusterRequest.zone)
}
#if LANG_CXX11
void CreateClusterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateClusterRequest.zone)
}
#endif
void CreateClusterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateClusterRequest.zone)
}
void CreateClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateClusterRequest.zone)
}
::std::string* CreateClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.zone)
}

// .google.container.v1.Cluster cluster = 3;
bool CreateClusterRequest::has_cluster() const {
  return this != internal_default_instance() && cluster_ != NULL;
}
void CreateClusterRequest::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) delete cluster_;
  cluster_ = NULL;
}
const ::google::container::v1::Cluster& CreateClusterRequest::cluster() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.cluster)
  return cluster_ != NULL ? *cluster_
                         : *::google::container::v1::Cluster::internal_default_instance();
}
::google::container::v1::Cluster* CreateClusterRequest::mutable_cluster() {
  
  if (cluster_ == NULL) {
    cluster_ = new ::google::container::v1::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.cluster)
  return cluster_;
}
::google::container::v1::Cluster* CreateClusterRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.cluster)
  
  ::google::container::v1::Cluster* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
void CreateClusterRequest::set_allocated_cluster(::google::container::v1::Cluster* cluster) {
  delete cluster_;
  cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.cluster)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterRequest::kProjectIdFieldNumber;
const int GetClusterRequest::kZoneFieldNumber;
const int GetClusterRequest::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterRequest::GetClusterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.GetClusterRequest)
}
GetClusterRequest::GetClusterRequest(const GetClusterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.GetClusterRequest)
}

void GetClusterRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetClusterRequest::~GetClusterRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.GetClusterRequest)
  SharedDtor();
}

void GetClusterRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetClusterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetClusterRequest& GetClusterRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetClusterRequest* GetClusterRequest::New(::google::protobuf::Arena* arena) const {
  GetClusterRequest* n = new GetClusterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.GetClusterRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetClusterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.GetClusterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.GetClusterRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.GetClusterRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.GetClusterRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.GetClusterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.GetClusterRequest)
  return false;
#undef DO_
}

void GetClusterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.GetClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetClusterRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetClusterRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetClusterRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.GetClusterRequest)
}

::google::protobuf::uint8* GetClusterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.GetClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetClusterRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetClusterRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetClusterRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.GetClusterRequest)
  return target;
}

size_t GetClusterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.GetClusterRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.GetClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.GetClusterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.GetClusterRequest)
    MergeFrom(*source);
  }
}

void GetClusterRequest::MergeFrom(const GetClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.GetClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
}

void GetClusterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.GetClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterRequest::CopyFrom(const GetClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.GetClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterRequest::IsInitialized() const {
  return true;
}

void GetClusterRequest::Swap(GetClusterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterRequest::InternalSwap(GetClusterRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterRequest

// string project_id = 1;
void GetClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.project_id)
  return project_id_.GetNoArena();
}
void GetClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.project_id)
}
#if LANG_CXX11
void GetClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetClusterRequest.project_id)
}
#endif
void GetClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.project_id)
}
void GetClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.project_id)
}
::std::string* GetClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.project_id)
}

// string zone = 2;
void GetClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.zone)
  return zone_.GetNoArena();
}
void GetClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.zone)
}
#if LANG_CXX11
void GetClusterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetClusterRequest.zone)
}
#endif
void GetClusterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.zone)
}
void GetClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.zone)
}
::std::string* GetClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.zone)
}

// string cluster_id = 3;
void GetClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void GetClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.cluster_id)
}
#if LANG_CXX11
void GetClusterRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetClusterRequest.cluster_id)
}
#endif
void GetClusterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.cluster_id)
}
void GetClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.cluster_id)
}
::std::string* GetClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateClusterRequest::kProjectIdFieldNumber;
const int UpdateClusterRequest::kZoneFieldNumber;
const int UpdateClusterRequest::kClusterIdFieldNumber;
const int UpdateClusterRequest::kUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateClusterRequest::UpdateClusterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.UpdateClusterRequest)
}
UpdateClusterRequest::UpdateClusterRequest(const UpdateClusterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_update()) {
    update_ = new ::google::container::v1::ClusterUpdate(*from.update_);
  } else {
    update_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.UpdateClusterRequest)
}

void UpdateClusterRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_ = NULL;
  _cached_size_ = 0;
}

UpdateClusterRequest::~UpdateClusterRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.UpdateClusterRequest)
  SharedDtor();
}

void UpdateClusterRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete update_;
  }
}

void UpdateClusterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateClusterRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateClusterRequest& UpdateClusterRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateClusterRequest* UpdateClusterRequest::New(::google::protobuf::Arena* arena) const {
  UpdateClusterRequest* n = new UpdateClusterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.UpdateClusterRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && update_ != NULL) {
    delete update_;
  }
  update_ = NULL;
}

bool UpdateClusterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.UpdateClusterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateClusterRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateClusterRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateClusterRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.ClusterUpdate update = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.UpdateClusterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.UpdateClusterRequest)
  return false;
#undef DO_
}

void UpdateClusterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.UpdateClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateClusterRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateClusterRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateClusterRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // .google.container.v1.ClusterUpdate update = 4;
  if (this->has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->update_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.UpdateClusterRequest)
}

::google::protobuf::uint8* UpdateClusterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.UpdateClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateClusterRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateClusterRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateClusterRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // .google.container.v1.ClusterUpdate update = 4;
  if (this->has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->update_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.UpdateClusterRequest)
  return target;
}

size_t UpdateClusterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.UpdateClusterRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .google.container.v1.ClusterUpdate update = 4;
  if (this->has_update()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateClusterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.UpdateClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateClusterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateClusterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.UpdateClusterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.UpdateClusterRequest)
    MergeFrom(*source);
  }
}

void UpdateClusterRequest::MergeFrom(const UpdateClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.UpdateClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_update()) {
    mutable_update()->::google::container::v1::ClusterUpdate::MergeFrom(from.update());
  }
}

void UpdateClusterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.UpdateClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateClusterRequest::CopyFrom(const UpdateClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.UpdateClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateClusterRequest::IsInitialized() const {
  return true;
}

void UpdateClusterRequest::Swap(UpdateClusterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateClusterRequest::InternalSwap(UpdateClusterRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(update_, other->update_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateClusterRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateClusterRequest

// string project_id = 1;
void UpdateClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.project_id)
  return project_id_.GetNoArena();
}
void UpdateClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.project_id)
}
#if LANG_CXX11
void UpdateClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateClusterRequest.project_id)
}
#endif
void UpdateClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.project_id)
}
void UpdateClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.project_id)
}
::std::string* UpdateClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.project_id)
}

// string zone = 2;
void UpdateClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.zone)
  return zone_.GetNoArena();
}
void UpdateClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.zone)
}
#if LANG_CXX11
void UpdateClusterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateClusterRequest.zone)
}
#endif
void UpdateClusterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.zone)
}
void UpdateClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.zone)
}
::std::string* UpdateClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.zone)
}

// string cluster_id = 3;
void UpdateClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void UpdateClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.cluster_id)
}
#if LANG_CXX11
void UpdateClusterRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateClusterRequest.cluster_id)
}
#endif
void UpdateClusterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.cluster_id)
}
void UpdateClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.cluster_id)
}
::std::string* UpdateClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.cluster_id)
}

// .google.container.v1.ClusterUpdate update = 4;
bool UpdateClusterRequest::has_update() const {
  return this != internal_default_instance() && update_ != NULL;
}
void UpdateClusterRequest::clear_update() {
  if (GetArenaNoVirtual() == NULL && update_ != NULL) delete update_;
  update_ = NULL;
}
const ::google::container::v1::ClusterUpdate& UpdateClusterRequest::update() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.update)
  return update_ != NULL ? *update_
                         : *::google::container::v1::ClusterUpdate::internal_default_instance();
}
::google::container::v1::ClusterUpdate* UpdateClusterRequest::mutable_update() {
  
  if (update_ == NULL) {
    update_ = new ::google::container::v1::ClusterUpdate;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.update)
  return update_;
}
::google::container::v1::ClusterUpdate* UpdateClusterRequest::release_update() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.update)
  
  ::google::container::v1::ClusterUpdate* temp = update_;
  update_ = NULL;
  return temp;
}
void UpdateClusterRequest::set_allocated_update(::google::container::v1::ClusterUpdate* update) {
  delete update_;
  update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.update)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateNodePoolRequest::kProjectIdFieldNumber;
const int UpdateNodePoolRequest::kZoneFieldNumber;
const int UpdateNodePoolRequest::kClusterIdFieldNumber;
const int UpdateNodePoolRequest::kNodePoolIdFieldNumber;
const int UpdateNodePoolRequest::kNodeVersionFieldNumber;
const int UpdateNodePoolRequest::kImageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateNodePoolRequest::UpdateNodePoolRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.UpdateNodePoolRequest)
}
UpdateNodePoolRequest::UpdateNodePoolRequest(const UpdateNodePoolRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_pool_id().size() > 0) {
    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
  node_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_version().size() > 0) {
    node_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_version_);
  }
  image_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_type().size() > 0) {
    image_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_type_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.UpdateNodePoolRequest)
}

void UpdateNodePoolRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UpdateNodePoolRequest::~UpdateNodePoolRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.UpdateNodePoolRequest)
  SharedDtor();
}

void UpdateNodePoolRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateNodePoolRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateNodePoolRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateNodePoolRequest& UpdateNodePoolRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateNodePoolRequest* UpdateNodePoolRequest::New(::google::protobuf::Arena* arena) const {
  UpdateNodePoolRequest* n = new UpdateNodePoolRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateNodePoolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.UpdateNodePoolRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateNodePoolRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.UpdateNodePoolRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateNodePoolRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateNodePoolRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateNodePoolRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_pool_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_pool_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_pool_id().data(), this->node_pool_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateNodePoolRequest.node_pool_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_version().data(), this->node_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateNodePoolRequest.node_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_type().data(), this->image_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateNodePoolRequest.image_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.UpdateNodePoolRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.UpdateNodePoolRequest)
  return false;
#undef DO_
}

void UpdateNodePoolRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.UpdateNodePoolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateNodePoolRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateNodePoolRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateNodePoolRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateNodePoolRequest.node_pool_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->node_pool_id(), output);
  }

  // string node_version = 5;
  if (this->node_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_version().data(), this->node_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateNodePoolRequest.node_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->node_version(), output);
  }

  // string image_type = 6;
  if (this->image_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_type().data(), this->image_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateNodePoolRequest.image_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->image_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.UpdateNodePoolRequest)
}

::google::protobuf::uint8* UpdateNodePoolRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.UpdateNodePoolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateNodePoolRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateNodePoolRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateNodePoolRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateNodePoolRequest.node_pool_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_pool_id(), target);
  }

  // string node_version = 5;
  if (this->node_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_version().data(), this->node_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateNodePoolRequest.node_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->node_version(), target);
  }

  // string image_type = 6;
  if (this->image_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_type().data(), this->image_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateNodePoolRequest.image_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->image_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.UpdateNodePoolRequest)
  return target;
}

size_t UpdateNodePoolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.UpdateNodePoolRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_pool_id());
  }

  // string node_version = 5;
  if (this->node_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_version());
  }

  // string image_type = 6;
  if (this->image_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateNodePoolRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.UpdateNodePoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateNodePoolRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateNodePoolRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.UpdateNodePoolRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.UpdateNodePoolRequest)
    MergeFrom(*source);
  }
}

void UpdateNodePoolRequest::MergeFrom(const UpdateNodePoolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.UpdateNodePoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.node_pool_id().size() > 0) {

    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
  if (from.node_version().size() > 0) {

    node_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_version_);
  }
  if (from.image_type().size() > 0) {

    image_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_type_);
  }
}

void UpdateNodePoolRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.UpdateNodePoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateNodePoolRequest::CopyFrom(const UpdateNodePoolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.UpdateNodePoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNodePoolRequest::IsInitialized() const {
  return true;
}

void UpdateNodePoolRequest::Swap(UpdateNodePoolRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateNodePoolRequest::InternalSwap(UpdateNodePoolRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  node_pool_id_.Swap(&other->node_pool_id_);
  node_version_.Swap(&other->node_version_);
  image_type_.Swap(&other->image_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateNodePoolRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateNodePoolRequest

// string project_id = 1;
void UpdateNodePoolRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateNodePoolRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.project_id)
  return project_id_.GetNoArena();
}
void UpdateNodePoolRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.project_id)
}
#if LANG_CXX11
void UpdateNodePoolRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.project_id)
}
#endif
void UpdateNodePoolRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.project_id)
}
void UpdateNodePoolRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.project_id)
}
::std::string* UpdateNodePoolRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateNodePoolRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateNodePoolRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.project_id)
}

// string zone = 2;
void UpdateNodePoolRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateNodePoolRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.zone)
  return zone_.GetNoArena();
}
void UpdateNodePoolRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.zone)
}
#if LANG_CXX11
void UpdateNodePoolRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.zone)
}
#endif
void UpdateNodePoolRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.zone)
}
void UpdateNodePoolRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.zone)
}
::std::string* UpdateNodePoolRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateNodePoolRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateNodePoolRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.zone)
}

// string cluster_id = 3;
void UpdateNodePoolRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateNodePoolRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void UpdateNodePoolRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.cluster_id)
}
#if LANG_CXX11
void UpdateNodePoolRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.cluster_id)
}
#endif
void UpdateNodePoolRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.cluster_id)
}
void UpdateNodePoolRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.cluster_id)
}
::std::string* UpdateNodePoolRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateNodePoolRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateNodePoolRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.cluster_id)
}

// string node_pool_id = 4;
void UpdateNodePoolRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateNodePoolRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
void UpdateNodePoolRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}
#if LANG_CXX11
void UpdateNodePoolRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}
#endif
void UpdateNodePoolRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}
void UpdateNodePoolRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}
::std::string* UpdateNodePoolRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateNodePoolRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateNodePoolRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}

// string node_version = 5;
void UpdateNodePoolRequest::clear_node_version() {
  node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateNodePoolRequest::node_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.node_version)
  return node_version_.GetNoArena();
}
void UpdateNodePoolRequest::set_node_version(const ::std::string& value) {
  
  node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.node_version)
}
#if LANG_CXX11
void UpdateNodePoolRequest::set_node_version(::std::string&& value) {
  
  node_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.node_version)
}
#endif
void UpdateNodePoolRequest::set_node_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.node_version)
}
void UpdateNodePoolRequest::set_node_version(const char* value, size_t size) {
  
  node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.node_version)
}
::std::string* UpdateNodePoolRequest::mutable_node_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.node_version)
  return node_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateNodePoolRequest::release_node_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.node_version)
  
  return node_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateNodePoolRequest::set_allocated_node_version(::std::string* node_version) {
  if (node_version != NULL) {
    
  } else {
    
  }
  node_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.node_version)
}

// string image_type = 6;
void UpdateNodePoolRequest::clear_image_type() {
  image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateNodePoolRequest::image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.image_type)
  return image_type_.GetNoArena();
}
void UpdateNodePoolRequest::set_image_type(const ::std::string& value) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.image_type)
}
#if LANG_CXX11
void UpdateNodePoolRequest::set_image_type(::std::string&& value) {
  
  image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.image_type)
}
#endif
void UpdateNodePoolRequest::set_image_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.image_type)
}
void UpdateNodePoolRequest::set_image_type(const char* value, size_t size) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.image_type)
}
::std::string* UpdateNodePoolRequest::mutable_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.image_type)
  return image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateNodePoolRequest::release_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.image_type)
  
  return image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateNodePoolRequest::set_allocated_image_type(::std::string* image_type) {
  if (image_type != NULL) {
    
  } else {
    
  }
  image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.image_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetNodePoolAutoscalingRequest::kProjectIdFieldNumber;
const int SetNodePoolAutoscalingRequest::kZoneFieldNumber;
const int SetNodePoolAutoscalingRequest::kClusterIdFieldNumber;
const int SetNodePoolAutoscalingRequest::kNodePoolIdFieldNumber;
const int SetNodePoolAutoscalingRequest::kAutoscalingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetNodePoolAutoscalingRequest::SetNodePoolAutoscalingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.SetNodePoolAutoscalingRequest)
}
SetNodePoolAutoscalingRequest::SetNodePoolAutoscalingRequest(const SetNodePoolAutoscalingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_pool_id().size() > 0) {
    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
  if (from.has_autoscaling()) {
    autoscaling_ = new ::google::container::v1::NodePoolAutoscaling(*from.autoscaling_);
  } else {
    autoscaling_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.SetNodePoolAutoscalingRequest)
}

void SetNodePoolAutoscalingRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autoscaling_ = NULL;
  _cached_size_ = 0;
}

SetNodePoolAutoscalingRequest::~SetNodePoolAutoscalingRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.SetNodePoolAutoscalingRequest)
  SharedDtor();
}

void SetNodePoolAutoscalingRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete autoscaling_;
  }
}

void SetNodePoolAutoscalingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetNodePoolAutoscalingRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetNodePoolAutoscalingRequest& SetNodePoolAutoscalingRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetNodePoolAutoscalingRequest* SetNodePoolAutoscalingRequest::New(::google::protobuf::Arena* arena) const {
  SetNodePoolAutoscalingRequest* n = new SetNodePoolAutoscalingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetNodePoolAutoscalingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.SetNodePoolAutoscalingRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && autoscaling_ != NULL) {
    delete autoscaling_;
  }
  autoscaling_ = NULL;
}

bool SetNodePoolAutoscalingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.SetNodePoolAutoscalingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNodePoolAutoscalingRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNodePoolAutoscalingRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNodePoolAutoscalingRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_pool_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_pool_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_pool_id().data(), this->node_pool_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.NodePoolAutoscaling autoscaling = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autoscaling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.SetNodePoolAutoscalingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.SetNodePoolAutoscalingRequest)
  return false;
#undef DO_
}

void SetNodePoolAutoscalingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.SetNodePoolAutoscalingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolAutoscalingRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolAutoscalingRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolAutoscalingRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->node_pool_id(), output);
  }

  // .google.container.v1.NodePoolAutoscaling autoscaling = 5;
  if (this->has_autoscaling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->autoscaling_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.SetNodePoolAutoscalingRequest)
}

::google::protobuf::uint8* SetNodePoolAutoscalingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.SetNodePoolAutoscalingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolAutoscalingRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolAutoscalingRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolAutoscalingRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_pool_id(), target);
  }

  // .google.container.v1.NodePoolAutoscaling autoscaling = 5;
  if (this->has_autoscaling()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->autoscaling_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.SetNodePoolAutoscalingRequest)
  return target;
}

size_t SetNodePoolAutoscalingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.SetNodePoolAutoscalingRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_pool_id());
  }

  // .google.container.v1.NodePoolAutoscaling autoscaling = 5;
  if (this->has_autoscaling()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->autoscaling_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNodePoolAutoscalingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.SetNodePoolAutoscalingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetNodePoolAutoscalingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetNodePoolAutoscalingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.SetNodePoolAutoscalingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.SetNodePoolAutoscalingRequest)
    MergeFrom(*source);
  }
}

void SetNodePoolAutoscalingRequest::MergeFrom(const SetNodePoolAutoscalingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.SetNodePoolAutoscalingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.node_pool_id().size() > 0) {

    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
  if (from.has_autoscaling()) {
    mutable_autoscaling()->::google::container::v1::NodePoolAutoscaling::MergeFrom(from.autoscaling());
  }
}

void SetNodePoolAutoscalingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.SetNodePoolAutoscalingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNodePoolAutoscalingRequest::CopyFrom(const SetNodePoolAutoscalingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.SetNodePoolAutoscalingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNodePoolAutoscalingRequest::IsInitialized() const {
  return true;
}

void SetNodePoolAutoscalingRequest::Swap(SetNodePoolAutoscalingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetNodePoolAutoscalingRequest::InternalSwap(SetNodePoolAutoscalingRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  node_pool_id_.Swap(&other->node_pool_id_);
  std::swap(autoscaling_, other->autoscaling_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetNodePoolAutoscalingRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetNodePoolAutoscalingRequest

// string project_id = 1;
void SetNodePoolAutoscalingRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodePoolAutoscalingRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
  return project_id_.GetNoArena();
}
void SetNodePoolAutoscalingRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}
#if LANG_CXX11
void SetNodePoolAutoscalingRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}
#endif
void SetNodePoolAutoscalingRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}
void SetNodePoolAutoscalingRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}
::std::string* SetNodePoolAutoscalingRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodePoolAutoscalingRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodePoolAutoscalingRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}

// string zone = 2;
void SetNodePoolAutoscalingRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodePoolAutoscalingRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.zone)
  return zone_.GetNoArena();
}
void SetNodePoolAutoscalingRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}
#if LANG_CXX11
void SetNodePoolAutoscalingRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}
#endif
void SetNodePoolAutoscalingRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}
void SetNodePoolAutoscalingRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}
::std::string* SetNodePoolAutoscalingRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodePoolAutoscalingRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodePoolAutoscalingRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}

// string cluster_id = 3;
void SetNodePoolAutoscalingRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodePoolAutoscalingRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetNodePoolAutoscalingRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}
#if LANG_CXX11
void SetNodePoolAutoscalingRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}
#endif
void SetNodePoolAutoscalingRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}
void SetNodePoolAutoscalingRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}
::std::string* SetNodePoolAutoscalingRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodePoolAutoscalingRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodePoolAutoscalingRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}

// string node_pool_id = 4;
void SetNodePoolAutoscalingRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodePoolAutoscalingRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
void SetNodePoolAutoscalingRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}
#if LANG_CXX11
void SetNodePoolAutoscalingRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}
#endif
void SetNodePoolAutoscalingRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}
void SetNodePoolAutoscalingRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}
::std::string* SetNodePoolAutoscalingRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodePoolAutoscalingRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodePoolAutoscalingRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}

// .google.container.v1.NodePoolAutoscaling autoscaling = 5;
bool SetNodePoolAutoscalingRequest::has_autoscaling() const {
  return this != internal_default_instance() && autoscaling_ != NULL;
}
void SetNodePoolAutoscalingRequest::clear_autoscaling() {
  if (GetArenaNoVirtual() == NULL && autoscaling_ != NULL) delete autoscaling_;
  autoscaling_ = NULL;
}
const ::google::container::v1::NodePoolAutoscaling& SetNodePoolAutoscalingRequest::autoscaling() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.autoscaling)
  return autoscaling_ != NULL ? *autoscaling_
                         : *::google::container::v1::NodePoolAutoscaling::internal_default_instance();
}
::google::container::v1::NodePoolAutoscaling* SetNodePoolAutoscalingRequest::mutable_autoscaling() {
  
  if (autoscaling_ == NULL) {
    autoscaling_ = new ::google::container::v1::NodePoolAutoscaling;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.autoscaling)
  return autoscaling_;
}
::google::container::v1::NodePoolAutoscaling* SetNodePoolAutoscalingRequest::release_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.autoscaling)
  
  ::google::container::v1::NodePoolAutoscaling* temp = autoscaling_;
  autoscaling_ = NULL;
  return temp;
}
void SetNodePoolAutoscalingRequest::set_allocated_autoscaling(::google::container::v1::NodePoolAutoscaling* autoscaling) {
  delete autoscaling_;
  autoscaling_ = autoscaling;
  if (autoscaling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.autoscaling)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLoggingServiceRequest::kProjectIdFieldNumber;
const int SetLoggingServiceRequest::kZoneFieldNumber;
const int SetLoggingServiceRequest::kClusterIdFieldNumber;
const int SetLoggingServiceRequest::kLoggingServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLoggingServiceRequest::SetLoggingServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.SetLoggingServiceRequest)
}
SetLoggingServiceRequest::SetLoggingServiceRequest(const SetLoggingServiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  logging_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.logging_service().size() > 0) {
    logging_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logging_service_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.SetLoggingServiceRequest)
}

void SetLoggingServiceRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logging_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SetLoggingServiceRequest::~SetLoggingServiceRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.SetLoggingServiceRequest)
  SharedDtor();
}

void SetLoggingServiceRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logging_service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetLoggingServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLoggingServiceRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetLoggingServiceRequest& SetLoggingServiceRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetLoggingServiceRequest* SetLoggingServiceRequest::New(::google::protobuf::Arena* arena) const {
  SetLoggingServiceRequest* n = new SetLoggingServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetLoggingServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.SetLoggingServiceRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logging_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetLoggingServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.SetLoggingServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLoggingServiceRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLoggingServiceRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLoggingServiceRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string logging_service = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logging_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logging_service().data(), this->logging_service().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLoggingServiceRequest.logging_service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.SetLoggingServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.SetLoggingServiceRequest)
  return false;
#undef DO_
}

void SetLoggingServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.SetLoggingServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLoggingServiceRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLoggingServiceRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLoggingServiceRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // string logging_service = 4;
  if (this->logging_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logging_service().data(), this->logging_service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLoggingServiceRequest.logging_service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->logging_service(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.SetLoggingServiceRequest)
}

::google::protobuf::uint8* SetLoggingServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.SetLoggingServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLoggingServiceRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLoggingServiceRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLoggingServiceRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // string logging_service = 4;
  if (this->logging_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logging_service().data(), this->logging_service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLoggingServiceRequest.logging_service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->logging_service(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.SetLoggingServiceRequest)
  return target;
}

size_t SetLoggingServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.SetLoggingServiceRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string logging_service = 4;
  if (this->logging_service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logging_service());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLoggingServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.SetLoggingServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLoggingServiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLoggingServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.SetLoggingServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.SetLoggingServiceRequest)
    MergeFrom(*source);
  }
}

void SetLoggingServiceRequest::MergeFrom(const SetLoggingServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.SetLoggingServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.logging_service().size() > 0) {

    logging_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logging_service_);
  }
}

void SetLoggingServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.SetLoggingServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLoggingServiceRequest::CopyFrom(const SetLoggingServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.SetLoggingServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLoggingServiceRequest::IsInitialized() const {
  return true;
}

void SetLoggingServiceRequest::Swap(SetLoggingServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLoggingServiceRequest::InternalSwap(SetLoggingServiceRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  logging_service_.Swap(&other->logging_service_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetLoggingServiceRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetLoggingServiceRequest

// string project_id = 1;
void SetLoggingServiceRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLoggingServiceRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.project_id)
  return project_id_.GetNoArena();
}
void SetLoggingServiceRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.project_id)
}
#if LANG_CXX11
void SetLoggingServiceRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.project_id)
}
#endif
void SetLoggingServiceRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.project_id)
}
void SetLoggingServiceRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.project_id)
}
::std::string* SetLoggingServiceRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLoggingServiceRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLoggingServiceRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.project_id)
}

// string zone = 2;
void SetLoggingServiceRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLoggingServiceRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.zone)
  return zone_.GetNoArena();
}
void SetLoggingServiceRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.zone)
}
#if LANG_CXX11
void SetLoggingServiceRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.zone)
}
#endif
void SetLoggingServiceRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.zone)
}
void SetLoggingServiceRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.zone)
}
::std::string* SetLoggingServiceRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLoggingServiceRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLoggingServiceRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.zone)
}

// string cluster_id = 3;
void SetLoggingServiceRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLoggingServiceRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetLoggingServiceRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.cluster_id)
}
#if LANG_CXX11
void SetLoggingServiceRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.cluster_id)
}
#endif
void SetLoggingServiceRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.cluster_id)
}
void SetLoggingServiceRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.cluster_id)
}
::std::string* SetLoggingServiceRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLoggingServiceRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLoggingServiceRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.cluster_id)
}

// string logging_service = 4;
void SetLoggingServiceRequest::clear_logging_service() {
  logging_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLoggingServiceRequest::logging_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.logging_service)
  return logging_service_.GetNoArena();
}
void SetLoggingServiceRequest::set_logging_service(const ::std::string& value) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.logging_service)
}
#if LANG_CXX11
void SetLoggingServiceRequest::set_logging_service(::std::string&& value) {
  
  logging_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.logging_service)
}
#endif
void SetLoggingServiceRequest::set_logging_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.logging_service)
}
void SetLoggingServiceRequest::set_logging_service(const char* value, size_t size) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.logging_service)
}
::std::string* SetLoggingServiceRequest::mutable_logging_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.logging_service)
  return logging_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLoggingServiceRequest::release_logging_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.logging_service)
  
  return logging_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLoggingServiceRequest::set_allocated_logging_service(::std::string* logging_service) {
  if (logging_service != NULL) {
    
  } else {
    
  }
  logging_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logging_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.logging_service)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMonitoringServiceRequest::kProjectIdFieldNumber;
const int SetMonitoringServiceRequest::kZoneFieldNumber;
const int SetMonitoringServiceRequest::kClusterIdFieldNumber;
const int SetMonitoringServiceRequest::kMonitoringServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMonitoringServiceRequest::SetMonitoringServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.SetMonitoringServiceRequest)
}
SetMonitoringServiceRequest::SetMonitoringServiceRequest(const SetMonitoringServiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  monitoring_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.monitoring_service().size() > 0) {
    monitoring_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitoring_service_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.SetMonitoringServiceRequest)
}

void SetMonitoringServiceRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitoring_service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SetMonitoringServiceRequest::~SetMonitoringServiceRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.SetMonitoringServiceRequest)
  SharedDtor();
}

void SetMonitoringServiceRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitoring_service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetMonitoringServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetMonitoringServiceRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetMonitoringServiceRequest& SetMonitoringServiceRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetMonitoringServiceRequest* SetMonitoringServiceRequest::New(::google::protobuf::Arena* arena) const {
  SetMonitoringServiceRequest* n = new SetMonitoringServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetMonitoringServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.SetMonitoringServiceRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetMonitoringServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.SetMonitoringServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetMonitoringServiceRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetMonitoringServiceRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetMonitoringServiceRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string monitoring_service = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitoring_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitoring_service().data(), this->monitoring_service().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetMonitoringServiceRequest.monitoring_service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.SetMonitoringServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.SetMonitoringServiceRequest)
  return false;
#undef DO_
}

void SetMonitoringServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.SetMonitoringServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMonitoringServiceRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMonitoringServiceRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMonitoringServiceRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // string monitoring_service = 4;
  if (this->monitoring_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoring_service().data(), this->monitoring_service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMonitoringServiceRequest.monitoring_service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->monitoring_service(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.SetMonitoringServiceRequest)
}

::google::protobuf::uint8* SetMonitoringServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.SetMonitoringServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMonitoringServiceRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMonitoringServiceRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMonitoringServiceRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // string monitoring_service = 4;
  if (this->monitoring_service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoring_service().data(), this->monitoring_service().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMonitoringServiceRequest.monitoring_service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->monitoring_service(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.SetMonitoringServiceRequest)
  return target;
}

size_t SetMonitoringServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.SetMonitoringServiceRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string monitoring_service = 4;
  if (this->monitoring_service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitoring_service());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMonitoringServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.SetMonitoringServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMonitoringServiceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetMonitoringServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.SetMonitoringServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.SetMonitoringServiceRequest)
    MergeFrom(*source);
  }
}

void SetMonitoringServiceRequest::MergeFrom(const SetMonitoringServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.SetMonitoringServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.monitoring_service().size() > 0) {

    monitoring_service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitoring_service_);
  }
}

void SetMonitoringServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.SetMonitoringServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMonitoringServiceRequest::CopyFrom(const SetMonitoringServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.SetMonitoringServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMonitoringServiceRequest::IsInitialized() const {
  return true;
}

void SetMonitoringServiceRequest::Swap(SetMonitoringServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMonitoringServiceRequest::InternalSwap(SetMonitoringServiceRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  monitoring_service_.Swap(&other->monitoring_service_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetMonitoringServiceRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetMonitoringServiceRequest

// string project_id = 1;
void SetMonitoringServiceRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetMonitoringServiceRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.project_id)
  return project_id_.GetNoArena();
}
void SetMonitoringServiceRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.project_id)
}
#if LANG_CXX11
void SetMonitoringServiceRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.project_id)
}
#endif
void SetMonitoringServiceRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.project_id)
}
void SetMonitoringServiceRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.project_id)
}
::std::string* SetMonitoringServiceRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetMonitoringServiceRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetMonitoringServiceRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.project_id)
}

// string zone = 2;
void SetMonitoringServiceRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetMonitoringServiceRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.zone)
  return zone_.GetNoArena();
}
void SetMonitoringServiceRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.zone)
}
#if LANG_CXX11
void SetMonitoringServiceRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.zone)
}
#endif
void SetMonitoringServiceRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.zone)
}
void SetMonitoringServiceRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.zone)
}
::std::string* SetMonitoringServiceRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetMonitoringServiceRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetMonitoringServiceRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.zone)
}

// string cluster_id = 3;
void SetMonitoringServiceRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetMonitoringServiceRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetMonitoringServiceRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}
#if LANG_CXX11
void SetMonitoringServiceRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}
#endif
void SetMonitoringServiceRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}
void SetMonitoringServiceRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}
::std::string* SetMonitoringServiceRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetMonitoringServiceRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetMonitoringServiceRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}

// string monitoring_service = 4;
void SetMonitoringServiceRequest::clear_monitoring_service() {
  monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetMonitoringServiceRequest::monitoring_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
  return monitoring_service_.GetNoArena();
}
void SetMonitoringServiceRequest::set_monitoring_service(const ::std::string& value) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}
#if LANG_CXX11
void SetMonitoringServiceRequest::set_monitoring_service(::std::string&& value) {
  
  monitoring_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}
#endif
void SetMonitoringServiceRequest::set_monitoring_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}
void SetMonitoringServiceRequest::set_monitoring_service(const char* value, size_t size) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}
::std::string* SetMonitoringServiceRequest::mutable_monitoring_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
  return monitoring_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetMonitoringServiceRequest::release_monitoring_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
  
  return monitoring_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetMonitoringServiceRequest::set_allocated_monitoring_service(::std::string* monitoring_service) {
  if (monitoring_service != NULL) {
    
  } else {
    
  }
  monitoring_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitoring_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAddonsConfigRequest::kProjectIdFieldNumber;
const int SetAddonsConfigRequest::kZoneFieldNumber;
const int SetAddonsConfigRequest::kClusterIdFieldNumber;
const int SetAddonsConfigRequest::kAddonsConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAddonsConfigRequest::SetAddonsConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.SetAddonsConfigRequest)
}
SetAddonsConfigRequest::SetAddonsConfigRequest(const SetAddonsConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_addons_config()) {
    addons_config_ = new ::google::container::v1::AddonsConfig(*from.addons_config_);
  } else {
    addons_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.SetAddonsConfigRequest)
}

void SetAddonsConfigRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addons_config_ = NULL;
  _cached_size_ = 0;
}

SetAddonsConfigRequest::~SetAddonsConfigRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.SetAddonsConfigRequest)
  SharedDtor();
}

void SetAddonsConfigRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete addons_config_;
  }
}

void SetAddonsConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAddonsConfigRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetAddonsConfigRequest& SetAddonsConfigRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetAddonsConfigRequest* SetAddonsConfigRequest::New(::google::protobuf::Arena* arena) const {
  SetAddonsConfigRequest* n = new SetAddonsConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetAddonsConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.SetAddonsConfigRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && addons_config_ != NULL) {
    delete addons_config_;
  }
  addons_config_ = NULL;
}

bool SetAddonsConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.SetAddonsConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetAddonsConfigRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetAddonsConfigRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetAddonsConfigRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.AddonsConfig addons_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addons_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.SetAddonsConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.SetAddonsConfigRequest)
  return false;
#undef DO_
}

void SetAddonsConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.SetAddonsConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetAddonsConfigRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetAddonsConfigRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetAddonsConfigRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // .google.container.v1.AddonsConfig addons_config = 4;
  if (this->has_addons_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->addons_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.SetAddonsConfigRequest)
}

::google::protobuf::uint8* SetAddonsConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.SetAddonsConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetAddonsConfigRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetAddonsConfigRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetAddonsConfigRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // .google.container.v1.AddonsConfig addons_config = 4;
  if (this->has_addons_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->addons_config_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.SetAddonsConfigRequest)
  return target;
}

size_t SetAddonsConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.SetAddonsConfigRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .google.container.v1.AddonsConfig addons_config = 4;
  if (this->has_addons_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->addons_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAddonsConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.SetAddonsConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAddonsConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetAddonsConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.SetAddonsConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.SetAddonsConfigRequest)
    MergeFrom(*source);
  }
}

void SetAddonsConfigRequest::MergeFrom(const SetAddonsConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.SetAddonsConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_addons_config()) {
    mutable_addons_config()->::google::container::v1::AddonsConfig::MergeFrom(from.addons_config());
  }
}

void SetAddonsConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.SetAddonsConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAddonsConfigRequest::CopyFrom(const SetAddonsConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.SetAddonsConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAddonsConfigRequest::IsInitialized() const {
  return true;
}

void SetAddonsConfigRequest::Swap(SetAddonsConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAddonsConfigRequest::InternalSwap(SetAddonsConfigRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(addons_config_, other->addons_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetAddonsConfigRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetAddonsConfigRequest

// string project_id = 1;
void SetAddonsConfigRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetAddonsConfigRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.project_id)
  return project_id_.GetNoArena();
}
void SetAddonsConfigRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetAddonsConfigRequest.project_id)
}
#if LANG_CXX11
void SetAddonsConfigRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetAddonsConfigRequest.project_id)
}
#endif
void SetAddonsConfigRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetAddonsConfigRequest.project_id)
}
void SetAddonsConfigRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetAddonsConfigRequest.project_id)
}
::std::string* SetAddonsConfigRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetAddonsConfigRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetAddonsConfigRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.project_id)
}

// string zone = 2;
void SetAddonsConfigRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetAddonsConfigRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.zone)
  return zone_.GetNoArena();
}
void SetAddonsConfigRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetAddonsConfigRequest.zone)
}
#if LANG_CXX11
void SetAddonsConfigRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetAddonsConfigRequest.zone)
}
#endif
void SetAddonsConfigRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetAddonsConfigRequest.zone)
}
void SetAddonsConfigRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetAddonsConfigRequest.zone)
}
::std::string* SetAddonsConfigRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetAddonsConfigRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetAddonsConfigRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.zone)
}

// string cluster_id = 3;
void SetAddonsConfigRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetAddonsConfigRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetAddonsConfigRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetAddonsConfigRequest.cluster_id)
}
#if LANG_CXX11
void SetAddonsConfigRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetAddonsConfigRequest.cluster_id)
}
#endif
void SetAddonsConfigRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetAddonsConfigRequest.cluster_id)
}
void SetAddonsConfigRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetAddonsConfigRequest.cluster_id)
}
::std::string* SetAddonsConfigRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetAddonsConfigRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetAddonsConfigRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.cluster_id)
}

// .google.container.v1.AddonsConfig addons_config = 4;
bool SetAddonsConfigRequest::has_addons_config() const {
  return this != internal_default_instance() && addons_config_ != NULL;
}
void SetAddonsConfigRequest::clear_addons_config() {
  if (GetArenaNoVirtual() == NULL && addons_config_ != NULL) delete addons_config_;
  addons_config_ = NULL;
}
const ::google::container::v1::AddonsConfig& SetAddonsConfigRequest::addons_config() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.addons_config)
  return addons_config_ != NULL ? *addons_config_
                         : *::google::container::v1::AddonsConfig::internal_default_instance();
}
::google::container::v1::AddonsConfig* SetAddonsConfigRequest::mutable_addons_config() {
  
  if (addons_config_ == NULL) {
    addons_config_ = new ::google::container::v1::AddonsConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.addons_config)
  return addons_config_;
}
::google::container::v1::AddonsConfig* SetAddonsConfigRequest::release_addons_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.addons_config)
  
  ::google::container::v1::AddonsConfig* temp = addons_config_;
  addons_config_ = NULL;
  return temp;
}
void SetAddonsConfigRequest::set_allocated_addons_config(::google::container::v1::AddonsConfig* addons_config) {
  delete addons_config_;
  addons_config_ = addons_config;
  if (addons_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.addons_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLocationsRequest::kProjectIdFieldNumber;
const int SetLocationsRequest::kZoneFieldNumber;
const int SetLocationsRequest::kClusterIdFieldNumber;
const int SetLocationsRequest::kLocationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLocationsRequest::SetLocationsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.SetLocationsRequest)
}
SetLocationsRequest::SetLocationsRequest(const SetLocationsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      locations_(from.locations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.SetLocationsRequest)
}

void SetLocationsRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SetLocationsRequest::~SetLocationsRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.SetLocationsRequest)
  SharedDtor();
}

void SetLocationsRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetLocationsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLocationsRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetLocationsRequest& SetLocationsRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetLocationsRequest* SetLocationsRequest::New(::google::protobuf::Arena* arena) const {
  SetLocationsRequest* n = new SetLocationsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetLocationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.SetLocationsRequest)
  locations_.Clear();
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetLocationsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.SetLocationsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLocationsRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLocationsRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLocationsRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string locations = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_locations()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->locations(this->locations_size() - 1).data(),
            this->locations(this->locations_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLocationsRequest.locations"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.SetLocationsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.SetLocationsRequest)
  return false;
#undef DO_
}

void SetLocationsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.SetLocationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLocationsRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLocationsRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLocationsRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // repeated string locations = 4;
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locations(i).data(), this->locations(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLocationsRequest.locations");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->locations(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.SetLocationsRequest)
}

::google::protobuf::uint8* SetLocationsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.SetLocationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLocationsRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLocationsRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLocationsRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // repeated string locations = 4;
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locations(i).data(), this->locations(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLocationsRequest.locations");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->locations(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.SetLocationsRequest)
  return target;
}

size_t SetLocationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.SetLocationsRequest)
  size_t total_size = 0;

  // repeated string locations = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->locations_size());
  for (int i = 0, n = this->locations_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->locations(i));
  }

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLocationsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.SetLocationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLocationsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLocationsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.SetLocationsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.SetLocationsRequest)
    MergeFrom(*source);
  }
}

void SetLocationsRequest::MergeFrom(const SetLocationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.SetLocationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locations_.MergeFrom(from.locations_);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
}

void SetLocationsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.SetLocationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLocationsRequest::CopyFrom(const SetLocationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.SetLocationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocationsRequest::IsInitialized() const {
  return true;
}

void SetLocationsRequest::Swap(SetLocationsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLocationsRequest::InternalSwap(SetLocationsRequest* other) {
  locations_.InternalSwap(&other->locations_);
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetLocationsRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetLocationsRequest

// string project_id = 1;
void SetLocationsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLocationsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.project_id)
  return project_id_.GetNoArena();
}
void SetLocationsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.project_id)
}
#if LANG_CXX11
void SetLocationsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLocationsRequest.project_id)
}
#endif
void SetLocationsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.project_id)
}
void SetLocationsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.project_id)
}
::std::string* SetLocationsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLocationsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLocationsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLocationsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLocationsRequest.project_id)
}

// string zone = 2;
void SetLocationsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLocationsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.zone)
  return zone_.GetNoArena();
}
void SetLocationsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.zone)
}
#if LANG_CXX11
void SetLocationsRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLocationsRequest.zone)
}
#endif
void SetLocationsRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.zone)
}
void SetLocationsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.zone)
}
::std::string* SetLocationsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLocationsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLocationsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLocationsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLocationsRequest.zone)
}

// string cluster_id = 3;
void SetLocationsRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLocationsRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetLocationsRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.cluster_id)
}
#if LANG_CXX11
void SetLocationsRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLocationsRequest.cluster_id)
}
#endif
void SetLocationsRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.cluster_id)
}
void SetLocationsRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.cluster_id)
}
::std::string* SetLocationsRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLocationsRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLocationsRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLocationsRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLocationsRequest.cluster_id)
}

// repeated string locations = 4;
int SetLocationsRequest::locations_size() const {
  return locations_.size();
}
void SetLocationsRequest::clear_locations() {
  locations_.Clear();
}
const ::std::string& SetLocationsRequest::locations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.locations)
  return locations_.Get(index);
}
::std::string* SetLocationsRequest::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.locations)
  return locations_.Mutable(index);
}
void SetLocationsRequest::set_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.locations)
  locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SetLocationsRequest::set_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.locations)
  locations_.Mutable(index)->assign(std::move(value));
}
#endif
void SetLocationsRequest::set_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.locations)
}
void SetLocationsRequest::set_locations(int index, const char* value, size_t size) {
  locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.locations)
}
::std::string* SetLocationsRequest::add_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.SetLocationsRequest.locations)
  return locations_.Add();
}
void SetLocationsRequest::add_locations(const ::std::string& value) {
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.SetLocationsRequest.locations)
}
#if LANG_CXX11
void SetLocationsRequest::add_locations(::std::string&& value) {
  locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.SetLocationsRequest.locations)
}
#endif
void SetLocationsRequest::add_locations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.SetLocationsRequest.locations)
}
void SetLocationsRequest::add_locations(const char* value, size_t size) {
  locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.SetLocationsRequest.locations)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SetLocationsRequest::locations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.SetLocationsRequest.locations)
  return locations_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SetLocationsRequest::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.SetLocationsRequest.locations)
  return &locations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateMasterRequest::kProjectIdFieldNumber;
const int UpdateMasterRequest::kZoneFieldNumber;
const int UpdateMasterRequest::kClusterIdFieldNumber;
const int UpdateMasterRequest::kMasterVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateMasterRequest::UpdateMasterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.UpdateMasterRequest)
}
UpdateMasterRequest::UpdateMasterRequest(const UpdateMasterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  master_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.master_version().size() > 0) {
    master_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_version_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.UpdateMasterRequest)
}

void UpdateMasterRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UpdateMasterRequest::~UpdateMasterRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.UpdateMasterRequest)
  SharedDtor();
}

void UpdateMasterRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateMasterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMasterRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateMasterRequest& UpdateMasterRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateMasterRequest* UpdateMasterRequest::New(::google::protobuf::Arena* arena) const {
  UpdateMasterRequest* n = new UpdateMasterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateMasterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.UpdateMasterRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateMasterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.UpdateMasterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateMasterRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateMasterRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateMasterRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string master_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->master_version().data(), this->master_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.UpdateMasterRequest.master_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.UpdateMasterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.UpdateMasterRequest)
  return false;
#undef DO_
}

void UpdateMasterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.UpdateMasterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateMasterRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateMasterRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateMasterRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // string master_version = 4;
  if (this->master_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->master_version().data(), this->master_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateMasterRequest.master_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->master_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.UpdateMasterRequest)
}

::google::protobuf::uint8* UpdateMasterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.UpdateMasterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateMasterRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateMasterRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateMasterRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // string master_version = 4;
  if (this->master_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->master_version().data(), this->master_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.UpdateMasterRequest.master_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->master_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.UpdateMasterRequest)
  return target;
}

size_t UpdateMasterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.UpdateMasterRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string master_version = 4;
  if (this->master_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->master_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMasterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.UpdateMasterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMasterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateMasterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.UpdateMasterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.UpdateMasterRequest)
    MergeFrom(*source);
  }
}

void UpdateMasterRequest::MergeFrom(const UpdateMasterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.UpdateMasterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.master_version().size() > 0) {

    master_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_version_);
  }
}

void UpdateMasterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.UpdateMasterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMasterRequest::CopyFrom(const UpdateMasterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.UpdateMasterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMasterRequest::IsInitialized() const {
  return true;
}

void UpdateMasterRequest::Swap(UpdateMasterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateMasterRequest::InternalSwap(UpdateMasterRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  master_version_.Swap(&other->master_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateMasterRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateMasterRequest

// string project_id = 1;
void UpdateMasterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateMasterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.project_id)
  return project_id_.GetNoArena();
}
void UpdateMasterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.project_id)
}
#if LANG_CXX11
void UpdateMasterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.project_id)
}
#endif
void UpdateMasterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.project_id)
}
void UpdateMasterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.project_id)
}
::std::string* UpdateMasterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateMasterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateMasterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.project_id)
}

// string zone = 2;
void UpdateMasterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateMasterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.zone)
  return zone_.GetNoArena();
}
void UpdateMasterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.zone)
}
#if LANG_CXX11
void UpdateMasterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.zone)
}
#endif
void UpdateMasterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.zone)
}
void UpdateMasterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.zone)
}
::std::string* UpdateMasterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateMasterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateMasterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.zone)
}

// string cluster_id = 3;
void UpdateMasterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateMasterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void UpdateMasterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.cluster_id)
}
#if LANG_CXX11
void UpdateMasterRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.cluster_id)
}
#endif
void UpdateMasterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.cluster_id)
}
void UpdateMasterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.cluster_id)
}
::std::string* UpdateMasterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateMasterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateMasterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.cluster_id)
}

// string master_version = 4;
void UpdateMasterRequest::clear_master_version() {
  master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateMasterRequest::master_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.master_version)
  return master_version_.GetNoArena();
}
void UpdateMasterRequest::set_master_version(const ::std::string& value) {
  
  master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.master_version)
}
#if LANG_CXX11
void UpdateMasterRequest::set_master_version(::std::string&& value) {
  
  master_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.master_version)
}
#endif
void UpdateMasterRequest::set_master_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.master_version)
}
void UpdateMasterRequest::set_master_version(const char* value, size_t size) {
  
  master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.master_version)
}
::std::string* UpdateMasterRequest::mutable_master_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.master_version)
  return master_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateMasterRequest::release_master_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.master_version)
  
  return master_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateMasterRequest::set_allocated_master_version(::std::string* master_version) {
  if (master_version != NULL) {
    
  } else {
    
  }
  master_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.master_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMasterAuthRequest::kProjectIdFieldNumber;
const int SetMasterAuthRequest::kZoneFieldNumber;
const int SetMasterAuthRequest::kClusterIdFieldNumber;
const int SetMasterAuthRequest::kActionFieldNumber;
const int SetMasterAuthRequest::kUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMasterAuthRequest::SetMasterAuthRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.SetMasterAuthRequest)
}
SetMasterAuthRequest::SetMasterAuthRequest(const SetMasterAuthRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_update()) {
    update_ = new ::google::container::v1::MasterAuth(*from.update_);
  } else {
    update_ = NULL;
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:google.container.v1.SetMasterAuthRequest)
}

void SetMasterAuthRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&update_, 0, reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&update_) + sizeof(action_));
  _cached_size_ = 0;
}

SetMasterAuthRequest::~SetMasterAuthRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.SetMasterAuthRequest)
  SharedDtor();
}

void SetMasterAuthRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete update_;
  }
}

void SetMasterAuthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetMasterAuthRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetMasterAuthRequest& SetMasterAuthRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetMasterAuthRequest* SetMasterAuthRequest::New(::google::protobuf::Arena* arena) const {
  SetMasterAuthRequest* n = new SetMasterAuthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetMasterAuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.SetMasterAuthRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && update_ != NULL) {
    delete update_;
  }
  update_ = NULL;
  action_ = 0;
}

bool SetMasterAuthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.SetMasterAuthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetMasterAuthRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetMasterAuthRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetMasterAuthRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.SetMasterAuthRequest.Action action = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::google::container::v1::SetMasterAuthRequest_Action >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.MasterAuth update = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.SetMasterAuthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.SetMasterAuthRequest)
  return false;
#undef DO_
}

void SetMasterAuthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.SetMasterAuthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMasterAuthRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMasterAuthRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMasterAuthRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // .google.container.v1.SetMasterAuthRequest.Action action = 4;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // .google.container.v1.MasterAuth update = 5;
  if (this->has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->update_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.SetMasterAuthRequest)
}

::google::protobuf::uint8* SetMasterAuthRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.SetMasterAuthRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMasterAuthRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMasterAuthRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetMasterAuthRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // .google.container.v1.SetMasterAuthRequest.Action action = 4;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // .google.container.v1.MasterAuth update = 5;
  if (this->has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->update_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.SetMasterAuthRequest)
  return target;
}

size_t SetMasterAuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.SetMasterAuthRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .google.container.v1.MasterAuth update = 5;
  if (this->has_update()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_);
  }

  // .google.container.v1.SetMasterAuthRequest.Action action = 4;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMasterAuthRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.SetMasterAuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMasterAuthRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetMasterAuthRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.SetMasterAuthRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.SetMasterAuthRequest)
    MergeFrom(*source);
  }
}

void SetMasterAuthRequest::MergeFrom(const SetMasterAuthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.SetMasterAuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_update()) {
    mutable_update()->::google::container::v1::MasterAuth::MergeFrom(from.update());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void SetMasterAuthRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.SetMasterAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMasterAuthRequest::CopyFrom(const SetMasterAuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.SetMasterAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMasterAuthRequest::IsInitialized() const {
  return true;
}

void SetMasterAuthRequest::Swap(SetMasterAuthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMasterAuthRequest::InternalSwap(SetMasterAuthRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(update_, other->update_);
  std::swap(action_, other->action_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetMasterAuthRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetMasterAuthRequest

// string project_id = 1;
void SetMasterAuthRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetMasterAuthRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.project_id)
  return project_id_.GetNoArena();
}
void SetMasterAuthRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.project_id)
}
#if LANG_CXX11
void SetMasterAuthRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMasterAuthRequest.project_id)
}
#endif
void SetMasterAuthRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMasterAuthRequest.project_id)
}
void SetMasterAuthRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMasterAuthRequest.project_id)
}
::std::string* SetMasterAuthRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetMasterAuthRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetMasterAuthRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.project_id)
}

// string zone = 2;
void SetMasterAuthRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetMasterAuthRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.zone)
  return zone_.GetNoArena();
}
void SetMasterAuthRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.zone)
}
#if LANG_CXX11
void SetMasterAuthRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMasterAuthRequest.zone)
}
#endif
void SetMasterAuthRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMasterAuthRequest.zone)
}
void SetMasterAuthRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMasterAuthRequest.zone)
}
::std::string* SetMasterAuthRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetMasterAuthRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetMasterAuthRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.zone)
}

// string cluster_id = 3;
void SetMasterAuthRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetMasterAuthRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetMasterAuthRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.cluster_id)
}
#if LANG_CXX11
void SetMasterAuthRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMasterAuthRequest.cluster_id)
}
#endif
void SetMasterAuthRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMasterAuthRequest.cluster_id)
}
void SetMasterAuthRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMasterAuthRequest.cluster_id)
}
::std::string* SetMasterAuthRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetMasterAuthRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetMasterAuthRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.cluster_id)
}

// .google.container.v1.SetMasterAuthRequest.Action action = 4;
void SetMasterAuthRequest::clear_action() {
  action_ = 0;
}
::google::container::v1::SetMasterAuthRequest_Action SetMasterAuthRequest::action() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.action)
  return static_cast< ::google::container::v1::SetMasterAuthRequest_Action >(action_);
}
void SetMasterAuthRequest::set_action(::google::container::v1::SetMasterAuthRequest_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.action)
}

// .google.container.v1.MasterAuth update = 5;
bool SetMasterAuthRequest::has_update() const {
  return this != internal_default_instance() && update_ != NULL;
}
void SetMasterAuthRequest::clear_update() {
  if (GetArenaNoVirtual() == NULL && update_ != NULL) delete update_;
  update_ = NULL;
}
const ::google::container::v1::MasterAuth& SetMasterAuthRequest::update() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.update)
  return update_ != NULL ? *update_
                         : *::google::container::v1::MasterAuth::internal_default_instance();
}
::google::container::v1::MasterAuth* SetMasterAuthRequest::mutable_update() {
  
  if (update_ == NULL) {
    update_ = new ::google::container::v1::MasterAuth;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.update)
  return update_;
}
::google::container::v1::MasterAuth* SetMasterAuthRequest::release_update() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.update)
  
  ::google::container::v1::MasterAuth* temp = update_;
  update_ = NULL;
  return temp;
}
void SetMasterAuthRequest::set_allocated_update(::google::container::v1::MasterAuth* update) {
  delete update_;
  update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.update)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteClusterRequest::kProjectIdFieldNumber;
const int DeleteClusterRequest::kZoneFieldNumber;
const int DeleteClusterRequest::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteClusterRequest::DeleteClusterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.DeleteClusterRequest)
}
DeleteClusterRequest::DeleteClusterRequest(const DeleteClusterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.DeleteClusterRequest)
}

void DeleteClusterRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteClusterRequest::~DeleteClusterRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.DeleteClusterRequest)
  SharedDtor();
}

void DeleteClusterRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteClusterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteClusterRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteClusterRequest& DeleteClusterRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteClusterRequest* DeleteClusterRequest::New(::google::protobuf::Arena* arena) const {
  DeleteClusterRequest* n = new DeleteClusterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteClusterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.DeleteClusterRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteClusterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.DeleteClusterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.DeleteClusterRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.DeleteClusterRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.DeleteClusterRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.DeleteClusterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.DeleteClusterRequest)
  return false;
#undef DO_
}

void DeleteClusterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.DeleteClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteClusterRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteClusterRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteClusterRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.DeleteClusterRequest)
}

::google::protobuf::uint8* DeleteClusterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.DeleteClusterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteClusterRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteClusterRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteClusterRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.DeleteClusterRequest)
  return target;
}

size_t DeleteClusterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.DeleteClusterRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteClusterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.DeleteClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteClusterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteClusterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.DeleteClusterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.DeleteClusterRequest)
    MergeFrom(*source);
  }
}

void DeleteClusterRequest::MergeFrom(const DeleteClusterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.DeleteClusterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
}

void DeleteClusterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.DeleteClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteClusterRequest::CopyFrom(const DeleteClusterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.DeleteClusterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteClusterRequest::IsInitialized() const {
  return true;
}

void DeleteClusterRequest::Swap(DeleteClusterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteClusterRequest::InternalSwap(DeleteClusterRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteClusterRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteClusterRequest

// string project_id = 1;
void DeleteClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.project_id)
  return project_id_.GetNoArena();
}
void DeleteClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.project_id)
}
#if LANG_CXX11
void DeleteClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteClusterRequest.project_id)
}
#endif
void DeleteClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.project_id)
}
void DeleteClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.project_id)
}
::std::string* DeleteClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.project_id)
}

// string zone = 2;
void DeleteClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.zone)
  return zone_.GetNoArena();
}
void DeleteClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.zone)
}
#if LANG_CXX11
void DeleteClusterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteClusterRequest.zone)
}
#endif
void DeleteClusterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.zone)
}
void DeleteClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.zone)
}
::std::string* DeleteClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.zone)
}

// string cluster_id = 3;
void DeleteClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void DeleteClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.cluster_id)
}
#if LANG_CXX11
void DeleteClusterRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteClusterRequest.cluster_id)
}
#endif
void DeleteClusterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.cluster_id)
}
void DeleteClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.cluster_id)
}
::std::string* DeleteClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListClustersRequest::kProjectIdFieldNumber;
const int ListClustersRequest::kZoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListClustersRequest::ListClustersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.ListClustersRequest)
}
ListClustersRequest::ListClustersRequest(const ListClustersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.ListClustersRequest)
}

void ListClustersRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListClustersRequest::~ListClustersRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.ListClustersRequest)
  SharedDtor();
}

void ListClustersRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListClustersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListClustersRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListClustersRequest& ListClustersRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListClustersRequest* ListClustersRequest::New(::google::protobuf::Arena* arena) const {
  ListClustersRequest* n = new ListClustersRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListClustersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.ListClustersRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListClustersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.ListClustersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ListClustersRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ListClustersRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.ListClustersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.ListClustersRequest)
  return false;
#undef DO_
}

void ListClustersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.ListClustersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListClustersRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListClustersRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.ListClustersRequest)
}

::google::protobuf::uint8* ListClustersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.ListClustersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListClustersRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListClustersRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.ListClustersRequest)
  return target;
}

size_t ListClustersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.ListClustersRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListClustersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.ListClustersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListClustersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListClustersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.ListClustersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.ListClustersRequest)
    MergeFrom(*source);
  }
}

void ListClustersRequest::MergeFrom(const ListClustersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.ListClustersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
}

void ListClustersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.ListClustersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListClustersRequest::CopyFrom(const ListClustersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.ListClustersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListClustersRequest::IsInitialized() const {
  return true;
}

void ListClustersRequest::Swap(ListClustersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListClustersRequest::InternalSwap(ListClustersRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListClustersRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListClustersRequest

// string project_id = 1;
void ListClustersRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListClustersRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersRequest.project_id)
  return project_id_.GetNoArena();
}
void ListClustersRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersRequest.project_id)
}
#if LANG_CXX11
void ListClustersRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListClustersRequest.project_id)
}
#endif
void ListClustersRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersRequest.project_id)
}
void ListClustersRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersRequest.project_id)
}
::std::string* ListClustersRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListClustersRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListClustersRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListClustersRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListClustersRequest.project_id)
}

// string zone = 2;
void ListClustersRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListClustersRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersRequest.zone)
  return zone_.GetNoArena();
}
void ListClustersRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersRequest.zone)
}
#if LANG_CXX11
void ListClustersRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListClustersRequest.zone)
}
#endif
void ListClustersRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersRequest.zone)
}
void ListClustersRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersRequest.zone)
}
::std::string* ListClustersRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListClustersRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListClustersRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListClustersRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListClustersRequest.zone)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListClustersResponse::kClustersFieldNumber;
const int ListClustersResponse::kMissingZonesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListClustersResponse::ListClustersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.ListClustersResponse)
}
ListClustersResponse::ListClustersResponse(const ListClustersResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      clusters_(from.clusters_),
      missing_zones_(from.missing_zones_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.container.v1.ListClustersResponse)
}

void ListClustersResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListClustersResponse::~ListClustersResponse() {
  // @@protoc_insertion_point(destructor:google.container.v1.ListClustersResponse)
  SharedDtor();
}

void ListClustersResponse::SharedDtor() {
}

void ListClustersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListClustersResponse::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListClustersResponse& ListClustersResponse::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListClustersResponse* ListClustersResponse::New(::google::protobuf::Arena* arena) const {
  ListClustersResponse* n = new ListClustersResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListClustersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.ListClustersResponse)
  clusters_.Clear();
  missing_zones_.Clear();
}

bool ListClustersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.ListClustersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.container.v1.Cluster clusters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string missing_zones = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_missing_zones()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->missing_zones(this->missing_zones_size() - 1).data(),
            this->missing_zones(this->missing_zones_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ListClustersResponse.missing_zones"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.ListClustersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.ListClustersResponse)
  return false;
#undef DO_
}

void ListClustersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.ListClustersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.container.v1.Cluster clusters = 1;
  for (unsigned int i = 0, n = this->clusters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clusters(i), output);
  }

  // repeated string missing_zones = 2;
  for (int i = 0, n = this->missing_zones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->missing_zones(i).data(), this->missing_zones(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListClustersResponse.missing_zones");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->missing_zones(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.ListClustersResponse)
}

::google::protobuf::uint8* ListClustersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.ListClustersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.container.v1.Cluster clusters = 1;
  for (unsigned int i = 0, n = this->clusters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->clusters(i), deterministic, target);
  }

  // repeated string missing_zones = 2;
  for (int i = 0, n = this->missing_zones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->missing_zones(i).data(), this->missing_zones(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListClustersResponse.missing_zones");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->missing_zones(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.ListClustersResponse)
  return target;
}

size_t ListClustersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.ListClustersResponse)
  size_t total_size = 0;

  // repeated .google.container.v1.Cluster clusters = 1;
  {
    unsigned int count = this->clusters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clusters(i));
    }
  }

  // repeated string missing_zones = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->missing_zones_size());
  for (int i = 0, n = this->missing_zones_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->missing_zones(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListClustersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.ListClustersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListClustersResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListClustersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.ListClustersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.ListClustersResponse)
    MergeFrom(*source);
  }
}

void ListClustersResponse::MergeFrom(const ListClustersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.ListClustersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clusters_.MergeFrom(from.clusters_);
  missing_zones_.MergeFrom(from.missing_zones_);
}

void ListClustersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.ListClustersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListClustersResponse::CopyFrom(const ListClustersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.ListClustersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListClustersResponse::IsInitialized() const {
  return true;
}

void ListClustersResponse::Swap(ListClustersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListClustersResponse::InternalSwap(ListClustersResponse* other) {
  clusters_.InternalSwap(&other->clusters_);
  missing_zones_.InternalSwap(&other->missing_zones_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListClustersResponse::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListClustersResponse

// repeated .google.container.v1.Cluster clusters = 1;
int ListClustersResponse::clusters_size() const {
  return clusters_.size();
}
void ListClustersResponse::clear_clusters() {
  clusters_.Clear();
}
const ::google::container::v1::Cluster& ListClustersResponse::clusters(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersResponse.clusters)
  return clusters_.Get(index);
}
::google::container::v1::Cluster* ListClustersResponse::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersResponse.clusters)
  return clusters_.Mutable(index);
}
::google::container::v1::Cluster* ListClustersResponse::add_clusters() {
  // @@protoc_insertion_point(field_add:google.container.v1.ListClustersResponse.clusters)
  return clusters_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >*
ListClustersResponse::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListClustersResponse.clusters)
  return &clusters_;
}
const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >&
ListClustersResponse::clusters() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListClustersResponse.clusters)
  return clusters_;
}

// repeated string missing_zones = 2;
int ListClustersResponse::missing_zones_size() const {
  return missing_zones_.size();
}
void ListClustersResponse::clear_missing_zones() {
  missing_zones_.Clear();
}
const ::std::string& ListClustersResponse::missing_zones(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_.Get(index);
}
::std::string* ListClustersResponse::mutable_missing_zones(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_.Mutable(index);
}
void ListClustersResponse::set_missing_zones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ListClustersResponse::set_missing_zones(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(std::move(value));
}
#endif
void ListClustersResponse::set_missing_zones(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  missing_zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersResponse.missing_zones)
}
void ListClustersResponse::set_missing_zones(int index, const char* value, size_t size) {
  missing_zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersResponse.missing_zones)
}
::std::string* ListClustersResponse::add_missing_zones() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_.Add();
}
void ListClustersResponse::add_missing_zones(const ::std::string& value) {
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ListClustersResponse.missing_zones)
}
#if LANG_CXX11
void ListClustersResponse::add_missing_zones(::std::string&& value) {
  missing_zones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ListClustersResponse.missing_zones)
}
#endif
void ListClustersResponse::add_missing_zones(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ListClustersResponse.missing_zones)
}
void ListClustersResponse::add_missing_zones(const char* value, size_t size) {
  missing_zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ListClustersResponse.missing_zones)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListClustersResponse::missing_zones() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ListClustersResponse::mutable_missing_zones() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListClustersResponse.missing_zones)
  return &missing_zones_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOperationRequest::kProjectIdFieldNumber;
const int GetOperationRequest::kZoneFieldNumber;
const int GetOperationRequest::kOperationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOperationRequest::GetOperationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.GetOperationRequest)
}
GetOperationRequest::GetOperationRequest(const GetOperationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operation_id().size() > 0) {
    operation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.GetOperationRequest)
}

void GetOperationRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetOperationRequest::~GetOperationRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.GetOperationRequest)
  SharedDtor();
}

void GetOperationRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetOperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOperationRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetOperationRequest& GetOperationRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetOperationRequest* GetOperationRequest::New(::google::protobuf::Arena* arena) const {
  GetOperationRequest* n = new GetOperationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.GetOperationRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetOperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.GetOperationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.GetOperationRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.GetOperationRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operation_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operation_id().data(), this->operation_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.GetOperationRequest.operation_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.GetOperationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.GetOperationRequest)
  return false;
#undef DO_
}

void GetOperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.GetOperationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetOperationRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetOperationRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string operation_id = 3;
  if (this->operation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation_id().data(), this->operation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetOperationRequest.operation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->operation_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.GetOperationRequest)
}

::google::protobuf::uint8* GetOperationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.GetOperationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetOperationRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetOperationRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string operation_id = 3;
  if (this->operation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation_id().data(), this->operation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetOperationRequest.operation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->operation_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.GetOperationRequest)
  return target;
}

size_t GetOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.GetOperationRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string operation_id = 3;
  if (this->operation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOperationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.GetOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOperationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetOperationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.GetOperationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.GetOperationRequest)
    MergeFrom(*source);
  }
}

void GetOperationRequest::MergeFrom(const GetOperationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.GetOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.operation_id().size() > 0) {

    operation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_id_);
  }
}

void GetOperationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.GetOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOperationRequest::CopyFrom(const GetOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.GetOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOperationRequest::IsInitialized() const {
  return true;
}

void GetOperationRequest::Swap(GetOperationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOperationRequest::InternalSwap(GetOperationRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  operation_id_.Swap(&other->operation_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetOperationRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetOperationRequest

// string project_id = 1;
void GetOperationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetOperationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.project_id)
  return project_id_.GetNoArena();
}
void GetOperationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.project_id)
}
#if LANG_CXX11
void GetOperationRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOperationRequest.project_id)
}
#endif
void GetOperationRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.project_id)
}
void GetOperationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.project_id)
}
::std::string* GetOperationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetOperationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetOperationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.project_id)
}

// string zone = 2;
void GetOperationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetOperationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.zone)
  return zone_.GetNoArena();
}
void GetOperationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.zone)
}
#if LANG_CXX11
void GetOperationRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOperationRequest.zone)
}
#endif
void GetOperationRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.zone)
}
void GetOperationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.zone)
}
::std::string* GetOperationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetOperationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetOperationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.zone)
}

// string operation_id = 3;
void GetOperationRequest::clear_operation_id() {
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetOperationRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.operation_id)
  return operation_id_.GetNoArena();
}
void GetOperationRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.operation_id)
}
#if LANG_CXX11
void GetOperationRequest::set_operation_id(::std::string&& value) {
  
  operation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOperationRequest.operation_id)
}
#endif
void GetOperationRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.operation_id)
}
void GetOperationRequest::set_operation_id(const char* value, size_t size) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.operation_id)
}
::std::string* GetOperationRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.operation_id)
  return operation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetOperationRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.operation_id)
  
  return operation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetOperationRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.operation_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListOperationsRequest::kProjectIdFieldNumber;
const int ListOperationsRequest::kZoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListOperationsRequest::ListOperationsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.ListOperationsRequest)
}
ListOperationsRequest::ListOperationsRequest(const ListOperationsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.ListOperationsRequest)
}

void ListOperationsRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListOperationsRequest::~ListOperationsRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.ListOperationsRequest)
  SharedDtor();
}

void ListOperationsRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListOperationsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListOperationsRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListOperationsRequest& ListOperationsRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListOperationsRequest* ListOperationsRequest::New(::google::protobuf::Arena* arena) const {
  ListOperationsRequest* n = new ListOperationsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListOperationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.ListOperationsRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListOperationsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.ListOperationsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ListOperationsRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ListOperationsRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.ListOperationsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.ListOperationsRequest)
  return false;
#undef DO_
}

void ListOperationsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.ListOperationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListOperationsRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListOperationsRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.ListOperationsRequest)
}

::google::protobuf::uint8* ListOperationsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.ListOperationsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListOperationsRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListOperationsRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.ListOperationsRequest)
  return target;
}

size_t ListOperationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.ListOperationsRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListOperationsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.ListOperationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOperationsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListOperationsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.ListOperationsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.ListOperationsRequest)
    MergeFrom(*source);
  }
}

void ListOperationsRequest::MergeFrom(const ListOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.ListOperationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
}

void ListOperationsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.ListOperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOperationsRequest::CopyFrom(const ListOperationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.ListOperationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOperationsRequest::IsInitialized() const {
  return true;
}

void ListOperationsRequest::Swap(ListOperationsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListOperationsRequest::InternalSwap(ListOperationsRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListOperationsRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListOperationsRequest

// string project_id = 1;
void ListOperationsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListOperationsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsRequest.project_id)
  return project_id_.GetNoArena();
}
void ListOperationsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsRequest.project_id)
}
#if LANG_CXX11
void ListOperationsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListOperationsRequest.project_id)
}
#endif
void ListOperationsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsRequest.project_id)
}
void ListOperationsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsRequest.project_id)
}
::std::string* ListOperationsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListOperationsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListOperationsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListOperationsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListOperationsRequest.project_id)
}

// string zone = 2;
void ListOperationsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListOperationsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsRequest.zone)
  return zone_.GetNoArena();
}
void ListOperationsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsRequest.zone)
}
#if LANG_CXX11
void ListOperationsRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListOperationsRequest.zone)
}
#endif
void ListOperationsRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsRequest.zone)
}
void ListOperationsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsRequest.zone)
}
::std::string* ListOperationsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListOperationsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListOperationsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListOperationsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListOperationsRequest.zone)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelOperationRequest::kProjectIdFieldNumber;
const int CancelOperationRequest::kZoneFieldNumber;
const int CancelOperationRequest::kOperationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelOperationRequest::CancelOperationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.CancelOperationRequest)
}
CancelOperationRequest::CancelOperationRequest(const CancelOperationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operation_id().size() > 0) {
    operation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.CancelOperationRequest)
}

void CancelOperationRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CancelOperationRequest::~CancelOperationRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.CancelOperationRequest)
  SharedDtor();
}

void CancelOperationRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CancelOperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelOperationRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CancelOperationRequest& CancelOperationRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

CancelOperationRequest* CancelOperationRequest::New(::google::protobuf::Arena* arena) const {
  CancelOperationRequest* n = new CancelOperationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CancelOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.CancelOperationRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CancelOperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.CancelOperationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.CancelOperationRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.CancelOperationRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operation_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operation_id().data(), this->operation_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.CancelOperationRequest.operation_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.CancelOperationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.CancelOperationRequest)
  return false;
#undef DO_
}

void CancelOperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.CancelOperationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CancelOperationRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CancelOperationRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string operation_id = 3;
  if (this->operation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation_id().data(), this->operation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CancelOperationRequest.operation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->operation_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.CancelOperationRequest)
}

::google::protobuf::uint8* CancelOperationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.CancelOperationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CancelOperationRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CancelOperationRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string operation_id = 3;
  if (this->operation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation_id().data(), this->operation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CancelOperationRequest.operation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->operation_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.CancelOperationRequest)
  return target;
}

size_t CancelOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.CancelOperationRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string operation_id = 3;
  if (this->operation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelOperationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.CancelOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOperationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CancelOperationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.CancelOperationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.CancelOperationRequest)
    MergeFrom(*source);
  }
}

void CancelOperationRequest::MergeFrom(const CancelOperationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.CancelOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.operation_id().size() > 0) {

    operation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_id_);
  }
}

void CancelOperationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.CancelOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOperationRequest::CopyFrom(const CancelOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.CancelOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOperationRequest::IsInitialized() const {
  return true;
}

void CancelOperationRequest::Swap(CancelOperationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelOperationRequest::InternalSwap(CancelOperationRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  operation_id_.Swap(&other->operation_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CancelOperationRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CancelOperationRequest

// string project_id = 1;
void CancelOperationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CancelOperationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CancelOperationRequest.project_id)
  return project_id_.GetNoArena();
}
void CancelOperationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CancelOperationRequest.project_id)
}
#if LANG_CXX11
void CancelOperationRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CancelOperationRequest.project_id)
}
#endif
void CancelOperationRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CancelOperationRequest.project_id)
}
void CancelOperationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CancelOperationRequest.project_id)
}
::std::string* CancelOperationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CancelOperationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CancelOperationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CancelOperationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CancelOperationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CancelOperationRequest.project_id)
}

// string zone = 2;
void CancelOperationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CancelOperationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CancelOperationRequest.zone)
  return zone_.GetNoArena();
}
void CancelOperationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CancelOperationRequest.zone)
}
#if LANG_CXX11
void CancelOperationRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CancelOperationRequest.zone)
}
#endif
void CancelOperationRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CancelOperationRequest.zone)
}
void CancelOperationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CancelOperationRequest.zone)
}
::std::string* CancelOperationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CancelOperationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CancelOperationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CancelOperationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CancelOperationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CancelOperationRequest.zone)
}

// string operation_id = 3;
void CancelOperationRequest::clear_operation_id() {
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CancelOperationRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CancelOperationRequest.operation_id)
  return operation_id_.GetNoArena();
}
void CancelOperationRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CancelOperationRequest.operation_id)
}
#if LANG_CXX11
void CancelOperationRequest::set_operation_id(::std::string&& value) {
  
  operation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CancelOperationRequest.operation_id)
}
#endif
void CancelOperationRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CancelOperationRequest.operation_id)
}
void CancelOperationRequest::set_operation_id(const char* value, size_t size) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CancelOperationRequest.operation_id)
}
::std::string* CancelOperationRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CancelOperationRequest.operation_id)
  return operation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CancelOperationRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CancelOperationRequest.operation_id)
  
  return operation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CancelOperationRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CancelOperationRequest.operation_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListOperationsResponse::kOperationsFieldNumber;
const int ListOperationsResponse::kMissingZonesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListOperationsResponse::ListOperationsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.ListOperationsResponse)
}
ListOperationsResponse::ListOperationsResponse(const ListOperationsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      operations_(from.operations_),
      missing_zones_(from.missing_zones_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.container.v1.ListOperationsResponse)
}

void ListOperationsResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListOperationsResponse::~ListOperationsResponse() {
  // @@protoc_insertion_point(destructor:google.container.v1.ListOperationsResponse)
  SharedDtor();
}

void ListOperationsResponse::SharedDtor() {
}

void ListOperationsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListOperationsResponse::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListOperationsResponse& ListOperationsResponse::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListOperationsResponse* ListOperationsResponse::New(::google::protobuf::Arena* arena) const {
  ListOperationsResponse* n = new ListOperationsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListOperationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.ListOperationsResponse)
  operations_.Clear();
  missing_zones_.Clear();
}

bool ListOperationsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.ListOperationsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.container.v1.Operation operations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string missing_zones = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_missing_zones()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->missing_zones(this->missing_zones_size() - 1).data(),
            this->missing_zones(this->missing_zones_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ListOperationsResponse.missing_zones"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.ListOperationsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.ListOperationsResponse)
  return false;
#undef DO_
}

void ListOperationsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.ListOperationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.container.v1.Operation operations = 1;
  for (unsigned int i = 0, n = this->operations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operations(i), output);
  }

  // repeated string missing_zones = 2;
  for (int i = 0, n = this->missing_zones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->missing_zones(i).data(), this->missing_zones(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListOperationsResponse.missing_zones");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->missing_zones(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.ListOperationsResponse)
}

::google::protobuf::uint8* ListOperationsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.ListOperationsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.container.v1.Operation operations = 1;
  for (unsigned int i = 0, n = this->operations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->operations(i), deterministic, target);
  }

  // repeated string missing_zones = 2;
  for (int i = 0, n = this->missing_zones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->missing_zones(i).data(), this->missing_zones(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListOperationsResponse.missing_zones");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->missing_zones(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.ListOperationsResponse)
  return target;
}

size_t ListOperationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.ListOperationsResponse)
  size_t total_size = 0;

  // repeated .google.container.v1.Operation operations = 1;
  {
    unsigned int count = this->operations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operations(i));
    }
  }

  // repeated string missing_zones = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->missing_zones_size());
  for (int i = 0, n = this->missing_zones_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->missing_zones(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListOperationsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.ListOperationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOperationsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListOperationsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.ListOperationsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.ListOperationsResponse)
    MergeFrom(*source);
  }
}

void ListOperationsResponse::MergeFrom(const ListOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.ListOperationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  missing_zones_.MergeFrom(from.missing_zones_);
}

void ListOperationsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.ListOperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOperationsResponse::CopyFrom(const ListOperationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.ListOperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOperationsResponse::IsInitialized() const {
  return true;
}

void ListOperationsResponse::Swap(ListOperationsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListOperationsResponse::InternalSwap(ListOperationsResponse* other) {
  operations_.InternalSwap(&other->operations_);
  missing_zones_.InternalSwap(&other->missing_zones_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListOperationsResponse::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListOperationsResponse

// repeated .google.container.v1.Operation operations = 1;
int ListOperationsResponse::operations_size() const {
  return operations_.size();
}
void ListOperationsResponse::clear_operations() {
  operations_.Clear();
}
const ::google::container::v1::Operation& ListOperationsResponse::operations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsResponse.operations)
  return operations_.Get(index);
}
::google::container::v1::Operation* ListOperationsResponse::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsResponse.operations)
  return operations_.Mutable(index);
}
::google::container::v1::Operation* ListOperationsResponse::add_operations() {
  // @@protoc_insertion_point(field_add:google.container.v1.ListOperationsResponse.operations)
  return operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >*
ListOperationsResponse::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListOperationsResponse.operations)
  return &operations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >&
ListOperationsResponse::operations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListOperationsResponse.operations)
  return operations_;
}

// repeated string missing_zones = 2;
int ListOperationsResponse::missing_zones_size() const {
  return missing_zones_.size();
}
void ListOperationsResponse::clear_missing_zones() {
  missing_zones_.Clear();
}
const ::std::string& ListOperationsResponse::missing_zones(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_.Get(index);
}
::std::string* ListOperationsResponse::mutable_missing_zones(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_.Mutable(index);
}
void ListOperationsResponse::set_missing_zones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ListOperationsResponse::set_missing_zones(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(std::move(value));
}
#endif
void ListOperationsResponse::set_missing_zones(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  missing_zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsResponse.missing_zones)
}
void ListOperationsResponse::set_missing_zones(int index, const char* value, size_t size) {
  missing_zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsResponse.missing_zones)
}
::std::string* ListOperationsResponse::add_missing_zones() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_.Add();
}
void ListOperationsResponse::add_missing_zones(const ::std::string& value) {
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ListOperationsResponse.missing_zones)
}
#if LANG_CXX11
void ListOperationsResponse::add_missing_zones(::std::string&& value) {
  missing_zones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ListOperationsResponse.missing_zones)
}
#endif
void ListOperationsResponse::add_missing_zones(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ListOperationsResponse.missing_zones)
}
void ListOperationsResponse::add_missing_zones(const char* value, size_t size) {
  missing_zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ListOperationsResponse.missing_zones)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListOperationsResponse::missing_zones() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ListOperationsResponse::mutable_missing_zones() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListOperationsResponse.missing_zones)
  return &missing_zones_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServerConfigRequest::kProjectIdFieldNumber;
const int GetServerConfigRequest::kZoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServerConfigRequest::GetServerConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.GetServerConfigRequest)
}
GetServerConfigRequest::GetServerConfigRequest(const GetServerConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.GetServerConfigRequest)
}

void GetServerConfigRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetServerConfigRequest::~GetServerConfigRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.GetServerConfigRequest)
  SharedDtor();
}

void GetServerConfigRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetServerConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerConfigRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServerConfigRequest& GetServerConfigRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetServerConfigRequest* GetServerConfigRequest::New(::google::protobuf::Arena* arena) const {
  GetServerConfigRequest* n = new GetServerConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetServerConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.GetServerConfigRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetServerConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.GetServerConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.GetServerConfigRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.GetServerConfigRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.GetServerConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.GetServerConfigRequest)
  return false;
#undef DO_
}

void GetServerConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.GetServerConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetServerConfigRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetServerConfigRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.GetServerConfigRequest)
}

::google::protobuf::uint8* GetServerConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.GetServerConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetServerConfigRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetServerConfigRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.GetServerConfigRequest)
  return target;
}

size_t GetServerConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.GetServerConfigRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.GetServerConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServerConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.GetServerConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.GetServerConfigRequest)
    MergeFrom(*source);
  }
}

void GetServerConfigRequest::MergeFrom(const GetServerConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.GetServerConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
}

void GetServerConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.GetServerConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerConfigRequest::CopyFrom(const GetServerConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.GetServerConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerConfigRequest::IsInitialized() const {
  return true;
}

void GetServerConfigRequest::Swap(GetServerConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServerConfigRequest::InternalSwap(GetServerConfigRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetServerConfigRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetServerConfigRequest

// string project_id = 1;
void GetServerConfigRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetServerConfigRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetServerConfigRequest.project_id)
  return project_id_.GetNoArena();
}
void GetServerConfigRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetServerConfigRequest.project_id)
}
#if LANG_CXX11
void GetServerConfigRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetServerConfigRequest.project_id)
}
#endif
void GetServerConfigRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetServerConfigRequest.project_id)
}
void GetServerConfigRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetServerConfigRequest.project_id)
}
::std::string* GetServerConfigRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetServerConfigRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetServerConfigRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetServerConfigRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetServerConfigRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetServerConfigRequest.project_id)
}

// string zone = 2;
void GetServerConfigRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetServerConfigRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetServerConfigRequest.zone)
  return zone_.GetNoArena();
}
void GetServerConfigRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetServerConfigRequest.zone)
}
#if LANG_CXX11
void GetServerConfigRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetServerConfigRequest.zone)
}
#endif
void GetServerConfigRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetServerConfigRequest.zone)
}
void GetServerConfigRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetServerConfigRequest.zone)
}
::std::string* GetServerConfigRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetServerConfigRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetServerConfigRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetServerConfigRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetServerConfigRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetServerConfigRequest.zone)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerConfig::kDefaultClusterVersionFieldNumber;
const int ServerConfig::kValidNodeVersionsFieldNumber;
const int ServerConfig::kDefaultImageTypeFieldNumber;
const int ServerConfig::kValidImageTypesFieldNumber;
const int ServerConfig::kValidMasterVersionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerConfig::ServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.ServerConfig)
}
ServerConfig::ServerConfig(const ServerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      valid_node_versions_(from.valid_node_versions_),
      valid_image_types_(from.valid_image_types_),
      valid_master_versions_(from.valid_master_versions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  default_cluster_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.default_cluster_version().size() > 0) {
    default_cluster_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_cluster_version_);
  }
  default_image_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.default_image_type().size() > 0) {
    default_image_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_image_type_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.ServerConfig)
}

void ServerConfig::SharedCtor() {
  default_cluster_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_image_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:google.container.v1.ServerConfig)
  SharedDtor();
}

void ServerConfig::SharedDtor() {
  default_cluster_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_image_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfig::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerConfig& ServerConfig::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerConfig* ServerConfig::New(::google::protobuf::Arena* arena) const {
  ServerConfig* n = new ServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.ServerConfig)
  valid_node_versions_.Clear();
  valid_image_types_.Clear();
  valid_master_versions_.Clear();
  default_cluster_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.ServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string default_cluster_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_cluster_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->default_cluster_version().data(), this->default_cluster_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ServerConfig.default_cluster_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string valid_node_versions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_valid_node_versions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->valid_node_versions(this->valid_node_versions_size() - 1).data(),
            this->valid_node_versions(this->valid_node_versions_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ServerConfig.valid_node_versions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string default_image_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_image_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->default_image_type().data(), this->default_image_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ServerConfig.default_image_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string valid_image_types = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_valid_image_types()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->valid_image_types(this->valid_image_types_size() - 1).data(),
            this->valid_image_types(this->valid_image_types_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ServerConfig.valid_image_types"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string valid_master_versions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_valid_master_versions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->valid_master_versions(this->valid_master_versions_size() - 1).data(),
            this->valid_master_versions(this->valid_master_versions_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ServerConfig.valid_master_versions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.ServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.ServerConfig)
  return false;
#undef DO_
}

void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.ServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string default_cluster_version = 1;
  if (this->default_cluster_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_cluster_version().data(), this->default_cluster_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ServerConfig.default_cluster_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->default_cluster_version(), output);
  }

  // repeated string valid_node_versions = 3;
  for (int i = 0, n = this->valid_node_versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valid_node_versions(i).data(), this->valid_node_versions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ServerConfig.valid_node_versions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->valid_node_versions(i), output);
  }

  // string default_image_type = 4;
  if (this->default_image_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_image_type().data(), this->default_image_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ServerConfig.default_image_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->default_image_type(), output);
  }

  // repeated string valid_image_types = 5;
  for (int i = 0, n = this->valid_image_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valid_image_types(i).data(), this->valid_image_types(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ServerConfig.valid_image_types");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->valid_image_types(i), output);
  }

  // repeated string valid_master_versions = 6;
  for (int i = 0, n = this->valid_master_versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valid_master_versions(i).data(), this->valid_master_versions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ServerConfig.valid_master_versions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->valid_master_versions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.ServerConfig)
}

::google::protobuf::uint8* ServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.ServerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string default_cluster_version = 1;
  if (this->default_cluster_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_cluster_version().data(), this->default_cluster_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ServerConfig.default_cluster_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->default_cluster_version(), target);
  }

  // repeated string valid_node_versions = 3;
  for (int i = 0, n = this->valid_node_versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valid_node_versions(i).data(), this->valid_node_versions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ServerConfig.valid_node_versions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->valid_node_versions(i), target);
  }

  // string default_image_type = 4;
  if (this->default_image_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->default_image_type().data(), this->default_image_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ServerConfig.default_image_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->default_image_type(), target);
  }

  // repeated string valid_image_types = 5;
  for (int i = 0, n = this->valid_image_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valid_image_types(i).data(), this->valid_image_types(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ServerConfig.valid_image_types");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->valid_image_types(i), target);
  }

  // repeated string valid_master_versions = 6;
  for (int i = 0, n = this->valid_master_versions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valid_master_versions(i).data(), this->valid_master_versions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ServerConfig.valid_master_versions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->valid_master_versions(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.ServerConfig)
  return target;
}

size_t ServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.ServerConfig)
  size_t total_size = 0;

  // repeated string valid_node_versions = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->valid_node_versions_size());
  for (int i = 0, n = this->valid_node_versions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->valid_node_versions(i));
  }

  // repeated string valid_image_types = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->valid_image_types_size());
  for (int i = 0, n = this->valid_image_types_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->valid_image_types(i));
  }

  // repeated string valid_master_versions = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->valid_master_versions_size());
  for (int i = 0, n = this->valid_master_versions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->valid_master_versions(i));
  }

  // string default_cluster_version = 1;
  if (this->default_cluster_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->default_cluster_version());
  }

  // string default_image_type = 4;
  if (this->default_image_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->default_image_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.ServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.ServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.ServerConfig)
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.ServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  valid_node_versions_.MergeFrom(from.valid_node_versions_);
  valid_image_types_.MergeFrom(from.valid_image_types_);
  valid_master_versions_.MergeFrom(from.valid_master_versions_);
  if (from.default_cluster_version().size() > 0) {

    default_cluster_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_cluster_version_);
  }
  if (from.default_image_type().size() > 0) {

    default_image_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_image_type_);
  }
}

void ServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {
  return true;
}

void ServerConfig::Swap(ServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerConfig::InternalSwap(ServerConfig* other) {
  valid_node_versions_.InternalSwap(&other->valid_node_versions_);
  valid_image_types_.InternalSwap(&other->valid_image_types_);
  valid_master_versions_.InternalSwap(&other->valid_master_versions_);
  default_cluster_version_.Swap(&other->default_cluster_version_);
  default_image_type_.Swap(&other->default_image_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerConfig

// string default_cluster_version = 1;
void ServerConfig::clear_default_cluster_version() {
  default_cluster_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerConfig::default_cluster_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.default_cluster_version)
  return default_cluster_version_.GetNoArena();
}
void ServerConfig::set_default_cluster_version(const ::std::string& value) {
  
  default_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.default_cluster_version)
}
#if LANG_CXX11
void ServerConfig::set_default_cluster_version(::std::string&& value) {
  
  default_cluster_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ServerConfig.default_cluster_version)
}
#endif
void ServerConfig::set_default_cluster_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.default_cluster_version)
}
void ServerConfig::set_default_cluster_version(const char* value, size_t size) {
  
  default_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.default_cluster_version)
}
::std::string* ServerConfig::mutable_default_cluster_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.default_cluster_version)
  return default_cluster_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerConfig::release_default_cluster_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ServerConfig.default_cluster_version)
  
  return default_cluster_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerConfig::set_allocated_default_cluster_version(::std::string* default_cluster_version) {
  if (default_cluster_version != NULL) {
    
  } else {
    
  }
  default_cluster_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_cluster_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ServerConfig.default_cluster_version)
}

// repeated string valid_node_versions = 3;
int ServerConfig::valid_node_versions_size() const {
  return valid_node_versions_.size();
}
void ServerConfig::clear_valid_node_versions() {
  valid_node_versions_.Clear();
}
const ::std::string& ServerConfig::valid_node_versions(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_.Get(index);
}
::std::string* ServerConfig::mutable_valid_node_versions(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_.Mutable(index);
}
void ServerConfig::set_valid_node_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_node_versions)
  valid_node_versions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ServerConfig::set_valid_node_versions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_node_versions)
  valid_node_versions_.Mutable(index)->assign(std::move(value));
}
#endif
void ServerConfig::set_valid_node_versions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valid_node_versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.valid_node_versions)
}
void ServerConfig::set_valid_node_versions(int index, const char* value, size_t size) {
  valid_node_versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.valid_node_versions)
}
::std::string* ServerConfig::add_valid_node_versions() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_.Add();
}
void ServerConfig::add_valid_node_versions(const ::std::string& value) {
  valid_node_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_node_versions)
}
#if LANG_CXX11
void ServerConfig::add_valid_node_versions(::std::string&& value) {
  valid_node_versions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_node_versions)
}
#endif
void ServerConfig::add_valid_node_versions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valid_node_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ServerConfig.valid_node_versions)
}
void ServerConfig::add_valid_node_versions(const char* value, size_t size) {
  valid_node_versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ServerConfig.valid_node_versions)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerConfig::valid_node_versions() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ServerConfig::mutable_valid_node_versions() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ServerConfig.valid_node_versions)
  return &valid_node_versions_;
}

// string default_image_type = 4;
void ServerConfig::clear_default_image_type() {
  default_image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerConfig::default_image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.default_image_type)
  return default_image_type_.GetNoArena();
}
void ServerConfig::set_default_image_type(const ::std::string& value) {
  
  default_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.default_image_type)
}
#if LANG_CXX11
void ServerConfig::set_default_image_type(::std::string&& value) {
  
  default_image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ServerConfig.default_image_type)
}
#endif
void ServerConfig::set_default_image_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.default_image_type)
}
void ServerConfig::set_default_image_type(const char* value, size_t size) {
  
  default_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.default_image_type)
}
::std::string* ServerConfig::mutable_default_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.default_image_type)
  return default_image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerConfig::release_default_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.ServerConfig.default_image_type)
  
  return default_image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerConfig::set_allocated_default_image_type(::std::string* default_image_type) {
  if (default_image_type != NULL) {
    
  } else {
    
  }
  default_image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ServerConfig.default_image_type)
}

// repeated string valid_image_types = 5;
int ServerConfig::valid_image_types_size() const {
  return valid_image_types_.size();
}
void ServerConfig::clear_valid_image_types() {
  valid_image_types_.Clear();
}
const ::std::string& ServerConfig::valid_image_types(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.valid_image_types)
  return valid_image_types_.Get(index);
}
::std::string* ServerConfig::mutable_valid_image_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.valid_image_types)
  return valid_image_types_.Mutable(index);
}
void ServerConfig::set_valid_image_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_image_types)
  valid_image_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ServerConfig::set_valid_image_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_image_types)
  valid_image_types_.Mutable(index)->assign(std::move(value));
}
#endif
void ServerConfig::set_valid_image_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valid_image_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.valid_image_types)
}
void ServerConfig::set_valid_image_types(int index, const char* value, size_t size) {
  valid_image_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.valid_image_types)
}
::std::string* ServerConfig::add_valid_image_types() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ServerConfig.valid_image_types)
  return valid_image_types_.Add();
}
void ServerConfig::add_valid_image_types(const ::std::string& value) {
  valid_image_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_image_types)
}
#if LANG_CXX11
void ServerConfig::add_valid_image_types(::std::string&& value) {
  valid_image_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_image_types)
}
#endif
void ServerConfig::add_valid_image_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valid_image_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ServerConfig.valid_image_types)
}
void ServerConfig::add_valid_image_types(const char* value, size_t size) {
  valid_image_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ServerConfig.valid_image_types)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerConfig::valid_image_types() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ServerConfig.valid_image_types)
  return valid_image_types_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ServerConfig::mutable_valid_image_types() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ServerConfig.valid_image_types)
  return &valid_image_types_;
}

// repeated string valid_master_versions = 6;
int ServerConfig::valid_master_versions_size() const {
  return valid_master_versions_.size();
}
void ServerConfig::clear_valid_master_versions() {
  valid_master_versions_.Clear();
}
const ::std::string& ServerConfig::valid_master_versions(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.valid_master_versions)
  return valid_master_versions_.Get(index);
}
::std::string* ServerConfig::mutable_valid_master_versions(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.valid_master_versions)
  return valid_master_versions_.Mutable(index);
}
void ServerConfig::set_valid_master_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_master_versions)
  valid_master_versions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ServerConfig::set_valid_master_versions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_master_versions)
  valid_master_versions_.Mutable(index)->assign(std::move(value));
}
#endif
void ServerConfig::set_valid_master_versions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valid_master_versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.valid_master_versions)
}
void ServerConfig::set_valid_master_versions(int index, const char* value, size_t size) {
  valid_master_versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.valid_master_versions)
}
::std::string* ServerConfig::add_valid_master_versions() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ServerConfig.valid_master_versions)
  return valid_master_versions_.Add();
}
void ServerConfig::add_valid_master_versions(const ::std::string& value) {
  valid_master_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_master_versions)
}
#if LANG_CXX11
void ServerConfig::add_valid_master_versions(::std::string&& value) {
  valid_master_versions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_master_versions)
}
#endif
void ServerConfig::add_valid_master_versions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valid_master_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ServerConfig.valid_master_versions)
}
void ServerConfig::add_valid_master_versions(const char* value, size_t size) {
  valid_master_versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ServerConfig.valid_master_versions)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerConfig::valid_master_versions() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ServerConfig.valid_master_versions)
  return valid_master_versions_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ServerConfig::mutable_valid_master_versions() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ServerConfig.valid_master_versions)
  return &valid_master_versions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateNodePoolRequest::kProjectIdFieldNumber;
const int CreateNodePoolRequest::kZoneFieldNumber;
const int CreateNodePoolRequest::kClusterIdFieldNumber;
const int CreateNodePoolRequest::kNodePoolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateNodePoolRequest::CreateNodePoolRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.CreateNodePoolRequest)
}
CreateNodePoolRequest::CreateNodePoolRequest(const CreateNodePoolRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_node_pool()) {
    node_pool_ = new ::google::container::v1::NodePool(*from.node_pool_);
  } else {
    node_pool_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.CreateNodePoolRequest)
}

void CreateNodePoolRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_ = NULL;
  _cached_size_ = 0;
}

CreateNodePoolRequest::~CreateNodePoolRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.CreateNodePoolRequest)
  SharedDtor();
}

void CreateNodePoolRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete node_pool_;
  }
}

void CreateNodePoolRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateNodePoolRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateNodePoolRequest& CreateNodePoolRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateNodePoolRequest* CreateNodePoolRequest::New(::google::protobuf::Arena* arena) const {
  CreateNodePoolRequest* n = new CreateNodePoolRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateNodePoolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.CreateNodePoolRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && node_pool_ != NULL) {
    delete node_pool_;
  }
  node_pool_ = NULL;
}

bool CreateNodePoolRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.CreateNodePoolRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.CreateNodePoolRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.CreateNodePoolRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.CreateNodePoolRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.NodePool node_pool = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_pool()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.CreateNodePoolRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.CreateNodePoolRequest)
  return false;
#undef DO_
}

void CreateNodePoolRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.CreateNodePoolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CreateNodePoolRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CreateNodePoolRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CreateNodePoolRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // .google.container.v1.NodePool node_pool = 4;
  if (this->has_node_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->node_pool_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.CreateNodePoolRequest)
}

::google::protobuf::uint8* CreateNodePoolRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.CreateNodePoolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CreateNodePoolRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CreateNodePoolRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CreateNodePoolRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // .google.container.v1.NodePool node_pool = 4;
  if (this->has_node_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->node_pool_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.CreateNodePoolRequest)
  return target;
}

size_t CreateNodePoolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.CreateNodePoolRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .google.container.v1.NodePool node_pool = 4;
  if (this->has_node_pool()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_pool_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateNodePoolRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.CreateNodePoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateNodePoolRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateNodePoolRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.CreateNodePoolRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.CreateNodePoolRequest)
    MergeFrom(*source);
  }
}

void CreateNodePoolRequest::MergeFrom(const CreateNodePoolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.CreateNodePoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_node_pool()) {
    mutable_node_pool()->::google::container::v1::NodePool::MergeFrom(from.node_pool());
  }
}

void CreateNodePoolRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.CreateNodePoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateNodePoolRequest::CopyFrom(const CreateNodePoolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.CreateNodePoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNodePoolRequest::IsInitialized() const {
  return true;
}

void CreateNodePoolRequest::Swap(CreateNodePoolRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateNodePoolRequest::InternalSwap(CreateNodePoolRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(node_pool_, other->node_pool_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateNodePoolRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateNodePoolRequest

// string project_id = 1;
void CreateNodePoolRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateNodePoolRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.project_id)
  return project_id_.GetNoArena();
}
void CreateNodePoolRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateNodePoolRequest.project_id)
}
#if LANG_CXX11
void CreateNodePoolRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateNodePoolRequest.project_id)
}
#endif
void CreateNodePoolRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateNodePoolRequest.project_id)
}
void CreateNodePoolRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateNodePoolRequest.project_id)
}
::std::string* CreateNodePoolRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateNodePoolRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateNodePoolRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.project_id)
}

// string zone = 2;
void CreateNodePoolRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateNodePoolRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.zone)
  return zone_.GetNoArena();
}
void CreateNodePoolRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateNodePoolRequest.zone)
}
#if LANG_CXX11
void CreateNodePoolRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateNodePoolRequest.zone)
}
#endif
void CreateNodePoolRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateNodePoolRequest.zone)
}
void CreateNodePoolRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateNodePoolRequest.zone)
}
::std::string* CreateNodePoolRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateNodePoolRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateNodePoolRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.zone)
}

// string cluster_id = 3;
void CreateNodePoolRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateNodePoolRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void CreateNodePoolRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateNodePoolRequest.cluster_id)
}
#if LANG_CXX11
void CreateNodePoolRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateNodePoolRequest.cluster_id)
}
#endif
void CreateNodePoolRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateNodePoolRequest.cluster_id)
}
void CreateNodePoolRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateNodePoolRequest.cluster_id)
}
::std::string* CreateNodePoolRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateNodePoolRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateNodePoolRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.cluster_id)
}

// .google.container.v1.NodePool node_pool = 4;
bool CreateNodePoolRequest::has_node_pool() const {
  return this != internal_default_instance() && node_pool_ != NULL;
}
void CreateNodePoolRequest::clear_node_pool() {
  if (GetArenaNoVirtual() == NULL && node_pool_ != NULL) delete node_pool_;
  node_pool_ = NULL;
}
const ::google::container::v1::NodePool& CreateNodePoolRequest::node_pool() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.node_pool)
  return node_pool_ != NULL ? *node_pool_
                         : *::google::container::v1::NodePool::internal_default_instance();
}
::google::container::v1::NodePool* CreateNodePoolRequest::mutable_node_pool() {
  
  if (node_pool_ == NULL) {
    node_pool_ = new ::google::container::v1::NodePool;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.node_pool)
  return node_pool_;
}
::google::container::v1::NodePool* CreateNodePoolRequest::release_node_pool() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.node_pool)
  
  ::google::container::v1::NodePool* temp = node_pool_;
  node_pool_ = NULL;
  return temp;
}
void CreateNodePoolRequest::set_allocated_node_pool(::google::container::v1::NodePool* node_pool) {
  delete node_pool_;
  node_pool_ = node_pool;
  if (node_pool) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.node_pool)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteNodePoolRequest::kProjectIdFieldNumber;
const int DeleteNodePoolRequest::kZoneFieldNumber;
const int DeleteNodePoolRequest::kClusterIdFieldNumber;
const int DeleteNodePoolRequest::kNodePoolIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteNodePoolRequest::DeleteNodePoolRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.DeleteNodePoolRequest)
}
DeleteNodePoolRequest::DeleteNodePoolRequest(const DeleteNodePoolRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_pool_id().size() > 0) {
    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.DeleteNodePoolRequest)
}

void DeleteNodePoolRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteNodePoolRequest::~DeleteNodePoolRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.DeleteNodePoolRequest)
  SharedDtor();
}

void DeleteNodePoolRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteNodePoolRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteNodePoolRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteNodePoolRequest& DeleteNodePoolRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteNodePoolRequest* DeleteNodePoolRequest::New(::google::protobuf::Arena* arena) const {
  DeleteNodePoolRequest* n = new DeleteNodePoolRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteNodePoolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.DeleteNodePoolRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteNodePoolRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.DeleteNodePoolRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.DeleteNodePoolRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.DeleteNodePoolRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.DeleteNodePoolRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_pool_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_pool_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_pool_id().data(), this->node_pool_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.DeleteNodePoolRequest.node_pool_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.DeleteNodePoolRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.DeleteNodePoolRequest)
  return false;
#undef DO_
}

void DeleteNodePoolRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.DeleteNodePoolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteNodePoolRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteNodePoolRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteNodePoolRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteNodePoolRequest.node_pool_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->node_pool_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.DeleteNodePoolRequest)
}

::google::protobuf::uint8* DeleteNodePoolRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.DeleteNodePoolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteNodePoolRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteNodePoolRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteNodePoolRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.DeleteNodePoolRequest.node_pool_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_pool_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.DeleteNodePoolRequest)
  return target;
}

size_t DeleteNodePoolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.DeleteNodePoolRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_pool_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteNodePoolRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.DeleteNodePoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteNodePoolRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteNodePoolRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.DeleteNodePoolRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.DeleteNodePoolRequest)
    MergeFrom(*source);
  }
}

void DeleteNodePoolRequest::MergeFrom(const DeleteNodePoolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.DeleteNodePoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.node_pool_id().size() > 0) {

    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
}

void DeleteNodePoolRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.DeleteNodePoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteNodePoolRequest::CopyFrom(const DeleteNodePoolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.DeleteNodePoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNodePoolRequest::IsInitialized() const {
  return true;
}

void DeleteNodePoolRequest::Swap(DeleteNodePoolRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteNodePoolRequest::InternalSwap(DeleteNodePoolRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  node_pool_id_.Swap(&other->node_pool_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteNodePoolRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteNodePoolRequest

// string project_id = 1;
void DeleteNodePoolRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteNodePoolRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.project_id)
  return project_id_.GetNoArena();
}
void DeleteNodePoolRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.project_id)
}
#if LANG_CXX11
void DeleteNodePoolRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.project_id)
}
#endif
void DeleteNodePoolRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.project_id)
}
void DeleteNodePoolRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.project_id)
}
::std::string* DeleteNodePoolRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteNodePoolRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteNodePoolRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.project_id)
}

// string zone = 2;
void DeleteNodePoolRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteNodePoolRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.zone)
  return zone_.GetNoArena();
}
void DeleteNodePoolRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.zone)
}
#if LANG_CXX11
void DeleteNodePoolRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.zone)
}
#endif
void DeleteNodePoolRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.zone)
}
void DeleteNodePoolRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.zone)
}
::std::string* DeleteNodePoolRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteNodePoolRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteNodePoolRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.zone)
}

// string cluster_id = 3;
void DeleteNodePoolRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteNodePoolRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void DeleteNodePoolRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.cluster_id)
}
#if LANG_CXX11
void DeleteNodePoolRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.cluster_id)
}
#endif
void DeleteNodePoolRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.cluster_id)
}
void DeleteNodePoolRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.cluster_id)
}
::std::string* DeleteNodePoolRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteNodePoolRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteNodePoolRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.cluster_id)
}

// string node_pool_id = 4;
void DeleteNodePoolRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteNodePoolRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
void DeleteNodePoolRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}
#if LANG_CXX11
void DeleteNodePoolRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}
#endif
void DeleteNodePoolRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}
void DeleteNodePoolRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}
::std::string* DeleteNodePoolRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteNodePoolRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteNodePoolRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListNodePoolsRequest::kProjectIdFieldNumber;
const int ListNodePoolsRequest::kZoneFieldNumber;
const int ListNodePoolsRequest::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListNodePoolsRequest::ListNodePoolsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.ListNodePoolsRequest)
}
ListNodePoolsRequest::ListNodePoolsRequest(const ListNodePoolsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.ListNodePoolsRequest)
}

void ListNodePoolsRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListNodePoolsRequest::~ListNodePoolsRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.ListNodePoolsRequest)
  SharedDtor();
}

void ListNodePoolsRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListNodePoolsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListNodePoolsRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListNodePoolsRequest& ListNodePoolsRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListNodePoolsRequest* ListNodePoolsRequest::New(::google::protobuf::Arena* arena) const {
  ListNodePoolsRequest* n = new ListNodePoolsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListNodePoolsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.ListNodePoolsRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListNodePoolsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.ListNodePoolsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ListNodePoolsRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ListNodePoolsRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.ListNodePoolsRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.ListNodePoolsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.ListNodePoolsRequest)
  return false;
#undef DO_
}

void ListNodePoolsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.ListNodePoolsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListNodePoolsRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListNodePoolsRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListNodePoolsRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.ListNodePoolsRequest)
}

::google::protobuf::uint8* ListNodePoolsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.ListNodePoolsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListNodePoolsRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListNodePoolsRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.ListNodePoolsRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.ListNodePoolsRequest)
  return target;
}

size_t ListNodePoolsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.ListNodePoolsRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListNodePoolsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.ListNodePoolsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListNodePoolsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListNodePoolsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.ListNodePoolsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.ListNodePoolsRequest)
    MergeFrom(*source);
  }
}

void ListNodePoolsRequest::MergeFrom(const ListNodePoolsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.ListNodePoolsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
}

void ListNodePoolsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.ListNodePoolsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNodePoolsRequest::CopyFrom(const ListNodePoolsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.ListNodePoolsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNodePoolsRequest::IsInitialized() const {
  return true;
}

void ListNodePoolsRequest::Swap(ListNodePoolsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListNodePoolsRequest::InternalSwap(ListNodePoolsRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListNodePoolsRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListNodePoolsRequest

// string project_id = 1;
void ListNodePoolsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListNodePoolsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsRequest.project_id)
  return project_id_.GetNoArena();
}
void ListNodePoolsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListNodePoolsRequest.project_id)
}
#if LANG_CXX11
void ListNodePoolsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListNodePoolsRequest.project_id)
}
#endif
void ListNodePoolsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListNodePoolsRequest.project_id)
}
void ListNodePoolsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListNodePoolsRequest.project_id)
}
::std::string* ListNodePoolsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListNodePoolsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListNodePoolsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListNodePoolsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListNodePoolsRequest.project_id)
}

// string zone = 2;
void ListNodePoolsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListNodePoolsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsRequest.zone)
  return zone_.GetNoArena();
}
void ListNodePoolsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListNodePoolsRequest.zone)
}
#if LANG_CXX11
void ListNodePoolsRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListNodePoolsRequest.zone)
}
#endif
void ListNodePoolsRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListNodePoolsRequest.zone)
}
void ListNodePoolsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListNodePoolsRequest.zone)
}
::std::string* ListNodePoolsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListNodePoolsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListNodePoolsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListNodePoolsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListNodePoolsRequest.zone)
}

// string cluster_id = 3;
void ListNodePoolsRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListNodePoolsRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void ListNodePoolsRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListNodePoolsRequest.cluster_id)
}
#if LANG_CXX11
void ListNodePoolsRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListNodePoolsRequest.cluster_id)
}
#endif
void ListNodePoolsRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListNodePoolsRequest.cluster_id)
}
void ListNodePoolsRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListNodePoolsRequest.cluster_id)
}
::std::string* ListNodePoolsRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListNodePoolsRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListNodePoolsRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListNodePoolsRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListNodePoolsRequest.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetNodePoolRequest::kProjectIdFieldNumber;
const int GetNodePoolRequest::kZoneFieldNumber;
const int GetNodePoolRequest::kClusterIdFieldNumber;
const int GetNodePoolRequest::kNodePoolIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetNodePoolRequest::GetNodePoolRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.GetNodePoolRequest)
}
GetNodePoolRequest::GetNodePoolRequest(const GetNodePoolRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_pool_id().size() > 0) {
    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.GetNodePoolRequest)
}

void GetNodePoolRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetNodePoolRequest::~GetNodePoolRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.GetNodePoolRequest)
  SharedDtor();
}

void GetNodePoolRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetNodePoolRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNodePoolRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetNodePoolRequest& GetNodePoolRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetNodePoolRequest* GetNodePoolRequest::New(::google::protobuf::Arena* arena) const {
  GetNodePoolRequest* n = new GetNodePoolRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetNodePoolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.GetNodePoolRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetNodePoolRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.GetNodePoolRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.GetNodePoolRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.GetNodePoolRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.GetNodePoolRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_pool_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_pool_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_pool_id().data(), this->node_pool_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.GetNodePoolRequest.node_pool_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.GetNodePoolRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.GetNodePoolRequest)
  return false;
#undef DO_
}

void GetNodePoolRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.GetNodePoolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetNodePoolRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetNodePoolRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetNodePoolRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetNodePoolRequest.node_pool_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->node_pool_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.GetNodePoolRequest)
}

::google::protobuf::uint8* GetNodePoolRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.GetNodePoolRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetNodePoolRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetNodePoolRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetNodePoolRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.GetNodePoolRequest.node_pool_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_pool_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.GetNodePoolRequest)
  return target;
}

size_t GetNodePoolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.GetNodePoolRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_pool_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNodePoolRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.GetNodePoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNodePoolRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetNodePoolRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.GetNodePoolRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.GetNodePoolRequest)
    MergeFrom(*source);
  }
}

void GetNodePoolRequest::MergeFrom(const GetNodePoolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.GetNodePoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.node_pool_id().size() > 0) {

    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
}

void GetNodePoolRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.GetNodePoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNodePoolRequest::CopyFrom(const GetNodePoolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.GetNodePoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodePoolRequest::IsInitialized() const {
  return true;
}

void GetNodePoolRequest::Swap(GetNodePoolRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetNodePoolRequest::InternalSwap(GetNodePoolRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  node_pool_id_.Swap(&other->node_pool_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetNodePoolRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetNodePoolRequest

// string project_id = 1;
void GetNodePoolRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetNodePoolRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.project_id)
  return project_id_.GetNoArena();
}
void GetNodePoolRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.project_id)
}
#if LANG_CXX11
void GetNodePoolRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.project_id)
}
#endif
void GetNodePoolRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.project_id)
}
void GetNodePoolRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.project_id)
}
::std::string* GetNodePoolRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetNodePoolRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetNodePoolRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.project_id)
}

// string zone = 2;
void GetNodePoolRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetNodePoolRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.zone)
  return zone_.GetNoArena();
}
void GetNodePoolRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.zone)
}
#if LANG_CXX11
void GetNodePoolRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.zone)
}
#endif
void GetNodePoolRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.zone)
}
void GetNodePoolRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.zone)
}
::std::string* GetNodePoolRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetNodePoolRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetNodePoolRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.zone)
}

// string cluster_id = 3;
void GetNodePoolRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetNodePoolRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void GetNodePoolRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.cluster_id)
}
#if LANG_CXX11
void GetNodePoolRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.cluster_id)
}
#endif
void GetNodePoolRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.cluster_id)
}
void GetNodePoolRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.cluster_id)
}
::std::string* GetNodePoolRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetNodePoolRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetNodePoolRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.cluster_id)
}

// string node_pool_id = 4;
void GetNodePoolRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetNodePoolRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
void GetNodePoolRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.node_pool_id)
}
#if LANG_CXX11
void GetNodePoolRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.node_pool_id)
}
#endif
void GetNodePoolRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.node_pool_id)
}
void GetNodePoolRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.node_pool_id)
}
::std::string* GetNodePoolRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetNodePoolRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetNodePoolRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.node_pool_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodePool::kNameFieldNumber;
const int NodePool::kConfigFieldNumber;
const int NodePool::kInitialNodeCountFieldNumber;
const int NodePool::kSelfLinkFieldNumber;
const int NodePool::kVersionFieldNumber;
const int NodePool::kInstanceGroupUrlsFieldNumber;
const int NodePool::kStatusFieldNumber;
const int NodePool::kStatusMessageFieldNumber;
const int NodePool::kAutoscalingFieldNumber;
const int NodePool::kManagementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodePool::NodePool()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.NodePool)
}
NodePool::NodePool(const NodePool& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      instance_group_urls_(from.instance_group_urls_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  self_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.self_link().size() > 0) {
    self_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.self_link_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  status_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status_message().size() > 0) {
    status_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_message_);
  }
  if (from.has_config()) {
    config_ = new ::google::container::v1::NodeConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_autoscaling()) {
    autoscaling_ = new ::google::container::v1::NodePoolAutoscaling(*from.autoscaling_);
  } else {
    autoscaling_ = NULL;
  }
  if (from.has_management()) {
    management_ = new ::google::container::v1::NodeManagement(*from.management_);
  } else {
    management_ = NULL;
  }
  ::memcpy(&initial_node_count_, &from.initial_node_count_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&initial_node_count_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:google.container.v1.NodePool)
}

void NodePool::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&config_) + sizeof(status_));
  _cached_size_ = 0;
}

NodePool::~NodePool() {
  // @@protoc_insertion_point(destructor:google.container.v1.NodePool)
  SharedDtor();
}

void NodePool::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete config_;
  }
  if (this != internal_default_instance()) {
    delete autoscaling_;
  }
  if (this != internal_default_instance()) {
    delete management_;
  }
}

void NodePool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodePool::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodePool& NodePool::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodePool* NodePool::New(::google::protobuf::Arena* arena) const {
  NodePool* n = new NodePool;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodePool::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.NodePool)
  instance_group_urls_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && autoscaling_ != NULL) {
    delete autoscaling_;
  }
  autoscaling_ = NULL;
  if (GetArenaNoVirtual() == NULL && management_ != NULL) {
    delete management_;
  }
  management_ = NULL;
  ::memset(&initial_node_count_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&initial_node_count_) + sizeof(status_));
}

bool NodePool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.NodePool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodePool.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.NodeConfig config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 initial_node_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_node_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.NodePoolAutoscaling autoscaling = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autoscaling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.NodeManagement management = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_management()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string self_link = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_self_link()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->self_link().data(), this->self_link().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodePool.self_link"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(810u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodePool.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string instance_group_urls = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(818u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_instance_group_urls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_group_urls(this->instance_group_urls_size() - 1).data(),
            this->instance_group_urls(this->instance_group_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodePool.instance_group_urls"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.NodePool.Status status = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(824u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::google::container::v1::NodePool_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status_message = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(834u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status_message().data(), this->status_message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.NodePool.status_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.NodePool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.NodePool)
  return false;
#undef DO_
}

void NodePool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.NodePool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodePool.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.container.v1.NodeConfig config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // int32 initial_node_count = 3;
  if (this->initial_node_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->initial_node_count(), output);
  }

  // .google.container.v1.NodePoolAutoscaling autoscaling = 4;
  if (this->has_autoscaling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->autoscaling_, output);
  }

  // .google.container.v1.NodeManagement management = 5;
  if (this->has_management()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->management_, output);
  }

  // string self_link = 100;
  if (this->self_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->self_link().data(), this->self_link().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodePool.self_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->self_link(), output);
  }

  // string version = 101;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodePool.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->version(), output);
  }

  // repeated string instance_group_urls = 102;
  for (int i = 0, n = this->instance_group_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_group_urls(i).data(), this->instance_group_urls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodePool.instance_group_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      102, this->instance_group_urls(i), output);
  }

  // .google.container.v1.NodePool.Status status = 103;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      103, this->status(), output);
  }

  // string status_message = 104;
  if (this->status_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_message().data(), this->status_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodePool.status_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      104, this->status_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.NodePool)
}

::google::protobuf::uint8* NodePool::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.NodePool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodePool.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.container.v1.NodeConfig config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, deterministic, target);
  }

  // int32 initial_node_count = 3;
  if (this->initial_node_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->initial_node_count(), target);
  }

  // .google.container.v1.NodePoolAutoscaling autoscaling = 4;
  if (this->has_autoscaling()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->autoscaling_, deterministic, target);
  }

  // .google.container.v1.NodeManagement management = 5;
  if (this->has_management()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->management_, deterministic, target);
  }

  // string self_link = 100;
  if (this->self_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->self_link().data(), this->self_link().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodePool.self_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->self_link(), target);
  }

  // string version = 101;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodePool.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->version(), target);
  }

  // repeated string instance_group_urls = 102;
  for (int i = 0, n = this->instance_group_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_group_urls(i).data(), this->instance_group_urls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodePool.instance_group_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(102, this->instance_group_urls(i), target);
  }

  // .google.container.v1.NodePool.Status status = 103;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      103, this->status(), target);
  }

  // string status_message = 104;
  if (this->status_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_message().data(), this->status_message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.NodePool.status_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        104, this->status_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.NodePool)
  return target;
}

size_t NodePool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.NodePool)
  size_t total_size = 0;

  // repeated string instance_group_urls = 102;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->instance_group_urls_size());
  for (int i = 0, n = this->instance_group_urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->instance_group_urls(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string self_link = 100;
  if (this->self_link().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->self_link());
  }

  // string version = 101;
  if (this->version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string status_message = 104;
  if (this->status_message().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status_message());
  }

  // .google.container.v1.NodeConfig config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // .google.container.v1.NodePoolAutoscaling autoscaling = 4;
  if (this->has_autoscaling()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->autoscaling_);
  }

  // .google.container.v1.NodeManagement management = 5;
  if (this->has_management()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->management_);
  }

  // int32 initial_node_count = 3;
  if (this->initial_node_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->initial_node_count());
  }

  // .google.container.v1.NodePool.Status status = 103;
  if (this->status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodePool::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.NodePool)
  GOOGLE_DCHECK_NE(&from, this);
  const NodePool* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodePool>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.NodePool)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.NodePool)
    MergeFrom(*source);
  }
}

void NodePool::MergeFrom(const NodePool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.NodePool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instance_group_urls_.MergeFrom(from.instance_group_urls_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.self_link().size() > 0) {

    self_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.self_link_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.status_message().size() > 0) {

    status_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_message_);
  }
  if (from.has_config()) {
    mutable_config()->::google::container::v1::NodeConfig::MergeFrom(from.config());
  }
  if (from.has_autoscaling()) {
    mutable_autoscaling()->::google::container::v1::NodePoolAutoscaling::MergeFrom(from.autoscaling());
  }
  if (from.has_management()) {
    mutable_management()->::google::container::v1::NodeManagement::MergeFrom(from.management());
  }
  if (from.initial_node_count() != 0) {
    set_initial_node_count(from.initial_node_count());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void NodePool::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.NodePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodePool::CopyFrom(const NodePool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.NodePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodePool::IsInitialized() const {
  return true;
}

void NodePool::Swap(NodePool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodePool::InternalSwap(NodePool* other) {
  instance_group_urls_.InternalSwap(&other->instance_group_urls_);
  name_.Swap(&other->name_);
  self_link_.Swap(&other->self_link_);
  version_.Swap(&other->version_);
  status_message_.Swap(&other->status_message_);
  std::swap(config_, other->config_);
  std::swap(autoscaling_, other->autoscaling_);
  std::swap(management_, other->management_);
  std::swap(initial_node_count_, other->initial_node_count_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodePool::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodePool

// string name = 1;
void NodePool::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodePool::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.name)
  return name_.GetNoArena();
}
void NodePool::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.name)
}
#if LANG_CXX11
void NodePool::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodePool.name)
}
#endif
void NodePool::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.name)
}
void NodePool::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.name)
}
::std::string* NodePool::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodePool::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodePool::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.name)
}

// .google.container.v1.NodeConfig config = 2;
bool NodePool::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void NodePool::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::google::container::v1::NodeConfig& NodePool::config() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.config)
  return config_ != NULL ? *config_
                         : *::google::container::v1::NodeConfig::internal_default_instance();
}
::google::container::v1::NodeConfig* NodePool::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::container::v1::NodeConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.config)
  return config_;
}
::google::container::v1::NodeConfig* NodePool::release_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.config)
  
  ::google::container::v1::NodeConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void NodePool::set_allocated_config(::google::container::v1::NodeConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.config)
}

// int32 initial_node_count = 3;
void NodePool::clear_initial_node_count() {
  initial_node_count_ = 0;
}
::google::protobuf::int32 NodePool::initial_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.initial_node_count)
  return initial_node_count_;
}
void NodePool::set_initial_node_count(::google::protobuf::int32 value) {
  
  initial_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.initial_node_count)
}

// string self_link = 100;
void NodePool::clear_self_link() {
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodePool::self_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.self_link)
  return self_link_.GetNoArena();
}
void NodePool::set_self_link(const ::std::string& value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.self_link)
}
#if LANG_CXX11
void NodePool::set_self_link(::std::string&& value) {
  
  self_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodePool.self_link)
}
#endif
void NodePool::set_self_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.self_link)
}
void NodePool::set_self_link(const char* value, size_t size) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.self_link)
}
::std::string* NodePool::mutable_self_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.self_link)
  return self_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodePool::release_self_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.self_link)
  
  return self_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodePool::set_allocated_self_link(::std::string* self_link) {
  if (self_link != NULL) {
    
  } else {
    
  }
  self_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.self_link)
}

// string version = 101;
void NodePool::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodePool::version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.version)
  return version_.GetNoArena();
}
void NodePool::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.version)
}
#if LANG_CXX11
void NodePool::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodePool.version)
}
#endif
void NodePool::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.version)
}
void NodePool::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.version)
}
::std::string* NodePool::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodePool::release_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodePool::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.version)
}

// repeated string instance_group_urls = 102;
int NodePool::instance_group_urls_size() const {
  return instance_group_urls_.size();
}
void NodePool::clear_instance_group_urls() {
  instance_group_urls_.Clear();
}
const ::std::string& NodePool::instance_group_urls(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.instance_group_urls)
  return instance_group_urls_.Get(index);
}
::std::string* NodePool::mutable_instance_group_urls(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.instance_group_urls)
  return instance_group_urls_.Mutable(index);
}
void NodePool::set_instance_group_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NodePool::set_instance_group_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(std::move(value));
}
#endif
void NodePool::set_instance_group_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instance_group_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.instance_group_urls)
}
void NodePool::set_instance_group_urls(int index, const char* value, size_t size) {
  instance_group_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.instance_group_urls)
}
::std::string* NodePool::add_instance_group_urls() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.NodePool.instance_group_urls)
  return instance_group_urls_.Add();
}
void NodePool::add_instance_group_urls(const ::std::string& value) {
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.NodePool.instance_group_urls)
}
#if LANG_CXX11
void NodePool::add_instance_group_urls(::std::string&& value) {
  instance_group_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.NodePool.instance_group_urls)
}
#endif
void NodePool::add_instance_group_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.NodePool.instance_group_urls)
}
void NodePool::add_instance_group_urls(const char* value, size_t size) {
  instance_group_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.NodePool.instance_group_urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodePool::instance_group_urls() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodePool.instance_group_urls)
  return instance_group_urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodePool::mutable_instance_group_urls() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodePool.instance_group_urls)
  return &instance_group_urls_;
}

// .google.container.v1.NodePool.Status status = 103;
void NodePool::clear_status() {
  status_ = 0;
}
::google::container::v1::NodePool_Status NodePool::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.status)
  return static_cast< ::google::container::v1::NodePool_Status >(status_);
}
void NodePool::set_status(::google::container::v1::NodePool_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.status)
}

// string status_message = 104;
void NodePool::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodePool::status_message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.status_message)
  return status_message_.GetNoArena();
}
void NodePool::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.status_message)
}
#if LANG_CXX11
void NodePool::set_status_message(::std::string&& value) {
  
  status_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodePool.status_message)
}
#endif
void NodePool::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.status_message)
}
void NodePool::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.status_message)
}
::std::string* NodePool::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodePool::release_status_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodePool::set_allocated_status_message(::std::string* status_message) {
  if (status_message != NULL) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.status_message)
}

// .google.container.v1.NodePoolAutoscaling autoscaling = 4;
bool NodePool::has_autoscaling() const {
  return this != internal_default_instance() && autoscaling_ != NULL;
}
void NodePool::clear_autoscaling() {
  if (GetArenaNoVirtual() == NULL && autoscaling_ != NULL) delete autoscaling_;
  autoscaling_ = NULL;
}
const ::google::container::v1::NodePoolAutoscaling& NodePool::autoscaling() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.autoscaling)
  return autoscaling_ != NULL ? *autoscaling_
                         : *::google::container::v1::NodePoolAutoscaling::internal_default_instance();
}
::google::container::v1::NodePoolAutoscaling* NodePool::mutable_autoscaling() {
  
  if (autoscaling_ == NULL) {
    autoscaling_ = new ::google::container::v1::NodePoolAutoscaling;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.autoscaling)
  return autoscaling_;
}
::google::container::v1::NodePoolAutoscaling* NodePool::release_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.autoscaling)
  
  ::google::container::v1::NodePoolAutoscaling* temp = autoscaling_;
  autoscaling_ = NULL;
  return temp;
}
void NodePool::set_allocated_autoscaling(::google::container::v1::NodePoolAutoscaling* autoscaling) {
  delete autoscaling_;
  autoscaling_ = autoscaling;
  if (autoscaling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.autoscaling)
}

// .google.container.v1.NodeManagement management = 5;
bool NodePool::has_management() const {
  return this != internal_default_instance() && management_ != NULL;
}
void NodePool::clear_management() {
  if (GetArenaNoVirtual() == NULL && management_ != NULL) delete management_;
  management_ = NULL;
}
const ::google::container::v1::NodeManagement& NodePool::management() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.management)
  return management_ != NULL ? *management_
                         : *::google::container::v1::NodeManagement::internal_default_instance();
}
::google::container::v1::NodeManagement* NodePool::mutable_management() {
  
  if (management_ == NULL) {
    management_ = new ::google::container::v1::NodeManagement;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.management)
  return management_;
}
::google::container::v1::NodeManagement* NodePool::release_management() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.management)
  
  ::google::container::v1::NodeManagement* temp = management_;
  management_ = NULL;
  return temp;
}
void NodePool::set_allocated_management(::google::container::v1::NodeManagement* management) {
  delete management_;
  management_ = management;
  if (management) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.management)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeManagement::kAutoUpgradeFieldNumber;
const int NodeManagement::kAutoRepairFieldNumber;
const int NodeManagement::kUpgradeOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeManagement::NodeManagement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.NodeManagement)
}
NodeManagement::NodeManagement(const NodeManagement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_upgrade_options()) {
    upgrade_options_ = new ::google::container::v1::AutoUpgradeOptions(*from.upgrade_options_);
  } else {
    upgrade_options_ = NULL;
  }
  ::memcpy(&auto_upgrade_, &from.auto_upgrade_,
    reinterpret_cast<char*>(&auto_repair_) -
    reinterpret_cast<char*>(&auto_upgrade_) + sizeof(auto_repair_));
  // @@protoc_insertion_point(copy_constructor:google.container.v1.NodeManagement)
}

void NodeManagement::SharedCtor() {
  ::memset(&upgrade_options_, 0, reinterpret_cast<char*>(&auto_repair_) -
    reinterpret_cast<char*>(&upgrade_options_) + sizeof(auto_repair_));
  _cached_size_ = 0;
}

NodeManagement::~NodeManagement() {
  // @@protoc_insertion_point(destructor:google.container.v1.NodeManagement)
  SharedDtor();
}

void NodeManagement::SharedDtor() {
  if (this != internal_default_instance()) {
    delete upgrade_options_;
  }
}

void NodeManagement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeManagement::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeManagement& NodeManagement::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeManagement* NodeManagement::New(::google::protobuf::Arena* arena) const {
  NodeManagement* n = new NodeManagement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeManagement::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.NodeManagement)
  if (GetArenaNoVirtual() == NULL && upgrade_options_ != NULL) {
    delete upgrade_options_;
  }
  upgrade_options_ = NULL;
  ::memset(&auto_upgrade_, 0, reinterpret_cast<char*>(&auto_repair_) -
    reinterpret_cast<char*>(&auto_upgrade_) + sizeof(auto_repair_));
}

bool NodeManagement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.NodeManagement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool auto_upgrade = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_upgrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool auto_repair = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_repair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.AutoUpgradeOptions upgrade_options = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upgrade_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.NodeManagement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.NodeManagement)
  return false;
#undef DO_
}

void NodeManagement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.NodeManagement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool auto_upgrade = 1;
  if (this->auto_upgrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->auto_upgrade(), output);
  }

  // bool auto_repair = 2;
  if (this->auto_repair() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->auto_repair(), output);
  }

  // .google.container.v1.AutoUpgradeOptions upgrade_options = 10;
  if (this->has_upgrade_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->upgrade_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.NodeManagement)
}

::google::protobuf::uint8* NodeManagement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.NodeManagement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool auto_upgrade = 1;
  if (this->auto_upgrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->auto_upgrade(), target);
  }

  // bool auto_repair = 2;
  if (this->auto_repair() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->auto_repair(), target);
  }

  // .google.container.v1.AutoUpgradeOptions upgrade_options = 10;
  if (this->has_upgrade_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->upgrade_options_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.NodeManagement)
  return target;
}

size_t NodeManagement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.NodeManagement)
  size_t total_size = 0;

  // .google.container.v1.AutoUpgradeOptions upgrade_options = 10;
  if (this->has_upgrade_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->upgrade_options_);
  }

  // bool auto_upgrade = 1;
  if (this->auto_upgrade() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_repair = 2;
  if (this->auto_repair() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeManagement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.NodeManagement)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeManagement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeManagement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.NodeManagement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.NodeManagement)
    MergeFrom(*source);
  }
}

void NodeManagement::MergeFrom(const NodeManagement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.NodeManagement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_upgrade_options()) {
    mutable_upgrade_options()->::google::container::v1::AutoUpgradeOptions::MergeFrom(from.upgrade_options());
  }
  if (from.auto_upgrade() != 0) {
    set_auto_upgrade(from.auto_upgrade());
  }
  if (from.auto_repair() != 0) {
    set_auto_repair(from.auto_repair());
  }
}

void NodeManagement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.NodeManagement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeManagement::CopyFrom(const NodeManagement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.NodeManagement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeManagement::IsInitialized() const {
  return true;
}

void NodeManagement::Swap(NodeManagement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeManagement::InternalSwap(NodeManagement* other) {
  std::swap(upgrade_options_, other->upgrade_options_);
  std::swap(auto_upgrade_, other->auto_upgrade_);
  std::swap(auto_repair_, other->auto_repair_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeManagement::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeManagement

// bool auto_upgrade = 1;
void NodeManagement::clear_auto_upgrade() {
  auto_upgrade_ = false;
}
bool NodeManagement::auto_upgrade() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeManagement.auto_upgrade)
  return auto_upgrade_;
}
void NodeManagement::set_auto_upgrade(bool value) {
  
  auto_upgrade_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeManagement.auto_upgrade)
}

// bool auto_repair = 2;
void NodeManagement::clear_auto_repair() {
  auto_repair_ = false;
}
bool NodeManagement::auto_repair() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeManagement.auto_repair)
  return auto_repair_;
}
void NodeManagement::set_auto_repair(bool value) {
  
  auto_repair_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeManagement.auto_repair)
}

// .google.container.v1.AutoUpgradeOptions upgrade_options = 10;
bool NodeManagement::has_upgrade_options() const {
  return this != internal_default_instance() && upgrade_options_ != NULL;
}
void NodeManagement::clear_upgrade_options() {
  if (GetArenaNoVirtual() == NULL && upgrade_options_ != NULL) delete upgrade_options_;
  upgrade_options_ = NULL;
}
const ::google::container::v1::AutoUpgradeOptions& NodeManagement::upgrade_options() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeManagement.upgrade_options)
  return upgrade_options_ != NULL ? *upgrade_options_
                         : *::google::container::v1::AutoUpgradeOptions::internal_default_instance();
}
::google::container::v1::AutoUpgradeOptions* NodeManagement::mutable_upgrade_options() {
  
  if (upgrade_options_ == NULL) {
    upgrade_options_ = new ::google::container::v1::AutoUpgradeOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeManagement.upgrade_options)
  return upgrade_options_;
}
::google::container::v1::AutoUpgradeOptions* NodeManagement::release_upgrade_options() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeManagement.upgrade_options)
  
  ::google::container::v1::AutoUpgradeOptions* temp = upgrade_options_;
  upgrade_options_ = NULL;
  return temp;
}
void NodeManagement::set_allocated_upgrade_options(::google::container::v1::AutoUpgradeOptions* upgrade_options) {
  delete upgrade_options_;
  upgrade_options_ = upgrade_options;
  if (upgrade_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeManagement.upgrade_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoUpgradeOptions::kAutoUpgradeStartTimeFieldNumber;
const int AutoUpgradeOptions::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoUpgradeOptions::AutoUpgradeOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.AutoUpgradeOptions)
}
AutoUpgradeOptions::AutoUpgradeOptions(const AutoUpgradeOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auto_upgrade_start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.auto_upgrade_start_time().size() > 0) {
    auto_upgrade_start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auto_upgrade_start_time_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.AutoUpgradeOptions)
}

void AutoUpgradeOptions::SharedCtor() {
  auto_upgrade_start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AutoUpgradeOptions::~AutoUpgradeOptions() {
  // @@protoc_insertion_point(destructor:google.container.v1.AutoUpgradeOptions)
  SharedDtor();
}

void AutoUpgradeOptions::SharedDtor() {
  auto_upgrade_start_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AutoUpgradeOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoUpgradeOptions::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoUpgradeOptions& AutoUpgradeOptions::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoUpgradeOptions* AutoUpgradeOptions::New(::google::protobuf::Arena* arena) const {
  AutoUpgradeOptions* n = new AutoUpgradeOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoUpgradeOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.AutoUpgradeOptions)
  auto_upgrade_start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AutoUpgradeOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.AutoUpgradeOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string auto_upgrade_start_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auto_upgrade_start_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auto_upgrade_start_time().data(), this->auto_upgrade_start_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.AutoUpgradeOptions.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.AutoUpgradeOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.AutoUpgradeOptions)
  return false;
#undef DO_
}

void AutoUpgradeOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.AutoUpgradeOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auto_upgrade_start_time = 1;
  if (this->auto_upgrade_start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auto_upgrade_start_time().data(), this->auto_upgrade_start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auto_upgrade_start_time(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.AutoUpgradeOptions.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.AutoUpgradeOptions)
}

::google::protobuf::uint8* AutoUpgradeOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.AutoUpgradeOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auto_upgrade_start_time = 1;
  if (this->auto_upgrade_start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auto_upgrade_start_time().data(), this->auto_upgrade_start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auto_upgrade_start_time(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.AutoUpgradeOptions.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.AutoUpgradeOptions)
  return target;
}

size_t AutoUpgradeOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.AutoUpgradeOptions)
  size_t total_size = 0;

  // string auto_upgrade_start_time = 1;
  if (this->auto_upgrade_start_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auto_upgrade_start_time());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoUpgradeOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.AutoUpgradeOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoUpgradeOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoUpgradeOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.AutoUpgradeOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.AutoUpgradeOptions)
    MergeFrom(*source);
  }
}

void AutoUpgradeOptions::MergeFrom(const AutoUpgradeOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.AutoUpgradeOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_upgrade_start_time().size() > 0) {

    auto_upgrade_start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auto_upgrade_start_time_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void AutoUpgradeOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.AutoUpgradeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoUpgradeOptions::CopyFrom(const AutoUpgradeOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.AutoUpgradeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoUpgradeOptions::IsInitialized() const {
  return true;
}

void AutoUpgradeOptions::Swap(AutoUpgradeOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoUpgradeOptions::InternalSwap(AutoUpgradeOptions* other) {
  auto_upgrade_start_time_.Swap(&other->auto_upgrade_start_time_);
  description_.Swap(&other->description_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoUpgradeOptions::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoUpgradeOptions

// string auto_upgrade_start_time = 1;
void AutoUpgradeOptions::clear_auto_upgrade_start_time() {
  auto_upgrade_start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AutoUpgradeOptions::auto_upgrade_start_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
  return auto_upgrade_start_time_.GetNoArena();
}
void AutoUpgradeOptions::set_auto_upgrade_start_time(const ::std::string& value) {
  
  auto_upgrade_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}
#if LANG_CXX11
void AutoUpgradeOptions::set_auto_upgrade_start_time(::std::string&& value) {
  
  auto_upgrade_start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}
#endif
void AutoUpgradeOptions::set_auto_upgrade_start_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  auto_upgrade_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}
void AutoUpgradeOptions::set_auto_upgrade_start_time(const char* value, size_t size) {
  
  auto_upgrade_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}
::std::string* AutoUpgradeOptions::mutable_auto_upgrade_start_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
  return auto_upgrade_start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoUpgradeOptions::release_auto_upgrade_start_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
  
  return auto_upgrade_start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoUpgradeOptions::set_allocated_auto_upgrade_start_time(::std::string* auto_upgrade_start_time) {
  if (auto_upgrade_start_time != NULL) {
    
  } else {
    
  }
  auto_upgrade_start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auto_upgrade_start_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}

// string description = 2;
void AutoUpgradeOptions::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AutoUpgradeOptions::description() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoUpgradeOptions.description)
  return description_.GetNoArena();
}
void AutoUpgradeOptions::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AutoUpgradeOptions.description)
}
#if LANG_CXX11
void AutoUpgradeOptions::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AutoUpgradeOptions.description)
}
#endif
void AutoUpgradeOptions::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AutoUpgradeOptions.description)
}
void AutoUpgradeOptions::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AutoUpgradeOptions.description)
}
::std::string* AutoUpgradeOptions::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoUpgradeOptions.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AutoUpgradeOptions::release_description() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoUpgradeOptions.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AutoUpgradeOptions::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoUpgradeOptions.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetNodePoolManagementRequest::kProjectIdFieldNumber;
const int SetNodePoolManagementRequest::kZoneFieldNumber;
const int SetNodePoolManagementRequest::kClusterIdFieldNumber;
const int SetNodePoolManagementRequest::kNodePoolIdFieldNumber;
const int SetNodePoolManagementRequest::kManagementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetNodePoolManagementRequest::SetNodePoolManagementRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.SetNodePoolManagementRequest)
}
SetNodePoolManagementRequest::SetNodePoolManagementRequest(const SetNodePoolManagementRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_pool_id().size() > 0) {
    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
  if (from.has_management()) {
    management_ = new ::google::container::v1::NodeManagement(*from.management_);
  } else {
    management_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.SetNodePoolManagementRequest)
}

void SetNodePoolManagementRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  management_ = NULL;
  _cached_size_ = 0;
}

SetNodePoolManagementRequest::~SetNodePoolManagementRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.SetNodePoolManagementRequest)
  SharedDtor();
}

void SetNodePoolManagementRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete management_;
  }
}

void SetNodePoolManagementRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetNodePoolManagementRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetNodePoolManagementRequest& SetNodePoolManagementRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetNodePoolManagementRequest* SetNodePoolManagementRequest::New(::google::protobuf::Arena* arena) const {
  SetNodePoolManagementRequest* n = new SetNodePoolManagementRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetNodePoolManagementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.SetNodePoolManagementRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && management_ != NULL) {
    delete management_;
  }
  management_ = NULL;
}

bool SetNodePoolManagementRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.SetNodePoolManagementRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNodePoolManagementRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNodePoolManagementRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNodePoolManagementRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_pool_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_pool_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_pool_id().data(), this->node_pool_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNodePoolManagementRequest.node_pool_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.NodeManagement management = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_management()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.SetNodePoolManagementRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.SetNodePoolManagementRequest)
  return false;
#undef DO_
}

void SetNodePoolManagementRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.SetNodePoolManagementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolManagementRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolManagementRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolManagementRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolManagementRequest.node_pool_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->node_pool_id(), output);
  }

  // .google.container.v1.NodeManagement management = 5;
  if (this->has_management()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->management_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.SetNodePoolManagementRequest)
}

::google::protobuf::uint8* SetNodePoolManagementRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.SetNodePoolManagementRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolManagementRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolManagementRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolManagementRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolManagementRequest.node_pool_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_pool_id(), target);
  }

  // .google.container.v1.NodeManagement management = 5;
  if (this->has_management()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->management_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.SetNodePoolManagementRequest)
  return target;
}

size_t SetNodePoolManagementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.SetNodePoolManagementRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_pool_id());
  }

  // .google.container.v1.NodeManagement management = 5;
  if (this->has_management()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->management_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNodePoolManagementRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.SetNodePoolManagementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetNodePoolManagementRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetNodePoolManagementRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.SetNodePoolManagementRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.SetNodePoolManagementRequest)
    MergeFrom(*source);
  }
}

void SetNodePoolManagementRequest::MergeFrom(const SetNodePoolManagementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.SetNodePoolManagementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.node_pool_id().size() > 0) {

    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
  if (from.has_management()) {
    mutable_management()->::google::container::v1::NodeManagement::MergeFrom(from.management());
  }
}

void SetNodePoolManagementRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.SetNodePoolManagementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNodePoolManagementRequest::CopyFrom(const SetNodePoolManagementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.SetNodePoolManagementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNodePoolManagementRequest::IsInitialized() const {
  return true;
}

void SetNodePoolManagementRequest::Swap(SetNodePoolManagementRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetNodePoolManagementRequest::InternalSwap(SetNodePoolManagementRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  node_pool_id_.Swap(&other->node_pool_id_);
  std::swap(management_, other->management_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetNodePoolManagementRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetNodePoolManagementRequest

// string project_id = 1;
void SetNodePoolManagementRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodePoolManagementRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.project_id)
  return project_id_.GetNoArena();
}
void SetNodePoolManagementRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.project_id)
}
#if LANG_CXX11
void SetNodePoolManagementRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.project_id)
}
#endif
void SetNodePoolManagementRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.project_id)
}
void SetNodePoolManagementRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.project_id)
}
::std::string* SetNodePoolManagementRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodePoolManagementRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodePoolManagementRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.project_id)
}

// string zone = 2;
void SetNodePoolManagementRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodePoolManagementRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.zone)
  return zone_.GetNoArena();
}
void SetNodePoolManagementRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.zone)
}
#if LANG_CXX11
void SetNodePoolManagementRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.zone)
}
#endif
void SetNodePoolManagementRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.zone)
}
void SetNodePoolManagementRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.zone)
}
::std::string* SetNodePoolManagementRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodePoolManagementRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodePoolManagementRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.zone)
}

// string cluster_id = 3;
void SetNodePoolManagementRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodePoolManagementRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetNodePoolManagementRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}
#if LANG_CXX11
void SetNodePoolManagementRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}
#endif
void SetNodePoolManagementRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}
void SetNodePoolManagementRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}
::std::string* SetNodePoolManagementRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodePoolManagementRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodePoolManagementRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}

// string node_pool_id = 4;
void SetNodePoolManagementRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodePoolManagementRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
void SetNodePoolManagementRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}
#if LANG_CXX11
void SetNodePoolManagementRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}
#endif
void SetNodePoolManagementRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}
void SetNodePoolManagementRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}
::std::string* SetNodePoolManagementRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodePoolManagementRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodePoolManagementRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}

// .google.container.v1.NodeManagement management = 5;
bool SetNodePoolManagementRequest::has_management() const {
  return this != internal_default_instance() && management_ != NULL;
}
void SetNodePoolManagementRequest::clear_management() {
  if (GetArenaNoVirtual() == NULL && management_ != NULL) delete management_;
  management_ = NULL;
}
const ::google::container::v1::NodeManagement& SetNodePoolManagementRequest::management() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.management)
  return management_ != NULL ? *management_
                         : *::google::container::v1::NodeManagement::internal_default_instance();
}
::google::container::v1::NodeManagement* SetNodePoolManagementRequest::mutable_management() {
  
  if (management_ == NULL) {
    management_ = new ::google::container::v1::NodeManagement;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.management)
  return management_;
}
::google::container::v1::NodeManagement* SetNodePoolManagementRequest::release_management() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.management)
  
  ::google::container::v1::NodeManagement* temp = management_;
  management_ = NULL;
  return temp;
}
void SetNodePoolManagementRequest::set_allocated_management(::google::container::v1::NodeManagement* management) {
  delete management_;
  management_ = management;
  if (management) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.management)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetNodePoolSizeRequest::kProjectIdFieldNumber;
const int SetNodePoolSizeRequest::kZoneFieldNumber;
const int SetNodePoolSizeRequest::kClusterIdFieldNumber;
const int SetNodePoolSizeRequest::kNodePoolIdFieldNumber;
const int SetNodePoolSizeRequest::kNodeCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetNodePoolSizeRequest::SetNodePoolSizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.SetNodePoolSizeRequest)
}
SetNodePoolSizeRequest::SetNodePoolSizeRequest(const SetNodePoolSizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_pool_id().size() > 0) {
    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
  node_count_ = from.node_count_;
  // @@protoc_insertion_point(copy_constructor:google.container.v1.SetNodePoolSizeRequest)
}

void SetNodePoolSizeRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_count_ = 0;
  _cached_size_ = 0;
}

SetNodePoolSizeRequest::~SetNodePoolSizeRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.SetNodePoolSizeRequest)
  SharedDtor();
}

void SetNodePoolSizeRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetNodePoolSizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetNodePoolSizeRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetNodePoolSizeRequest& SetNodePoolSizeRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetNodePoolSizeRequest* SetNodePoolSizeRequest::New(::google::protobuf::Arena* arena) const {
  SetNodePoolSizeRequest* n = new SetNodePoolSizeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetNodePoolSizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.SetNodePoolSizeRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_count_ = 0;
}

bool SetNodePoolSizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.SetNodePoolSizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNodePoolSizeRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNodePoolSizeRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNodePoolSizeRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_pool_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_pool_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_pool_id().data(), this->node_pool_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNodePoolSizeRequest.node_pool_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.SetNodePoolSizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.SetNodePoolSizeRequest)
  return false;
#undef DO_
}

void SetNodePoolSizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.SetNodePoolSizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolSizeRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolSizeRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolSizeRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolSizeRequest.node_pool_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->node_pool_id(), output);
  }

  // int32 node_count = 5;
  if (this->node_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->node_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.SetNodePoolSizeRequest)
}

::google::protobuf::uint8* SetNodePoolSizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.SetNodePoolSizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolSizeRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolSizeRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolSizeRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNodePoolSizeRequest.node_pool_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_pool_id(), target);
  }

  // int32 node_count = 5;
  if (this->node_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->node_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.SetNodePoolSizeRequest)
  return target;
}

size_t SetNodePoolSizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.SetNodePoolSizeRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_pool_id());
  }

  // int32 node_count = 5;
  if (this->node_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNodePoolSizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.SetNodePoolSizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetNodePoolSizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetNodePoolSizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.SetNodePoolSizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.SetNodePoolSizeRequest)
    MergeFrom(*source);
  }
}

void SetNodePoolSizeRequest::MergeFrom(const SetNodePoolSizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.SetNodePoolSizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.node_pool_id().size() > 0) {

    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
  if (from.node_count() != 0) {
    set_node_count(from.node_count());
  }
}

void SetNodePoolSizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.SetNodePoolSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNodePoolSizeRequest::CopyFrom(const SetNodePoolSizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.SetNodePoolSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNodePoolSizeRequest::IsInitialized() const {
  return true;
}

void SetNodePoolSizeRequest::Swap(SetNodePoolSizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetNodePoolSizeRequest::InternalSwap(SetNodePoolSizeRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  node_pool_id_.Swap(&other->node_pool_id_);
  std::swap(node_count_, other->node_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetNodePoolSizeRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetNodePoolSizeRequest

// string project_id = 1;
void SetNodePoolSizeRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodePoolSizeRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.project_id)
  return project_id_.GetNoArena();
}
void SetNodePoolSizeRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.project_id)
}
#if LANG_CXX11
void SetNodePoolSizeRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.project_id)
}
#endif
void SetNodePoolSizeRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.project_id)
}
void SetNodePoolSizeRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.project_id)
}
::std::string* SetNodePoolSizeRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodePoolSizeRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodePoolSizeRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.project_id)
}

// string zone = 2;
void SetNodePoolSizeRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodePoolSizeRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.zone)
  return zone_.GetNoArena();
}
void SetNodePoolSizeRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.zone)
}
#if LANG_CXX11
void SetNodePoolSizeRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.zone)
}
#endif
void SetNodePoolSizeRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.zone)
}
void SetNodePoolSizeRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.zone)
}
::std::string* SetNodePoolSizeRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodePoolSizeRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodePoolSizeRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.zone)
}

// string cluster_id = 3;
void SetNodePoolSizeRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodePoolSizeRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetNodePoolSizeRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}
#if LANG_CXX11
void SetNodePoolSizeRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}
#endif
void SetNodePoolSizeRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}
void SetNodePoolSizeRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}
::std::string* SetNodePoolSizeRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodePoolSizeRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodePoolSizeRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}

// string node_pool_id = 4;
void SetNodePoolSizeRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNodePoolSizeRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
void SetNodePoolSizeRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}
#if LANG_CXX11
void SetNodePoolSizeRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}
#endif
void SetNodePoolSizeRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}
void SetNodePoolSizeRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}
::std::string* SetNodePoolSizeRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNodePoolSizeRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNodePoolSizeRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}

// int32 node_count = 5;
void SetNodePoolSizeRequest::clear_node_count() {
  node_count_ = 0;
}
::google::protobuf::int32 SetNodePoolSizeRequest::node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.node_count)
  return node_count_;
}
void SetNodePoolSizeRequest::set_node_count(::google::protobuf::int32 value) {
  
  node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.node_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RollbackNodePoolUpgradeRequest::kProjectIdFieldNumber;
const int RollbackNodePoolUpgradeRequest::kZoneFieldNumber;
const int RollbackNodePoolUpgradeRequest::kClusterIdFieldNumber;
const int RollbackNodePoolUpgradeRequest::kNodePoolIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollbackNodePoolUpgradeRequest::RollbackNodePoolUpgradeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.RollbackNodePoolUpgradeRequest)
}
RollbackNodePoolUpgradeRequest::RollbackNodePoolUpgradeRequest(const RollbackNodePoolUpgradeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_pool_id().size() > 0) {
    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.RollbackNodePoolUpgradeRequest)
}

void RollbackNodePoolUpgradeRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RollbackNodePoolUpgradeRequest::~RollbackNodePoolUpgradeRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.RollbackNodePoolUpgradeRequest)
  SharedDtor();
}

void RollbackNodePoolUpgradeRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RollbackNodePoolUpgradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollbackNodePoolUpgradeRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RollbackNodePoolUpgradeRequest& RollbackNodePoolUpgradeRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

RollbackNodePoolUpgradeRequest* RollbackNodePoolUpgradeRequest::New(::google::protobuf::Arena* arena) const {
  RollbackNodePoolUpgradeRequest* n = new RollbackNodePoolUpgradeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RollbackNodePoolUpgradeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.RollbackNodePoolUpgradeRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RollbackNodePoolUpgradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.RollbackNodePoolUpgradeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.RollbackNodePoolUpgradeRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.RollbackNodePoolUpgradeRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_pool_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_pool_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_pool_id().data(), this->node_pool_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.RollbackNodePoolUpgradeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.RollbackNodePoolUpgradeRequest)
  return false;
#undef DO_
}

void RollbackNodePoolUpgradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.RollbackNodePoolUpgradeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.RollbackNodePoolUpgradeRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.RollbackNodePoolUpgradeRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->node_pool_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.RollbackNodePoolUpgradeRequest)
}

::google::protobuf::uint8* RollbackNodePoolUpgradeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.RollbackNodePoolUpgradeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.RollbackNodePoolUpgradeRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.RollbackNodePoolUpgradeRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_pool_id().data(), this->node_pool_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_pool_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.RollbackNodePoolUpgradeRequest)
  return target;
}

size_t RollbackNodePoolUpgradeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.RollbackNodePoolUpgradeRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string node_pool_id = 4;
  if (this->node_pool_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_pool_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollbackNodePoolUpgradeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.RollbackNodePoolUpgradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RollbackNodePoolUpgradeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RollbackNodePoolUpgradeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.RollbackNodePoolUpgradeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.RollbackNodePoolUpgradeRequest)
    MergeFrom(*source);
  }
}

void RollbackNodePoolUpgradeRequest::MergeFrom(const RollbackNodePoolUpgradeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.RollbackNodePoolUpgradeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.node_pool_id().size() > 0) {

    node_pool_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_pool_id_);
  }
}

void RollbackNodePoolUpgradeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.RollbackNodePoolUpgradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollbackNodePoolUpgradeRequest::CopyFrom(const RollbackNodePoolUpgradeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.RollbackNodePoolUpgradeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollbackNodePoolUpgradeRequest::IsInitialized() const {
  return true;
}

void RollbackNodePoolUpgradeRequest::Swap(RollbackNodePoolUpgradeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollbackNodePoolUpgradeRequest::InternalSwap(RollbackNodePoolUpgradeRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  node_pool_id_.Swap(&other->node_pool_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RollbackNodePoolUpgradeRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RollbackNodePoolUpgradeRequest

// string project_id = 1;
void RollbackNodePoolUpgradeRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RollbackNodePoolUpgradeRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
  return project_id_.GetNoArena();
}
void RollbackNodePoolUpgradeRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}
#if LANG_CXX11
void RollbackNodePoolUpgradeRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}
#endif
void RollbackNodePoolUpgradeRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}
void RollbackNodePoolUpgradeRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}
::std::string* RollbackNodePoolUpgradeRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RollbackNodePoolUpgradeRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RollbackNodePoolUpgradeRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}

// string zone = 2;
void RollbackNodePoolUpgradeRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RollbackNodePoolUpgradeRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
  return zone_.GetNoArena();
}
void RollbackNodePoolUpgradeRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}
#if LANG_CXX11
void RollbackNodePoolUpgradeRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}
#endif
void RollbackNodePoolUpgradeRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}
void RollbackNodePoolUpgradeRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}
::std::string* RollbackNodePoolUpgradeRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RollbackNodePoolUpgradeRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RollbackNodePoolUpgradeRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}

// string cluster_id = 3;
void RollbackNodePoolUpgradeRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RollbackNodePoolUpgradeRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void RollbackNodePoolUpgradeRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}
#if LANG_CXX11
void RollbackNodePoolUpgradeRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}
#endif
void RollbackNodePoolUpgradeRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}
void RollbackNodePoolUpgradeRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}
::std::string* RollbackNodePoolUpgradeRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RollbackNodePoolUpgradeRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RollbackNodePoolUpgradeRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}

// string node_pool_id = 4;
void RollbackNodePoolUpgradeRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RollbackNodePoolUpgradeRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
void RollbackNodePoolUpgradeRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}
#if LANG_CXX11
void RollbackNodePoolUpgradeRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}
#endif
void RollbackNodePoolUpgradeRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}
void RollbackNodePoolUpgradeRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}
::std::string* RollbackNodePoolUpgradeRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RollbackNodePoolUpgradeRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RollbackNodePoolUpgradeRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListNodePoolsResponse::kNodePoolsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListNodePoolsResponse::ListNodePoolsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.ListNodePoolsResponse)
}
ListNodePoolsResponse::ListNodePoolsResponse(const ListNodePoolsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_pools_(from.node_pools_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.container.v1.ListNodePoolsResponse)
}

void ListNodePoolsResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListNodePoolsResponse::~ListNodePoolsResponse() {
  // @@protoc_insertion_point(destructor:google.container.v1.ListNodePoolsResponse)
  SharedDtor();
}

void ListNodePoolsResponse::SharedDtor() {
}

void ListNodePoolsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListNodePoolsResponse::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListNodePoolsResponse& ListNodePoolsResponse::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListNodePoolsResponse* ListNodePoolsResponse::New(::google::protobuf::Arena* arena) const {
  ListNodePoolsResponse* n = new ListNodePoolsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListNodePoolsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.ListNodePoolsResponse)
  node_pools_.Clear();
}

bool ListNodePoolsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.ListNodePoolsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.container.v1.NodePool node_pools = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_pools()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.ListNodePoolsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.ListNodePoolsResponse)
  return false;
#undef DO_
}

void ListNodePoolsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.ListNodePoolsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.container.v1.NodePool node_pools = 1;
  for (unsigned int i = 0, n = this->node_pools_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_pools(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.ListNodePoolsResponse)
}

::google::protobuf::uint8* ListNodePoolsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.ListNodePoolsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.container.v1.NodePool node_pools = 1;
  for (unsigned int i = 0, n = this->node_pools_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node_pools(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.ListNodePoolsResponse)
  return target;
}

size_t ListNodePoolsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.ListNodePoolsResponse)
  size_t total_size = 0;

  // repeated .google.container.v1.NodePool node_pools = 1;
  {
    unsigned int count = this->node_pools_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_pools(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListNodePoolsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.ListNodePoolsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListNodePoolsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListNodePoolsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.ListNodePoolsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.ListNodePoolsResponse)
    MergeFrom(*source);
  }
}

void ListNodePoolsResponse::MergeFrom(const ListNodePoolsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.ListNodePoolsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_pools_.MergeFrom(from.node_pools_);
}

void ListNodePoolsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.ListNodePoolsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNodePoolsResponse::CopyFrom(const ListNodePoolsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.ListNodePoolsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNodePoolsResponse::IsInitialized() const {
  return true;
}

void ListNodePoolsResponse::Swap(ListNodePoolsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListNodePoolsResponse::InternalSwap(ListNodePoolsResponse* other) {
  node_pools_.InternalSwap(&other->node_pools_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListNodePoolsResponse::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListNodePoolsResponse

// repeated .google.container.v1.NodePool node_pools = 1;
int ListNodePoolsResponse::node_pools_size() const {
  return node_pools_.size();
}
void ListNodePoolsResponse::clear_node_pools() {
  node_pools_.Clear();
}
const ::google::container::v1::NodePool& ListNodePoolsResponse::node_pools(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsResponse.node_pools)
  return node_pools_.Get(index);
}
::google::container::v1::NodePool* ListNodePoolsResponse::mutable_node_pools(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsResponse.node_pools)
  return node_pools_.Mutable(index);
}
::google::container::v1::NodePool* ListNodePoolsResponse::add_node_pools() {
  // @@protoc_insertion_point(field_add:google.container.v1.ListNodePoolsResponse.node_pools)
  return node_pools_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >*
ListNodePoolsResponse::mutable_node_pools() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListNodePoolsResponse.node_pools)
  return &node_pools_;
}
const ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >&
ListNodePoolsResponse::node_pools() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListNodePoolsResponse.node_pools)
  return node_pools_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodePoolAutoscaling::kEnabledFieldNumber;
const int NodePoolAutoscaling::kMinNodeCountFieldNumber;
const int NodePoolAutoscaling::kMaxNodeCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodePoolAutoscaling::NodePoolAutoscaling()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.NodePoolAutoscaling)
}
NodePoolAutoscaling::NodePoolAutoscaling(const NodePoolAutoscaling& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    reinterpret_cast<char*>(&max_node_count_) -
    reinterpret_cast<char*>(&enabled_) + sizeof(max_node_count_));
  // @@protoc_insertion_point(copy_constructor:google.container.v1.NodePoolAutoscaling)
}

void NodePoolAutoscaling::SharedCtor() {
  ::memset(&enabled_, 0, reinterpret_cast<char*>(&max_node_count_) -
    reinterpret_cast<char*>(&enabled_) + sizeof(max_node_count_));
  _cached_size_ = 0;
}

NodePoolAutoscaling::~NodePoolAutoscaling() {
  // @@protoc_insertion_point(destructor:google.container.v1.NodePoolAutoscaling)
  SharedDtor();
}

void NodePoolAutoscaling::SharedDtor() {
}

void NodePoolAutoscaling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodePoolAutoscaling::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodePoolAutoscaling& NodePoolAutoscaling::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodePoolAutoscaling* NodePoolAutoscaling::New(::google::protobuf::Arena* arena) const {
  NodePoolAutoscaling* n = new NodePoolAutoscaling;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodePoolAutoscaling::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.NodePoolAutoscaling)
  ::memset(&enabled_, 0, reinterpret_cast<char*>(&max_node_count_) -
    reinterpret_cast<char*>(&enabled_) + sizeof(max_node_count_));
}

bool NodePoolAutoscaling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.NodePoolAutoscaling)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_node_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_node_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_node_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_node_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.NodePoolAutoscaling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.NodePoolAutoscaling)
  return false;
#undef DO_
}

void NodePoolAutoscaling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.NodePoolAutoscaling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // int32 min_node_count = 2;
  if (this->min_node_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_node_count(), output);
  }

  // int32 max_node_count = 3;
  if (this->max_node_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_node_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.NodePoolAutoscaling)
}

::google::protobuf::uint8* NodePoolAutoscaling::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.NodePoolAutoscaling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // int32 min_node_count = 2;
  if (this->min_node_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_node_count(), target);
  }

  // int32 max_node_count = 3;
  if (this->max_node_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_node_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.NodePoolAutoscaling)
  return target;
}

size_t NodePoolAutoscaling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.NodePoolAutoscaling)
  size_t total_size = 0;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // int32 min_node_count = 2;
  if (this->min_node_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_node_count());
  }

  // int32 max_node_count = 3;
  if (this->max_node_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_node_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodePoolAutoscaling::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.NodePoolAutoscaling)
  GOOGLE_DCHECK_NE(&from, this);
  const NodePoolAutoscaling* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodePoolAutoscaling>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.NodePoolAutoscaling)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.NodePoolAutoscaling)
    MergeFrom(*source);
  }
}

void NodePoolAutoscaling::MergeFrom(const NodePoolAutoscaling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.NodePoolAutoscaling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.min_node_count() != 0) {
    set_min_node_count(from.min_node_count());
  }
  if (from.max_node_count() != 0) {
    set_max_node_count(from.max_node_count());
  }
}

void NodePoolAutoscaling::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.NodePoolAutoscaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodePoolAutoscaling::CopyFrom(const NodePoolAutoscaling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.NodePoolAutoscaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodePoolAutoscaling::IsInitialized() const {
  return true;
}

void NodePoolAutoscaling::Swap(NodePoolAutoscaling* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodePoolAutoscaling::InternalSwap(NodePoolAutoscaling* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(min_node_count_, other->min_node_count_);
  std::swap(max_node_count_, other->max_node_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodePoolAutoscaling::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodePoolAutoscaling

// bool enabled = 1;
void NodePoolAutoscaling::clear_enabled() {
  enabled_ = false;
}
bool NodePoolAutoscaling::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePoolAutoscaling.enabled)
  return enabled_;
}
void NodePoolAutoscaling::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePoolAutoscaling.enabled)
}

// int32 min_node_count = 2;
void NodePoolAutoscaling::clear_min_node_count() {
  min_node_count_ = 0;
}
::google::protobuf::int32 NodePoolAutoscaling::min_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePoolAutoscaling.min_node_count)
  return min_node_count_;
}
void NodePoolAutoscaling::set_min_node_count(::google::protobuf::int32 value) {
  
  min_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePoolAutoscaling.min_node_count)
}

// int32 max_node_count = 3;
void NodePoolAutoscaling::clear_max_node_count() {
  max_node_count_ = 0;
}
::google::protobuf::int32 NodePoolAutoscaling::max_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePoolAutoscaling.max_node_count)
  return max_node_count_;
}
void NodePoolAutoscaling::set_max_node_count(::google::protobuf::int32 value) {
  
  max_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePoolAutoscaling.max_node_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SetLabelsRequest::SetLabelsRequest_ResourceLabelsEntry::SetLabelsRequest_ResourceLabelsEntry() {}
SetLabelsRequest::SetLabelsRequest_ResourceLabelsEntry::SetLabelsRequest_ResourceLabelsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SetLabelsRequest::SetLabelsRequest_ResourceLabelsEntry::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[50];
}
void SetLabelsRequest::SetLabelsRequest_ResourceLabelsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SetLabelsRequest::SetLabelsRequest_ResourceLabelsEntry::MergeFrom(const SetLabelsRequest_ResourceLabelsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLabelsRequest::kProjectIdFieldNumber;
const int SetLabelsRequest::kZoneFieldNumber;
const int SetLabelsRequest::kClusterIdFieldNumber;
const int SetLabelsRequest::kResourceLabelsFieldNumber;
const int SetLabelsRequest::kLabelFingerprintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLabelsRequest::SetLabelsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.SetLabelsRequest)
}
SetLabelsRequest::SetLabelsRequest(const SetLabelsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resource_labels_.MergeFrom(from.resource_labels_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  label_fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.label_fingerprint().size() > 0) {
    label_fingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_fingerprint_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.SetLabelsRequest)
}

void SetLabelsRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SetLabelsRequest::~SetLabelsRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.SetLabelsRequest)
  SharedDtor();
}

void SetLabelsRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_fingerprint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetLabelsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLabelsRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetLabelsRequest& SetLabelsRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetLabelsRequest* SetLabelsRequest::New(::google::protobuf::Arena* arena) const {
  SetLabelsRequest* n = new SetLabelsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetLabelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.SetLabelsRequest)
  resource_labels_.Clear();
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetLabelsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.SetLabelsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLabelsRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLabelsRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLabelsRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> resource_labels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          SetLabelsRequest_ResourceLabelsEntry::Parser< ::google::protobuf::internal::MapField<
              SetLabelsRequest_ResourceLabelsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&resource_labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLabelsRequest.ResourceLabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLabelsRequest.ResourceLabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string label_fingerprint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_fingerprint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label_fingerprint().data(), this->label_fingerprint().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLabelsRequest.label_fingerprint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.SetLabelsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.SetLabelsRequest)
  return false;
#undef DO_
}

void SetLabelsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.SetLabelsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLabelsRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLabelsRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLabelsRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // map<string, string> resource_labels = 4;
  if (!this->resource_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.SetLabelsRequest.ResourceLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.SetLabelsRequest.ResourceLabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->resource_labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->resource_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->resource_labels().begin();
          it != this->resource_labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SetLabelsRequest_ResourceLabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(resource_labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SetLabelsRequest_ResourceLabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->resource_labels().begin();
          it != this->resource_labels().end(); ++it) {
        entry.reset(resource_labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string label_fingerprint = 5;
  if (this->label_fingerprint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label_fingerprint().data(), this->label_fingerprint().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLabelsRequest.label_fingerprint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->label_fingerprint(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.SetLabelsRequest)
}

::google::protobuf::uint8* SetLabelsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.SetLabelsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLabelsRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLabelsRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLabelsRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // map<string, string> resource_labels = 4;
  if (!this->resource_labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.SetLabelsRequest.ResourceLabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.container.v1.SetLabelsRequest.ResourceLabelsEntry.value");
      }
    };

    if (deterministic &&
        this->resource_labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->resource_labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->resource_labels().begin();
          it != this->resource_labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SetLabelsRequest_ResourceLabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(resource_labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SetLabelsRequest_ResourceLabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->resource_labels().begin();
          it != this->resource_labels().end(); ++it) {
        entry.reset(resource_labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string label_fingerprint = 5;
  if (this->label_fingerprint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label_fingerprint().data(), this->label_fingerprint().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLabelsRequest.label_fingerprint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->label_fingerprint(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.SetLabelsRequest)
  return target;
}

size_t SetLabelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.SetLabelsRequest)
  size_t total_size = 0;

  // map<string, string> resource_labels = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->resource_labels_size());
  {
    ::google::protobuf::scoped_ptr<SetLabelsRequest_ResourceLabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->resource_labels().begin();
        it != this->resource_labels().end(); ++it) {
      entry.reset(resource_labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // string label_fingerprint = 5;
  if (this->label_fingerprint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label_fingerprint());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLabelsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.SetLabelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLabelsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLabelsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.SetLabelsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.SetLabelsRequest)
    MergeFrom(*source);
  }
}

void SetLabelsRequest::MergeFrom(const SetLabelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.SetLabelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_labels_.MergeFrom(from.resource_labels_);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.label_fingerprint().size() > 0) {

    label_fingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_fingerprint_);
  }
}

void SetLabelsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.SetLabelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLabelsRequest::CopyFrom(const SetLabelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.SetLabelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLabelsRequest::IsInitialized() const {
  return true;
}

void SetLabelsRequest::Swap(SetLabelsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLabelsRequest::InternalSwap(SetLabelsRequest* other) {
  resource_labels_.Swap(&other->resource_labels_);
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  label_fingerprint_.Swap(&other->label_fingerprint_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetLabelsRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetLabelsRequest

// string project_id = 1;
void SetLabelsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLabelsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.project_id)
  return project_id_.GetNoArena();
}
void SetLabelsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.project_id)
}
#if LANG_CXX11
void SetLabelsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.project_id)
}
#endif
void SetLabelsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.project_id)
}
void SetLabelsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.project_id)
}
::std::string* SetLabelsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLabelsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLabelsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.project_id)
}

// string zone = 2;
void SetLabelsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLabelsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.zone)
  return zone_.GetNoArena();
}
void SetLabelsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.zone)
}
#if LANG_CXX11
void SetLabelsRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.zone)
}
#endif
void SetLabelsRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.zone)
}
void SetLabelsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.zone)
}
::std::string* SetLabelsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLabelsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLabelsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.zone)
}

// string cluster_id = 3;
void SetLabelsRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLabelsRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetLabelsRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.cluster_id)
}
#if LANG_CXX11
void SetLabelsRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.cluster_id)
}
#endif
void SetLabelsRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.cluster_id)
}
void SetLabelsRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.cluster_id)
}
::std::string* SetLabelsRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLabelsRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLabelsRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.cluster_id)
}

// map<string, string> resource_labels = 4;
int SetLabelsRequest::resource_labels_size() const {
  return resource_labels_.size();
}
void SetLabelsRequest::clear_resource_labels() {
  resource_labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
SetLabelsRequest::resource_labels() const {
  // @@protoc_insertion_point(field_map:google.container.v1.SetLabelsRequest.resource_labels)
  return resource_labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
SetLabelsRequest::mutable_resource_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.SetLabelsRequest.resource_labels)
  return resource_labels_.MutableMap();
}

// string label_fingerprint = 5;
void SetLabelsRequest::clear_label_fingerprint() {
  label_fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLabelsRequest::label_fingerprint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.label_fingerprint)
  return label_fingerprint_.GetNoArena();
}
void SetLabelsRequest::set_label_fingerprint(const ::std::string& value) {
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.label_fingerprint)
}
#if LANG_CXX11
void SetLabelsRequest::set_label_fingerprint(::std::string&& value) {
  
  label_fingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.label_fingerprint)
}
#endif
void SetLabelsRequest::set_label_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.label_fingerprint)
}
void SetLabelsRequest::set_label_fingerprint(const char* value, size_t size) {
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.label_fingerprint)
}
::std::string* SetLabelsRequest::mutable_label_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.label_fingerprint)
  return label_fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLabelsRequest::release_label_fingerprint() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.label_fingerprint)
  
  return label_fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLabelsRequest::set_allocated_label_fingerprint(::std::string* label_fingerprint) {
  if (label_fingerprint != NULL) {
    
  } else {
    
  }
  label_fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_fingerprint);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.label_fingerprint)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLegacyAbacRequest::kProjectIdFieldNumber;
const int SetLegacyAbacRequest::kZoneFieldNumber;
const int SetLegacyAbacRequest::kClusterIdFieldNumber;
const int SetLegacyAbacRequest::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLegacyAbacRequest::SetLegacyAbacRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.SetLegacyAbacRequest)
}
SetLegacyAbacRequest::SetLegacyAbacRequest(const SetLegacyAbacRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:google.container.v1.SetLegacyAbacRequest)
}

void SetLegacyAbacRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
  _cached_size_ = 0;
}

SetLegacyAbacRequest::~SetLegacyAbacRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.SetLegacyAbacRequest)
  SharedDtor();
}

void SetLegacyAbacRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetLegacyAbacRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLegacyAbacRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetLegacyAbacRequest& SetLegacyAbacRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetLegacyAbacRequest* SetLegacyAbacRequest::New(::google::protobuf::Arena* arena) const {
  SetLegacyAbacRequest* n = new SetLegacyAbacRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetLegacyAbacRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.SetLegacyAbacRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
}

bool SetLegacyAbacRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.SetLegacyAbacRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLegacyAbacRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLegacyAbacRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetLegacyAbacRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.SetLegacyAbacRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.SetLegacyAbacRequest)
  return false;
#undef DO_
}

void SetLegacyAbacRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.SetLegacyAbacRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLegacyAbacRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLegacyAbacRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLegacyAbacRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // bool enabled = 4;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enabled(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.SetLegacyAbacRequest)
}

::google::protobuf::uint8* SetLegacyAbacRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.SetLegacyAbacRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLegacyAbacRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLegacyAbacRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetLegacyAbacRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // bool enabled = 4;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enabled(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.SetLegacyAbacRequest)
  return target;
}

size_t SetLegacyAbacRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.SetLegacyAbacRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // bool enabled = 4;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLegacyAbacRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.SetLegacyAbacRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLegacyAbacRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLegacyAbacRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.SetLegacyAbacRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.SetLegacyAbacRequest)
    MergeFrom(*source);
  }
}

void SetLegacyAbacRequest::MergeFrom(const SetLegacyAbacRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.SetLegacyAbacRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void SetLegacyAbacRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.SetLegacyAbacRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLegacyAbacRequest::CopyFrom(const SetLegacyAbacRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.SetLegacyAbacRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLegacyAbacRequest::IsInitialized() const {
  return true;
}

void SetLegacyAbacRequest::Swap(SetLegacyAbacRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLegacyAbacRequest::InternalSwap(SetLegacyAbacRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(enabled_, other->enabled_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetLegacyAbacRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetLegacyAbacRequest

// string project_id = 1;
void SetLegacyAbacRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLegacyAbacRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.project_id)
  return project_id_.GetNoArena();
}
void SetLegacyAbacRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.project_id)
}
#if LANG_CXX11
void SetLegacyAbacRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLegacyAbacRequest.project_id)
}
#endif
void SetLegacyAbacRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLegacyAbacRequest.project_id)
}
void SetLegacyAbacRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLegacyAbacRequest.project_id)
}
::std::string* SetLegacyAbacRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLegacyAbacRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLegacyAbacRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLegacyAbacRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLegacyAbacRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLegacyAbacRequest.project_id)
}

// string zone = 2;
void SetLegacyAbacRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLegacyAbacRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.zone)
  return zone_.GetNoArena();
}
void SetLegacyAbacRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.zone)
}
#if LANG_CXX11
void SetLegacyAbacRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLegacyAbacRequest.zone)
}
#endif
void SetLegacyAbacRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLegacyAbacRequest.zone)
}
void SetLegacyAbacRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLegacyAbacRequest.zone)
}
::std::string* SetLegacyAbacRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLegacyAbacRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLegacyAbacRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLegacyAbacRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLegacyAbacRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLegacyAbacRequest.zone)
}

// string cluster_id = 3;
void SetLegacyAbacRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetLegacyAbacRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetLegacyAbacRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.cluster_id)
}
#if LANG_CXX11
void SetLegacyAbacRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLegacyAbacRequest.cluster_id)
}
#endif
void SetLegacyAbacRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLegacyAbacRequest.cluster_id)
}
void SetLegacyAbacRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLegacyAbacRequest.cluster_id)
}
::std::string* SetLegacyAbacRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLegacyAbacRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetLegacyAbacRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLegacyAbacRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetLegacyAbacRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLegacyAbacRequest.cluster_id)
}

// bool enabled = 4;
void SetLegacyAbacRequest::clear_enabled() {
  enabled_ = false;
}
bool SetLegacyAbacRequest::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.enabled)
  return enabled_;
}
void SetLegacyAbacRequest::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartIPRotationRequest::kProjectIdFieldNumber;
const int StartIPRotationRequest::kZoneFieldNumber;
const int StartIPRotationRequest::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartIPRotationRequest::StartIPRotationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.StartIPRotationRequest)
}
StartIPRotationRequest::StartIPRotationRequest(const StartIPRotationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.StartIPRotationRequest)
}

void StartIPRotationRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StartIPRotationRequest::~StartIPRotationRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.StartIPRotationRequest)
  SharedDtor();
}

void StartIPRotationRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StartIPRotationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartIPRotationRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartIPRotationRequest& StartIPRotationRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartIPRotationRequest* StartIPRotationRequest::New(::google::protobuf::Arena* arena) const {
  StartIPRotationRequest* n = new StartIPRotationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartIPRotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.StartIPRotationRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StartIPRotationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.StartIPRotationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.StartIPRotationRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.StartIPRotationRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.StartIPRotationRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.StartIPRotationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.StartIPRotationRequest)
  return false;
#undef DO_
}

void StartIPRotationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.StartIPRotationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.StartIPRotationRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.StartIPRotationRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.StartIPRotationRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.StartIPRotationRequest)
}

::google::protobuf::uint8* StartIPRotationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.StartIPRotationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.StartIPRotationRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.StartIPRotationRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.StartIPRotationRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.StartIPRotationRequest)
  return target;
}

size_t StartIPRotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.StartIPRotationRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartIPRotationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.StartIPRotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartIPRotationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartIPRotationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.StartIPRotationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.StartIPRotationRequest)
    MergeFrom(*source);
  }
}

void StartIPRotationRequest::MergeFrom(const StartIPRotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.StartIPRotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
}

void StartIPRotationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.StartIPRotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartIPRotationRequest::CopyFrom(const StartIPRotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.StartIPRotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartIPRotationRequest::IsInitialized() const {
  return true;
}

void StartIPRotationRequest::Swap(StartIPRotationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartIPRotationRequest::InternalSwap(StartIPRotationRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartIPRotationRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartIPRotationRequest

// string project_id = 1;
void StartIPRotationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartIPRotationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StartIPRotationRequest.project_id)
  return project_id_.GetNoArena();
}
void StartIPRotationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.StartIPRotationRequest.project_id)
}
#if LANG_CXX11
void StartIPRotationRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.StartIPRotationRequest.project_id)
}
#endif
void StartIPRotationRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.StartIPRotationRequest.project_id)
}
void StartIPRotationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.StartIPRotationRequest.project_id)
}
::std::string* StartIPRotationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.StartIPRotationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartIPRotationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.StartIPRotationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartIPRotationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.StartIPRotationRequest.project_id)
}

// string zone = 2;
void StartIPRotationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartIPRotationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StartIPRotationRequest.zone)
  return zone_.GetNoArena();
}
void StartIPRotationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.StartIPRotationRequest.zone)
}
#if LANG_CXX11
void StartIPRotationRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.StartIPRotationRequest.zone)
}
#endif
void StartIPRotationRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.StartIPRotationRequest.zone)
}
void StartIPRotationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.StartIPRotationRequest.zone)
}
::std::string* StartIPRotationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.StartIPRotationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartIPRotationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.StartIPRotationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartIPRotationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.StartIPRotationRequest.zone)
}

// string cluster_id = 3;
void StartIPRotationRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StartIPRotationRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StartIPRotationRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void StartIPRotationRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.StartIPRotationRequest.cluster_id)
}
#if LANG_CXX11
void StartIPRotationRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.StartIPRotationRequest.cluster_id)
}
#endif
void StartIPRotationRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.StartIPRotationRequest.cluster_id)
}
void StartIPRotationRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.StartIPRotationRequest.cluster_id)
}
::std::string* StartIPRotationRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.StartIPRotationRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StartIPRotationRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.StartIPRotationRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StartIPRotationRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.StartIPRotationRequest.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompleteIPRotationRequest::kProjectIdFieldNumber;
const int CompleteIPRotationRequest::kZoneFieldNumber;
const int CompleteIPRotationRequest::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompleteIPRotationRequest::CompleteIPRotationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.CompleteIPRotationRequest)
}
CompleteIPRotationRequest::CompleteIPRotationRequest(const CompleteIPRotationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.CompleteIPRotationRequest)
}

void CompleteIPRotationRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CompleteIPRotationRequest::~CompleteIPRotationRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.CompleteIPRotationRequest)
  SharedDtor();
}

void CompleteIPRotationRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CompleteIPRotationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompleteIPRotationRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompleteIPRotationRequest& CompleteIPRotationRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompleteIPRotationRequest* CompleteIPRotationRequest::New(::google::protobuf::Arena* arena) const {
  CompleteIPRotationRequest* n = new CompleteIPRotationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompleteIPRotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.CompleteIPRotationRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CompleteIPRotationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.CompleteIPRotationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.CompleteIPRotationRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.CompleteIPRotationRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.CompleteIPRotationRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.CompleteIPRotationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.CompleteIPRotationRequest)
  return false;
#undef DO_
}

void CompleteIPRotationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.CompleteIPRotationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CompleteIPRotationRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CompleteIPRotationRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CompleteIPRotationRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.CompleteIPRotationRequest)
}

::google::protobuf::uint8* CompleteIPRotationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.CompleteIPRotationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CompleteIPRotationRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CompleteIPRotationRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.CompleteIPRotationRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.CompleteIPRotationRequest)
  return target;
}

size_t CompleteIPRotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.CompleteIPRotationRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompleteIPRotationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.CompleteIPRotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteIPRotationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompleteIPRotationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.CompleteIPRotationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.CompleteIPRotationRequest)
    MergeFrom(*source);
  }
}

void CompleteIPRotationRequest::MergeFrom(const CompleteIPRotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.CompleteIPRotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
}

void CompleteIPRotationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.CompleteIPRotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteIPRotationRequest::CopyFrom(const CompleteIPRotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.CompleteIPRotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteIPRotationRequest::IsInitialized() const {
  return true;
}

void CompleteIPRotationRequest::Swap(CompleteIPRotationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompleteIPRotationRequest::InternalSwap(CompleteIPRotationRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompleteIPRotationRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompleteIPRotationRequest

// string project_id = 1;
void CompleteIPRotationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CompleteIPRotationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CompleteIPRotationRequest.project_id)
  return project_id_.GetNoArena();
}
void CompleteIPRotationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CompleteIPRotationRequest.project_id)
}
#if LANG_CXX11
void CompleteIPRotationRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CompleteIPRotationRequest.project_id)
}
#endif
void CompleteIPRotationRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CompleteIPRotationRequest.project_id)
}
void CompleteIPRotationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CompleteIPRotationRequest.project_id)
}
::std::string* CompleteIPRotationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CompleteIPRotationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompleteIPRotationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CompleteIPRotationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompleteIPRotationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CompleteIPRotationRequest.project_id)
}

// string zone = 2;
void CompleteIPRotationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CompleteIPRotationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CompleteIPRotationRequest.zone)
  return zone_.GetNoArena();
}
void CompleteIPRotationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CompleteIPRotationRequest.zone)
}
#if LANG_CXX11
void CompleteIPRotationRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CompleteIPRotationRequest.zone)
}
#endif
void CompleteIPRotationRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CompleteIPRotationRequest.zone)
}
void CompleteIPRotationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CompleteIPRotationRequest.zone)
}
::std::string* CompleteIPRotationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CompleteIPRotationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompleteIPRotationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CompleteIPRotationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompleteIPRotationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CompleteIPRotationRequest.zone)
}

// string cluster_id = 3;
void CompleteIPRotationRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CompleteIPRotationRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CompleteIPRotationRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void CompleteIPRotationRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CompleteIPRotationRequest.cluster_id)
}
#if LANG_CXX11
void CompleteIPRotationRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CompleteIPRotationRequest.cluster_id)
}
#endif
void CompleteIPRotationRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CompleteIPRotationRequest.cluster_id)
}
void CompleteIPRotationRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CompleteIPRotationRequest.cluster_id)
}
::std::string* CompleteIPRotationRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CompleteIPRotationRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompleteIPRotationRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CompleteIPRotationRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompleteIPRotationRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CompleteIPRotationRequest.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceleratorConfig::kAcceleratorCountFieldNumber;
const int AcceleratorConfig::kAcceleratorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceleratorConfig::AcceleratorConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.AcceleratorConfig)
}
AcceleratorConfig::AcceleratorConfig(const AcceleratorConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accelerator_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.accelerator_type().size() > 0) {
    accelerator_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accelerator_type_);
  }
  accelerator_count_ = from.accelerator_count_;
  // @@protoc_insertion_point(copy_constructor:google.container.v1.AcceleratorConfig)
}

void AcceleratorConfig::SharedCtor() {
  accelerator_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accelerator_count_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

AcceleratorConfig::~AcceleratorConfig() {
  // @@protoc_insertion_point(destructor:google.container.v1.AcceleratorConfig)
  SharedDtor();
}

void AcceleratorConfig::SharedDtor() {
  accelerator_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcceleratorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceleratorConfig::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcceleratorConfig& AcceleratorConfig::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

AcceleratorConfig* AcceleratorConfig::New(::google::protobuf::Arena* arena) const {
  AcceleratorConfig* n = new AcceleratorConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceleratorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.AcceleratorConfig)
  accelerator_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accelerator_count_ = GOOGLE_LONGLONG(0);
}

bool AcceleratorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.AcceleratorConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 accelerator_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accelerator_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string accelerator_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accelerator_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accelerator_type().data(), this->accelerator_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.AcceleratorConfig.accelerator_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.AcceleratorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.AcceleratorConfig)
  return false;
#undef DO_
}

void AcceleratorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.AcceleratorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 accelerator_count = 1;
  if (this->accelerator_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->accelerator_count(), output);
  }

  // string accelerator_type = 2;
  if (this->accelerator_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accelerator_type().data(), this->accelerator_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.AcceleratorConfig.accelerator_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accelerator_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.AcceleratorConfig)
}

::google::protobuf::uint8* AcceleratorConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.AcceleratorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 accelerator_count = 1;
  if (this->accelerator_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->accelerator_count(), target);
  }

  // string accelerator_type = 2;
  if (this->accelerator_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accelerator_type().data(), this->accelerator_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.AcceleratorConfig.accelerator_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accelerator_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.AcceleratorConfig)
  return target;
}

size_t AcceleratorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.AcceleratorConfig)
  size_t total_size = 0;

  // string accelerator_type = 2;
  if (this->accelerator_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accelerator_type());
  }

  // int64 accelerator_count = 1;
  if (this->accelerator_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->accelerator_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceleratorConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.AcceleratorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceleratorConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceleratorConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.AcceleratorConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.AcceleratorConfig)
    MergeFrom(*source);
  }
}

void AcceleratorConfig::MergeFrom(const AcceleratorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.AcceleratorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accelerator_type().size() > 0) {

    accelerator_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accelerator_type_);
  }
  if (from.accelerator_count() != 0) {
    set_accelerator_count(from.accelerator_count());
  }
}

void AcceleratorConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.AcceleratorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceleratorConfig::CopyFrom(const AcceleratorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.AcceleratorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceleratorConfig::IsInitialized() const {
  return true;
}

void AcceleratorConfig::Swap(AcceleratorConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceleratorConfig::InternalSwap(AcceleratorConfig* other) {
  accelerator_type_.Swap(&other->accelerator_type_);
  std::swap(accelerator_count_, other->accelerator_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceleratorConfig::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcceleratorConfig

// int64 accelerator_count = 1;
void AcceleratorConfig::clear_accelerator_count() {
  accelerator_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AcceleratorConfig::accelerator_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AcceleratorConfig.accelerator_count)
  return accelerator_count_;
}
void AcceleratorConfig::set_accelerator_count(::google::protobuf::int64 value) {
  
  accelerator_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.AcceleratorConfig.accelerator_count)
}

// string accelerator_type = 2;
void AcceleratorConfig::clear_accelerator_type() {
  accelerator_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AcceleratorConfig::accelerator_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AcceleratorConfig.accelerator_type)
  return accelerator_type_.GetNoArena();
}
void AcceleratorConfig::set_accelerator_type(const ::std::string& value) {
  
  accelerator_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AcceleratorConfig.accelerator_type)
}
#if LANG_CXX11
void AcceleratorConfig::set_accelerator_type(::std::string&& value) {
  
  accelerator_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AcceleratorConfig.accelerator_type)
}
#endif
void AcceleratorConfig::set_accelerator_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accelerator_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AcceleratorConfig.accelerator_type)
}
void AcceleratorConfig::set_accelerator_type(const char* value, size_t size) {
  
  accelerator_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AcceleratorConfig.accelerator_type)
}
::std::string* AcceleratorConfig::mutable_accelerator_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AcceleratorConfig.accelerator_type)
  return accelerator_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcceleratorConfig::release_accelerator_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.AcceleratorConfig.accelerator_type)
  
  return accelerator_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceleratorConfig::set_allocated_accelerator_type(::std::string* accelerator_type) {
  if (accelerator_type != NULL) {
    
  } else {
    
  }
  accelerator_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accelerator_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AcceleratorConfig.accelerator_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetNetworkPolicyRequest::kProjectIdFieldNumber;
const int SetNetworkPolicyRequest::kZoneFieldNumber;
const int SetNetworkPolicyRequest::kClusterIdFieldNumber;
const int SetNetworkPolicyRequest::kNetworkPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetNetworkPolicyRequest::SetNetworkPolicyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.container.v1.SetNetworkPolicyRequest)
}
SetNetworkPolicyRequest::SetNetworkPolicyRequest(const SetNetworkPolicyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zone().size() > 0) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_id().size() > 0) {
    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_network_policy()) {
    network_policy_ = new ::google::container::v1::NetworkPolicy(*from.network_policy_);
  } else {
    network_policy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.container.v1.SetNetworkPolicyRequest)
}

void SetNetworkPolicyRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_policy_ = NULL;
  _cached_size_ = 0;
}

SetNetworkPolicyRequest::~SetNetworkPolicyRequest() {
  // @@protoc_insertion_point(destructor:google.container.v1.SetNetworkPolicyRequest)
  SharedDtor();
}

void SetNetworkPolicyRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete network_policy_;
  }
}

void SetNetworkPolicyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetNetworkPolicyRequest::descriptor() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetNetworkPolicyRequest& SetNetworkPolicyRequest::default_instance() {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetNetworkPolicyRequest* SetNetworkPolicyRequest::New(::google::protobuf::Arena* arena) const {
  SetNetworkPolicyRequest* n = new SetNetworkPolicyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetNetworkPolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.container.v1.SetNetworkPolicyRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && network_policy_ != NULL) {
    delete network_policy_;
  }
  network_policy_ = NULL;
}

bool SetNetworkPolicyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.container.v1.SetNetworkPolicyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNetworkPolicyRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNetworkPolicyRequest.zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.container.v1.SetNetworkPolicyRequest.cluster_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.container.v1.NetworkPolicy network_policy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.container.v1.SetNetworkPolicyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.container.v1.SetNetworkPolicyRequest)
  return false;
#undef DO_
}

void SetNetworkPolicyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.container.v1.SetNetworkPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNetworkPolicyRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNetworkPolicyRequest.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zone(), output);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNetworkPolicyRequest.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_id(), output);
  }

  // .google.container.v1.NetworkPolicy network_policy = 4;
  if (this->has_network_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->network_policy_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.container.v1.SetNetworkPolicyRequest)
}

::google::protobuf::uint8* SetNetworkPolicyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.container.v1.SetNetworkPolicyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNetworkPolicyRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNetworkPolicyRequest.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.container.v1.SetNetworkPolicyRequest.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_id(), target);
  }

  // .google.container.v1.NetworkPolicy network_policy = 4;
  if (this->has_network_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->network_policy_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.container.v1.SetNetworkPolicyRequest)
  return target;
}

size_t SetNetworkPolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.container.v1.SetNetworkPolicyRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string zone = 2;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // string cluster_id = 3;
  if (this->cluster_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  // .google.container.v1.NetworkPolicy network_policy = 4;
  if (this->has_network_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->network_policy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNetworkPolicyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.container.v1.SetNetworkPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetNetworkPolicyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetNetworkPolicyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.container.v1.SetNetworkPolicyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.container.v1.SetNetworkPolicyRequest)
    MergeFrom(*source);
  }
}

void SetNetworkPolicyRequest::MergeFrom(const SetNetworkPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.container.v1.SetNetworkPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.cluster_id().size() > 0) {

    cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
  }
  if (from.has_network_policy()) {
    mutable_network_policy()->::google::container::v1::NetworkPolicy::MergeFrom(from.network_policy());
  }
}

void SetNetworkPolicyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.container.v1.SetNetworkPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNetworkPolicyRequest::CopyFrom(const SetNetworkPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.container.v1.SetNetworkPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNetworkPolicyRequest::IsInitialized() const {
  return true;
}

void SetNetworkPolicyRequest::Swap(SetNetworkPolicyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetNetworkPolicyRequest::InternalSwap(SetNetworkPolicyRequest* other) {
  project_id_.Swap(&other->project_id_);
  zone_.Swap(&other->zone_);
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(network_policy_, other->network_policy_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetNetworkPolicyRequest::GetMetadata() const {
  protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetNetworkPolicyRequest

// string project_id = 1;
void SetNetworkPolicyRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNetworkPolicyRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.project_id)
  return project_id_.GetNoArena();
}
void SetNetworkPolicyRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNetworkPolicyRequest.project_id)
}
#if LANG_CXX11
void SetNetworkPolicyRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNetworkPolicyRequest.project_id)
}
#endif
void SetNetworkPolicyRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNetworkPolicyRequest.project_id)
}
void SetNetworkPolicyRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNetworkPolicyRequest.project_id)
}
::std::string* SetNetworkPolicyRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNetworkPolicyRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNetworkPolicyRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.project_id)
}

// string zone = 2;
void SetNetworkPolicyRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNetworkPolicyRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.zone)
  return zone_.GetNoArena();
}
void SetNetworkPolicyRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNetworkPolicyRequest.zone)
}
#if LANG_CXX11
void SetNetworkPolicyRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNetworkPolicyRequest.zone)
}
#endif
void SetNetworkPolicyRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNetworkPolicyRequest.zone)
}
void SetNetworkPolicyRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNetworkPolicyRequest.zone)
}
::std::string* SetNetworkPolicyRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNetworkPolicyRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNetworkPolicyRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.zone)
}

// string cluster_id = 3;
void SetNetworkPolicyRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SetNetworkPolicyRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
void SetNetworkPolicyRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}
#if LANG_CXX11
void SetNetworkPolicyRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}
#endif
void SetNetworkPolicyRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}
void SetNetworkPolicyRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}
::std::string* SetNetworkPolicyRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SetNetworkPolicyRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SetNetworkPolicyRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}

// .google.container.v1.NetworkPolicy network_policy = 4;
bool SetNetworkPolicyRequest::has_network_policy() const {
  return this != internal_default_instance() && network_policy_ != NULL;
}
void SetNetworkPolicyRequest::clear_network_policy() {
  if (GetArenaNoVirtual() == NULL && network_policy_ != NULL) delete network_policy_;
  network_policy_ = NULL;
}
const ::google::container::v1::NetworkPolicy& SetNetworkPolicyRequest::network_policy() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.network_policy)
  return network_policy_ != NULL ? *network_policy_
                         : *::google::container::v1::NetworkPolicy::internal_default_instance();
}
::google::container::v1::NetworkPolicy* SetNetworkPolicyRequest::mutable_network_policy() {
  
  if (network_policy_ == NULL) {
    network_policy_ = new ::google::container::v1::NetworkPolicy;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.network_policy)
  return network_policy_;
}
::google::container::v1::NetworkPolicy* SetNetworkPolicyRequest::release_network_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.network_policy)
  
  ::google::container::v1::NetworkPolicy* temp = network_policy_;
  network_policy_ = NULL;
  return temp;
}
void SetNetworkPolicyRequest::set_allocated_network_policy(::google::container::v1::NetworkPolicy* network_policy) {
  delete network_policy_;
  network_policy_ = network_policy;
  if (network_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.network_policy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace container
}  // namespace google

// @@protoc_insertion_point(global_scope)
