// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/admin/v1beta1/datastore_admin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/datastore/admin/v1beta1/datastore_admin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace datastore {
namespace admin {
namespace v1beta1 {
class CommonMetadata_LabelsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommonMetadata::CommonMetadata_LabelsEntry> {
} _CommonMetadata_LabelsEntry_default_instance_;
class CommonMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommonMetadata> {
} _CommonMetadata_default_instance_;
class ProgressDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Progress> {
} _Progress_default_instance_;
class ExportEntitiesRequest_LabelsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExportEntitiesRequest::ExportEntitiesRequest_LabelsEntry> {
} _ExportEntitiesRequest_LabelsEntry_default_instance_;
class ExportEntitiesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExportEntitiesRequest> {
} _ExportEntitiesRequest_default_instance_;
class ImportEntitiesRequest_LabelsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImportEntitiesRequest::ImportEntitiesRequest_LabelsEntry> {
} _ImportEntitiesRequest_LabelsEntry_default_instance_;
class ImportEntitiesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImportEntitiesRequest> {
} _ImportEntitiesRequest_default_instance_;
class ExportEntitiesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExportEntitiesResponse> {
} _ExportEntitiesResponse_default_instance_;
class ExportEntitiesMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExportEntitiesMetadata> {
} _ExportEntitiesMetadata_default_instance_;
class ImportEntitiesMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImportEntitiesMetadata> {
} _ImportEntitiesMetadata_default_instance_;
class EntityFilterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EntityFilter> {
} _EntityFilter_default_instance_;

namespace protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMetadata, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMetadata, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMetadata, operation_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMetadata, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMetadata, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Progress, work_completed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Progress, work_estimated_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesRequest, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesRequest, entity_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesRequest, output_url_prefix_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportEntitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportEntitiesRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportEntitiesRequest, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportEntitiesRequest, input_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportEntitiesRequest, entity_filter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesResponse, output_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesMetadata, common_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesMetadata, progress_entities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesMetadata, progress_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesMetadata, entity_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportEntitiesMetadata, output_url_prefix_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportEntitiesMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportEntitiesMetadata, common_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportEntitiesMetadata, progress_entities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportEntitiesMetadata, progress_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportEntitiesMetadata, entity_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportEntitiesMetadata, input_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityFilter, kinds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityFilter, namespace_ids_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CommonMetadata)},
  { 10, -1, sizeof(Progress)},
  { 17, -1, sizeof(ExportEntitiesRequest)},
  { 26, -1, sizeof(ImportEntitiesRequest)},
  { 35, -1, sizeof(ExportEntitiesResponse)},
  { 41, -1, sizeof(ExportEntitiesMetadata)},
  { 51, -1, sizeof(ImportEntitiesMetadata)},
  { 61, -1, sizeof(EntityFilter)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonMetadata_LabelsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Progress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExportEntitiesRequest_LabelsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExportEntitiesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImportEntitiesRequest_LabelsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImportEntitiesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExportEntitiesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExportEntitiesMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImportEntitiesMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EntityFilter_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/datastore/admin/v1beta1/datastore_admin.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[0].reflection = CommonMetadata::CommonMetadata_LabelsEntry::CreateReflection(file_level_metadata[0].descriptor, _CommonMetadata_LabelsEntry_default_instance_.get_mutable());
file_level_metadata[3].reflection = ExportEntitiesRequest::ExportEntitiesRequest_LabelsEntry::CreateReflection(file_level_metadata[3].descriptor, _ExportEntitiesRequest_LabelsEntry_default_instance_.get_mutable());
file_level_metadata[5].reflection = ImportEntitiesRequest::ImportEntitiesRequest_LabelsEntry::CreateReflection(file_level_metadata[5].descriptor, _ImportEntitiesRequest_LabelsEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace

void TableStruct::Shutdown() {
  _CommonMetadata_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Progress_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ExportEntitiesRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ImportEntitiesRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ExportEntitiesResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ExportEntitiesMetadata_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ImportEntitiesMetadata_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _EntityFilter_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  delete file_level_metadata[0].reflection;
  delete file_level_metadata[3].reflection;
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _CommonMetadata_LabelsEntry_default_instance_.DefaultConstruct();
  _CommonMetadata_default_instance_.DefaultConstruct();
  _Progress_default_instance_.DefaultConstruct();
  _ExportEntitiesRequest_LabelsEntry_default_instance_.DefaultConstruct();
  _ExportEntitiesRequest_default_instance_.DefaultConstruct();
  _ImportEntitiesRequest_LabelsEntry_default_instance_.DefaultConstruct();
  _ImportEntitiesRequest_default_instance_.DefaultConstruct();
  _ExportEntitiesResponse_default_instance_.DefaultConstruct();
  _ExportEntitiesMetadata_default_instance_.DefaultConstruct();
  _ImportEntitiesMetadata_default_instance_.DefaultConstruct();
  _EntityFilter_default_instance_.DefaultConstruct();
  _CommonMetadata_LabelsEntry_default_instance_.get_mutable()->set_default_instance(_CommonMetadata_LabelsEntry_default_instance_.get_mutable());
  _CommonMetadata_LabelsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _CommonMetadata_default_instance_.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _CommonMetadata_default_instance_.get_mutable()->end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _ExportEntitiesRequest_LabelsEntry_default_instance_.get_mutable()->set_default_instance(_ExportEntitiesRequest_LabelsEntry_default_instance_.get_mutable());
  _ExportEntitiesRequest_LabelsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _ExportEntitiesRequest_default_instance_.get_mutable()->entity_filter_ = const_cast< ::google::datastore::admin::v1beta1::EntityFilter*>(
      ::google::datastore::admin::v1beta1::EntityFilter::internal_default_instance());
  _ImportEntitiesRequest_LabelsEntry_default_instance_.get_mutable()->set_default_instance(_ImportEntitiesRequest_LabelsEntry_default_instance_.get_mutable());
  _ImportEntitiesRequest_LabelsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _ImportEntitiesRequest_default_instance_.get_mutable()->entity_filter_ = const_cast< ::google::datastore::admin::v1beta1::EntityFilter*>(
      ::google::datastore::admin::v1beta1::EntityFilter::internal_default_instance());
  _ExportEntitiesMetadata_default_instance_.get_mutable()->common_ = const_cast< ::google::datastore::admin::v1beta1::CommonMetadata*>(
      ::google::datastore::admin::v1beta1::CommonMetadata::internal_default_instance());
  _ExportEntitiesMetadata_default_instance_.get_mutable()->progress_entities_ = const_cast< ::google::datastore::admin::v1beta1::Progress*>(
      ::google::datastore::admin::v1beta1::Progress::internal_default_instance());
  _ExportEntitiesMetadata_default_instance_.get_mutable()->progress_bytes_ = const_cast< ::google::datastore::admin::v1beta1::Progress*>(
      ::google::datastore::admin::v1beta1::Progress::internal_default_instance());
  _ExportEntitiesMetadata_default_instance_.get_mutable()->entity_filter_ = const_cast< ::google::datastore::admin::v1beta1::EntityFilter*>(
      ::google::datastore::admin::v1beta1::EntityFilter::internal_default_instance());
  _ImportEntitiesMetadata_default_instance_.get_mutable()->common_ = const_cast< ::google::datastore::admin::v1beta1::CommonMetadata*>(
      ::google::datastore::admin::v1beta1::CommonMetadata::internal_default_instance());
  _ImportEntitiesMetadata_default_instance_.get_mutable()->progress_entities_ = const_cast< ::google::datastore::admin::v1beta1::Progress*>(
      ::google::datastore::admin::v1beta1::Progress::internal_default_instance());
  _ImportEntitiesMetadata_default_instance_.get_mutable()->progress_bytes_ = const_cast< ::google::datastore::admin::v1beta1::Progress*>(
      ::google::datastore::admin::v1beta1::Progress::internal_default_instance());
  _ImportEntitiesMetadata_default_instance_.get_mutable()->entity_filter_ = const_cast< ::google::datastore::admin::v1beta1::EntityFilter*>(
      ::google::datastore::admin::v1beta1::EntityFilter::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n4google/datastore/admin/v1beta1/datasto"
      "re_admin.proto\022\036google.datastore.admin.v"
      "1beta1\032\034google/api/annotations.proto\032#go"
      "ogle/longrunning/operations.proto\032\037googl"
      "e/protobuf/timestamp.proto\"\203\004\n\016CommonMet"
      "adata\022.\n\nstart_time\030\001 \001(\0132\032.google.proto"
      "buf.Timestamp\022,\n\010end_time\030\002 \001(\0132\032.google"
      ".protobuf.Timestamp\022E\n\016operation_type\030\003 "
      "\001(\0162-.google.datastore.admin.v1beta1.Ope"
      "rationType\022J\n\006labels\030\004 \003(\0132:.google.data"
      "store.admin.v1beta1.CommonMetadata.Label"
      "sEntry\022C\n\005state\030\005 \001(\01624.google.datastore"
      ".admin.v1beta1.CommonMetadata.State\032-\n\013L"
      "abelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
      "8\001\"\213\001\n\005State\022\025\n\021STATE_UNSPECIFIED\020\000\022\020\n\014I"
      "NITIALIZING\020\001\022\016\n\nPROCESSING\020\002\022\016\n\nCANCELL"
      "ING\020\003\022\016\n\nFINALIZING\020\004\022\016\n\nSUCCESSFUL\020\005\022\n\n"
      "\006FAILED\020\006\022\r\n\tCANCELLED\020\007\":\n\010Progress\022\026\n\016"
      "work_completed\030\001 \001(\003\022\026\n\016work_estimated\030\002"
      " \001(\003\"\215\002\n\025ExportEntitiesRequest\022\022\n\nprojec"
      "t_id\030\001 \001(\t\022Q\n\006labels\030\002 \003(\0132A.google.data"
      "store.admin.v1beta1.ExportEntitiesReques"
      "t.LabelsEntry\022C\n\rentity_filter\030\003 \001(\0132,.g"
      "oogle.datastore.admin.v1beta1.EntityFilt"
      "er\022\031\n\021output_url_prefix\030\004 \001(\t\032-\n\013LabelsE"
      "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\205\002\n"
      "\025ImportEntitiesRequest\022\022\n\nproject_id\030\001 \001"
      "(\t\022Q\n\006labels\030\002 \003(\0132A.google.datastore.ad"
      "min.v1beta1.ImportEntitiesRequest.Labels"
      "Entry\022\021\n\tinput_url\030\003 \001(\t\022C\n\rentity_filte"
      "r\030\004 \001(\0132,.google.datastore.admin.v1beta1"
      ".EntityFilter\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001("
      "\t\022\r\n\005value\030\002 \001(\t:\0028\001\",\n\026ExportEntitiesRe"
      "sponse\022\022\n\noutput_url\030\001 \001(\t\"\277\002\n\026ExportEnt"
      "itiesMetadata\022>\n\006common\030\001 \001(\0132..google.d"
      "atastore.admin.v1beta1.CommonMetadata\022C\n"
      "\021progress_entities\030\002 \001(\0132(.google.datast"
      "ore.admin.v1beta1.Progress\022@\n\016progress_b"
      "ytes\030\003 \001(\0132(.google.datastore.admin.v1be"
      "ta1.Progress\022C\n\rentity_filter\030\004 \001(\0132,.go"
      "ogle.datastore.admin.v1beta1.EntityFilte"
      "r\022\031\n\021output_url_prefix\030\005 \001(\t\"\267\002\n\026ImportE"
      "ntitiesMetadata\022>\n\006common\030\001 \001(\0132..google"
      ".datastore.admin.v1beta1.CommonMetadata\022"
      "C\n\021progress_entities\030\002 \001(\0132(.google.data"
      "store.admin.v1beta1.Progress\022@\n\016progress"
      "_bytes\030\003 \001(\0132(.google.datastore.admin.v1"
      "beta1.Progress\022C\n\rentity_filter\030\004 \001(\0132,."
      "google.datastore.admin.v1beta1.EntityFil"
      "ter\022\021\n\tinput_url\030\005 \001(\t\"4\n\014EntityFilter\022\r"
      "\n\005kinds\030\001 \003(\t\022\025\n\rnamespace_ids\030\002 \003(\t*Y\n\r"
      "OperationType\022\036\n\032OPERATION_TYPE_UNSPECIF"
      "IED\020\000\022\023\n\017EXPORT_ENTITIES\020\001\022\023\n\017IMPORT_ENT"
      "ITIES\020\0022\306\002\n\016DatastoreAdmin\022\230\001\n\016ExportEnt"
      "ities\0225.google.datastore.admin.v1beta1.E"
      "xportEntitiesRequest\032\035.google.longrunnin"
      "g.Operation\"0\202\323\344\223\002*\"%/v1beta1/projects/{"
      "project_id}:export:\001*\022\230\001\n\016ImportEntities"
      "\0225.google.datastore.admin.v1beta1.Import"
      "EntitiesRequest\032\035.google.longrunning.Ope"
      "ration\"0\202\323\344\223\002*\"%/v1beta1/projects/{proje"
      "ct_id}:import:\001*B\247\001\n\"com.google.datastor"
      "e.admin.v1beta1B\023DatastoreAdminProtoP\001ZC"
      "google.golang.org/genproto/googleapis/da"
      "tastore/admin/v1beta1;admin\252\002$Google.Clo"
      "ud.Datastore.Admin.V1Beta1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2634);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/datastore/admin/v1beta1/datastore_admin.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto

const ::google::protobuf::EnumDescriptor* CommonMetadata_State_descriptor() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_enum_descriptors[0];
}
bool CommonMetadata_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommonMetadata_State CommonMetadata::STATE_UNSPECIFIED;
const CommonMetadata_State CommonMetadata::INITIALIZING;
const CommonMetadata_State CommonMetadata::PROCESSING;
const CommonMetadata_State CommonMetadata::CANCELLING;
const CommonMetadata_State CommonMetadata::FINALIZING;
const CommonMetadata_State CommonMetadata::SUCCESSFUL;
const CommonMetadata_State CommonMetadata::FAILED;
const CommonMetadata_State CommonMetadata::CANCELLED;
const CommonMetadata_State CommonMetadata::State_MIN;
const CommonMetadata_State CommonMetadata::State_MAX;
const int CommonMetadata::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OperationType_descriptor() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_enum_descriptors[1];
}
bool OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

CommonMetadata::CommonMetadata_LabelsEntry::CommonMetadata_LabelsEntry() {}
CommonMetadata::CommonMetadata_LabelsEntry::CommonMetadata_LabelsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata CommonMetadata::CommonMetadata_LabelsEntry::GetMetadata() const {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[0];
}
void CommonMetadata::CommonMetadata_LabelsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void CommonMetadata::CommonMetadata_LabelsEntry::MergeFrom(const CommonMetadata_LabelsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonMetadata::kStartTimeFieldNumber;
const int CommonMetadata::kEndTimeFieldNumber;
const int CommonMetadata::kOperationTypeFieldNumber;
const int CommonMetadata::kLabelsFieldNumber;
const int CommonMetadata::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonMetadata::CommonMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.admin.v1beta1.CommonMetadata)
}
CommonMetadata::CommonMetadata(const CommonMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Timestamp(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  ::memcpy(&operation_type_, &from.operation_type_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&operation_type_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:google.datastore.admin.v1beta1.CommonMetadata)
}

void CommonMetadata::SharedCtor() {
  ::memset(&start_time_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(state_));
  _cached_size_ = 0;
}

CommonMetadata::~CommonMetadata() {
  // @@protoc_insertion_point(destructor:google.datastore.admin.v1beta1.CommonMetadata)
  SharedDtor();
}

void CommonMetadata::SharedDtor() {
  if (this != internal_default_instance()) {
    delete start_time_;
  }
  if (this != internal_default_instance()) {
    delete end_time_;
  }
}

void CommonMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonMetadata::descriptor() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonMetadata& CommonMetadata::default_instance() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonMetadata* CommonMetadata::New(::google::protobuf::Arena* arena) const {
  CommonMetadata* n = new CommonMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.admin.v1beta1.CommonMetadata)
  labels_.Clear();
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  ::memset(&operation_type_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&operation_type_) + sizeof(state_));
}

bool CommonMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.admin.v1beta1.CommonMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.admin.v1beta1.OperationType operation_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation_type(static_cast< ::google::datastore::admin::v1beta1::OperationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          CommonMetadata_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              CommonMetadata_LabelsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.CommonMetadata.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.CommonMetadata.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.admin.v1beta1.CommonMetadata.State state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::datastore::admin::v1beta1::CommonMetadata_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.admin.v1beta1.CommonMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.admin.v1beta1.CommonMetadata)
  return false;
#undef DO_
}

void CommonMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.admin.v1beta1.CommonMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->start_time_, output);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->end_time_, output);
  }

  // .google.datastore.admin.v1beta1.OperationType operation_type = 3;
  if (this->operation_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operation_type(), output);
  }

  // map<string, string> labels = 4;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.datastore.admin.v1beta1.CommonMetadata.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.datastore.admin.v1beta1.CommonMetadata.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CommonMetadata_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CommonMetadata_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.datastore.admin.v1beta1.CommonMetadata.State state = 5;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.admin.v1beta1.CommonMetadata)
}

::google::protobuf::uint8* CommonMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.admin.v1beta1.CommonMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->start_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->end_time_, deterministic, target);
  }

  // .google.datastore.admin.v1beta1.OperationType operation_type = 3;
  if (this->operation_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operation_type(), target);
  }

  // map<string, string> labels = 4;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.datastore.admin.v1beta1.CommonMetadata.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.datastore.admin.v1beta1.CommonMetadata.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<CommonMetadata_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<CommonMetadata_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.datastore.admin.v1beta1.CommonMetadata.State state = 5;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.admin.v1beta1.CommonMetadata)
  return target;
}

size_t CommonMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.admin.v1beta1.CommonMetadata)
  size_t total_size = 0;

  // map<string, string> labels = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<CommonMetadata_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .google.protobuf.Timestamp start_time = 1;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_time_);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_time_);
  }

  // .google.datastore.admin.v1beta1.OperationType operation_type = 3;
  if (this->operation_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation_type());
  }

  // .google.datastore.admin.v1beta1.CommonMetadata.State state = 5;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.admin.v1beta1.CommonMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.admin.v1beta1.CommonMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.admin.v1beta1.CommonMetadata)
    MergeFrom(*source);
  }
}

void CommonMetadata::MergeFrom(const CommonMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.admin.v1beta1.CommonMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Timestamp::MergeFrom(from.end_time());
  }
  if (from.operation_type() != 0) {
    set_operation_type(from.operation_type());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void CommonMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.admin.v1beta1.CommonMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonMetadata::CopyFrom(const CommonMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.admin.v1beta1.CommonMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonMetadata::IsInitialized() const {
  return true;
}

void CommonMetadata::Swap(CommonMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonMetadata::InternalSwap(CommonMetadata* other) {
  labels_.Swap(&other->labels_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(operation_type_, other->operation_type_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonMetadata::GetMetadata() const {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonMetadata

// .google.protobuf.Timestamp start_time = 1;
bool CommonMetadata::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
void CommonMetadata::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
}
const ::google::protobuf::Timestamp& CommonMetadata::start_time() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.CommonMetadata.start_time)
  return start_time_ != NULL ? *start_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* CommonMetadata::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.CommonMetadata.start_time)
  return start_time_;
}
::google::protobuf::Timestamp* CommonMetadata::release_start_time() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.CommonMetadata.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
void CommonMetadata::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  delete start_time_;
  if (start_time != NULL && start_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_start_time = new ::google::protobuf::Timestamp;
    new_start_time->CopyFrom(*start_time);
    start_time = new_start_time;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.CommonMetadata.start_time)
}

// .google.protobuf.Timestamp end_time = 2;
bool CommonMetadata::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
void CommonMetadata::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) delete end_time_;
  end_time_ = NULL;
}
const ::google::protobuf::Timestamp& CommonMetadata::end_time() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.CommonMetadata.end_time)
  return end_time_ != NULL ? *end_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* CommonMetadata::mutable_end_time() {
  
  if (end_time_ == NULL) {
    end_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.CommonMetadata.end_time)
  return end_time_;
}
::google::protobuf::Timestamp* CommonMetadata::release_end_time() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.CommonMetadata.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
void CommonMetadata::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  delete end_time_;
  if (end_time != NULL && end_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_end_time = new ::google::protobuf::Timestamp;
    new_end_time->CopyFrom(*end_time);
    end_time = new_end_time;
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.CommonMetadata.end_time)
}

// .google.datastore.admin.v1beta1.OperationType operation_type = 3;
void CommonMetadata::clear_operation_type() {
  operation_type_ = 0;
}
::google::datastore::admin::v1beta1::OperationType CommonMetadata::operation_type() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.CommonMetadata.operation_type)
  return static_cast< ::google::datastore::admin::v1beta1::OperationType >(operation_type_);
}
void CommonMetadata::set_operation_type(::google::datastore::admin::v1beta1::OperationType value) {
  
  operation_type_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.CommonMetadata.operation_type)
}

// map<string, string> labels = 4;
int CommonMetadata::labels_size() const {
  return labels_.size();
}
void CommonMetadata::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
CommonMetadata::labels() const {
  // @@protoc_insertion_point(field_map:google.datastore.admin.v1beta1.CommonMetadata.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
CommonMetadata::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.datastore.admin.v1beta1.CommonMetadata.labels)
  return labels_.MutableMap();
}

// .google.datastore.admin.v1beta1.CommonMetadata.State state = 5;
void CommonMetadata::clear_state() {
  state_ = 0;
}
::google::datastore::admin::v1beta1::CommonMetadata_State CommonMetadata::state() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.CommonMetadata.state)
  return static_cast< ::google::datastore::admin::v1beta1::CommonMetadata_State >(state_);
}
void CommonMetadata::set_state(::google::datastore::admin::v1beta1::CommonMetadata_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.CommonMetadata.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Progress::kWorkCompletedFieldNumber;
const int Progress::kWorkEstimatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Progress::Progress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.admin.v1beta1.Progress)
}
Progress::Progress(const Progress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&work_completed_, &from.work_completed_,
    reinterpret_cast<char*>(&work_estimated_) -
    reinterpret_cast<char*>(&work_completed_) + sizeof(work_estimated_));
  // @@protoc_insertion_point(copy_constructor:google.datastore.admin.v1beta1.Progress)
}

void Progress::SharedCtor() {
  ::memset(&work_completed_, 0, reinterpret_cast<char*>(&work_estimated_) -
    reinterpret_cast<char*>(&work_completed_) + sizeof(work_estimated_));
  _cached_size_ = 0;
}

Progress::~Progress() {
  // @@protoc_insertion_point(destructor:google.datastore.admin.v1beta1.Progress)
  SharedDtor();
}

void Progress::SharedDtor() {
}

void Progress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Progress::descriptor() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Progress& Progress::default_instance() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

Progress* Progress::New(::google::protobuf::Arena* arena) const {
  Progress* n = new Progress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.admin.v1beta1.Progress)
  ::memset(&work_completed_, 0, reinterpret_cast<char*>(&work_estimated_) -
    reinterpret_cast<char*>(&work_completed_) + sizeof(work_estimated_));
}

bool Progress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.admin.v1beta1.Progress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 work_completed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &work_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 work_estimated = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &work_estimated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.admin.v1beta1.Progress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.admin.v1beta1.Progress)
  return false;
#undef DO_
}

void Progress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.admin.v1beta1.Progress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 work_completed = 1;
  if (this->work_completed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->work_completed(), output);
  }

  // int64 work_estimated = 2;
  if (this->work_estimated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->work_estimated(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.admin.v1beta1.Progress)
}

::google::protobuf::uint8* Progress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.admin.v1beta1.Progress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 work_completed = 1;
  if (this->work_completed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->work_completed(), target);
  }

  // int64 work_estimated = 2;
  if (this->work_estimated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->work_estimated(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.admin.v1beta1.Progress)
  return target;
}

size_t Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.admin.v1beta1.Progress)
  size_t total_size = 0;

  // int64 work_completed = 1;
  if (this->work_completed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->work_completed());
  }

  // int64 work_estimated = 2;
  if (this->work_estimated() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->work_estimated());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Progress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.admin.v1beta1.Progress)
  GOOGLE_DCHECK_NE(&from, this);
  const Progress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Progress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.admin.v1beta1.Progress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.admin.v1beta1.Progress)
    MergeFrom(*source);
  }
}

void Progress::MergeFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.admin.v1beta1.Progress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.work_completed() != 0) {
    set_work_completed(from.work_completed());
  }
  if (from.work_estimated() != 0) {
    set_work_estimated(from.work_estimated());
  }
}

void Progress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.admin.v1beta1.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Progress::CopyFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.admin.v1beta1.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Progress::IsInitialized() const {
  return true;
}

void Progress::Swap(Progress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Progress::InternalSwap(Progress* other) {
  std::swap(work_completed_, other->work_completed_);
  std::swap(work_estimated_, other->work_estimated_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Progress::GetMetadata() const {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Progress

// int64 work_completed = 1;
void Progress::clear_work_completed() {
  work_completed_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Progress::work_completed() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.Progress.work_completed)
  return work_completed_;
}
void Progress::set_work_completed(::google::protobuf::int64 value) {
  
  work_completed_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.Progress.work_completed)
}

// int64 work_estimated = 2;
void Progress::clear_work_estimated() {
  work_estimated_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Progress::work_estimated() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.Progress.work_estimated)
  return work_estimated_;
}
void Progress::set_work_estimated(::google::protobuf::int64 value) {
  
  work_estimated_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.Progress.work_estimated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ExportEntitiesRequest::ExportEntitiesRequest_LabelsEntry::ExportEntitiesRequest_LabelsEntry() {}
ExportEntitiesRequest::ExportEntitiesRequest_LabelsEntry::ExportEntitiesRequest_LabelsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ExportEntitiesRequest::ExportEntitiesRequest_LabelsEntry::GetMetadata() const {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[3];
}
void ExportEntitiesRequest::ExportEntitiesRequest_LabelsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ExportEntitiesRequest::ExportEntitiesRequest_LabelsEntry::MergeFrom(const ExportEntitiesRequest_LabelsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportEntitiesRequest::kProjectIdFieldNumber;
const int ExportEntitiesRequest::kLabelsFieldNumber;
const int ExportEntitiesRequest::kEntityFilterFieldNumber;
const int ExportEntitiesRequest::kOutputUrlPrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportEntitiesRequest::ExportEntitiesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.admin.v1beta1.ExportEntitiesRequest)
}
ExportEntitiesRequest::ExportEntitiesRequest(const ExportEntitiesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  output_url_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output_url_prefix().size() > 0) {
    output_url_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_url_prefix_);
  }
  if (from.has_entity_filter()) {
    entity_filter_ = new ::google::datastore::admin::v1beta1::EntityFilter(*from.entity_filter_);
  } else {
    entity_filter_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.admin.v1beta1.ExportEntitiesRequest)
}

void ExportEntitiesRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_url_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_filter_ = NULL;
  _cached_size_ = 0;
}

ExportEntitiesRequest::~ExportEntitiesRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  SharedDtor();
}

void ExportEntitiesRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_url_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete entity_filter_;
  }
}

void ExportEntitiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportEntitiesRequest::descriptor() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExportEntitiesRequest& ExportEntitiesRequest::default_instance() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExportEntitiesRequest* ExportEntitiesRequest::New(::google::protobuf::Arena* arena) const {
  ExportEntitiesRequest* n = new ExportEntitiesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExportEntitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  labels_.Clear();
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_url_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && entity_filter_ != NULL) {
    delete entity_filter_;
  }
  entity_filter_ = NULL;
}

bool ExportEntitiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.ExportEntitiesRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          ExportEntitiesRequest_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              ExportEntitiesRequest_LabelsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.ExportEntitiesRequest.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.ExportEntitiesRequest.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_url_prefix = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_url_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_url_prefix().data(), this->output_url_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  return false;
#undef DO_
}

void ExportEntitiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ExportEntitiesRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.datastore.admin.v1beta1.ExportEntitiesRequest.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.datastore.admin.v1beta1.ExportEntitiesRequest.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ExportEntitiesRequest_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExportEntitiesRequest_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 3;
  if (this->has_entity_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->entity_filter_, output);
  }

  // string output_url_prefix = 4;
  if (this->output_url_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_url_prefix().data(), this->output_url_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->output_url_prefix(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.admin.v1beta1.ExportEntitiesRequest)
}

::google::protobuf::uint8* ExportEntitiesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ExportEntitiesRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.datastore.admin.v1beta1.ExportEntitiesRequest.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.datastore.admin.v1beta1.ExportEntitiesRequest.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ExportEntitiesRequest_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExportEntitiesRequest_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 3;
  if (this->has_entity_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->entity_filter_, deterministic, target);
  }

  // string output_url_prefix = 4;
  if (this->output_url_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_url_prefix().data(), this->output_url_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->output_url_prefix(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  return target;
}

size_t ExportEntitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  size_t total_size = 0;

  // map<string, string> labels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<ExportEntitiesRequest_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string output_url_prefix = 4;
  if (this->output_url_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_url_prefix());
  }

  // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 3;
  if (this->has_entity_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entity_filter_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportEntitiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportEntitiesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportEntitiesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.admin.v1beta1.ExportEntitiesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.admin.v1beta1.ExportEntitiesRequest)
    MergeFrom(*source);
  }
}

void ExportEntitiesRequest::MergeFrom(const ExportEntitiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.output_url_prefix().size() > 0) {

    output_url_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_url_prefix_);
  }
  if (from.has_entity_filter()) {
    mutable_entity_filter()->::google::datastore::admin::v1beta1::EntityFilter::MergeFrom(from.entity_filter());
  }
}

void ExportEntitiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportEntitiesRequest::CopyFrom(const ExportEntitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.admin.v1beta1.ExportEntitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportEntitiesRequest::IsInitialized() const {
  return true;
}

void ExportEntitiesRequest::Swap(ExportEntitiesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportEntitiesRequest::InternalSwap(ExportEntitiesRequest* other) {
  labels_.Swap(&other->labels_);
  project_id_.Swap(&other->project_id_);
  output_url_prefix_.Swap(&other->output_url_prefix_);
  std::swap(entity_filter_, other->entity_filter_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportEntitiesRequest::GetMetadata() const {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExportEntitiesRequest

// string project_id = 1;
void ExportEntitiesRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ExportEntitiesRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ExportEntitiesRequest.project_id)
  return project_id_.GetNoArena();
}
void ExportEntitiesRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.ExportEntitiesRequest.project_id)
}
#if LANG_CXX11
void ExportEntitiesRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.admin.v1beta1.ExportEntitiesRequest.project_id)
}
#endif
void ExportEntitiesRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.admin.v1beta1.ExportEntitiesRequest.project_id)
}
void ExportEntitiesRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.admin.v1beta1.ExportEntitiesRequest.project_id)
}
::std::string* ExportEntitiesRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ExportEntitiesRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExportEntitiesRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ExportEntitiesRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExportEntitiesRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ExportEntitiesRequest.project_id)
}

// map<string, string> labels = 2;
int ExportEntitiesRequest::labels_size() const {
  return labels_.size();
}
void ExportEntitiesRequest::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
ExportEntitiesRequest::labels() const {
  // @@protoc_insertion_point(field_map:google.datastore.admin.v1beta1.ExportEntitiesRequest.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
ExportEntitiesRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.datastore.admin.v1beta1.ExportEntitiesRequest.labels)
  return labels_.MutableMap();
}

// .google.datastore.admin.v1beta1.EntityFilter entity_filter = 3;
bool ExportEntitiesRequest::has_entity_filter() const {
  return this != internal_default_instance() && entity_filter_ != NULL;
}
void ExportEntitiesRequest::clear_entity_filter() {
  if (GetArenaNoVirtual() == NULL && entity_filter_ != NULL) delete entity_filter_;
  entity_filter_ = NULL;
}
const ::google::datastore::admin::v1beta1::EntityFilter& ExportEntitiesRequest::entity_filter() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ExportEntitiesRequest.entity_filter)
  return entity_filter_ != NULL ? *entity_filter_
                         : *::google::datastore::admin::v1beta1::EntityFilter::internal_default_instance();
}
::google::datastore::admin::v1beta1::EntityFilter* ExportEntitiesRequest::mutable_entity_filter() {
  
  if (entity_filter_ == NULL) {
    entity_filter_ = new ::google::datastore::admin::v1beta1::EntityFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ExportEntitiesRequest.entity_filter)
  return entity_filter_;
}
::google::datastore::admin::v1beta1::EntityFilter* ExportEntitiesRequest::release_entity_filter() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ExportEntitiesRequest.entity_filter)
  
  ::google::datastore::admin::v1beta1::EntityFilter* temp = entity_filter_;
  entity_filter_ = NULL;
  return temp;
}
void ExportEntitiesRequest::set_allocated_entity_filter(::google::datastore::admin::v1beta1::EntityFilter* entity_filter) {
  delete entity_filter_;
  entity_filter_ = entity_filter;
  if (entity_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ExportEntitiesRequest.entity_filter)
}

// string output_url_prefix = 4;
void ExportEntitiesRequest::clear_output_url_prefix() {
  output_url_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ExportEntitiesRequest::output_url_prefix() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix)
  return output_url_prefix_.GetNoArena();
}
void ExportEntitiesRequest::set_output_url_prefix(const ::std::string& value) {
  
  output_url_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix)
}
#if LANG_CXX11
void ExportEntitiesRequest::set_output_url_prefix(::std::string&& value) {
  
  output_url_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix)
}
#endif
void ExportEntitiesRequest::set_output_url_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_url_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix)
}
void ExportEntitiesRequest::set_output_url_prefix(const char* value, size_t size) {
  
  output_url_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix)
}
::std::string* ExportEntitiesRequest::mutable_output_url_prefix() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix)
  return output_url_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExportEntitiesRequest::release_output_url_prefix() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix)
  
  return output_url_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExportEntitiesRequest::set_allocated_output_url_prefix(::std::string* output_url_prefix) {
  if (output_url_prefix != NULL) {
    
  } else {
    
  }
  output_url_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_url_prefix);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ImportEntitiesRequest::ImportEntitiesRequest_LabelsEntry::ImportEntitiesRequest_LabelsEntry() {}
ImportEntitiesRequest::ImportEntitiesRequest_LabelsEntry::ImportEntitiesRequest_LabelsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ImportEntitiesRequest::ImportEntitiesRequest_LabelsEntry::GetMetadata() const {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[5];
}
void ImportEntitiesRequest::ImportEntitiesRequest_LabelsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ImportEntitiesRequest::ImportEntitiesRequest_LabelsEntry::MergeFrom(const ImportEntitiesRequest_LabelsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportEntitiesRequest::kProjectIdFieldNumber;
const int ImportEntitiesRequest::kLabelsFieldNumber;
const int ImportEntitiesRequest::kInputUrlFieldNumber;
const int ImportEntitiesRequest::kEntityFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportEntitiesRequest::ImportEntitiesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.admin.v1beta1.ImportEntitiesRequest)
}
ImportEntitiesRequest::ImportEntitiesRequest(const ImportEntitiesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  input_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_url().size() > 0) {
    input_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_url_);
  }
  if (from.has_entity_filter()) {
    entity_filter_ = new ::google::datastore::admin::v1beta1::EntityFilter(*from.entity_filter_);
  } else {
    entity_filter_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.admin.v1beta1.ImportEntitiesRequest)
}

void ImportEntitiesRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_filter_ = NULL;
  _cached_size_ = 0;
}

ImportEntitiesRequest::~ImportEntitiesRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  SharedDtor();
}

void ImportEntitiesRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete entity_filter_;
  }
}

void ImportEntitiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportEntitiesRequest::descriptor() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImportEntitiesRequest& ImportEntitiesRequest::default_instance() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImportEntitiesRequest* ImportEntitiesRequest::New(::google::protobuf::Arena* arena) const {
  ImportEntitiesRequest* n = new ImportEntitiesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportEntitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  labels_.Clear();
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && entity_filter_ != NULL) {
    delete entity_filter_;
  }
  entity_filter_ = NULL;
}

bool ImportEntitiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.ImportEntitiesRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          ImportEntitiesRequest_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              ImportEntitiesRequest_LabelsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.ImportEntitiesRequest.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.ImportEntitiesRequest.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string input_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_url().data(), this->input_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  return false;
#undef DO_
}

void ImportEntitiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ImportEntitiesRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.datastore.admin.v1beta1.ImportEntitiesRequest.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.datastore.admin.v1beta1.ImportEntitiesRequest.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ImportEntitiesRequest_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ImportEntitiesRequest_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string input_url = 3;
  if (this->input_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_url().data(), this->input_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->input_url(), output);
  }

  // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
  if (this->has_entity_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->entity_filter_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.admin.v1beta1.ImportEntitiesRequest)
}

::google::protobuf::uint8* ImportEntitiesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ImportEntitiesRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.datastore.admin.v1beta1.ImportEntitiesRequest.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.datastore.admin.v1beta1.ImportEntitiesRequest.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ImportEntitiesRequest_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ImportEntitiesRequest_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string input_url = 3;
  if (this->input_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_url().data(), this->input_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->input_url(), target);
  }

  // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
  if (this->has_entity_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->entity_filter_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  return target;
}

size_t ImportEntitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  size_t total_size = 0;

  // map<string, string> labels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<ImportEntitiesRequest_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string input_url = 3;
  if (this->input_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_url());
  }

  // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
  if (this->has_entity_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entity_filter_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportEntitiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportEntitiesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportEntitiesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.admin.v1beta1.ImportEntitiesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.admin.v1beta1.ImportEntitiesRequest)
    MergeFrom(*source);
  }
}

void ImportEntitiesRequest::MergeFrom(const ImportEntitiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.input_url().size() > 0) {

    input_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_url_);
  }
  if (from.has_entity_filter()) {
    mutable_entity_filter()->::google::datastore::admin::v1beta1::EntityFilter::MergeFrom(from.entity_filter());
  }
}

void ImportEntitiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportEntitiesRequest::CopyFrom(const ImportEntitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.admin.v1beta1.ImportEntitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportEntitiesRequest::IsInitialized() const {
  return true;
}

void ImportEntitiesRequest::Swap(ImportEntitiesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportEntitiesRequest::InternalSwap(ImportEntitiesRequest* other) {
  labels_.Swap(&other->labels_);
  project_id_.Swap(&other->project_id_);
  input_url_.Swap(&other->input_url_);
  std::swap(entity_filter_, other->entity_filter_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportEntitiesRequest::GetMetadata() const {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportEntitiesRequest

// string project_id = 1;
void ImportEntitiesRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImportEntitiesRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ImportEntitiesRequest.project_id)
  return project_id_.GetNoArena();
}
void ImportEntitiesRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.ImportEntitiesRequest.project_id)
}
#if LANG_CXX11
void ImportEntitiesRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.admin.v1beta1.ImportEntitiesRequest.project_id)
}
#endif
void ImportEntitiesRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.admin.v1beta1.ImportEntitiesRequest.project_id)
}
void ImportEntitiesRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.admin.v1beta1.ImportEntitiesRequest.project_id)
}
::std::string* ImportEntitiesRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ImportEntitiesRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImportEntitiesRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ImportEntitiesRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImportEntitiesRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ImportEntitiesRequest.project_id)
}

// map<string, string> labels = 2;
int ImportEntitiesRequest::labels_size() const {
  return labels_.size();
}
void ImportEntitiesRequest::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
ImportEntitiesRequest::labels() const {
  // @@protoc_insertion_point(field_map:google.datastore.admin.v1beta1.ImportEntitiesRequest.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
ImportEntitiesRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.datastore.admin.v1beta1.ImportEntitiesRequest.labels)
  return labels_.MutableMap();
}

// string input_url = 3;
void ImportEntitiesRequest::clear_input_url() {
  input_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImportEntitiesRequest::input_url() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url)
  return input_url_.GetNoArena();
}
void ImportEntitiesRequest::set_input_url(const ::std::string& value) {
  
  input_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url)
}
#if LANG_CXX11
void ImportEntitiesRequest::set_input_url(::std::string&& value) {
  
  input_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url)
}
#endif
void ImportEntitiesRequest::set_input_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url)
}
void ImportEntitiesRequest::set_input_url(const char* value, size_t size) {
  
  input_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url)
}
::std::string* ImportEntitiesRequest::mutable_input_url() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url)
  return input_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImportEntitiesRequest::release_input_url() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url)
  
  return input_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImportEntitiesRequest::set_allocated_input_url(::std::string* input_url) {
  if (input_url != NULL) {
    
  } else {
    
  }
  input_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_url);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url)
}

// .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
bool ImportEntitiesRequest::has_entity_filter() const {
  return this != internal_default_instance() && entity_filter_ != NULL;
}
void ImportEntitiesRequest::clear_entity_filter() {
  if (GetArenaNoVirtual() == NULL && entity_filter_ != NULL) delete entity_filter_;
  entity_filter_ = NULL;
}
const ::google::datastore::admin::v1beta1::EntityFilter& ImportEntitiesRequest::entity_filter() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ImportEntitiesRequest.entity_filter)
  return entity_filter_ != NULL ? *entity_filter_
                         : *::google::datastore::admin::v1beta1::EntityFilter::internal_default_instance();
}
::google::datastore::admin::v1beta1::EntityFilter* ImportEntitiesRequest::mutable_entity_filter() {
  
  if (entity_filter_ == NULL) {
    entity_filter_ = new ::google::datastore::admin::v1beta1::EntityFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ImportEntitiesRequest.entity_filter)
  return entity_filter_;
}
::google::datastore::admin::v1beta1::EntityFilter* ImportEntitiesRequest::release_entity_filter() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ImportEntitiesRequest.entity_filter)
  
  ::google::datastore::admin::v1beta1::EntityFilter* temp = entity_filter_;
  entity_filter_ = NULL;
  return temp;
}
void ImportEntitiesRequest::set_allocated_entity_filter(::google::datastore::admin::v1beta1::EntityFilter* entity_filter) {
  delete entity_filter_;
  entity_filter_ = entity_filter;
  if (entity_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ImportEntitiesRequest.entity_filter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportEntitiesResponse::kOutputUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportEntitiesResponse::ExportEntitiesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.admin.v1beta1.ExportEntitiesResponse)
}
ExportEntitiesResponse::ExportEntitiesResponse(const ExportEntitiesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output_url().size() > 0) {
    output_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_url_);
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.admin.v1beta1.ExportEntitiesResponse)
}

void ExportEntitiesResponse::SharedCtor() {
  output_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ExportEntitiesResponse::~ExportEntitiesResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  SharedDtor();
}

void ExportEntitiesResponse::SharedDtor() {
  output_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExportEntitiesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportEntitiesResponse::descriptor() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExportEntitiesResponse& ExportEntitiesResponse::default_instance() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExportEntitiesResponse* ExportEntitiesResponse::New(::google::protobuf::Arena* arena) const {
  ExportEntitiesResponse* n = new ExportEntitiesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExportEntitiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  output_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ExportEntitiesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string output_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_url().data(), this->output_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  return false;
#undef DO_
}

void ExportEntitiesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_url = 1;
  if (this->output_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_url().data(), this->output_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->output_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.admin.v1beta1.ExportEntitiesResponse)
}

::google::protobuf::uint8* ExportEntitiesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_url = 1;
  if (this->output_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_url().data(), this->output_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->output_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  return target;
}

size_t ExportEntitiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  size_t total_size = 0;

  // string output_url = 1;
  if (this->output_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportEntitiesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportEntitiesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportEntitiesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.admin.v1beta1.ExportEntitiesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.admin.v1beta1.ExportEntitiesResponse)
    MergeFrom(*source);
  }
}

void ExportEntitiesResponse::MergeFrom(const ExportEntitiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.output_url().size() > 0) {

    output_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_url_);
  }
}

void ExportEntitiesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportEntitiesResponse::CopyFrom(const ExportEntitiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.admin.v1beta1.ExportEntitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportEntitiesResponse::IsInitialized() const {
  return true;
}

void ExportEntitiesResponse::Swap(ExportEntitiesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportEntitiesResponse::InternalSwap(ExportEntitiesResponse* other) {
  output_url_.Swap(&other->output_url_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportEntitiesResponse::GetMetadata() const {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExportEntitiesResponse

// string output_url = 1;
void ExportEntitiesResponse::clear_output_url() {
  output_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ExportEntitiesResponse::output_url() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url)
  return output_url_.GetNoArena();
}
void ExportEntitiesResponse::set_output_url(const ::std::string& value) {
  
  output_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url)
}
#if LANG_CXX11
void ExportEntitiesResponse::set_output_url(::std::string&& value) {
  
  output_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url)
}
#endif
void ExportEntitiesResponse::set_output_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url)
}
void ExportEntitiesResponse::set_output_url(const char* value, size_t size) {
  
  output_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url)
}
::std::string* ExportEntitiesResponse::mutable_output_url() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url)
  return output_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExportEntitiesResponse::release_output_url() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url)
  
  return output_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExportEntitiesResponse::set_allocated_output_url(::std::string* output_url) {
  if (output_url != NULL) {
    
  } else {
    
  }
  output_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_url);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportEntitiesMetadata::kCommonFieldNumber;
const int ExportEntitiesMetadata::kProgressEntitiesFieldNumber;
const int ExportEntitiesMetadata::kProgressBytesFieldNumber;
const int ExportEntitiesMetadata::kEntityFilterFieldNumber;
const int ExportEntitiesMetadata::kOutputUrlPrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportEntitiesMetadata::ExportEntitiesMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
}
ExportEntitiesMetadata::ExportEntitiesMetadata(const ExportEntitiesMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_url_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output_url_prefix().size() > 0) {
    output_url_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_url_prefix_);
  }
  if (from.has_common()) {
    common_ = new ::google::datastore::admin::v1beta1::CommonMetadata(*from.common_);
  } else {
    common_ = NULL;
  }
  if (from.has_progress_entities()) {
    progress_entities_ = new ::google::datastore::admin::v1beta1::Progress(*from.progress_entities_);
  } else {
    progress_entities_ = NULL;
  }
  if (from.has_progress_bytes()) {
    progress_bytes_ = new ::google::datastore::admin::v1beta1::Progress(*from.progress_bytes_);
  } else {
    progress_bytes_ = NULL;
  }
  if (from.has_entity_filter()) {
    entity_filter_ = new ::google::datastore::admin::v1beta1::EntityFilter(*from.entity_filter_);
  } else {
    entity_filter_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
}

void ExportEntitiesMetadata::SharedCtor() {
  output_url_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&common_, 0, reinterpret_cast<char*>(&entity_filter_) -
    reinterpret_cast<char*>(&common_) + sizeof(entity_filter_));
  _cached_size_ = 0;
}

ExportEntitiesMetadata::~ExportEntitiesMetadata() {
  // @@protoc_insertion_point(destructor:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  SharedDtor();
}

void ExportEntitiesMetadata::SharedDtor() {
  output_url_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete common_;
  }
  if (this != internal_default_instance()) {
    delete progress_entities_;
  }
  if (this != internal_default_instance()) {
    delete progress_bytes_;
  }
  if (this != internal_default_instance()) {
    delete entity_filter_;
  }
}

void ExportEntitiesMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportEntitiesMetadata::descriptor() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExportEntitiesMetadata& ExportEntitiesMetadata::default_instance() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExportEntitiesMetadata* ExportEntitiesMetadata::New(::google::protobuf::Arena* arena) const {
  ExportEntitiesMetadata* n = new ExportEntitiesMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExportEntitiesMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  output_url_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && common_ != NULL) {
    delete common_;
  }
  common_ = NULL;
  if (GetArenaNoVirtual() == NULL && progress_entities_ != NULL) {
    delete progress_entities_;
  }
  progress_entities_ = NULL;
  if (GetArenaNoVirtual() == NULL && progress_bytes_ != NULL) {
    delete progress_bytes_;
  }
  progress_bytes_ = NULL;
  if (GetArenaNoVirtual() == NULL && entity_filter_ != NULL) {
    delete entity_filter_;
  }
  entity_filter_ = NULL;
}

bool ExportEntitiesMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.datastore.admin.v1beta1.CommonMetadata common = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.admin.v1beta1.Progress progress_entities = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_progress_entities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.admin.v1beta1.Progress progress_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_progress_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_url_prefix = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_url_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_url_prefix().data(), this->output_url_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.ExportEntitiesMetadata.output_url_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  return false;
#undef DO_
}

void ExportEntitiesMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.admin.v1beta1.CommonMetadata common = 1;
  if (this->has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // .google.datastore.admin.v1beta1.Progress progress_entities = 2;
  if (this->has_progress_entities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->progress_entities_, output);
  }

  // .google.datastore.admin.v1beta1.Progress progress_bytes = 3;
  if (this->has_progress_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->progress_bytes_, output);
  }

  // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
  if (this->has_entity_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->entity_filter_, output);
  }

  // string output_url_prefix = 5;
  if (this->output_url_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_url_prefix().data(), this->output_url_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ExportEntitiesMetadata.output_url_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->output_url_prefix(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
}

::google::protobuf::uint8* ExportEntitiesMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.admin.v1beta1.CommonMetadata common = 1;
  if (this->has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, deterministic, target);
  }

  // .google.datastore.admin.v1beta1.Progress progress_entities = 2;
  if (this->has_progress_entities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->progress_entities_, deterministic, target);
  }

  // .google.datastore.admin.v1beta1.Progress progress_bytes = 3;
  if (this->has_progress_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->progress_bytes_, deterministic, target);
  }

  // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
  if (this->has_entity_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->entity_filter_, deterministic, target);
  }

  // string output_url_prefix = 5;
  if (this->output_url_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_url_prefix().data(), this->output_url_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ExportEntitiesMetadata.output_url_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->output_url_prefix(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  return target;
}

size_t ExportEntitiesMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  size_t total_size = 0;

  // string output_url_prefix = 5;
  if (this->output_url_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_url_prefix());
  }

  // .google.datastore.admin.v1beta1.CommonMetadata common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }

  // .google.datastore.admin.v1beta1.Progress progress_entities = 2;
  if (this->has_progress_entities()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->progress_entities_);
  }

  // .google.datastore.admin.v1beta1.Progress progress_bytes = 3;
  if (this->has_progress_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->progress_bytes_);
  }

  // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
  if (this->has_entity_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entity_filter_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportEntitiesMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportEntitiesMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportEntitiesMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
    MergeFrom(*source);
  }
}

void ExportEntitiesMetadata::MergeFrom(const ExportEntitiesMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.output_url_prefix().size() > 0) {

    output_url_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_url_prefix_);
  }
  if (from.has_common()) {
    mutable_common()->::google::datastore::admin::v1beta1::CommonMetadata::MergeFrom(from.common());
  }
  if (from.has_progress_entities()) {
    mutable_progress_entities()->::google::datastore::admin::v1beta1::Progress::MergeFrom(from.progress_entities());
  }
  if (from.has_progress_bytes()) {
    mutable_progress_bytes()->::google::datastore::admin::v1beta1::Progress::MergeFrom(from.progress_bytes());
  }
  if (from.has_entity_filter()) {
    mutable_entity_filter()->::google::datastore::admin::v1beta1::EntityFilter::MergeFrom(from.entity_filter());
  }
}

void ExportEntitiesMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportEntitiesMetadata::CopyFrom(const ExportEntitiesMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.admin.v1beta1.ExportEntitiesMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportEntitiesMetadata::IsInitialized() const {
  return true;
}

void ExportEntitiesMetadata::Swap(ExportEntitiesMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportEntitiesMetadata::InternalSwap(ExportEntitiesMetadata* other) {
  output_url_prefix_.Swap(&other->output_url_prefix_);
  std::swap(common_, other->common_);
  std::swap(progress_entities_, other->progress_entities_);
  std::swap(progress_bytes_, other->progress_bytes_);
  std::swap(entity_filter_, other->entity_filter_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportEntitiesMetadata::GetMetadata() const {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExportEntitiesMetadata

// .google.datastore.admin.v1beta1.CommonMetadata common = 1;
bool ExportEntitiesMetadata::has_common() const {
  return this != internal_default_instance() && common_ != NULL;
}
void ExportEntitiesMetadata::clear_common() {
  if (GetArenaNoVirtual() == NULL && common_ != NULL) delete common_;
  common_ = NULL;
}
const ::google::datastore::admin::v1beta1::CommonMetadata& ExportEntitiesMetadata::common() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ExportEntitiesMetadata.common)
  return common_ != NULL ? *common_
                         : *::google::datastore::admin::v1beta1::CommonMetadata::internal_default_instance();
}
::google::datastore::admin::v1beta1::CommonMetadata* ExportEntitiesMetadata::mutable_common() {
  
  if (common_ == NULL) {
    common_ = new ::google::datastore::admin::v1beta1::CommonMetadata;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ExportEntitiesMetadata.common)
  return common_;
}
::google::datastore::admin::v1beta1::CommonMetadata* ExportEntitiesMetadata::release_common() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ExportEntitiesMetadata.common)
  
  ::google::datastore::admin::v1beta1::CommonMetadata* temp = common_;
  common_ = NULL;
  return temp;
}
void ExportEntitiesMetadata::set_allocated_common(::google::datastore::admin::v1beta1::CommonMetadata* common) {
  delete common_;
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ExportEntitiesMetadata.common)
}

// .google.datastore.admin.v1beta1.Progress progress_entities = 2;
bool ExportEntitiesMetadata::has_progress_entities() const {
  return this != internal_default_instance() && progress_entities_ != NULL;
}
void ExportEntitiesMetadata::clear_progress_entities() {
  if (GetArenaNoVirtual() == NULL && progress_entities_ != NULL) delete progress_entities_;
  progress_entities_ = NULL;
}
const ::google::datastore::admin::v1beta1::Progress& ExportEntitiesMetadata::progress_entities() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ExportEntitiesMetadata.progress_entities)
  return progress_entities_ != NULL ? *progress_entities_
                         : *::google::datastore::admin::v1beta1::Progress::internal_default_instance();
}
::google::datastore::admin::v1beta1::Progress* ExportEntitiesMetadata::mutable_progress_entities() {
  
  if (progress_entities_ == NULL) {
    progress_entities_ = new ::google::datastore::admin::v1beta1::Progress;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ExportEntitiesMetadata.progress_entities)
  return progress_entities_;
}
::google::datastore::admin::v1beta1::Progress* ExportEntitiesMetadata::release_progress_entities() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ExportEntitiesMetadata.progress_entities)
  
  ::google::datastore::admin::v1beta1::Progress* temp = progress_entities_;
  progress_entities_ = NULL;
  return temp;
}
void ExportEntitiesMetadata::set_allocated_progress_entities(::google::datastore::admin::v1beta1::Progress* progress_entities) {
  delete progress_entities_;
  progress_entities_ = progress_entities;
  if (progress_entities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ExportEntitiesMetadata.progress_entities)
}

// .google.datastore.admin.v1beta1.Progress progress_bytes = 3;
bool ExportEntitiesMetadata::has_progress_bytes() const {
  return this != internal_default_instance() && progress_bytes_ != NULL;
}
void ExportEntitiesMetadata::clear_progress_bytes() {
  if (GetArenaNoVirtual() == NULL && progress_bytes_ != NULL) delete progress_bytes_;
  progress_bytes_ = NULL;
}
const ::google::datastore::admin::v1beta1::Progress& ExportEntitiesMetadata::progress_bytes() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ExportEntitiesMetadata.progress_bytes)
  return progress_bytes_ != NULL ? *progress_bytes_
                         : *::google::datastore::admin::v1beta1::Progress::internal_default_instance();
}
::google::datastore::admin::v1beta1::Progress* ExportEntitiesMetadata::mutable_progress_bytes() {
  
  if (progress_bytes_ == NULL) {
    progress_bytes_ = new ::google::datastore::admin::v1beta1::Progress;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ExportEntitiesMetadata.progress_bytes)
  return progress_bytes_;
}
::google::datastore::admin::v1beta1::Progress* ExportEntitiesMetadata::release_progress_bytes() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ExportEntitiesMetadata.progress_bytes)
  
  ::google::datastore::admin::v1beta1::Progress* temp = progress_bytes_;
  progress_bytes_ = NULL;
  return temp;
}
void ExportEntitiesMetadata::set_allocated_progress_bytes(::google::datastore::admin::v1beta1::Progress* progress_bytes) {
  delete progress_bytes_;
  progress_bytes_ = progress_bytes;
  if (progress_bytes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ExportEntitiesMetadata.progress_bytes)
}

// .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
bool ExportEntitiesMetadata::has_entity_filter() const {
  return this != internal_default_instance() && entity_filter_ != NULL;
}
void ExportEntitiesMetadata::clear_entity_filter() {
  if (GetArenaNoVirtual() == NULL && entity_filter_ != NULL) delete entity_filter_;
  entity_filter_ = NULL;
}
const ::google::datastore::admin::v1beta1::EntityFilter& ExportEntitiesMetadata::entity_filter() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ExportEntitiesMetadata.entity_filter)
  return entity_filter_ != NULL ? *entity_filter_
                         : *::google::datastore::admin::v1beta1::EntityFilter::internal_default_instance();
}
::google::datastore::admin::v1beta1::EntityFilter* ExportEntitiesMetadata::mutable_entity_filter() {
  
  if (entity_filter_ == NULL) {
    entity_filter_ = new ::google::datastore::admin::v1beta1::EntityFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ExportEntitiesMetadata.entity_filter)
  return entity_filter_;
}
::google::datastore::admin::v1beta1::EntityFilter* ExportEntitiesMetadata::release_entity_filter() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ExportEntitiesMetadata.entity_filter)
  
  ::google::datastore::admin::v1beta1::EntityFilter* temp = entity_filter_;
  entity_filter_ = NULL;
  return temp;
}
void ExportEntitiesMetadata::set_allocated_entity_filter(::google::datastore::admin::v1beta1::EntityFilter* entity_filter) {
  delete entity_filter_;
  entity_filter_ = entity_filter;
  if (entity_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ExportEntitiesMetadata.entity_filter)
}

// string output_url_prefix = 5;
void ExportEntitiesMetadata::clear_output_url_prefix() {
  output_url_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ExportEntitiesMetadata::output_url_prefix() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ExportEntitiesMetadata.output_url_prefix)
  return output_url_prefix_.GetNoArena();
}
void ExportEntitiesMetadata::set_output_url_prefix(const ::std::string& value) {
  
  output_url_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.ExportEntitiesMetadata.output_url_prefix)
}
#if LANG_CXX11
void ExportEntitiesMetadata::set_output_url_prefix(::std::string&& value) {
  
  output_url_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.admin.v1beta1.ExportEntitiesMetadata.output_url_prefix)
}
#endif
void ExportEntitiesMetadata::set_output_url_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_url_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.admin.v1beta1.ExportEntitiesMetadata.output_url_prefix)
}
void ExportEntitiesMetadata::set_output_url_prefix(const char* value, size_t size) {
  
  output_url_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.admin.v1beta1.ExportEntitiesMetadata.output_url_prefix)
}
::std::string* ExportEntitiesMetadata::mutable_output_url_prefix() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ExportEntitiesMetadata.output_url_prefix)
  return output_url_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExportEntitiesMetadata::release_output_url_prefix() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ExportEntitiesMetadata.output_url_prefix)
  
  return output_url_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExportEntitiesMetadata::set_allocated_output_url_prefix(::std::string* output_url_prefix) {
  if (output_url_prefix != NULL) {
    
  } else {
    
  }
  output_url_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_url_prefix);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ExportEntitiesMetadata.output_url_prefix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportEntitiesMetadata::kCommonFieldNumber;
const int ImportEntitiesMetadata::kProgressEntitiesFieldNumber;
const int ImportEntitiesMetadata::kProgressBytesFieldNumber;
const int ImportEntitiesMetadata::kEntityFilterFieldNumber;
const int ImportEntitiesMetadata::kInputUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportEntitiesMetadata::ImportEntitiesMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
}
ImportEntitiesMetadata::ImportEntitiesMetadata(const ImportEntitiesMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_url().size() > 0) {
    input_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_url_);
  }
  if (from.has_common()) {
    common_ = new ::google::datastore::admin::v1beta1::CommonMetadata(*from.common_);
  } else {
    common_ = NULL;
  }
  if (from.has_progress_entities()) {
    progress_entities_ = new ::google::datastore::admin::v1beta1::Progress(*from.progress_entities_);
  } else {
    progress_entities_ = NULL;
  }
  if (from.has_progress_bytes()) {
    progress_bytes_ = new ::google::datastore::admin::v1beta1::Progress(*from.progress_bytes_);
  } else {
    progress_bytes_ = NULL;
  }
  if (from.has_entity_filter()) {
    entity_filter_ = new ::google::datastore::admin::v1beta1::EntityFilter(*from.entity_filter_);
  } else {
    entity_filter_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
}

void ImportEntitiesMetadata::SharedCtor() {
  input_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&common_, 0, reinterpret_cast<char*>(&entity_filter_) -
    reinterpret_cast<char*>(&common_) + sizeof(entity_filter_));
  _cached_size_ = 0;
}

ImportEntitiesMetadata::~ImportEntitiesMetadata() {
  // @@protoc_insertion_point(destructor:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  SharedDtor();
}

void ImportEntitiesMetadata::SharedDtor() {
  input_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete common_;
  }
  if (this != internal_default_instance()) {
    delete progress_entities_;
  }
  if (this != internal_default_instance()) {
    delete progress_bytes_;
  }
  if (this != internal_default_instance()) {
    delete entity_filter_;
  }
}

void ImportEntitiesMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportEntitiesMetadata::descriptor() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImportEntitiesMetadata& ImportEntitiesMetadata::default_instance() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImportEntitiesMetadata* ImportEntitiesMetadata::New(::google::protobuf::Arena* arena) const {
  ImportEntitiesMetadata* n = new ImportEntitiesMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportEntitiesMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  input_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && common_ != NULL) {
    delete common_;
  }
  common_ = NULL;
  if (GetArenaNoVirtual() == NULL && progress_entities_ != NULL) {
    delete progress_entities_;
  }
  progress_entities_ = NULL;
  if (GetArenaNoVirtual() == NULL && progress_bytes_ != NULL) {
    delete progress_bytes_;
  }
  progress_bytes_ = NULL;
  if (GetArenaNoVirtual() == NULL && entity_filter_ != NULL) {
    delete entity_filter_;
  }
  entity_filter_ = NULL;
}

bool ImportEntitiesMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.datastore.admin.v1beta1.CommonMetadata common = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.admin.v1beta1.Progress progress_entities = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_progress_entities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.admin.v1beta1.Progress progress_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_progress_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string input_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_url().data(), this->input_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.ImportEntitiesMetadata.input_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  return false;
#undef DO_
}

void ImportEntitiesMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.admin.v1beta1.CommonMetadata common = 1;
  if (this->has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_, output);
  }

  // .google.datastore.admin.v1beta1.Progress progress_entities = 2;
  if (this->has_progress_entities()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->progress_entities_, output);
  }

  // .google.datastore.admin.v1beta1.Progress progress_bytes = 3;
  if (this->has_progress_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->progress_bytes_, output);
  }

  // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
  if (this->has_entity_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->entity_filter_, output);
  }

  // string input_url = 5;
  if (this->input_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_url().data(), this->input_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ImportEntitiesMetadata.input_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->input_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
}

::google::protobuf::uint8* ImportEntitiesMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.admin.v1beta1.CommonMetadata common = 1;
  if (this->has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_, deterministic, target);
  }

  // .google.datastore.admin.v1beta1.Progress progress_entities = 2;
  if (this->has_progress_entities()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->progress_entities_, deterministic, target);
  }

  // .google.datastore.admin.v1beta1.Progress progress_bytes = 3;
  if (this->has_progress_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->progress_bytes_, deterministic, target);
  }

  // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
  if (this->has_entity_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->entity_filter_, deterministic, target);
  }

  // string input_url = 5;
  if (this->input_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_url().data(), this->input_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.ImportEntitiesMetadata.input_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->input_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  return target;
}

size_t ImportEntitiesMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  size_t total_size = 0;

  // string input_url = 5;
  if (this->input_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_url());
  }

  // .google.datastore.admin.v1beta1.CommonMetadata common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_);
  }

  // .google.datastore.admin.v1beta1.Progress progress_entities = 2;
  if (this->has_progress_entities()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->progress_entities_);
  }

  // .google.datastore.admin.v1beta1.Progress progress_bytes = 3;
  if (this->has_progress_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->progress_bytes_);
  }

  // .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
  if (this->has_entity_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entity_filter_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportEntitiesMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ImportEntitiesMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportEntitiesMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
    MergeFrom(*source);
  }
}

void ImportEntitiesMetadata::MergeFrom(const ImportEntitiesMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_url().size() > 0) {

    input_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_url_);
  }
  if (from.has_common()) {
    mutable_common()->::google::datastore::admin::v1beta1::CommonMetadata::MergeFrom(from.common());
  }
  if (from.has_progress_entities()) {
    mutable_progress_entities()->::google::datastore::admin::v1beta1::Progress::MergeFrom(from.progress_entities());
  }
  if (from.has_progress_bytes()) {
    mutable_progress_bytes()->::google::datastore::admin::v1beta1::Progress::MergeFrom(from.progress_bytes());
  }
  if (from.has_entity_filter()) {
    mutable_entity_filter()->::google::datastore::admin::v1beta1::EntityFilter::MergeFrom(from.entity_filter());
  }
}

void ImportEntitiesMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportEntitiesMetadata::CopyFrom(const ImportEntitiesMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.admin.v1beta1.ImportEntitiesMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportEntitiesMetadata::IsInitialized() const {
  return true;
}

void ImportEntitiesMetadata::Swap(ImportEntitiesMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportEntitiesMetadata::InternalSwap(ImportEntitiesMetadata* other) {
  input_url_.Swap(&other->input_url_);
  std::swap(common_, other->common_);
  std::swap(progress_entities_, other->progress_entities_);
  std::swap(progress_bytes_, other->progress_bytes_);
  std::swap(entity_filter_, other->entity_filter_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportEntitiesMetadata::GetMetadata() const {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportEntitiesMetadata

// .google.datastore.admin.v1beta1.CommonMetadata common = 1;
bool ImportEntitiesMetadata::has_common() const {
  return this != internal_default_instance() && common_ != NULL;
}
void ImportEntitiesMetadata::clear_common() {
  if (GetArenaNoVirtual() == NULL && common_ != NULL) delete common_;
  common_ = NULL;
}
const ::google::datastore::admin::v1beta1::CommonMetadata& ImportEntitiesMetadata::common() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ImportEntitiesMetadata.common)
  return common_ != NULL ? *common_
                         : *::google::datastore::admin::v1beta1::CommonMetadata::internal_default_instance();
}
::google::datastore::admin::v1beta1::CommonMetadata* ImportEntitiesMetadata::mutable_common() {
  
  if (common_ == NULL) {
    common_ = new ::google::datastore::admin::v1beta1::CommonMetadata;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ImportEntitiesMetadata.common)
  return common_;
}
::google::datastore::admin::v1beta1::CommonMetadata* ImportEntitiesMetadata::release_common() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ImportEntitiesMetadata.common)
  
  ::google::datastore::admin::v1beta1::CommonMetadata* temp = common_;
  common_ = NULL;
  return temp;
}
void ImportEntitiesMetadata::set_allocated_common(::google::datastore::admin::v1beta1::CommonMetadata* common) {
  delete common_;
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ImportEntitiesMetadata.common)
}

// .google.datastore.admin.v1beta1.Progress progress_entities = 2;
bool ImportEntitiesMetadata::has_progress_entities() const {
  return this != internal_default_instance() && progress_entities_ != NULL;
}
void ImportEntitiesMetadata::clear_progress_entities() {
  if (GetArenaNoVirtual() == NULL && progress_entities_ != NULL) delete progress_entities_;
  progress_entities_ = NULL;
}
const ::google::datastore::admin::v1beta1::Progress& ImportEntitiesMetadata::progress_entities() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ImportEntitiesMetadata.progress_entities)
  return progress_entities_ != NULL ? *progress_entities_
                         : *::google::datastore::admin::v1beta1::Progress::internal_default_instance();
}
::google::datastore::admin::v1beta1::Progress* ImportEntitiesMetadata::mutable_progress_entities() {
  
  if (progress_entities_ == NULL) {
    progress_entities_ = new ::google::datastore::admin::v1beta1::Progress;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ImportEntitiesMetadata.progress_entities)
  return progress_entities_;
}
::google::datastore::admin::v1beta1::Progress* ImportEntitiesMetadata::release_progress_entities() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ImportEntitiesMetadata.progress_entities)
  
  ::google::datastore::admin::v1beta1::Progress* temp = progress_entities_;
  progress_entities_ = NULL;
  return temp;
}
void ImportEntitiesMetadata::set_allocated_progress_entities(::google::datastore::admin::v1beta1::Progress* progress_entities) {
  delete progress_entities_;
  progress_entities_ = progress_entities;
  if (progress_entities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ImportEntitiesMetadata.progress_entities)
}

// .google.datastore.admin.v1beta1.Progress progress_bytes = 3;
bool ImportEntitiesMetadata::has_progress_bytes() const {
  return this != internal_default_instance() && progress_bytes_ != NULL;
}
void ImportEntitiesMetadata::clear_progress_bytes() {
  if (GetArenaNoVirtual() == NULL && progress_bytes_ != NULL) delete progress_bytes_;
  progress_bytes_ = NULL;
}
const ::google::datastore::admin::v1beta1::Progress& ImportEntitiesMetadata::progress_bytes() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ImportEntitiesMetadata.progress_bytes)
  return progress_bytes_ != NULL ? *progress_bytes_
                         : *::google::datastore::admin::v1beta1::Progress::internal_default_instance();
}
::google::datastore::admin::v1beta1::Progress* ImportEntitiesMetadata::mutable_progress_bytes() {
  
  if (progress_bytes_ == NULL) {
    progress_bytes_ = new ::google::datastore::admin::v1beta1::Progress;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ImportEntitiesMetadata.progress_bytes)
  return progress_bytes_;
}
::google::datastore::admin::v1beta1::Progress* ImportEntitiesMetadata::release_progress_bytes() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ImportEntitiesMetadata.progress_bytes)
  
  ::google::datastore::admin::v1beta1::Progress* temp = progress_bytes_;
  progress_bytes_ = NULL;
  return temp;
}
void ImportEntitiesMetadata::set_allocated_progress_bytes(::google::datastore::admin::v1beta1::Progress* progress_bytes) {
  delete progress_bytes_;
  progress_bytes_ = progress_bytes;
  if (progress_bytes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ImportEntitiesMetadata.progress_bytes)
}

// .google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
bool ImportEntitiesMetadata::has_entity_filter() const {
  return this != internal_default_instance() && entity_filter_ != NULL;
}
void ImportEntitiesMetadata::clear_entity_filter() {
  if (GetArenaNoVirtual() == NULL && entity_filter_ != NULL) delete entity_filter_;
  entity_filter_ = NULL;
}
const ::google::datastore::admin::v1beta1::EntityFilter& ImportEntitiesMetadata::entity_filter() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ImportEntitiesMetadata.entity_filter)
  return entity_filter_ != NULL ? *entity_filter_
                         : *::google::datastore::admin::v1beta1::EntityFilter::internal_default_instance();
}
::google::datastore::admin::v1beta1::EntityFilter* ImportEntitiesMetadata::mutable_entity_filter() {
  
  if (entity_filter_ == NULL) {
    entity_filter_ = new ::google::datastore::admin::v1beta1::EntityFilter;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ImportEntitiesMetadata.entity_filter)
  return entity_filter_;
}
::google::datastore::admin::v1beta1::EntityFilter* ImportEntitiesMetadata::release_entity_filter() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ImportEntitiesMetadata.entity_filter)
  
  ::google::datastore::admin::v1beta1::EntityFilter* temp = entity_filter_;
  entity_filter_ = NULL;
  return temp;
}
void ImportEntitiesMetadata::set_allocated_entity_filter(::google::datastore::admin::v1beta1::EntityFilter* entity_filter) {
  delete entity_filter_;
  entity_filter_ = entity_filter;
  if (entity_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ImportEntitiesMetadata.entity_filter)
}

// string input_url = 5;
void ImportEntitiesMetadata::clear_input_url() {
  input_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImportEntitiesMetadata::input_url() const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.ImportEntitiesMetadata.input_url)
  return input_url_.GetNoArena();
}
void ImportEntitiesMetadata::set_input_url(const ::std::string& value) {
  
  input_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.ImportEntitiesMetadata.input_url)
}
#if LANG_CXX11
void ImportEntitiesMetadata::set_input_url(::std::string&& value) {
  
  input_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.admin.v1beta1.ImportEntitiesMetadata.input_url)
}
#endif
void ImportEntitiesMetadata::set_input_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.admin.v1beta1.ImportEntitiesMetadata.input_url)
}
void ImportEntitiesMetadata::set_input_url(const char* value, size_t size) {
  
  input_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.admin.v1beta1.ImportEntitiesMetadata.input_url)
}
::std::string* ImportEntitiesMetadata::mutable_input_url() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.ImportEntitiesMetadata.input_url)
  return input_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImportEntitiesMetadata::release_input_url() {
  // @@protoc_insertion_point(field_release:google.datastore.admin.v1beta1.ImportEntitiesMetadata.input_url)
  
  return input_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImportEntitiesMetadata::set_allocated_input_url(::std::string* input_url) {
  if (input_url != NULL) {
    
  } else {
    
  }
  input_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_url);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.admin.v1beta1.ImportEntitiesMetadata.input_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityFilter::kKindsFieldNumber;
const int EntityFilter::kNamespaceIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityFilter::EntityFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.admin.v1beta1.EntityFilter)
}
EntityFilter::EntityFilter(const EntityFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      kinds_(from.kinds_),
      namespace_ids_(from.namespace_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.datastore.admin.v1beta1.EntityFilter)
}

void EntityFilter::SharedCtor() {
  _cached_size_ = 0;
}

EntityFilter::~EntityFilter() {
  // @@protoc_insertion_point(destructor:google.datastore.admin.v1beta1.EntityFilter)
  SharedDtor();
}

void EntityFilter::SharedDtor() {
}

void EntityFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityFilter::descriptor() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EntityFilter& EntityFilter::default_instance() {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

EntityFilter* EntityFilter::New(::google::protobuf::Arena* arena) const {
  EntityFilter* n = new EntityFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.admin.v1beta1.EntityFilter)
  kinds_.Clear();
  namespace_ids_.Clear();
}

bool EntityFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.admin.v1beta1.EntityFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string kinds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_kinds()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kinds(this->kinds_size() - 1).data(),
            this->kinds(this->kinds_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.EntityFilter.kinds"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string namespace_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_namespace_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_ids(this->namespace_ids_size() - 1).data(),
            this->namespace_ids(this->namespace_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.admin.v1beta1.EntityFilter.namespace_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.admin.v1beta1.EntityFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.admin.v1beta1.EntityFilter)
  return false;
#undef DO_
}

void EntityFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.admin.v1beta1.EntityFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string kinds = 1;
  for (int i = 0, n = this->kinds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kinds(i).data(), this->kinds(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.EntityFilter.kinds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->kinds(i), output);
  }

  // repeated string namespace_ids = 2;
  for (int i = 0, n = this->namespace_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_ids(i).data(), this->namespace_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.EntityFilter.namespace_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->namespace_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.admin.v1beta1.EntityFilter)
}

::google::protobuf::uint8* EntityFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.admin.v1beta1.EntityFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string kinds = 1;
  for (int i = 0, n = this->kinds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kinds(i).data(), this->kinds(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.EntityFilter.kinds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->kinds(i), target);
  }

  // repeated string namespace_ids = 2;
  for (int i = 0, n = this->namespace_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_ids(i).data(), this->namespace_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.admin.v1beta1.EntityFilter.namespace_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->namespace_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.admin.v1beta1.EntityFilter)
  return target;
}

size_t EntityFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.admin.v1beta1.EntityFilter)
  size_t total_size = 0;

  // repeated string kinds = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->kinds_size());
  for (int i = 0, n = this->kinds_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->kinds(i));
  }

  // repeated string namespace_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->namespace_ids_size());
  for (int i = 0, n = this->namespace_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->namespace_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.admin.v1beta1.EntityFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.admin.v1beta1.EntityFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.admin.v1beta1.EntityFilter)
    MergeFrom(*source);
  }
}

void EntityFilter::MergeFrom(const EntityFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.admin.v1beta1.EntityFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kinds_.MergeFrom(from.kinds_);
  namespace_ids_.MergeFrom(from.namespace_ids_);
}

void EntityFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.admin.v1beta1.EntityFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityFilter::CopyFrom(const EntityFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.admin.v1beta1.EntityFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityFilter::IsInitialized() const {
  return true;
}

void EntityFilter::Swap(EntityFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityFilter::InternalSwap(EntityFilter* other) {
  kinds_.InternalSwap(&other->kinds_);
  namespace_ids_.InternalSwap(&other->namespace_ids_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityFilter::GetMetadata() const {
  protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fadmin_2fv1beta1_2fdatastore_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityFilter

// repeated string kinds = 1;
int EntityFilter::kinds_size() const {
  return kinds_.size();
}
void EntityFilter::clear_kinds() {
  kinds_.Clear();
}
const ::std::string& EntityFilter::kinds(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.EntityFilter.kinds)
  return kinds_.Get(index);
}
::std::string* EntityFilter::mutable_kinds(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.EntityFilter.kinds)
  return kinds_.Mutable(index);
}
void EntityFilter::set_kinds(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.EntityFilter.kinds)
  kinds_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void EntityFilter::set_kinds(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.EntityFilter.kinds)
  kinds_.Mutable(index)->assign(std::move(value));
}
#endif
void EntityFilter::set_kinds(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  kinds_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.datastore.admin.v1beta1.EntityFilter.kinds)
}
void EntityFilter::set_kinds(int index, const char* value, size_t size) {
  kinds_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.datastore.admin.v1beta1.EntityFilter.kinds)
}
::std::string* EntityFilter::add_kinds() {
  // @@protoc_insertion_point(field_add_mutable:google.datastore.admin.v1beta1.EntityFilter.kinds)
  return kinds_.Add();
}
void EntityFilter::add_kinds(const ::std::string& value) {
  kinds_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.datastore.admin.v1beta1.EntityFilter.kinds)
}
#if LANG_CXX11
void EntityFilter::add_kinds(::std::string&& value) {
  kinds_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.datastore.admin.v1beta1.EntityFilter.kinds)
}
#endif
void EntityFilter::add_kinds(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  kinds_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.datastore.admin.v1beta1.EntityFilter.kinds)
}
void EntityFilter::add_kinds(const char* value, size_t size) {
  kinds_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.datastore.admin.v1beta1.EntityFilter.kinds)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntityFilter::kinds() const {
  // @@protoc_insertion_point(field_list:google.datastore.admin.v1beta1.EntityFilter.kinds)
  return kinds_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
EntityFilter::mutable_kinds() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.admin.v1beta1.EntityFilter.kinds)
  return &kinds_;
}

// repeated string namespace_ids = 2;
int EntityFilter::namespace_ids_size() const {
  return namespace_ids_.size();
}
void EntityFilter::clear_namespace_ids() {
  namespace_ids_.Clear();
}
const ::std::string& EntityFilter::namespace_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
  return namespace_ids_.Get(index);
}
::std::string* EntityFilter::mutable_namespace_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
  return namespace_ids_.Mutable(index);
}
void EntityFilter::set_namespace_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
  namespace_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void EntityFilter::set_namespace_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
  namespace_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void EntityFilter::set_namespace_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  namespace_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
}
void EntityFilter::set_namespace_ids(int index, const char* value, size_t size) {
  namespace_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
}
::std::string* EntityFilter::add_namespace_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
  return namespace_ids_.Add();
}
void EntityFilter::add_namespace_ids(const ::std::string& value) {
  namespace_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
}
#if LANG_CXX11
void EntityFilter::add_namespace_ids(::std::string&& value) {
  namespace_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
}
#endif
void EntityFilter::add_namespace_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  namespace_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
}
void EntityFilter::add_namespace_ids(const char* value, size_t size) {
  namespace_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntityFilter::namespace_ids() const {
  // @@protoc_insertion_point(field_list:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
  return namespace_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
EntityFilter::mutable_namespace_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.admin.v1beta1.EntityFilter.namespace_ids)
  return &namespace_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace admin
}  // namespace datastore
}  // namespace google

// @@protoc_insertion_point(global_scope)
