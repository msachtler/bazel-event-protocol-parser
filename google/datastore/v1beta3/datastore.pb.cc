// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/v1beta3/datastore.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/datastore/v1beta3/datastore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace datastore {
namespace v1beta3 {
class LookupRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LookupRequest> {
} _LookupRequest_default_instance_;
class LookupResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LookupResponse> {
} _LookupResponse_default_instance_;
class RunQueryRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RunQueryRequest> {
  public:
  const ::google::datastore::v1beta3::Query* query_;
  const ::google::datastore::v1beta3::GqlQuery* gql_query_;
} _RunQueryRequest_default_instance_;
class RunQueryResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RunQueryResponse> {
} _RunQueryResponse_default_instance_;
class BeginTransactionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BeginTransactionRequest> {
} _BeginTransactionRequest_default_instance_;
class BeginTransactionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BeginTransactionResponse> {
} _BeginTransactionResponse_default_instance_;
class RollbackRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RollbackRequest> {
} _RollbackRequest_default_instance_;
class RollbackResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RollbackResponse> {
} _RollbackResponse_default_instance_;
class CommitRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommitRequest> {
  public:
  ::google::protobuf::internal::ArenaStringPtr transaction_;
} _CommitRequest_default_instance_;
class CommitResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommitResponse> {
} _CommitResponse_default_instance_;
class AllocateIdsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AllocateIdsRequest> {
} _AllocateIdsRequest_default_instance_;
class AllocateIdsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AllocateIdsResponse> {
} _AllocateIdsResponse_default_instance_;
class MutationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mutation> {
  public:
  const ::google::datastore::v1beta3::Entity* insert_;
  const ::google::datastore::v1beta3::Entity* update_;
  const ::google::datastore::v1beta3::Entity* upsert_;
  const ::google::datastore::v1beta3::Key* delete__;
  ::google::protobuf::int64 base_version_;
} _Mutation_default_instance_;
class MutationResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MutationResult> {
} _MutationResult_default_instance_;
class ReadOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadOptions> {
  public:
  int read_consistency_;
  ::google::protobuf::internal::ArenaStringPtr transaction_;
} _ReadOptions_default_instance_;
class TransactionOptions_ReadWriteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransactionOptions_ReadWrite> {
} _TransactionOptions_ReadWrite_default_instance_;
class TransactionOptions_ReadOnlyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransactionOptions_ReadOnly> {
} _TransactionOptions_ReadOnly_default_instance_;
class TransactionOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TransactionOptions> {
  public:
  const ::google::datastore::v1beta3::TransactionOptions_ReadWrite* read_write_;
  const ::google::datastore::v1beta3::TransactionOptions_ReadOnly* read_only_;
} _TransactionOptions_default_instance_;

namespace protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupRequest, read_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupRequest, keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, found_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, missing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupResponse, deferred_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryRequest, partition_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryRequest, read_options_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RunQueryRequest_default_instance_), query_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RunQueryRequest_default_instance_), gql_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryRequest, query_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryResponse, batch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunQueryResponse, query_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTransactionRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTransactionRequest, transaction_options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginTransactionResponse, transaction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackRequest, transaction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, mode_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CommitRequest_default_instance_), transaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, mutations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, transaction_selector_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, mutation_results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, index_updates_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocateIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocateIdsRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocateIdsRequest, keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocateIdsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocateIdsResponse, keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mutation_default_instance_), insert_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mutation_default_instance_), update_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mutation_default_instance_), upsert_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mutation_default_instance_), delete__),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mutation_default_instance_), base_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, conflict_detection_strategy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationResult, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationResult, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutationResult, conflict_detected_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ReadOptions_default_instance_), read_consistency_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ReadOptions_default_instance_), transaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadOptions, consistency_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionOptions_ReadWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionOptions_ReadWrite, previous_transaction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionOptions_ReadOnly, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TransactionOptions_default_instance_), read_write_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TransactionOptions_default_instance_), read_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionOptions, mode_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LookupRequest)},
  { 8, -1, sizeof(LookupResponse)},
  { 16, -1, sizeof(RunQueryRequest)},
  { 27, -1, sizeof(RunQueryResponse)},
  { 34, -1, sizeof(BeginTransactionRequest)},
  { 41, -1, sizeof(BeginTransactionResponse)},
  { 47, -1, sizeof(RollbackRequest)},
  { 54, -1, sizeof(RollbackResponse)},
  { 59, -1, sizeof(CommitRequest)},
  { 69, -1, sizeof(CommitResponse)},
  { 76, -1, sizeof(AllocateIdsRequest)},
  { 83, -1, sizeof(AllocateIdsResponse)},
  { 89, -1, sizeof(Mutation)},
  { 101, -1, sizeof(MutationResult)},
  { 109, -1, sizeof(ReadOptions)},
  { 117, -1, sizeof(TransactionOptions_ReadWrite)},
  { 123, -1, sizeof(TransactionOptions_ReadOnly)},
  { 128, -1, sizeof(TransactionOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LookupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LookupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RunQueryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RunQueryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BeginTransactionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BeginTransactionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RollbackRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RollbackResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AllocateIdsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AllocateIdsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mutation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MutationResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReadOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionOptions_ReadWrite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionOptions_ReadOnly_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionOptions_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/datastore/v1beta3/datastore.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace

void TableStruct::Shutdown() {
  _LookupRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LookupResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RunQueryRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _RunQueryResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _BeginTransactionRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _BeginTransactionResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _RollbackRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _RollbackResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CommitRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CommitResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _AllocateIdsRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _AllocateIdsResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _Mutation_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _MutationResult_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _ReadOptions_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _TransactionOptions_ReadWrite_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _TransactionOptions_ReadOnly_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _TransactionOptions_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::datastore::v1beta3::protobuf_google_2fdatastore_2fv1beta3_2fentity_2eproto::InitDefaults();
  ::google::datastore::v1beta3::protobuf_google_2fdatastore_2fv1beta3_2fquery_2eproto::InitDefaults();
  _LookupRequest_default_instance_.DefaultConstruct();
  _LookupResponse_default_instance_.DefaultConstruct();
  _RunQueryRequest_default_instance_.DefaultConstruct();
  _RunQueryResponse_default_instance_.DefaultConstruct();
  _BeginTransactionRequest_default_instance_.DefaultConstruct();
  _BeginTransactionResponse_default_instance_.DefaultConstruct();
  _RollbackRequest_default_instance_.DefaultConstruct();
  _RollbackResponse_default_instance_.DefaultConstruct();
  _CommitRequest_default_instance_.DefaultConstruct();
  _CommitResponse_default_instance_.DefaultConstruct();
  _AllocateIdsRequest_default_instance_.DefaultConstruct();
  _AllocateIdsResponse_default_instance_.DefaultConstruct();
  _Mutation_default_instance_.DefaultConstruct();
  _MutationResult_default_instance_.DefaultConstruct();
  _ReadOptions_default_instance_.DefaultConstruct();
  _TransactionOptions_ReadWrite_default_instance_.DefaultConstruct();
  _TransactionOptions_ReadOnly_default_instance_.DefaultConstruct();
  _TransactionOptions_default_instance_.DefaultConstruct();
  _LookupRequest_default_instance_.get_mutable()->read_options_ = const_cast< ::google::datastore::v1beta3::ReadOptions*>(
      ::google::datastore::v1beta3::ReadOptions::internal_default_instance());
  _RunQueryRequest_default_instance_.get_mutable()->partition_id_ = const_cast< ::google::datastore::v1beta3::PartitionId*>(
      ::google::datastore::v1beta3::PartitionId::internal_default_instance());
  _RunQueryRequest_default_instance_.get_mutable()->read_options_ = const_cast< ::google::datastore::v1beta3::ReadOptions*>(
      ::google::datastore::v1beta3::ReadOptions::internal_default_instance());
  _RunQueryRequest_default_instance_.query_ = const_cast< ::google::datastore::v1beta3::Query*>(
      ::google::datastore::v1beta3::Query::internal_default_instance());
  _RunQueryRequest_default_instance_.gql_query_ = const_cast< ::google::datastore::v1beta3::GqlQuery*>(
      ::google::datastore::v1beta3::GqlQuery::internal_default_instance());
  _RunQueryResponse_default_instance_.get_mutable()->batch_ = const_cast< ::google::datastore::v1beta3::QueryResultBatch*>(
      ::google::datastore::v1beta3::QueryResultBatch::internal_default_instance());
  _RunQueryResponse_default_instance_.get_mutable()->query_ = const_cast< ::google::datastore::v1beta3::Query*>(
      ::google::datastore::v1beta3::Query::internal_default_instance());
  _BeginTransactionRequest_default_instance_.get_mutable()->transaction_options_ = const_cast< ::google::datastore::v1beta3::TransactionOptions*>(
      ::google::datastore::v1beta3::TransactionOptions::internal_default_instance());
  _CommitRequest_default_instance_.transaction_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Mutation_default_instance_.insert_ = const_cast< ::google::datastore::v1beta3::Entity*>(
      ::google::datastore::v1beta3::Entity::internal_default_instance());
  _Mutation_default_instance_.update_ = const_cast< ::google::datastore::v1beta3::Entity*>(
      ::google::datastore::v1beta3::Entity::internal_default_instance());
  _Mutation_default_instance_.upsert_ = const_cast< ::google::datastore::v1beta3::Entity*>(
      ::google::datastore::v1beta3::Entity::internal_default_instance());
  _Mutation_default_instance_.delete__ = const_cast< ::google::datastore::v1beta3::Key*>(
      ::google::datastore::v1beta3::Key::internal_default_instance());
  _Mutation_default_instance_.base_version_ = GOOGLE_LONGLONG(0);
  _MutationResult_default_instance_.get_mutable()->key_ = const_cast< ::google::datastore::v1beta3::Key*>(
      ::google::datastore::v1beta3::Key::internal_default_instance());
  _ReadOptions_default_instance_.read_consistency_ = 0;
  _ReadOptions_default_instance_.transaction_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _TransactionOptions_default_instance_.read_write_ = const_cast< ::google::datastore::v1beta3::TransactionOptions_ReadWrite*>(
      ::google::datastore::v1beta3::TransactionOptions_ReadWrite::internal_default_instance());
  _TransactionOptions_default_instance_.read_only_ = const_cast< ::google::datastore::v1beta3::TransactionOptions_ReadOnly*>(
      ::google::datastore::v1beta3::TransactionOptions_ReadOnly::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n(google/datastore/v1beta3/datastore.pro"
      "to\022\030google.datastore.v1beta3\032\034google/api"
      "/annotations.proto\032%google/datastore/v1b"
      "eta3/entity.proto\032$google/datastore/v1be"
      "ta3/query.proto\"\215\001\n\rLookupRequest\022\022\n\npro"
      "ject_id\030\010 \001(\t\022;\n\014read_options\030\001 \001(\0132%.go"
      "ogle.datastore.v1beta3.ReadOptions\022+\n\004ke"
      "ys\030\003 \003(\0132\035.google.datastore.v1beta3.Key\""
      "\261\001\n\016LookupResponse\0225\n\005found\030\001 \003(\0132&.goog"
      "le.datastore.v1beta3.EntityResult\0227\n\007mis"
      "sing\030\002 \003(\0132&.google.datastore.v1beta3.En"
      "tityResult\022/\n\010deferred\030\003 \003(\0132\035.google.da"
      "tastore.v1beta3.Key\"\230\002\n\017RunQueryRequest\022"
      "\022\n\nproject_id\030\010 \001(\t\022;\n\014partition_id\030\002 \001("
      "\0132%.google.datastore.v1beta3.PartitionId"
      "\022;\n\014read_options\030\001 \001(\0132%.google.datastor"
      "e.v1beta3.ReadOptions\0220\n\005query\030\003 \001(\0132\037.g"
      "oogle.datastore.v1beta3.QueryH\000\0227\n\tgql_q"
      "uery\030\007 \001(\0132\".google.datastore.v1beta3.Gq"
      "lQueryH\000B\014\n\nquery_type\"}\n\020RunQueryRespon"
      "se\0229\n\005batch\030\001 \001(\0132*.google.datastore.v1b"
      "eta3.QueryResultBatch\022.\n\005query\030\002 \001(\0132\037.g"
      "oogle.datastore.v1beta3.Query\"x\n\027BeginTr"
      "ansactionRequest\022\022\n\nproject_id\030\010 \001(\t\022I\n\023"
      "transaction_options\030\n \001(\0132,.google.datas"
      "tore.v1beta3.TransactionOptions\"/\n\030Begin"
      "TransactionResponse\022\023\n\013transaction\030\001 \001(\014"
      "\":\n\017RollbackRequest\022\022\n\nproject_id\030\010 \001(\t\022"
      "\023\n\013transaction\030\001 \001(\014\"\022\n\020RollbackResponse"
      "\"\215\002\n\rCommitRequest\022\022\n\nproject_id\030\010 \001(\t\022:"
      "\n\004mode\030\005 \001(\0162,.google.datastore.v1beta3."
      "CommitRequest.Mode\022\025\n\013transaction\030\001 \001(\014H"
      "\000\0225\n\tmutations\030\006 \003(\0132\".google.datastore."
      "v1beta3.Mutation\"F\n\004Mode\022\024\n\020MODE_UNSPECI"
      "FIED\020\000\022\021\n\rTRANSACTIONAL\020\001\022\025\n\021NON_TRANSAC"
      "TIONAL\020\002B\026\n\024transaction_selector\"k\n\016Comm"
      "itResponse\022B\n\020mutation_results\030\003 \003(\0132(.g"
      "oogle.datastore.v1beta3.MutationResult\022\025"
      "\n\rindex_updates\030\004 \001(\005\"U\n\022AllocateIdsRequ"
      "est\022\022\n\nproject_id\030\010 \001(\t\022+\n\004keys\030\001 \003(\0132\035."
      "google.datastore.v1beta3.Key\"B\n\023Allocate"
      "IdsResponse\022+\n\004keys\030\001 \003(\0132\035.google.datas"
      "tore.v1beta3.Key\"\233\002\n\010Mutation\0222\n\006insert\030"
      "\004 \001(\0132 .google.datastore.v1beta3.EntityH"
      "\000\0222\n\006update\030\005 \001(\0132 .google.datastore.v1b"
      "eta3.EntityH\000\0222\n\006upsert\030\006 \001(\0132 .google.d"
      "atastore.v1beta3.EntityH\000\022/\n\006delete\030\007 \001("
      "\0132\035.google.datastore.v1beta3.KeyH\000\022\026\n\014ba"
      "se_version\030\010 \001(\003H\001B\013\n\toperationB\035\n\033confl"
      "ict_detection_strategy\"h\n\016MutationResult"
      "\022*\n\003key\030\003 \001(\0132\035.google.datastore.v1beta3"
      ".Key\022\017\n\007version\030\004 \001(\003\022\031\n\021conflict_detect"
      "ed\030\005 \001(\010\"\332\001\n\013ReadOptions\022Q\n\020read_consist"
      "ency\030\001 \001(\01625.google.datastore.v1beta3.Re"
      "adOptions.ReadConsistencyH\000\022\025\n\013transacti"
      "on\030\002 \001(\014H\000\"M\n\017ReadConsistency\022 \n\034READ_CO"
      "NSISTENCY_UNSPECIFIED\020\000\022\n\n\006STRONG\020\001\022\014\n\010E"
      "VENTUAL\020\002B\022\n\020consistency_type\"\355\001\n\022Transa"
      "ctionOptions\022L\n\nread_write\030\001 \001(\01326.googl"
      "e.datastore.v1beta3.TransactionOptions.R"
      "eadWriteH\000\022J\n\tread_only\030\002 \001(\01325.google.d"
      "atastore.v1beta3.TransactionOptions.Read"
      "OnlyH\000\032)\n\tReadWrite\022\034\n\024previous_transact"
      "ion\030\001 \001(\014\032\n\n\010ReadOnlyB\006\n\004mode2\267\007\n\tDatast"
      "ore\022\215\001\n\006Lookup\022\'.google.datastore.v1beta"
      "3.LookupRequest\032(.google.datastore.v1bet"
      "a3.LookupResponse\"0\202\323\344\223\002*\"%/v1beta3/proj"
      "ects/{project_id}:lookup:\001*\022\225\001\n\010RunQuery"
      "\022).google.datastore.v1beta3.RunQueryRequ"
      "est\032*.google.datastore.v1beta3.RunQueryR"
      "esponse\"2\202\323\344\223\002,\"\'/v1beta3/projects/{proj"
      "ect_id}:runQuery:\001*\022\265\001\n\020BeginTransaction"
      "\0221.google.datastore.v1beta3.BeginTransac"
      "tionRequest\0322.google.datastore.v1beta3.B"
      "eginTransactionResponse\":\202\323\344\223\0024\"//v1beta"
      "3/projects/{project_id}:beginTransaction"
      ":\001*\022\215\001\n\006Commit\022\'.google.datastore.v1beta"
      "3.CommitRequest\032(.google.datastore.v1bet"
      "a3.CommitResponse\"0\202\323\344\223\002*\"%/v1beta3/proj"
      "ects/{project_id}:commit:\001*\022\225\001\n\010Rollback"
      "\022).google.datastore.v1beta3.RollbackRequ"
      "est\032*.google.datastore.v1beta3.RollbackR"
      "esponse\"2\202\323\344\223\002,\"\'/v1beta3/projects/{proj"
      "ect_id}:rollback:\001*\022\241\001\n\013AllocateIds\022,.go"
      "ogle.datastore.v1beta3.AllocateIdsReques"
      "t\032-.google.datastore.v1beta3.AllocateIds"
      "Response\"5\202\323\344\223\002/\"*/v1beta3/projects/{pro"
      "ject_id}:allocateIds:\001*B\224\001\n\034com.google.d"
      "atastore.v1beta3B\016DatastoreProtoP\001ZAgoog"
      "le.golang.org/genproto/googleapis/datast"
      "ore/v1beta3;datastore\252\002\036Google.Cloud.Dat"
      "astore.V1Beta3b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/datastore/v1beta3/datastore.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::datastore::v1beta3::protobuf_google_2fdatastore_2fv1beta3_2fentity_2eproto::AddDescriptors();
  ::google::datastore::v1beta3::protobuf_google_2fdatastore_2fv1beta3_2fquery_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto

const ::google::protobuf::EnumDescriptor* CommitRequest_Mode_descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_enum_descriptors[0];
}
bool CommitRequest_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommitRequest_Mode CommitRequest::MODE_UNSPECIFIED;
const CommitRequest_Mode CommitRequest::TRANSACTIONAL;
const CommitRequest_Mode CommitRequest::NON_TRANSACTIONAL;
const CommitRequest_Mode CommitRequest::Mode_MIN;
const CommitRequest_Mode CommitRequest::Mode_MAX;
const int CommitRequest::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReadOptions_ReadConsistency_descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_enum_descriptors[1];
}
bool ReadOptions_ReadConsistency_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReadOptions_ReadConsistency ReadOptions::READ_CONSISTENCY_UNSPECIFIED;
const ReadOptions_ReadConsistency ReadOptions::STRONG;
const ReadOptions_ReadConsistency ReadOptions::EVENTUAL;
const ReadOptions_ReadConsistency ReadOptions::ReadConsistency_MIN;
const ReadOptions_ReadConsistency ReadOptions::ReadConsistency_MAX;
const int ReadOptions::ReadConsistency_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LookupRequest::kProjectIdFieldNumber;
const int LookupRequest::kReadOptionsFieldNumber;
const int LookupRequest::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LookupRequest::LookupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.LookupRequest)
}
LookupRequest::LookupRequest(const LookupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.has_read_options()) {
    read_options_ = new ::google::datastore::v1beta3::ReadOptions(*from.read_options_);
  } else {
    read_options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.LookupRequest)
}

void LookupRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_options_ = NULL;
  _cached_size_ = 0;
}

LookupRequest::~LookupRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.LookupRequest)
  SharedDtor();
}

void LookupRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete read_options_;
  }
}

void LookupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LookupRequest::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LookupRequest& LookupRequest::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

LookupRequest* LookupRequest::New(::google::protobuf::Arena* arena) const {
  LookupRequest* n = new LookupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LookupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.LookupRequest)
  keys_.Clear();
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && read_options_ != NULL) {
    delete read_options_;
  }
  read_options_ = NULL;
}

bool LookupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.LookupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.datastore.v1beta3.ReadOptions read_options = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.datastore.v1beta3.Key keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.v1beta3.LookupRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.LookupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.LookupRequest)
  return false;
#undef DO_
}

void LookupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.LookupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.ReadOptions read_options = 1;
  if (this->has_read_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->read_options_, output);
  }

  // repeated .google.datastore.v1beta3.Key keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.LookupRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.LookupRequest)
}

::google::protobuf::uint8* LookupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.LookupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.ReadOptions read_options = 1;
  if (this->has_read_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->read_options_, deterministic, target);
  }

  // repeated .google.datastore.v1beta3.Key keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->keys(i), deterministic, target);
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.LookupRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.LookupRequest)
  return target;
}

size_t LookupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.LookupRequest)
  size_t total_size = 0;

  // repeated .google.datastore.v1beta3.Key keys = 3;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // .google.datastore.v1beta3.ReadOptions read_options = 1;
  if (this->has_read_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->read_options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LookupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.LookupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LookupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LookupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.LookupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.LookupRequest)
    MergeFrom(*source);
  }
}

void LookupRequest::MergeFrom(const LookupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.LookupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.has_read_options()) {
    mutable_read_options()->::google::datastore::v1beta3::ReadOptions::MergeFrom(from.read_options());
  }
}

void LookupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.LookupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupRequest::CopyFrom(const LookupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.LookupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupRequest::IsInitialized() const {
  return true;
}

void LookupRequest::Swap(LookupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LookupRequest::InternalSwap(LookupRequest* other) {
  keys_.InternalSwap(&other->keys_);
  project_id_.Swap(&other->project_id_);
  std::swap(read_options_, other->read_options_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LookupRequest::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LookupRequest

// string project_id = 8;
void LookupRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LookupRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupRequest.project_id)
  return project_id_.GetNoArena();
}
void LookupRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.LookupRequest.project_id)
}
#if LANG_CXX11
void LookupRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.LookupRequest.project_id)
}
#endif
void LookupRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.LookupRequest.project_id)
}
void LookupRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.LookupRequest.project_id)
}
::std::string* LookupRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LookupRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.LookupRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LookupRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.LookupRequest.project_id)
}

// .google.datastore.v1beta3.ReadOptions read_options = 1;
bool LookupRequest::has_read_options() const {
  return this != internal_default_instance() && read_options_ != NULL;
}
void LookupRequest::clear_read_options() {
  if (GetArenaNoVirtual() == NULL && read_options_ != NULL) delete read_options_;
  read_options_ = NULL;
}
const ::google::datastore::v1beta3::ReadOptions& LookupRequest::read_options() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupRequest.read_options)
  return read_options_ != NULL ? *read_options_
                         : *::google::datastore::v1beta3::ReadOptions::internal_default_instance();
}
::google::datastore::v1beta3::ReadOptions* LookupRequest::mutable_read_options() {
  
  if (read_options_ == NULL) {
    read_options_ = new ::google::datastore::v1beta3::ReadOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupRequest.read_options)
  return read_options_;
}
::google::datastore::v1beta3::ReadOptions* LookupRequest::release_read_options() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.LookupRequest.read_options)
  
  ::google::datastore::v1beta3::ReadOptions* temp = read_options_;
  read_options_ = NULL;
  return temp;
}
void LookupRequest::set_allocated_read_options(::google::datastore::v1beta3::ReadOptions* read_options) {
  delete read_options_;
  read_options_ = read_options;
  if (read_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.LookupRequest.read_options)
}

// repeated .google.datastore.v1beta3.Key keys = 3;
int LookupRequest::keys_size() const {
  return keys_.size();
}
void LookupRequest::clear_keys() {
  keys_.Clear();
}
const ::google::datastore::v1beta3::Key& LookupRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupRequest.keys)
  return keys_.Get(index);
}
::google::datastore::v1beta3::Key* LookupRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupRequest.keys)
  return keys_.Mutable(index);
}
::google::datastore::v1beta3::Key* LookupRequest::add_keys() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.LookupRequest.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
LookupRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.LookupRequest.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
LookupRequest::keys() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.LookupRequest.keys)
  return keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LookupResponse::kFoundFieldNumber;
const int LookupResponse::kMissingFieldNumber;
const int LookupResponse::kDeferredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LookupResponse::LookupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.LookupResponse)
}
LookupResponse::LookupResponse(const LookupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      found_(from.found_),
      missing_(from.missing_),
      deferred_(from.deferred_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.LookupResponse)
}

void LookupResponse::SharedCtor() {
  _cached_size_ = 0;
}

LookupResponse::~LookupResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.LookupResponse)
  SharedDtor();
}

void LookupResponse::SharedDtor() {
}

void LookupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LookupResponse::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LookupResponse& LookupResponse::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

LookupResponse* LookupResponse::New(::google::protobuf::Arena* arena) const {
  LookupResponse* n = new LookupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LookupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.LookupResponse)
  found_.Clear();
  missing_.Clear();
  deferred_.Clear();
}

bool LookupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.LookupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.datastore.v1beta3.EntityResult found = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_found()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.datastore.v1beta3.EntityResult missing = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.datastore.v1beta3.Key deferred = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deferred()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.LookupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.LookupResponse)
  return false;
#undef DO_
}

void LookupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.LookupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.datastore.v1beta3.EntityResult found = 1;
  for (unsigned int i = 0, n = this->found_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->found(i), output);
  }

  // repeated .google.datastore.v1beta3.EntityResult missing = 2;
  for (unsigned int i = 0, n = this->missing_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->missing(i), output);
  }

  // repeated .google.datastore.v1beta3.Key deferred = 3;
  for (unsigned int i = 0, n = this->deferred_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deferred(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.LookupResponse)
}

::google::protobuf::uint8* LookupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.LookupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.datastore.v1beta3.EntityResult found = 1;
  for (unsigned int i = 0, n = this->found_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->found(i), deterministic, target);
  }

  // repeated .google.datastore.v1beta3.EntityResult missing = 2;
  for (unsigned int i = 0, n = this->missing_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->missing(i), deterministic, target);
  }

  // repeated .google.datastore.v1beta3.Key deferred = 3;
  for (unsigned int i = 0, n = this->deferred_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->deferred(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.LookupResponse)
  return target;
}

size_t LookupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.LookupResponse)
  size_t total_size = 0;

  // repeated .google.datastore.v1beta3.EntityResult found = 1;
  {
    unsigned int count = this->found_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->found(i));
    }
  }

  // repeated .google.datastore.v1beta3.EntityResult missing = 2;
  {
    unsigned int count = this->missing_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missing(i));
    }
  }

  // repeated .google.datastore.v1beta3.Key deferred = 3;
  {
    unsigned int count = this->deferred_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deferred(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LookupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.LookupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LookupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LookupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.LookupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.LookupResponse)
    MergeFrom(*source);
  }
}

void LookupResponse::MergeFrom(const LookupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.LookupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  found_.MergeFrom(from.found_);
  missing_.MergeFrom(from.missing_);
  deferred_.MergeFrom(from.deferred_);
}

void LookupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.LookupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupResponse::CopyFrom(const LookupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.LookupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResponse::IsInitialized() const {
  return true;
}

void LookupResponse::Swap(LookupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LookupResponse::InternalSwap(LookupResponse* other) {
  found_.InternalSwap(&other->found_);
  missing_.InternalSwap(&other->missing_);
  deferred_.InternalSwap(&other->deferred_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LookupResponse::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LookupResponse

// repeated .google.datastore.v1beta3.EntityResult found = 1;
int LookupResponse::found_size() const {
  return found_.size();
}
void LookupResponse::clear_found() {
  found_.Clear();
}
const ::google::datastore::v1beta3::EntityResult& LookupResponse::found(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupResponse.found)
  return found_.Get(index);
}
::google::datastore::v1beta3::EntityResult* LookupResponse::mutable_found(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupResponse.found)
  return found_.Mutable(index);
}
::google::datastore::v1beta3::EntityResult* LookupResponse::add_found() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.LookupResponse.found)
  return found_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >*
LookupResponse::mutable_found() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.LookupResponse.found)
  return &found_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >&
LookupResponse::found() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.LookupResponse.found)
  return found_;
}

// repeated .google.datastore.v1beta3.EntityResult missing = 2;
int LookupResponse::missing_size() const {
  return missing_.size();
}
void LookupResponse::clear_missing() {
  missing_.Clear();
}
const ::google::datastore::v1beta3::EntityResult& LookupResponse::missing(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupResponse.missing)
  return missing_.Get(index);
}
::google::datastore::v1beta3::EntityResult* LookupResponse::mutable_missing(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupResponse.missing)
  return missing_.Mutable(index);
}
::google::datastore::v1beta3::EntityResult* LookupResponse::add_missing() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.LookupResponse.missing)
  return missing_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >*
LookupResponse::mutable_missing() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.LookupResponse.missing)
  return &missing_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::EntityResult >&
LookupResponse::missing() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.LookupResponse.missing)
  return missing_;
}

// repeated .google.datastore.v1beta3.Key deferred = 3;
int LookupResponse::deferred_size() const {
  return deferred_.size();
}
void LookupResponse::clear_deferred() {
  deferred_.Clear();
}
const ::google::datastore::v1beta3::Key& LookupResponse::deferred(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.LookupResponse.deferred)
  return deferred_.Get(index);
}
::google::datastore::v1beta3::Key* LookupResponse::mutable_deferred(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.LookupResponse.deferred)
  return deferred_.Mutable(index);
}
::google::datastore::v1beta3::Key* LookupResponse::add_deferred() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.LookupResponse.deferred)
  return deferred_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
LookupResponse::mutable_deferred() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.LookupResponse.deferred)
  return &deferred_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
LookupResponse::deferred() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.LookupResponse.deferred)
  return deferred_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunQueryRequest::kProjectIdFieldNumber;
const int RunQueryRequest::kPartitionIdFieldNumber;
const int RunQueryRequest::kReadOptionsFieldNumber;
const int RunQueryRequest::kQueryFieldNumber;
const int RunQueryRequest::kGqlQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunQueryRequest::RunQueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.RunQueryRequest)
}
RunQueryRequest::RunQueryRequest(const RunQueryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.has_read_options()) {
    read_options_ = new ::google::datastore::v1beta3::ReadOptions(*from.read_options_);
  } else {
    read_options_ = NULL;
  }
  if (from.has_partition_id()) {
    partition_id_ = new ::google::datastore::v1beta3::PartitionId(*from.partition_id_);
  } else {
    partition_id_ = NULL;
  }
  clear_has_query_type();
  switch (from.query_type_case()) {
    case kQuery: {
      mutable_query()->::google::datastore::v1beta3::Query::MergeFrom(from.query());
      break;
    }
    case kGqlQuery: {
      mutable_gql_query()->::google::datastore::v1beta3::GqlQuery::MergeFrom(from.gql_query());
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.RunQueryRequest)
}

void RunQueryRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&read_options_, 0, reinterpret_cast<char*>(&partition_id_) -
    reinterpret_cast<char*>(&read_options_) + sizeof(partition_id_));
  clear_has_query_type();
  _cached_size_ = 0;
}

RunQueryRequest::~RunQueryRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.RunQueryRequest)
  SharedDtor();
}

void RunQueryRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete read_options_;
  }
  if (this != internal_default_instance()) {
    delete partition_id_;
  }
  if (has_query_type()) {
    clear_query_type();
  }
}

void RunQueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunQueryRequest::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RunQueryRequest& RunQueryRequest::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

RunQueryRequest* RunQueryRequest::New(::google::protobuf::Arena* arena) const {
  RunQueryRequest* n = new RunQueryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RunQueryRequest::clear_query_type() {
// @@protoc_insertion_point(one_of_clear_start:google.datastore.v1beta3.RunQueryRequest)
  switch (query_type_case()) {
    case kQuery: {
      delete query_type_.query_;
      break;
    }
    case kGqlQuery: {
      delete query_type_.gql_query_;
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_TYPE_NOT_SET;
}


void RunQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.RunQueryRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && read_options_ != NULL) {
    delete read_options_;
  }
  read_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && partition_id_ != NULL) {
    delete partition_id_;
  }
  partition_id_ = NULL;
  clear_query_type();
}

bool RunQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.RunQueryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.datastore.v1beta3.ReadOptions read_options = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.v1beta3.PartitionId partition_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partition_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.v1beta3.Query query = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.v1beta3.GqlQuery gql_query = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gql_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.v1beta3.RunQueryRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.RunQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.RunQueryRequest)
  return false;
#undef DO_
}

void RunQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.RunQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.ReadOptions read_options = 1;
  if (this->has_read_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->read_options_, output);
  }

  // .google.datastore.v1beta3.PartitionId partition_id = 2;
  if (this->has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->partition_id_, output);
  }

  // .google.datastore.v1beta3.Query query = 3;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *query_type_.query_, output);
  }

  // .google.datastore.v1beta3.GqlQuery gql_query = 7;
  if (has_gql_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *query_type_.gql_query_, output);
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.RunQueryRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.RunQueryRequest)
}

::google::protobuf::uint8* RunQueryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.RunQueryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.ReadOptions read_options = 1;
  if (this->has_read_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->read_options_, deterministic, target);
  }

  // .google.datastore.v1beta3.PartitionId partition_id = 2;
  if (this->has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->partition_id_, deterministic, target);
  }

  // .google.datastore.v1beta3.Query query = 3;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *query_type_.query_, deterministic, target);
  }

  // .google.datastore.v1beta3.GqlQuery gql_query = 7;
  if (has_gql_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *query_type_.gql_query_, deterministic, target);
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.RunQueryRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.RunQueryRequest)
  return target;
}

size_t RunQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.RunQueryRequest)
  size_t total_size = 0;

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // .google.datastore.v1beta3.ReadOptions read_options = 1;
  if (this->has_read_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->read_options_);
  }

  // .google.datastore.v1beta3.PartitionId partition_id = 2;
  if (this->has_partition_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->partition_id_);
  }

  switch (query_type_case()) {
    // .google.datastore.v1beta3.Query query = 3;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *query_type_.query_);
      break;
    }
    // .google.datastore.v1beta3.GqlQuery gql_query = 7;
    case kGqlQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *query_type_.gql_query_);
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.RunQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunQueryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunQueryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.RunQueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.RunQueryRequest)
    MergeFrom(*source);
  }
}

void RunQueryRequest::MergeFrom(const RunQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.RunQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.has_read_options()) {
    mutable_read_options()->::google::datastore::v1beta3::ReadOptions::MergeFrom(from.read_options());
  }
  if (from.has_partition_id()) {
    mutable_partition_id()->::google::datastore::v1beta3::PartitionId::MergeFrom(from.partition_id());
  }
  switch (from.query_type_case()) {
    case kQuery: {
      mutable_query()->::google::datastore::v1beta3::Query::MergeFrom(from.query());
      break;
    }
    case kGqlQuery: {
      mutable_gql_query()->::google::datastore::v1beta3::GqlQuery::MergeFrom(from.gql_query());
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
}

void RunQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.RunQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunQueryRequest::CopyFrom(const RunQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.RunQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunQueryRequest::IsInitialized() const {
  return true;
}

void RunQueryRequest::Swap(RunQueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunQueryRequest::InternalSwap(RunQueryRequest* other) {
  project_id_.Swap(&other->project_id_);
  std::swap(read_options_, other->read_options_);
  std::swap(partition_id_, other->partition_id_);
  std::swap(query_type_, other->query_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunQueryRequest::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunQueryRequest

// string project_id = 8;
void RunQueryRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RunQueryRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.project_id)
  return project_id_.GetNoArena();
}
void RunQueryRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.RunQueryRequest.project_id)
}
#if LANG_CXX11
void RunQueryRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.RunQueryRequest.project_id)
}
#endif
void RunQueryRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.RunQueryRequest.project_id)
}
void RunQueryRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.RunQueryRequest.project_id)
}
::std::string* RunQueryRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RunQueryRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RunQueryRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.project_id)
}

// .google.datastore.v1beta3.PartitionId partition_id = 2;
bool RunQueryRequest::has_partition_id() const {
  return this != internal_default_instance() && partition_id_ != NULL;
}
void RunQueryRequest::clear_partition_id() {
  if (GetArenaNoVirtual() == NULL && partition_id_ != NULL) delete partition_id_;
  partition_id_ = NULL;
}
const ::google::datastore::v1beta3::PartitionId& RunQueryRequest::partition_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.partition_id)
  return partition_id_ != NULL ? *partition_id_
                         : *::google::datastore::v1beta3::PartitionId::internal_default_instance();
}
::google::datastore::v1beta3::PartitionId* RunQueryRequest::mutable_partition_id() {
  
  if (partition_id_ == NULL) {
    partition_id_ = new ::google::datastore::v1beta3::PartitionId;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.partition_id)
  return partition_id_;
}
::google::datastore::v1beta3::PartitionId* RunQueryRequest::release_partition_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.partition_id)
  
  ::google::datastore::v1beta3::PartitionId* temp = partition_id_;
  partition_id_ = NULL;
  return temp;
}
void RunQueryRequest::set_allocated_partition_id(::google::datastore::v1beta3::PartitionId* partition_id) {
  delete partition_id_;
  partition_id_ = partition_id;
  if (partition_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.partition_id)
}

// .google.datastore.v1beta3.ReadOptions read_options = 1;
bool RunQueryRequest::has_read_options() const {
  return this != internal_default_instance() && read_options_ != NULL;
}
void RunQueryRequest::clear_read_options() {
  if (GetArenaNoVirtual() == NULL && read_options_ != NULL) delete read_options_;
  read_options_ = NULL;
}
const ::google::datastore::v1beta3::ReadOptions& RunQueryRequest::read_options() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.read_options)
  return read_options_ != NULL ? *read_options_
                         : *::google::datastore::v1beta3::ReadOptions::internal_default_instance();
}
::google::datastore::v1beta3::ReadOptions* RunQueryRequest::mutable_read_options() {
  
  if (read_options_ == NULL) {
    read_options_ = new ::google::datastore::v1beta3::ReadOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.read_options)
  return read_options_;
}
::google::datastore::v1beta3::ReadOptions* RunQueryRequest::release_read_options() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.read_options)
  
  ::google::datastore::v1beta3::ReadOptions* temp = read_options_;
  read_options_ = NULL;
  return temp;
}
void RunQueryRequest::set_allocated_read_options(::google::datastore::v1beta3::ReadOptions* read_options) {
  delete read_options_;
  read_options_ = read_options;
  if (read_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.read_options)
}

// .google.datastore.v1beta3.Query query = 3;
bool RunQueryRequest::has_query() const {
  return query_type_case() == kQuery;
}
void RunQueryRequest::set_has_query() {
  _oneof_case_[0] = kQuery;
}
void RunQueryRequest::clear_query() {
  if (has_query()) {
    delete query_type_.query_;
    clear_has_query_type();
  }
}
 const ::google::datastore::v1beta3::Query& RunQueryRequest::query() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.query)
  return has_query()
      ? *query_type_.query_
      : ::google::datastore::v1beta3::Query::default_instance();
}
::google::datastore::v1beta3::Query* RunQueryRequest::mutable_query() {
  if (!has_query()) {
    clear_query_type();
    set_has_query();
    query_type_.query_ = new ::google::datastore::v1beta3::Query;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.query)
  return query_type_.query_;
}
::google::datastore::v1beta3::Query* RunQueryRequest::release_query() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.query)
  if (has_query()) {
    clear_has_query_type();
    ::google::datastore::v1beta3::Query* temp = query_type_.query_;
    query_type_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RunQueryRequest::set_allocated_query(::google::datastore::v1beta3::Query* query) {
  clear_query_type();
  if (query) {
    set_has_query();
    query_type_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.query)
}

// .google.datastore.v1beta3.GqlQuery gql_query = 7;
bool RunQueryRequest::has_gql_query() const {
  return query_type_case() == kGqlQuery;
}
void RunQueryRequest::set_has_gql_query() {
  _oneof_case_[0] = kGqlQuery;
}
void RunQueryRequest::clear_gql_query() {
  if (has_gql_query()) {
    delete query_type_.gql_query_;
    clear_has_query_type();
  }
}
 const ::google::datastore::v1beta3::GqlQuery& RunQueryRequest::gql_query() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryRequest.gql_query)
  return has_gql_query()
      ? *query_type_.gql_query_
      : ::google::datastore::v1beta3::GqlQuery::default_instance();
}
::google::datastore::v1beta3::GqlQuery* RunQueryRequest::mutable_gql_query() {
  if (!has_gql_query()) {
    clear_query_type();
    set_has_gql_query();
    query_type_.gql_query_ = new ::google::datastore::v1beta3::GqlQuery;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryRequest.gql_query)
  return query_type_.gql_query_;
}
::google::datastore::v1beta3::GqlQuery* RunQueryRequest::release_gql_query() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryRequest.gql_query)
  if (has_gql_query()) {
    clear_has_query_type();
    ::google::datastore::v1beta3::GqlQuery* temp = query_type_.gql_query_;
    query_type_.gql_query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RunQueryRequest::set_allocated_gql_query(::google::datastore::v1beta3::GqlQuery* gql_query) {
  clear_query_type();
  if (gql_query) {
    set_has_gql_query();
    query_type_.gql_query_ = gql_query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryRequest.gql_query)
}

bool RunQueryRequest::has_query_type() const {
  return query_type_case() != QUERY_TYPE_NOT_SET;
}
void RunQueryRequest::clear_has_query_type() {
  _oneof_case_[0] = QUERY_TYPE_NOT_SET;
}
RunQueryRequest::QueryTypeCase RunQueryRequest::query_type_case() const {
  return RunQueryRequest::QueryTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunQueryResponse::kBatchFieldNumber;
const int RunQueryResponse::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunQueryResponse::RunQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.RunQueryResponse)
}
RunQueryResponse::RunQueryResponse(const RunQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_batch()) {
    batch_ = new ::google::datastore::v1beta3::QueryResultBatch(*from.batch_);
  } else {
    batch_ = NULL;
  }
  if (from.has_query()) {
    query_ = new ::google::datastore::v1beta3::Query(*from.query_);
  } else {
    query_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.RunQueryResponse)
}

void RunQueryResponse::SharedCtor() {
  ::memset(&batch_, 0, reinterpret_cast<char*>(&query_) -
    reinterpret_cast<char*>(&batch_) + sizeof(query_));
  _cached_size_ = 0;
}

RunQueryResponse::~RunQueryResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.RunQueryResponse)
  SharedDtor();
}

void RunQueryResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete batch_;
  }
  if (this != internal_default_instance()) {
    delete query_;
  }
}

void RunQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunQueryResponse::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RunQueryResponse& RunQueryResponse::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

RunQueryResponse* RunQueryResponse::New(::google::protobuf::Arena* arena) const {
  RunQueryResponse* n = new RunQueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RunQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.RunQueryResponse)
  if (GetArenaNoVirtual() == NULL && batch_ != NULL) {
    delete batch_;
  }
  batch_ = NULL;
  if (GetArenaNoVirtual() == NULL && query_ != NULL) {
    delete query_;
  }
  query_ = NULL;
}

bool RunQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.RunQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.datastore.v1beta3.QueryResultBatch batch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.v1beta3.Query query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.RunQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.RunQueryResponse)
  return false;
#undef DO_
}

void RunQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.RunQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.QueryResultBatch batch = 1;
  if (this->has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->batch_, output);
  }

  // .google.datastore.v1beta3.Query query = 2;
  if (this->has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->query_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.RunQueryResponse)
}

::google::protobuf::uint8* RunQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.RunQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.QueryResultBatch batch = 1;
  if (this->has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->batch_, deterministic, target);
  }

  // .google.datastore.v1beta3.Query query = 2;
  if (this->has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->query_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.RunQueryResponse)
  return target;
}

size_t RunQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.RunQueryResponse)
  size_t total_size = 0;

  // .google.datastore.v1beta3.QueryResultBatch batch = 1;
  if (this->has_batch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->batch_);
  }

  // .google.datastore.v1beta3.Query query = 2;
  if (this->has_query()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->query_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.RunQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.RunQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.RunQueryResponse)
    MergeFrom(*source);
  }
}

void RunQueryResponse::MergeFrom(const RunQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.RunQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_batch()) {
    mutable_batch()->::google::datastore::v1beta3::QueryResultBatch::MergeFrom(from.batch());
  }
  if (from.has_query()) {
    mutable_query()->::google::datastore::v1beta3::Query::MergeFrom(from.query());
  }
}

void RunQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.RunQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunQueryResponse::CopyFrom(const RunQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.RunQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunQueryResponse::IsInitialized() const {
  return true;
}

void RunQueryResponse::Swap(RunQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunQueryResponse::InternalSwap(RunQueryResponse* other) {
  std::swap(batch_, other->batch_);
  std::swap(query_, other->query_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunQueryResponse::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunQueryResponse

// .google.datastore.v1beta3.QueryResultBatch batch = 1;
bool RunQueryResponse::has_batch() const {
  return this != internal_default_instance() && batch_ != NULL;
}
void RunQueryResponse::clear_batch() {
  if (GetArenaNoVirtual() == NULL && batch_ != NULL) delete batch_;
  batch_ = NULL;
}
const ::google::datastore::v1beta3::QueryResultBatch& RunQueryResponse::batch() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryResponse.batch)
  return batch_ != NULL ? *batch_
                         : *::google::datastore::v1beta3::QueryResultBatch::internal_default_instance();
}
::google::datastore::v1beta3::QueryResultBatch* RunQueryResponse::mutable_batch() {
  
  if (batch_ == NULL) {
    batch_ = new ::google::datastore::v1beta3::QueryResultBatch;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryResponse.batch)
  return batch_;
}
::google::datastore::v1beta3::QueryResultBatch* RunQueryResponse::release_batch() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryResponse.batch)
  
  ::google::datastore::v1beta3::QueryResultBatch* temp = batch_;
  batch_ = NULL;
  return temp;
}
void RunQueryResponse::set_allocated_batch(::google::datastore::v1beta3::QueryResultBatch* batch) {
  delete batch_;
  batch_ = batch;
  if (batch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryResponse.batch)
}

// .google.datastore.v1beta3.Query query = 2;
bool RunQueryResponse::has_query() const {
  return this != internal_default_instance() && query_ != NULL;
}
void RunQueryResponse::clear_query() {
  if (GetArenaNoVirtual() == NULL && query_ != NULL) delete query_;
  query_ = NULL;
}
const ::google::datastore::v1beta3::Query& RunQueryResponse::query() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RunQueryResponse.query)
  return query_ != NULL ? *query_
                         : *::google::datastore::v1beta3::Query::internal_default_instance();
}
::google::datastore::v1beta3::Query* RunQueryResponse::mutable_query() {
  
  if (query_ == NULL) {
    query_ = new ::google::datastore::v1beta3::Query;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RunQueryResponse.query)
  return query_;
}
::google::datastore::v1beta3::Query* RunQueryResponse::release_query() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RunQueryResponse.query)
  
  ::google::datastore::v1beta3::Query* temp = query_;
  query_ = NULL;
  return temp;
}
void RunQueryResponse::set_allocated_query(::google::datastore::v1beta3::Query* query) {
  delete query_;
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RunQueryResponse.query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginTransactionRequest::kProjectIdFieldNumber;
const int BeginTransactionRequest::kTransactionOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginTransactionRequest::BeginTransactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.BeginTransactionRequest)
}
BeginTransactionRequest::BeginTransactionRequest(const BeginTransactionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.has_transaction_options()) {
    transaction_options_ = new ::google::datastore::v1beta3::TransactionOptions(*from.transaction_options_);
  } else {
    transaction_options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.BeginTransactionRequest)
}

void BeginTransactionRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_options_ = NULL;
  _cached_size_ = 0;
}

BeginTransactionRequest::~BeginTransactionRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.BeginTransactionRequest)
  SharedDtor();
}

void BeginTransactionRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete transaction_options_;
  }
}

void BeginTransactionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginTransactionRequest::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BeginTransactionRequest& BeginTransactionRequest::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

BeginTransactionRequest* BeginTransactionRequest::New(::google::protobuf::Arena* arena) const {
  BeginTransactionRequest* n = new BeginTransactionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.BeginTransactionRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && transaction_options_ != NULL) {
    delete transaction_options_;
  }
  transaction_options_ = NULL;
}

bool BeginTransactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.BeginTransactionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.v1beta3.BeginTransactionRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.v1beta3.TransactionOptions transaction_options = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.BeginTransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.BeginTransactionRequest)
  return false;
#undef DO_
}

void BeginTransactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.BeginTransactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.BeginTransactionRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // .google.datastore.v1beta3.TransactionOptions transaction_options = 10;
  if (this->has_transaction_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->transaction_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.BeginTransactionRequest)
}

::google::protobuf::uint8* BeginTransactionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.BeginTransactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.BeginTransactionRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // .google.datastore.v1beta3.TransactionOptions transaction_options = 10;
  if (this->has_transaction_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->transaction_options_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.BeginTransactionRequest)
  return target;
}

size_t BeginTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.BeginTransactionRequest)
  size_t total_size = 0;

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // .google.datastore.v1beta3.TransactionOptions transaction_options = 10;
  if (this->has_transaction_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transaction_options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginTransactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.BeginTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BeginTransactionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BeginTransactionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.BeginTransactionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.BeginTransactionRequest)
    MergeFrom(*source);
  }
}

void BeginTransactionRequest::MergeFrom(const BeginTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.BeginTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.has_transaction_options()) {
    mutable_transaction_options()->::google::datastore::v1beta3::TransactionOptions::MergeFrom(from.transaction_options());
  }
}

void BeginTransactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.BeginTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginTransactionRequest::CopyFrom(const BeginTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.BeginTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginTransactionRequest::IsInitialized() const {
  return true;
}

void BeginTransactionRequest::Swap(BeginTransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginTransactionRequest::InternalSwap(BeginTransactionRequest* other) {
  project_id_.Swap(&other->project_id_);
  std::swap(transaction_options_, other->transaction_options_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeginTransactionRequest::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeginTransactionRequest

// string project_id = 8;
void BeginTransactionRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BeginTransactionRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.BeginTransactionRequest.project_id)
  return project_id_.GetNoArena();
}
void BeginTransactionRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}
#if LANG_CXX11
void BeginTransactionRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}
#endif
void BeginTransactionRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}
void BeginTransactionRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}
::std::string* BeginTransactionRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.BeginTransactionRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BeginTransactionRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.BeginTransactionRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BeginTransactionRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.BeginTransactionRequest.project_id)
}

// .google.datastore.v1beta3.TransactionOptions transaction_options = 10;
bool BeginTransactionRequest::has_transaction_options() const {
  return this != internal_default_instance() && transaction_options_ != NULL;
}
void BeginTransactionRequest::clear_transaction_options() {
  if (GetArenaNoVirtual() == NULL && transaction_options_ != NULL) delete transaction_options_;
  transaction_options_ = NULL;
}
const ::google::datastore::v1beta3::TransactionOptions& BeginTransactionRequest::transaction_options() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.BeginTransactionRequest.transaction_options)
  return transaction_options_ != NULL ? *transaction_options_
                         : *::google::datastore::v1beta3::TransactionOptions::internal_default_instance();
}
::google::datastore::v1beta3::TransactionOptions* BeginTransactionRequest::mutable_transaction_options() {
  
  if (transaction_options_ == NULL) {
    transaction_options_ = new ::google::datastore::v1beta3::TransactionOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.BeginTransactionRequest.transaction_options)
  return transaction_options_;
}
::google::datastore::v1beta3::TransactionOptions* BeginTransactionRequest::release_transaction_options() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.BeginTransactionRequest.transaction_options)
  
  ::google::datastore::v1beta3::TransactionOptions* temp = transaction_options_;
  transaction_options_ = NULL;
  return temp;
}
void BeginTransactionRequest::set_allocated_transaction_options(::google::datastore::v1beta3::TransactionOptions* transaction_options) {
  delete transaction_options_;
  transaction_options_ = transaction_options;
  if (transaction_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.BeginTransactionRequest.transaction_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginTransactionResponse::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginTransactionResponse::BeginTransactionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.BeginTransactionResponse)
}
BeginTransactionResponse::BeginTransactionResponse(const BeginTransactionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transaction().size() > 0) {
    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.BeginTransactionResponse)
}

void BeginTransactionResponse::SharedCtor() {
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BeginTransactionResponse::~BeginTransactionResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.BeginTransactionResponse)
  SharedDtor();
}

void BeginTransactionResponse::SharedDtor() {
  transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeginTransactionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginTransactionResponse::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BeginTransactionResponse& BeginTransactionResponse::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

BeginTransactionResponse* BeginTransactionResponse::New(::google::protobuf::Arena* arena) const {
  BeginTransactionResponse* n = new BeginTransactionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.BeginTransactionResponse)
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BeginTransactionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.BeginTransactionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes transaction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.BeginTransactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.BeginTransactionResponse)
  return false;
#undef DO_
}

void BeginTransactionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.BeginTransactionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->transaction(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.BeginTransactionResponse)
}

::google::protobuf::uint8* BeginTransactionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.BeginTransactionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->transaction(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.BeginTransactionResponse)
  return target;
}

size_t BeginTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.BeginTransactionResponse)
  size_t total_size = 0;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginTransactionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.BeginTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BeginTransactionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BeginTransactionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.BeginTransactionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.BeginTransactionResponse)
    MergeFrom(*source);
  }
}

void BeginTransactionResponse::MergeFrom(const BeginTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.BeginTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction().size() > 0) {

    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
}

void BeginTransactionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.BeginTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginTransactionResponse::CopyFrom(const BeginTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.BeginTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginTransactionResponse::IsInitialized() const {
  return true;
}

void BeginTransactionResponse::Swap(BeginTransactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginTransactionResponse::InternalSwap(BeginTransactionResponse* other) {
  transaction_.Swap(&other->transaction_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeginTransactionResponse::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeginTransactionResponse

// bytes transaction = 1;
void BeginTransactionResponse::clear_transaction() {
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BeginTransactionResponse::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.BeginTransactionResponse.transaction)
  return transaction_.GetNoArena();
}
void BeginTransactionResponse::set_transaction(const ::std::string& value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}
#if LANG_CXX11
void BeginTransactionResponse::set_transaction(::std::string&& value) {
  
  transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}
#endif
void BeginTransactionResponse::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}
void BeginTransactionResponse::set_transaction(const void* value, size_t size) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}
::std::string* BeginTransactionResponse::mutable_transaction() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.BeginTransactionResponse.transaction)
  return transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BeginTransactionResponse::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.BeginTransactionResponse.transaction)
  
  return transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BeginTransactionResponse::set_allocated_transaction(::std::string* transaction) {
  if (transaction != NULL) {
    
  } else {
    
  }
  transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.BeginTransactionResponse.transaction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RollbackRequest::kProjectIdFieldNumber;
const int RollbackRequest::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollbackRequest::RollbackRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.RollbackRequest)
}
RollbackRequest::RollbackRequest(const RollbackRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transaction().size() > 0) {
    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.RollbackRequest)
}

void RollbackRequest::SharedCtor() {
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RollbackRequest::~RollbackRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.RollbackRequest)
  SharedDtor();
}

void RollbackRequest::SharedDtor() {
  transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RollbackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollbackRequest::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RollbackRequest& RollbackRequest::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

RollbackRequest* RollbackRequest::New(::google::protobuf::Arena* arena) const {
  RollbackRequest* n = new RollbackRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RollbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.RollbackRequest)
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RollbackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.RollbackRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes transaction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.v1beta3.RollbackRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.RollbackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.RollbackRequest)
  return false;
#undef DO_
}

void RollbackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.RollbackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->transaction(), output);
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.RollbackRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.RollbackRequest)
}

::google::protobuf::uint8* RollbackRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.RollbackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->transaction(), target);
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.RollbackRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.RollbackRequest)
  return target;
}

size_t RollbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.RollbackRequest)
  size_t total_size = 0;

  // bytes transaction = 1;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction());
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollbackRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.RollbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RollbackRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RollbackRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.RollbackRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.RollbackRequest)
    MergeFrom(*source);
  }
}

void RollbackRequest::MergeFrom(const RollbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.RollbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction().size() > 0) {

    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
}

void RollbackRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.RollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollbackRequest::CopyFrom(const RollbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.RollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollbackRequest::IsInitialized() const {
  return true;
}

void RollbackRequest::Swap(RollbackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollbackRequest::InternalSwap(RollbackRequest* other) {
  transaction_.Swap(&other->transaction_);
  project_id_.Swap(&other->project_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RollbackRequest::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RollbackRequest

// string project_id = 8;
void RollbackRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RollbackRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RollbackRequest.project_id)
  return project_id_.GetNoArena();
}
void RollbackRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.RollbackRequest.project_id)
}
#if LANG_CXX11
void RollbackRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.RollbackRequest.project_id)
}
#endif
void RollbackRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.RollbackRequest.project_id)
}
void RollbackRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.RollbackRequest.project_id)
}
::std::string* RollbackRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RollbackRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RollbackRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RollbackRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RollbackRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RollbackRequest.project_id)
}

// bytes transaction = 1;
void RollbackRequest::clear_transaction() {
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RollbackRequest::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.RollbackRequest.transaction)
  return transaction_.GetNoArena();
}
void RollbackRequest::set_transaction(const ::std::string& value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.RollbackRequest.transaction)
}
#if LANG_CXX11
void RollbackRequest::set_transaction(::std::string&& value) {
  
  transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.RollbackRequest.transaction)
}
#endif
void RollbackRequest::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.RollbackRequest.transaction)
}
void RollbackRequest::set_transaction(const void* value, size_t size) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.RollbackRequest.transaction)
}
::std::string* RollbackRequest::mutable_transaction() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.RollbackRequest.transaction)
  return transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RollbackRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.RollbackRequest.transaction)
  
  return transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RollbackRequest::set_allocated_transaction(::std::string* transaction) {
  if (transaction != NULL) {
    
  } else {
    
  }
  transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.RollbackRequest.transaction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollbackResponse::RollbackResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.RollbackResponse)
}
RollbackResponse::RollbackResponse(const RollbackResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.RollbackResponse)
}

void RollbackResponse::SharedCtor() {
  _cached_size_ = 0;
}

RollbackResponse::~RollbackResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.RollbackResponse)
  SharedDtor();
}

void RollbackResponse::SharedDtor() {
}

void RollbackResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollbackResponse::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RollbackResponse& RollbackResponse::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

RollbackResponse* RollbackResponse::New(::google::protobuf::Arena* arena) const {
  RollbackResponse* n = new RollbackResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RollbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.RollbackResponse)
}

bool RollbackResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.RollbackResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.RollbackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.RollbackResponse)
  return false;
#undef DO_
}

void RollbackResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.RollbackResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.RollbackResponse)
}

::google::protobuf::uint8* RollbackResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.RollbackResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.RollbackResponse)
  return target;
}

size_t RollbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.RollbackResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollbackResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.RollbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RollbackResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RollbackResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.RollbackResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.RollbackResponse)
    MergeFrom(*source);
  }
}

void RollbackResponse::MergeFrom(const RollbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.RollbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RollbackResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.RollbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollbackResponse::CopyFrom(const RollbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.RollbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollbackResponse::IsInitialized() const {
  return true;
}

void RollbackResponse::Swap(RollbackResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollbackResponse::InternalSwap(RollbackResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RollbackResponse::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RollbackResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitRequest::kProjectIdFieldNumber;
const int CommitRequest::kModeFieldNumber;
const int CommitRequest::kTransactionFieldNumber;
const int CommitRequest::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitRequest::CommitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.CommitRequest)
}
CommitRequest::CommitRequest(const CommitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mutations_(from.mutations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  mode_ = from.mode_;
  clear_has_transaction_selector();
  switch (from.transaction_selector_case()) {
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case TRANSACTION_SELECTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.CommitRequest)
}

void CommitRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  clear_has_transaction_selector();
  _cached_size_ = 0;
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.CommitRequest)
  SharedDtor();
}

void CommitRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_transaction_selector()) {
    clear_transaction_selector();
  }
}

void CommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitRequest::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommitRequest& CommitRequest::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommitRequest* CommitRequest::New(::google::protobuf::Arena* arena) const {
  CommitRequest* n = new CommitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitRequest::clear_transaction_selector() {
// @@protoc_insertion_point(one_of_clear_start:google.datastore.v1beta3.CommitRequest)
  switch (transaction_selector_case()) {
    case kTransaction: {
      transaction_selector_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case TRANSACTION_SELECTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_SELECTOR_NOT_SET;
}


void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.CommitRequest)
  mutations_.Clear();
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  clear_transaction_selector();
}

bool CommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.CommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes transaction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.v1beta3.CommitRequest.Mode mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::google::datastore::v1beta3::CommitRequest_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.datastore.v1beta3.Mutation mutations = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.v1beta3.CommitRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.CommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.CommitRequest)
  return false;
#undef DO_
}

void CommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.CommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->transaction(), output);
  }

  // .google.datastore.v1beta3.CommitRequest.Mode mode = 5;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mode(), output);
  }

  // repeated .google.datastore.v1beta3.Mutation mutations = 6;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mutations(i), output);
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.CommitRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.CommitRequest)
}

::google::protobuf::uint8* CommitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.CommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (has_transaction()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->transaction(), target);
  }

  // .google.datastore.v1beta3.CommitRequest.Mode mode = 5;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mode(), target);
  }

  // repeated .google.datastore.v1beta3.Mutation mutations = 6;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->mutations(i), deterministic, target);
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.CommitRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.CommitRequest)
  return target;
}

size_t CommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.CommitRequest)
  size_t total_size = 0;

  // repeated .google.datastore.v1beta3.Mutation mutations = 6;
  {
    unsigned int count = this->mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutations(i));
    }
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // .google.datastore.v1beta3.CommitRequest.Mode mode = 5;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  switch (transaction_selector_case()) {
    // bytes transaction = 1;
    case kTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transaction());
      break;
    }
    case TRANSACTION_SELECTOR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.CommitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.CommitRequest)
    MergeFrom(*source);
  }
}

void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mutations_.MergeFrom(from.mutations_);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  switch (from.transaction_selector_case()) {
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case TRANSACTION_SELECTOR_NOT_SET: {
      break;
    }
  }
}

void CommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitRequest::IsInitialized() const {
  return true;
}

void CommitRequest::Swap(CommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitRequest::InternalSwap(CommitRequest* other) {
  mutations_.InternalSwap(&other->mutations_);
  project_id_.Swap(&other->project_id_);
  std::swap(mode_, other->mode_);
  std::swap(transaction_selector_, other->transaction_selector_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitRequest::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitRequest

// string project_id = 8;
void CommitRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommitRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitRequest.project_id)
  return project_id_.GetNoArena();
}
void CommitRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.project_id)
}
#if LANG_CXX11
void CommitRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.CommitRequest.project_id)
}
#endif
void CommitRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.CommitRequest.project_id)
}
void CommitRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.CommitRequest.project_id)
}
::std::string* CommitRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.CommitRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommitRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.CommitRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommitRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.CommitRequest.project_id)
}

// .google.datastore.v1beta3.CommitRequest.Mode mode = 5;
void CommitRequest::clear_mode() {
  mode_ = 0;
}
::google::datastore::v1beta3::CommitRequest_Mode CommitRequest::mode() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitRequest.mode)
  return static_cast< ::google::datastore::v1beta3::CommitRequest_Mode >(mode_);
}
void CommitRequest::set_mode(::google::datastore::v1beta3::CommitRequest_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.mode)
}

// bytes transaction = 1;
bool CommitRequest::has_transaction() const {
  return transaction_selector_case() == kTransaction;
}
void CommitRequest::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
void CommitRequest::clear_transaction() {
  if (has_transaction()) {
    transaction_selector_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_transaction_selector();
  }
}
const ::std::string& CommitRequest::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitRequest.transaction)
  if (has_transaction()) {
    return transaction_selector_.transaction_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void CommitRequest::set_transaction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.transaction)
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.transaction)
}
#if LANG_CXX11
void CommitRequest::set_transaction(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitRequest.transaction)
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.CommitRequest.transaction)
}
#endif
void CommitRequest::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.CommitRequest.transaction)
}
void CommitRequest::set_transaction(const void* value, size_t size) {
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  transaction_selector_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.CommitRequest.transaction)
}
::std::string* CommitRequest::mutable_transaction() {
  if (!has_transaction()) {
    clear_transaction_selector();
    set_has_transaction();
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.CommitRequest.transaction)
  return transaction_selector_.transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommitRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.CommitRequest.transaction)
  if (has_transaction()) {
    clear_has_transaction_selector();
    return transaction_selector_.transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void CommitRequest::set_allocated_transaction(::std::string* transaction) {
  if (!has_transaction()) {
    transaction_selector_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_transaction_selector();
  if (transaction != NULL) {
    set_has_transaction();
    transaction_selector_.transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transaction);
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.CommitRequest.transaction)
}

// repeated .google.datastore.v1beta3.Mutation mutations = 6;
int CommitRequest::mutations_size() const {
  return mutations_.size();
}
void CommitRequest::clear_mutations() {
  mutations_.Clear();
}
const ::google::datastore::v1beta3::Mutation& CommitRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitRequest.mutations)
  return mutations_.Get(index);
}
::google::datastore::v1beta3::Mutation* CommitRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.CommitRequest.mutations)
  return mutations_.Mutable(index);
}
::google::datastore::v1beta3::Mutation* CommitRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.CommitRequest.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Mutation >*
CommitRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.CommitRequest.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Mutation >&
CommitRequest::mutations() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.CommitRequest.mutations)
  return mutations_;
}

bool CommitRequest::has_transaction_selector() const {
  return transaction_selector_case() != TRANSACTION_SELECTOR_NOT_SET;
}
void CommitRequest::clear_has_transaction_selector() {
  _oneof_case_[0] = TRANSACTION_SELECTOR_NOT_SET;
}
CommitRequest::TransactionSelectorCase CommitRequest::transaction_selector_case() const {
  return CommitRequest::TransactionSelectorCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitResponse::kMutationResultsFieldNumber;
const int CommitResponse::kIndexUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitResponse::CommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.CommitResponse)
}
CommitResponse::CommitResponse(const CommitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mutation_results_(from.mutation_results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_updates_ = from.index_updates_;
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.CommitResponse)
}

void CommitResponse::SharedCtor() {
  index_updates_ = 0;
  _cached_size_ = 0;
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
}

void CommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitResponse::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommitResponse& CommitResponse::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommitResponse* CommitResponse::New(::google::protobuf::Arena* arena) const {
  CommitResponse* n = new CommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.CommitResponse)
  mutation_results_.Clear();
  index_updates_ = 0;
}

bool CommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.CommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mutation_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index_updates = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_updates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.CommitResponse)
  return false;
#undef DO_
}

void CommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.CommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;
  for (unsigned int i = 0, n = this->mutation_results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mutation_results(i), output);
  }

  // int32 index_updates = 4;
  if (this->index_updates() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index_updates(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.CommitResponse)
}

::google::protobuf::uint8* CommitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.CommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;
  for (unsigned int i = 0, n = this->mutation_results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->mutation_results(i), deterministic, target);
  }

  // int32 index_updates = 4;
  if (this->index_updates() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index_updates(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.CommitResponse)
  return target;
}

size_t CommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.CommitResponse)
  size_t total_size = 0;

  // repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;
  {
    unsigned int count = this->mutation_results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutation_results(i));
    }
  }

  // int32 index_updates = 4;
  if (this->index_updates() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index_updates());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.CommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.CommitResponse)
    MergeFrom(*source);
  }
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mutation_results_.MergeFrom(from.mutation_results_);
  if (from.index_updates() != 0) {
    set_index_updates(from.index_updates());
  }
}

void CommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {
  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse::InternalSwap(CommitResponse* other) {
  mutation_results_.InternalSwap(&other->mutation_results_);
  std::swap(index_updates_, other->index_updates_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitResponse::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitResponse

// repeated .google.datastore.v1beta3.MutationResult mutation_results = 3;
int CommitResponse::mutation_results_size() const {
  return mutation_results_.size();
}
void CommitResponse::clear_mutation_results() {
  mutation_results_.Clear();
}
const ::google::datastore::v1beta3::MutationResult& CommitResponse::mutation_results(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitResponse.mutation_results)
  return mutation_results_.Get(index);
}
::google::datastore::v1beta3::MutationResult* CommitResponse::mutable_mutation_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.CommitResponse.mutation_results)
  return mutation_results_.Mutable(index);
}
::google::datastore::v1beta3::MutationResult* CommitResponse::add_mutation_results() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.CommitResponse.mutation_results)
  return mutation_results_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::MutationResult >*
CommitResponse::mutable_mutation_results() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.CommitResponse.mutation_results)
  return &mutation_results_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::MutationResult >&
CommitResponse::mutation_results() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.CommitResponse.mutation_results)
  return mutation_results_;
}

// int32 index_updates = 4;
void CommitResponse::clear_index_updates() {
  index_updates_ = 0;
}
::google::protobuf::int32 CommitResponse::index_updates() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.CommitResponse.index_updates)
  return index_updates_;
}
void CommitResponse::set_index_updates(::google::protobuf::int32 value) {
  
  index_updates_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.CommitResponse.index_updates)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateIdsRequest::kProjectIdFieldNumber;
const int AllocateIdsRequest::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateIdsRequest::AllocateIdsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.AllocateIdsRequest)
}
AllocateIdsRequest::AllocateIdsRequest(const AllocateIdsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.AllocateIdsRequest)
}

void AllocateIdsRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AllocateIdsRequest::~AllocateIdsRequest() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.AllocateIdsRequest)
  SharedDtor();
}

void AllocateIdsRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AllocateIdsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocateIdsRequest::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocateIdsRequest& AllocateIdsRequest::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

AllocateIdsRequest* AllocateIdsRequest::New(::google::protobuf::Arena* arena) const {
  AllocateIdsRequest* n = new AllocateIdsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllocateIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.AllocateIdsRequest)
  keys_.Clear();
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AllocateIdsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.AllocateIdsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.datastore.v1beta3.Key keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.datastore.v1beta3.AllocateIdsRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.AllocateIdsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.AllocateIdsRequest)
  return false;
#undef DO_
}

void AllocateIdsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.AllocateIdsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.datastore.v1beta3.Key keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.AllocateIdsRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->project_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.AllocateIdsRequest)
}

::google::protobuf::uint8* AllocateIdsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.AllocateIdsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.datastore.v1beta3.Key keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keys(i), deterministic, target);
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.datastore.v1beta3.AllocateIdsRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->project_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.AllocateIdsRequest)
  return target;
}

size_t AllocateIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.AllocateIdsRequest)
  size_t total_size = 0;

  // repeated .google.datastore.v1beta3.Key keys = 1;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  // string project_id = 8;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocateIdsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.AllocateIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateIdsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateIdsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.AllocateIdsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.AllocateIdsRequest)
    MergeFrom(*source);
  }
}

void AllocateIdsRequest::MergeFrom(const AllocateIdsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.AllocateIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
}

void AllocateIdsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.AllocateIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateIdsRequest::CopyFrom(const AllocateIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.AllocateIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateIdsRequest::IsInitialized() const {
  return true;
}

void AllocateIdsRequest::Swap(AllocateIdsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateIdsRequest::InternalSwap(AllocateIdsRequest* other) {
  keys_.InternalSwap(&other->keys_);
  project_id_.Swap(&other->project_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllocateIdsRequest::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllocateIdsRequest

// string project_id = 8;
void AllocateIdsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AllocateIdsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.AllocateIdsRequest.project_id)
  return project_id_.GetNoArena();
}
void AllocateIdsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}
#if LANG_CXX11
void AllocateIdsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}
#endif
void AllocateIdsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}
void AllocateIdsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}
::std::string* AllocateIdsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.AllocateIdsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AllocateIdsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.AllocateIdsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AllocateIdsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.AllocateIdsRequest.project_id)
}

// repeated .google.datastore.v1beta3.Key keys = 1;
int AllocateIdsRequest::keys_size() const {
  return keys_.size();
}
void AllocateIdsRequest::clear_keys() {
  keys_.Clear();
}
const ::google::datastore::v1beta3::Key& AllocateIdsRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return keys_.Get(index);
}
::google::datastore::v1beta3::Key* AllocateIdsRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return keys_.Mutable(index);
}
::google::datastore::v1beta3::Key* AllocateIdsRequest::add_keys() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
AllocateIdsRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
AllocateIdsRequest::keys() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.AllocateIdsRequest.keys)
  return keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateIdsResponse::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateIdsResponse::AllocateIdsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.AllocateIdsResponse)
}
AllocateIdsResponse::AllocateIdsResponse(const AllocateIdsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.AllocateIdsResponse)
}

void AllocateIdsResponse::SharedCtor() {
  _cached_size_ = 0;
}

AllocateIdsResponse::~AllocateIdsResponse() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.AllocateIdsResponse)
  SharedDtor();
}

void AllocateIdsResponse::SharedDtor() {
}

void AllocateIdsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocateIdsResponse::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocateIdsResponse& AllocateIdsResponse::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

AllocateIdsResponse* AllocateIdsResponse::New(::google::protobuf::Arena* arena) const {
  AllocateIdsResponse* n = new AllocateIdsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllocateIdsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.AllocateIdsResponse)
  keys_.Clear();
}

bool AllocateIdsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.AllocateIdsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.datastore.v1beta3.Key keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.AllocateIdsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.AllocateIdsResponse)
  return false;
#undef DO_
}

void AllocateIdsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.AllocateIdsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.datastore.v1beta3.Key keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.AllocateIdsResponse)
}

::google::protobuf::uint8* AllocateIdsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.AllocateIdsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.datastore.v1beta3.Key keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keys(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.AllocateIdsResponse)
  return target;
}

size_t AllocateIdsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.AllocateIdsResponse)
  size_t total_size = 0;

  // repeated .google.datastore.v1beta3.Key keys = 1;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocateIdsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.AllocateIdsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateIdsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateIdsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.AllocateIdsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.AllocateIdsResponse)
    MergeFrom(*source);
  }
}

void AllocateIdsResponse::MergeFrom(const AllocateIdsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.AllocateIdsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void AllocateIdsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.AllocateIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateIdsResponse::CopyFrom(const AllocateIdsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.AllocateIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateIdsResponse::IsInitialized() const {
  return true;
}

void AllocateIdsResponse::Swap(AllocateIdsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateIdsResponse::InternalSwap(AllocateIdsResponse* other) {
  keys_.InternalSwap(&other->keys_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllocateIdsResponse::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllocateIdsResponse

// repeated .google.datastore.v1beta3.Key keys = 1;
int AllocateIdsResponse::keys_size() const {
  return keys_.size();
}
void AllocateIdsResponse::clear_keys() {
  keys_.Clear();
}
const ::google::datastore::v1beta3::Key& AllocateIdsResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return keys_.Get(index);
}
::google::datastore::v1beta3::Key* AllocateIdsResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return keys_.Mutable(index);
}
::google::datastore::v1beta3::Key* AllocateIdsResponse::add_keys() {
  // @@protoc_insertion_point(field_add:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >*
AllocateIdsResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::google::datastore::v1beta3::Key >&
AllocateIdsResponse::keys() const {
  // @@protoc_insertion_point(field_list:google.datastore.v1beta3.AllocateIdsResponse.keys)
  return keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation::kInsertFieldNumber;
const int Mutation::kUpdateFieldNumber;
const int Mutation::kUpsertFieldNumber;
const int Mutation::kDeleteFieldNumber;
const int Mutation::kBaseVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation::Mutation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.Mutation)
}
Mutation::Mutation(const Mutation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_operation();
  switch (from.operation_case()) {
    case kInsert: {
      mutable_insert()->::google::datastore::v1beta3::Entity::MergeFrom(from.insert());
      break;
    }
    case kUpdate: {
      mutable_update()->::google::datastore::v1beta3::Entity::MergeFrom(from.update());
      break;
    }
    case kUpsert: {
      mutable_upsert()->::google::datastore::v1beta3::Entity::MergeFrom(from.upsert());
      break;
    }
    case kDelete: {
      mutable_delete_()->::google::datastore::v1beta3::Key::MergeFrom(from.delete_());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  clear_has_conflict_detection_strategy();
  switch (from.conflict_detection_strategy_case()) {
    case kBaseVersion: {
      set_base_version(from.base_version());
      break;
    }
    case CONFLICT_DETECTION_STRATEGY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.Mutation)
}

void Mutation::SharedCtor() {
  clear_has_operation();
  clear_has_conflict_detection_strategy();
  _cached_size_ = 0;
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.Mutation)
  SharedDtor();
}

void Mutation::SharedDtor() {
  if (has_operation()) {
    clear_operation();
  }
  if (has_conflict_detection_strategy()) {
    clear_conflict_detection_strategy();
  }
}

void Mutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mutation& Mutation::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mutation* Mutation::New(::google::protobuf::Arena* arena) const {
  Mutation* n = new Mutation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:google.datastore.v1beta3.Mutation)
  switch (operation_case()) {
    case kInsert: {
      delete operation_.insert_;
      break;
    }
    case kUpdate: {
      delete operation_.update_;
      break;
    }
    case kUpsert: {
      delete operation_.upsert_;
      break;
    }
    case kDelete: {
      delete operation_.delete__;
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_NOT_SET;
}

void Mutation::clear_conflict_detection_strategy() {
// @@protoc_insertion_point(one_of_clear_start:google.datastore.v1beta3.Mutation)
  switch (conflict_detection_strategy_case()) {
    case kBaseVersion: {
      // No need to clear
      break;
    }
    case CONFLICT_DETECTION_STRATEGY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = CONFLICT_DETECTION_STRATEGY_NOT_SET;
}


void Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.Mutation)
  clear_operation();
  clear_conflict_detection_strategy();
}

bool Mutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.Mutation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.datastore.v1beta3.Entity insert = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.v1beta3.Entity update = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.v1beta3.Entity upsert = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upsert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.v1beta3.Key delete = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 base_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          clear_conflict_detection_strategy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &conflict_detection_strategy_.base_version_)));
          set_has_base_version();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.Mutation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.Mutation)
  return false;
#undef DO_
}

void Mutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.Mutation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.Entity insert = 4;
  if (has_insert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *operation_.insert_, output);
  }

  // .google.datastore.v1beta3.Entity update = 5;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *operation_.update_, output);
  }

  // .google.datastore.v1beta3.Entity upsert = 6;
  if (has_upsert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *operation_.upsert_, output);
  }

  // .google.datastore.v1beta3.Key delete = 7;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *operation_.delete__, output);
  }

  // int64 base_version = 8;
  if (has_base_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->base_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.Mutation)
}

::google::protobuf::uint8* Mutation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.Mutation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.Entity insert = 4;
  if (has_insert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *operation_.insert_, deterministic, target);
  }

  // .google.datastore.v1beta3.Entity update = 5;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *operation_.update_, deterministic, target);
  }

  // .google.datastore.v1beta3.Entity upsert = 6;
  if (has_upsert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *operation_.upsert_, deterministic, target);
  }

  // .google.datastore.v1beta3.Key delete = 7;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *operation_.delete__, deterministic, target);
  }

  // int64 base_version = 8;
  if (has_base_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->base_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.Mutation)
  return target;
}

size_t Mutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.Mutation)
  size_t total_size = 0;

  switch (operation_case()) {
    // .google.datastore.v1beta3.Entity insert = 4;
    case kInsert: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.insert_);
      break;
    }
    // .google.datastore.v1beta3.Entity update = 5;
    case kUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.update_);
      break;
    }
    // .google.datastore.v1beta3.Entity upsert = 6;
    case kUpsert: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.upsert_);
      break;
    }
    // .google.datastore.v1beta3.Key delete = 7;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.delete__);
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  switch (conflict_detection_strategy_case()) {
    // int64 base_version = 8;
    case kBaseVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->base_version());
      break;
    }
    case CONFLICT_DETECTION_STRATEGY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  const Mutation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.Mutation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.Mutation)
    MergeFrom(*source);
  }
}

void Mutation::MergeFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.operation_case()) {
    case kInsert: {
      mutable_insert()->::google::datastore::v1beta3::Entity::MergeFrom(from.insert());
      break;
    }
    case kUpdate: {
      mutable_update()->::google::datastore::v1beta3::Entity::MergeFrom(from.update());
      break;
    }
    case kUpsert: {
      mutable_upsert()->::google::datastore::v1beta3::Entity::MergeFrom(from.upsert());
      break;
    }
    case kDelete: {
      mutable_delete_()->::google::datastore::v1beta3::Key::MergeFrom(from.delete_());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  switch (from.conflict_detection_strategy_case()) {
    case kBaseVersion: {
      set_base_version(from.base_version());
      break;
    }
    case CONFLICT_DETECTION_STRATEGY_NOT_SET: {
      break;
    }
  }
}

void Mutation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation::CopyFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutation::IsInitialized() const {
  return true;
}

void Mutation::Swap(Mutation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation::InternalSwap(Mutation* other) {
  std::swap(operation_, other->operation_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(conflict_detection_strategy_, other->conflict_detection_strategy_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mutation

// .google.datastore.v1beta3.Entity insert = 4;
bool Mutation::has_insert() const {
  return operation_case() == kInsert;
}
void Mutation::set_has_insert() {
  _oneof_case_[0] = kInsert;
}
void Mutation::clear_insert() {
  if (has_insert()) {
    delete operation_.insert_;
    clear_has_operation();
  }
}
 const ::google::datastore::v1beta3::Entity& Mutation::insert() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.insert)
  return has_insert()
      ? *operation_.insert_
      : ::google::datastore::v1beta3::Entity::default_instance();
}
::google::datastore::v1beta3::Entity* Mutation::mutable_insert() {
  if (!has_insert()) {
    clear_operation();
    set_has_insert();
    operation_.insert_ = new ::google::datastore::v1beta3::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.Mutation.insert)
  return operation_.insert_;
}
::google::datastore::v1beta3::Entity* Mutation::release_insert() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.Mutation.insert)
  if (has_insert()) {
    clear_has_operation();
    ::google::datastore::v1beta3::Entity* temp = operation_.insert_;
    operation_.insert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_insert(::google::datastore::v1beta3::Entity* insert) {
  clear_operation();
  if (insert) {
    set_has_insert();
    operation_.insert_ = insert;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.Mutation.insert)
}

// .google.datastore.v1beta3.Entity update = 5;
bool Mutation::has_update() const {
  return operation_case() == kUpdate;
}
void Mutation::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
void Mutation::clear_update() {
  if (has_update()) {
    delete operation_.update_;
    clear_has_operation();
  }
}
 const ::google::datastore::v1beta3::Entity& Mutation::update() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.update)
  return has_update()
      ? *operation_.update_
      : ::google::datastore::v1beta3::Entity::default_instance();
}
::google::datastore::v1beta3::Entity* Mutation::mutable_update() {
  if (!has_update()) {
    clear_operation();
    set_has_update();
    operation_.update_ = new ::google::datastore::v1beta3::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.Mutation.update)
  return operation_.update_;
}
::google::datastore::v1beta3::Entity* Mutation::release_update() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.Mutation.update)
  if (has_update()) {
    clear_has_operation();
    ::google::datastore::v1beta3::Entity* temp = operation_.update_;
    operation_.update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_update(::google::datastore::v1beta3::Entity* update) {
  clear_operation();
  if (update) {
    set_has_update();
    operation_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.Mutation.update)
}

// .google.datastore.v1beta3.Entity upsert = 6;
bool Mutation::has_upsert() const {
  return operation_case() == kUpsert;
}
void Mutation::set_has_upsert() {
  _oneof_case_[0] = kUpsert;
}
void Mutation::clear_upsert() {
  if (has_upsert()) {
    delete operation_.upsert_;
    clear_has_operation();
  }
}
 const ::google::datastore::v1beta3::Entity& Mutation::upsert() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.upsert)
  return has_upsert()
      ? *operation_.upsert_
      : ::google::datastore::v1beta3::Entity::default_instance();
}
::google::datastore::v1beta3::Entity* Mutation::mutable_upsert() {
  if (!has_upsert()) {
    clear_operation();
    set_has_upsert();
    operation_.upsert_ = new ::google::datastore::v1beta3::Entity;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.Mutation.upsert)
  return operation_.upsert_;
}
::google::datastore::v1beta3::Entity* Mutation::release_upsert() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.Mutation.upsert)
  if (has_upsert()) {
    clear_has_operation();
    ::google::datastore::v1beta3::Entity* temp = operation_.upsert_;
    operation_.upsert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_upsert(::google::datastore::v1beta3::Entity* upsert) {
  clear_operation();
  if (upsert) {
    set_has_upsert();
    operation_.upsert_ = upsert;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.Mutation.upsert)
}

// .google.datastore.v1beta3.Key delete = 7;
bool Mutation::has_delete_() const {
  return operation_case() == kDelete;
}
void Mutation::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
void Mutation::clear_delete_() {
  if (has_delete_()) {
    delete operation_.delete__;
    clear_has_operation();
  }
}
 const ::google::datastore::v1beta3::Key& Mutation::delete_() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.delete)
  return has_delete_()
      ? *operation_.delete__
      : ::google::datastore::v1beta3::Key::default_instance();
}
::google::datastore::v1beta3::Key* Mutation::mutable_delete_() {
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__ = new ::google::datastore::v1beta3::Key;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.Mutation.delete)
  return operation_.delete__;
}
::google::datastore::v1beta3::Key* Mutation::release_delete_() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.Mutation.delete)
  if (has_delete_()) {
    clear_has_operation();
    ::google::datastore::v1beta3::Key* temp = operation_.delete__;
    operation_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_delete_(::google::datastore::v1beta3::Key* delete_) {
  clear_operation();
  if (delete_) {
    set_has_delete_();
    operation_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.Mutation.delete)
}

// int64 base_version = 8;
bool Mutation::has_base_version() const {
  return conflict_detection_strategy_case() == kBaseVersion;
}
void Mutation::set_has_base_version() {
  _oneof_case_[1] = kBaseVersion;
}
void Mutation::clear_base_version() {
  if (has_base_version()) {
    conflict_detection_strategy_.base_version_ = GOOGLE_LONGLONG(0);
    clear_has_conflict_detection_strategy();
  }
}
::google::protobuf::int64 Mutation::base_version() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.Mutation.base_version)
  if (has_base_version()) {
    return conflict_detection_strategy_.base_version_;
  }
  return GOOGLE_LONGLONG(0);
}
void Mutation::set_base_version(::google::protobuf::int64 value) {
  if (!has_base_version()) {
    clear_conflict_detection_strategy();
    set_has_base_version();
  }
  conflict_detection_strategy_.base_version_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.Mutation.base_version)
}

bool Mutation::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
void Mutation::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
bool Mutation::has_conflict_detection_strategy() const {
  return conflict_detection_strategy_case() != CONFLICT_DETECTION_STRATEGY_NOT_SET;
}
void Mutation::clear_has_conflict_detection_strategy() {
  _oneof_case_[1] = CONFLICT_DETECTION_STRATEGY_NOT_SET;
}
Mutation::OperationCase Mutation::operation_case() const {
  return Mutation::OperationCase(_oneof_case_[0]);
}
Mutation::ConflictDetectionStrategyCase Mutation::conflict_detection_strategy_case() const {
  return Mutation::ConflictDetectionStrategyCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MutationResult::kKeyFieldNumber;
const int MutationResult::kVersionFieldNumber;
const int MutationResult::kConflictDetectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MutationResult::MutationResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.MutationResult)
}
MutationResult::MutationResult(const MutationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::google::datastore::v1beta3::Key(*from.key_);
  } else {
    key_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&conflict_detected_) -
    reinterpret_cast<char*>(&version_) + sizeof(conflict_detected_));
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.MutationResult)
}

void MutationResult::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&conflict_detected_) -
    reinterpret_cast<char*>(&key_) + sizeof(conflict_detected_));
  _cached_size_ = 0;
}

MutationResult::~MutationResult() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.MutationResult)
  SharedDtor();
}

void MutationResult::SharedDtor() {
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void MutationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutationResult::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MutationResult& MutationResult::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

MutationResult* MutationResult::New(::google::protobuf::Arena* arena) const {
  MutationResult* n = new MutationResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MutationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.MutationResult)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  ::memset(&version_, 0, reinterpret_cast<char*>(&conflict_detected_) -
    reinterpret_cast<char*>(&version_) + sizeof(conflict_detected_));
}

bool MutationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.MutationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.datastore.v1beta3.Key key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool conflict_detected = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &conflict_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.MutationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.MutationResult)
  return false;
#undef DO_
}

void MutationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.MutationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.Key key = 3;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->key_, output);
  }

  // int64 version = 4;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->version(), output);
  }

  // bool conflict_detected = 5;
  if (this->conflict_detected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->conflict_detected(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.MutationResult)
}

::google::protobuf::uint8* MutationResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.MutationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.Key key = 3;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->key_, deterministic, target);
  }

  // int64 version = 4;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->version(), target);
  }

  // bool conflict_detected = 5;
  if (this->conflict_detected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->conflict_detected(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.MutationResult)
  return target;
}

size_t MutationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.MutationResult)
  size_t total_size = 0;

  // .google.datastore.v1beta3.Key key = 3;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // int64 version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  // bool conflict_detected = 5;
  if (this->conflict_detected() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.MutationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MutationResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MutationResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.MutationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.MutationResult)
    MergeFrom(*source);
  }
}

void MutationResult::MergeFrom(const MutationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.MutationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::google::datastore::v1beta3::Key::MergeFrom(from.key());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.conflict_detected() != 0) {
    set_conflict_detected(from.conflict_detected());
  }
}

void MutationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.MutationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationResult::CopyFrom(const MutationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.MutationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationResult::IsInitialized() const {
  return true;
}

void MutationResult::Swap(MutationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MutationResult::InternalSwap(MutationResult* other) {
  std::swap(key_, other->key_);
  std::swap(version_, other->version_);
  std::swap(conflict_detected_, other->conflict_detected_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MutationResult::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MutationResult

// .google.datastore.v1beta3.Key key = 3;
bool MutationResult::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void MutationResult::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::google::datastore::v1beta3::Key& MutationResult::key() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.MutationResult.key)
  return key_ != NULL ? *key_
                         : *::google::datastore::v1beta3::Key::internal_default_instance();
}
::google::datastore::v1beta3::Key* MutationResult::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::google::datastore::v1beta3::Key;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.MutationResult.key)
  return key_;
}
::google::datastore::v1beta3::Key* MutationResult::release_key() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.MutationResult.key)
  
  ::google::datastore::v1beta3::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void MutationResult::set_allocated_key(::google::datastore::v1beta3::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.MutationResult.key)
}

// int64 version = 4;
void MutationResult::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MutationResult::version() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.MutationResult.version)
  return version_;
}
void MutationResult::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.MutationResult.version)
}

// bool conflict_detected = 5;
void MutationResult::clear_conflict_detected() {
  conflict_detected_ = false;
}
bool MutationResult::conflict_detected() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.MutationResult.conflict_detected)
  return conflict_detected_;
}
void MutationResult::set_conflict_detected(bool value) {
  
  conflict_detected_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.MutationResult.conflict_detected)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadOptions::kReadConsistencyFieldNumber;
const int ReadOptions::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadOptions::ReadOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.ReadOptions)
}
ReadOptions::ReadOptions(const ReadOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_consistency_type();
  switch (from.consistency_type_case()) {
    case kReadConsistency: {
      set_read_consistency(from.read_consistency());
      break;
    }
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case CONSISTENCY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.ReadOptions)
}

void ReadOptions::SharedCtor() {
  clear_has_consistency_type();
  _cached_size_ = 0;
}

ReadOptions::~ReadOptions() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.ReadOptions)
  SharedDtor();
}

void ReadOptions::SharedDtor() {
  if (has_consistency_type()) {
    clear_consistency_type();
  }
}

void ReadOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadOptions::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadOptions& ReadOptions::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReadOptions* ReadOptions::New(::google::protobuf::Arena* arena) const {
  ReadOptions* n = new ReadOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadOptions::clear_consistency_type() {
// @@protoc_insertion_point(one_of_clear_start:google.datastore.v1beta3.ReadOptions)
  switch (consistency_type_case()) {
    case kReadConsistency: {
      // No need to clear
      break;
    }
    case kTransaction: {
      consistency_type_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CONSISTENCY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSISTENCY_TYPE_NOT_SET;
}


void ReadOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.ReadOptions)
  clear_consistency_type();
}

bool ReadOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.ReadOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_read_consistency(static_cast< ::google::datastore::v1beta3::ReadOptions_ReadConsistency >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.ReadOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.ReadOptions)
  return false;
#undef DO_
}

void ReadOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.ReadOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
  if (has_read_consistency()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->read_consistency(), output);
  }

  // bytes transaction = 2;
  if (has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->transaction(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.ReadOptions)
}

::google::protobuf::uint8* ReadOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.ReadOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
  if (has_read_consistency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->read_consistency(), target);
  }

  // bytes transaction = 2;
  if (has_transaction()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->transaction(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.ReadOptions)
  return target;
}

size_t ReadOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.ReadOptions)
  size_t total_size = 0;

  switch (consistency_type_case()) {
    // .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
    case kReadConsistency: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->read_consistency());
      break;
    }
    // bytes transaction = 2;
    case kTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transaction());
      break;
    }
    case CONSISTENCY_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.ReadOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.ReadOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.ReadOptions)
    MergeFrom(*source);
  }
}

void ReadOptions::MergeFrom(const ReadOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.ReadOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.consistency_type_case()) {
    case kReadConsistency: {
      set_read_consistency(from.read_consistency());
      break;
    }
    case kTransaction: {
      set_transaction(from.transaction());
      break;
    }
    case CONSISTENCY_TYPE_NOT_SET: {
      break;
    }
  }
}

void ReadOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.ReadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadOptions::CopyFrom(const ReadOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.ReadOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOptions::IsInitialized() const {
  return true;
}

void ReadOptions::Swap(ReadOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadOptions::InternalSwap(ReadOptions* other) {
  std::swap(consistency_type_, other->consistency_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadOptions::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadOptions

// .google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
bool ReadOptions::has_read_consistency() const {
  return consistency_type_case() == kReadConsistency;
}
void ReadOptions::set_has_read_consistency() {
  _oneof_case_[0] = kReadConsistency;
}
void ReadOptions::clear_read_consistency() {
  if (has_read_consistency()) {
    consistency_type_.read_consistency_ = 0;
    clear_has_consistency_type();
  }
}
::google::datastore::v1beta3::ReadOptions_ReadConsistency ReadOptions::read_consistency() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.ReadOptions.read_consistency)
  if (has_read_consistency()) {
    return static_cast< ::google::datastore::v1beta3::ReadOptions_ReadConsistency >(consistency_type_.read_consistency_);
  }
  return static_cast< ::google::datastore::v1beta3::ReadOptions_ReadConsistency >(0);
}
void ReadOptions::set_read_consistency(::google::datastore::v1beta3::ReadOptions_ReadConsistency value) {
  if (!has_read_consistency()) {
    clear_consistency_type();
    set_has_read_consistency();
  }
  consistency_type_.read_consistency_ = value;
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.ReadOptions.read_consistency)
}

// bytes transaction = 2;
bool ReadOptions::has_transaction() const {
  return consistency_type_case() == kTransaction;
}
void ReadOptions::set_has_transaction() {
  _oneof_case_[0] = kTransaction;
}
void ReadOptions::clear_transaction() {
  if (has_transaction()) {
    consistency_type_.transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_consistency_type();
  }
}
const ::std::string& ReadOptions::transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.ReadOptions.transaction)
  if (has_transaction()) {
    return consistency_type_.transaction_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ReadOptions::set_transaction(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.ReadOptions.transaction)
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.ReadOptions.transaction)
}
#if LANG_CXX11
void ReadOptions::set_transaction(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.ReadOptions.transaction)
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.ReadOptions.transaction)
}
#endif
void ReadOptions::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.ReadOptions.transaction)
}
void ReadOptions::set_transaction(const void* value, size_t size) {
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  consistency_type_.transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.ReadOptions.transaction)
}
::std::string* ReadOptions::mutable_transaction() {
  if (!has_transaction()) {
    clear_consistency_type();
    set_has_transaction();
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.ReadOptions.transaction)
  return consistency_type_.transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReadOptions::release_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.ReadOptions.transaction)
  if (has_transaction()) {
    clear_has_consistency_type();
    return consistency_type_.transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ReadOptions::set_allocated_transaction(::std::string* transaction) {
  if (!has_transaction()) {
    consistency_type_.transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_consistency_type();
  if (transaction != NULL) {
    set_has_transaction();
    consistency_type_.transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transaction);
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.ReadOptions.transaction)
}

bool ReadOptions::has_consistency_type() const {
  return consistency_type_case() != CONSISTENCY_TYPE_NOT_SET;
}
void ReadOptions::clear_has_consistency_type() {
  _oneof_case_[0] = CONSISTENCY_TYPE_NOT_SET;
}
ReadOptions::ConsistencyTypeCase ReadOptions::consistency_type_case() const {
  return ReadOptions::ConsistencyTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionOptions_ReadWrite::kPreviousTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionOptions_ReadWrite::TransactionOptions_ReadWrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.TransactionOptions.ReadWrite)
}
TransactionOptions_ReadWrite::TransactionOptions_ReadWrite(const TransactionOptions_ReadWrite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  previous_transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.previous_transaction().size() > 0) {
    previous_transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_transaction_);
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.TransactionOptions.ReadWrite)
}

void TransactionOptions_ReadWrite::SharedCtor() {
  previous_transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TransactionOptions_ReadWrite::~TransactionOptions_ReadWrite() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  SharedDtor();
}

void TransactionOptions_ReadWrite::SharedDtor() {
  previous_transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionOptions_ReadWrite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionOptions_ReadWrite::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionOptions_ReadWrite& TransactionOptions_ReadWrite::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionOptions_ReadWrite* TransactionOptions_ReadWrite::New(::google::protobuf::Arena* arena) const {
  TransactionOptions_ReadWrite* n = new TransactionOptions_ReadWrite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionOptions_ReadWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  previous_transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TransactionOptions_ReadWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes previous_transaction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previous_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  return false;
#undef DO_
}

void TransactionOptions_ReadWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes previous_transaction = 1;
  if (this->previous_transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->previous_transaction(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.TransactionOptions.ReadWrite)
}

::google::protobuf::uint8* TransactionOptions_ReadWrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes previous_transaction = 1;
  if (this->previous_transaction().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->previous_transaction(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  return target;
}

size_t TransactionOptions_ReadWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  size_t total_size = 0;

  // bytes previous_transaction = 1;
  if (this->previous_transaction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previous_transaction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionOptions_ReadWrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionOptions_ReadWrite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionOptions_ReadWrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.TransactionOptions.ReadWrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.TransactionOptions.ReadWrite)
    MergeFrom(*source);
  }
}

void TransactionOptions_ReadWrite::MergeFrom(const TransactionOptions_ReadWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.previous_transaction().size() > 0) {

    previous_transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previous_transaction_);
  }
}

void TransactionOptions_ReadWrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionOptions_ReadWrite::CopyFrom(const TransactionOptions_ReadWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.TransactionOptions.ReadWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOptions_ReadWrite::IsInitialized() const {
  return true;
}

void TransactionOptions_ReadWrite::Swap(TransactionOptions_ReadWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionOptions_ReadWrite::InternalSwap(TransactionOptions_ReadWrite* other) {
  previous_transaction_.Swap(&other->previous_transaction_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionOptions_ReadWrite::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionOptions_ReadWrite

// bytes previous_transaction = 1;
void TransactionOptions_ReadWrite::clear_previous_transaction() {
  previous_transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TransactionOptions_ReadWrite::previous_transaction() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
  return previous_transaction_.GetNoArena();
}
void TransactionOptions_ReadWrite::set_previous_transaction(const ::std::string& value) {
  
  previous_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
}
#if LANG_CXX11
void TransactionOptions_ReadWrite::set_previous_transaction(::std::string&& value) {
  
  previous_transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
}
#endif
void TransactionOptions_ReadWrite::set_previous_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  previous_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
}
void TransactionOptions_ReadWrite::set_previous_transaction(const void* value, size_t size) {
  
  previous_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
}
::std::string* TransactionOptions_ReadWrite::mutable_previous_transaction() {
  
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
  return previous_transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionOptions_ReadWrite::release_previous_transaction() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
  
  return previous_transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionOptions_ReadWrite::set_allocated_previous_transaction(::std::string* previous_transaction) {
  if (previous_transaction != NULL) {
    
  } else {
    
  }
  previous_transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previous_transaction);
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.TransactionOptions.ReadWrite.previous_transaction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionOptions_ReadOnly::TransactionOptions_ReadOnly()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.TransactionOptions.ReadOnly)
}
TransactionOptions_ReadOnly::TransactionOptions_ReadOnly(const TransactionOptions_ReadOnly& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.TransactionOptions.ReadOnly)
}

void TransactionOptions_ReadOnly::SharedCtor() {
  _cached_size_ = 0;
}

TransactionOptions_ReadOnly::~TransactionOptions_ReadOnly() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.TransactionOptions.ReadOnly)
  SharedDtor();
}

void TransactionOptions_ReadOnly::SharedDtor() {
}

void TransactionOptions_ReadOnly::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionOptions_ReadOnly::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionOptions_ReadOnly& TransactionOptions_ReadOnly::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionOptions_ReadOnly* TransactionOptions_ReadOnly::New(::google::protobuf::Arena* arena) const {
  TransactionOptions_ReadOnly* n = new TransactionOptions_ReadOnly;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionOptions_ReadOnly::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.TransactionOptions.ReadOnly)
}

bool TransactionOptions_ReadOnly::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.TransactionOptions.ReadOnly)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.TransactionOptions.ReadOnly)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.TransactionOptions.ReadOnly)
  return false;
#undef DO_
}

void TransactionOptions_ReadOnly::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.TransactionOptions.ReadOnly)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.TransactionOptions.ReadOnly)
}

::google::protobuf::uint8* TransactionOptions_ReadOnly::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.TransactionOptions.ReadOnly)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.TransactionOptions.ReadOnly)
  return target;
}

size_t TransactionOptions_ReadOnly::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.TransactionOptions.ReadOnly)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionOptions_ReadOnly::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.TransactionOptions.ReadOnly)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionOptions_ReadOnly* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionOptions_ReadOnly>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.TransactionOptions.ReadOnly)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.TransactionOptions.ReadOnly)
    MergeFrom(*source);
  }
}

void TransactionOptions_ReadOnly::MergeFrom(const TransactionOptions_ReadOnly& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.TransactionOptions.ReadOnly)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TransactionOptions_ReadOnly::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.TransactionOptions.ReadOnly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionOptions_ReadOnly::CopyFrom(const TransactionOptions_ReadOnly& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.TransactionOptions.ReadOnly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOptions_ReadOnly::IsInitialized() const {
  return true;
}

void TransactionOptions_ReadOnly::Swap(TransactionOptions_ReadOnly* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionOptions_ReadOnly::InternalSwap(TransactionOptions_ReadOnly* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionOptions_ReadOnly::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionOptions_ReadOnly

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionOptions::kReadWriteFieldNumber;
const int TransactionOptions::kReadOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionOptions::TransactionOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.datastore.v1beta3.TransactionOptions)
}
TransactionOptions::TransactionOptions(const TransactionOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_mode();
  switch (from.mode_case()) {
    case kReadWrite: {
      mutable_read_write()->::google::datastore::v1beta3::TransactionOptions_ReadWrite::MergeFrom(from.read_write());
      break;
    }
    case kReadOnly: {
      mutable_read_only()->::google::datastore::v1beta3::TransactionOptions_ReadOnly::MergeFrom(from.read_only());
      break;
    }
    case MODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.datastore.v1beta3.TransactionOptions)
}

void TransactionOptions::SharedCtor() {
  clear_has_mode();
  _cached_size_ = 0;
}

TransactionOptions::~TransactionOptions() {
  // @@protoc_insertion_point(destructor:google.datastore.v1beta3.TransactionOptions)
  SharedDtor();
}

void TransactionOptions::SharedDtor() {
  if (has_mode()) {
    clear_mode();
  }
}

void TransactionOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionOptions::descriptor() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionOptions& TransactionOptions::default_instance() {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionOptions* TransactionOptions::New(::google::protobuf::Arena* arena) const {
  TransactionOptions* n = new TransactionOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionOptions::clear_mode() {
// @@protoc_insertion_point(one_of_clear_start:google.datastore.v1beta3.TransactionOptions)
  switch (mode_case()) {
    case kReadWrite: {
      delete mode_.read_write_;
      break;
    }
    case kReadOnly: {
      delete mode_.read_only_;
      break;
    }
    case MODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODE_NOT_SET;
}


void TransactionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.datastore.v1beta3.TransactionOptions)
  clear_mode();
}

bool TransactionOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.datastore.v1beta3.TransactionOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.datastore.v1beta3.TransactionOptions.ReadWrite read_write = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.datastore.v1beta3.TransactionOptions.ReadOnly read_only = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_only()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.datastore.v1beta3.TransactionOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.datastore.v1beta3.TransactionOptions)
  return false;
#undef DO_
}

void TransactionOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.datastore.v1beta3.TransactionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.TransactionOptions.ReadWrite read_write = 1;
  if (has_read_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *mode_.read_write_, output);
  }

  // .google.datastore.v1beta3.TransactionOptions.ReadOnly read_only = 2;
  if (has_read_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *mode_.read_only_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.datastore.v1beta3.TransactionOptions)
}

::google::protobuf::uint8* TransactionOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.datastore.v1beta3.TransactionOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.datastore.v1beta3.TransactionOptions.ReadWrite read_write = 1;
  if (has_read_write()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *mode_.read_write_, deterministic, target);
  }

  // .google.datastore.v1beta3.TransactionOptions.ReadOnly read_only = 2;
  if (has_read_only()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *mode_.read_only_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.datastore.v1beta3.TransactionOptions)
  return target;
}

size_t TransactionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.datastore.v1beta3.TransactionOptions)
  size_t total_size = 0;

  switch (mode_case()) {
    // .google.datastore.v1beta3.TransactionOptions.ReadWrite read_write = 1;
    case kReadWrite: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *mode_.read_write_);
      break;
    }
    // .google.datastore.v1beta3.TransactionOptions.ReadOnly read_only = 2;
    case kReadOnly: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *mode_.read_only_);
      break;
    }
    case MODE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.datastore.v1beta3.TransactionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.datastore.v1beta3.TransactionOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.datastore.v1beta3.TransactionOptions)
    MergeFrom(*source);
  }
}

void TransactionOptions::MergeFrom(const TransactionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.datastore.v1beta3.TransactionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.mode_case()) {
    case kReadWrite: {
      mutable_read_write()->::google::datastore::v1beta3::TransactionOptions_ReadWrite::MergeFrom(from.read_write());
      break;
    }
    case kReadOnly: {
      mutable_read_only()->::google::datastore::v1beta3::TransactionOptions_ReadOnly::MergeFrom(from.read_only());
      break;
    }
    case MODE_NOT_SET: {
      break;
    }
  }
}

void TransactionOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.datastore.v1beta3.TransactionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionOptions::CopyFrom(const TransactionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.datastore.v1beta3.TransactionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOptions::IsInitialized() const {
  return true;
}

void TransactionOptions::Swap(TransactionOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionOptions::InternalSwap(TransactionOptions* other) {
  std::swap(mode_, other->mode_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionOptions::GetMetadata() const {
  protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdatastore_2fv1beta3_2fdatastore_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionOptions

// .google.datastore.v1beta3.TransactionOptions.ReadWrite read_write = 1;
bool TransactionOptions::has_read_write() const {
  return mode_case() == kReadWrite;
}
void TransactionOptions::set_has_read_write() {
  _oneof_case_[0] = kReadWrite;
}
void TransactionOptions::clear_read_write() {
  if (has_read_write()) {
    delete mode_.read_write_;
    clear_has_mode();
  }
}
 const ::google::datastore::v1beta3::TransactionOptions_ReadWrite& TransactionOptions::read_write() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.TransactionOptions.read_write)
  return has_read_write()
      ? *mode_.read_write_
      : ::google::datastore::v1beta3::TransactionOptions_ReadWrite::default_instance();
}
::google::datastore::v1beta3::TransactionOptions_ReadWrite* TransactionOptions::mutable_read_write() {
  if (!has_read_write()) {
    clear_mode();
    set_has_read_write();
    mode_.read_write_ = new ::google::datastore::v1beta3::TransactionOptions_ReadWrite;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.TransactionOptions.read_write)
  return mode_.read_write_;
}
::google::datastore::v1beta3::TransactionOptions_ReadWrite* TransactionOptions::release_read_write() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.TransactionOptions.read_write)
  if (has_read_write()) {
    clear_has_mode();
    ::google::datastore::v1beta3::TransactionOptions_ReadWrite* temp = mode_.read_write_;
    mode_.read_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TransactionOptions::set_allocated_read_write(::google::datastore::v1beta3::TransactionOptions_ReadWrite* read_write) {
  clear_mode();
  if (read_write) {
    set_has_read_write();
    mode_.read_write_ = read_write;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.TransactionOptions.read_write)
}

// .google.datastore.v1beta3.TransactionOptions.ReadOnly read_only = 2;
bool TransactionOptions::has_read_only() const {
  return mode_case() == kReadOnly;
}
void TransactionOptions::set_has_read_only() {
  _oneof_case_[0] = kReadOnly;
}
void TransactionOptions::clear_read_only() {
  if (has_read_only()) {
    delete mode_.read_only_;
    clear_has_mode();
  }
}
 const ::google::datastore::v1beta3::TransactionOptions_ReadOnly& TransactionOptions::read_only() const {
  // @@protoc_insertion_point(field_get:google.datastore.v1beta3.TransactionOptions.read_only)
  return has_read_only()
      ? *mode_.read_only_
      : ::google::datastore::v1beta3::TransactionOptions_ReadOnly::default_instance();
}
::google::datastore::v1beta3::TransactionOptions_ReadOnly* TransactionOptions::mutable_read_only() {
  if (!has_read_only()) {
    clear_mode();
    set_has_read_only();
    mode_.read_only_ = new ::google::datastore::v1beta3::TransactionOptions_ReadOnly;
  }
  // @@protoc_insertion_point(field_mutable:google.datastore.v1beta3.TransactionOptions.read_only)
  return mode_.read_only_;
}
::google::datastore::v1beta3::TransactionOptions_ReadOnly* TransactionOptions::release_read_only() {
  // @@protoc_insertion_point(field_release:google.datastore.v1beta3.TransactionOptions.read_only)
  if (has_read_only()) {
    clear_has_mode();
    ::google::datastore::v1beta3::TransactionOptions_ReadOnly* temp = mode_.read_only_;
    mode_.read_only_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TransactionOptions::set_allocated_read_only(::google::datastore::v1beta3::TransactionOptions_ReadOnly* read_only) {
  clear_mode();
  if (read_only) {
    set_has_read_only();
    mode_.read_only_ = read_only;
  }
  // @@protoc_insertion_point(field_set_allocated:google.datastore.v1beta3.TransactionOptions.read_only)
}

bool TransactionOptions::has_mode() const {
  return mode_case() != MODE_NOT_SET;
}
void TransactionOptions::clear_has_mode() {
  _oneof_case_[0] = MODE_NOT_SET;
}
TransactionOptions::ModeCase TransactionOptions::mode_case() const {
  return TransactionOptions::ModeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta3
}  // namespace datastore
}  // namespace google

// @@protoc_insertion_point(global_scope)
