# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/build/v1/publish_build_event.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.devtools.build.v1 import build_events_pb2 as google_dot_devtools_dot_build_dot_v1_dot_build__events__pb2
from google.protobuf import duration_pb2 as google_dot_protobuf_dot_duration__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='google/devtools/build/v1/publish_build_event.proto',
  package='google.devtools.build.v1',
  syntax='proto3',
  serialized_pb=_b('\n2google/devtools/build/v1/publish_build_event.proto\x12\x18google.devtools.build.v1\x1a\x1cgoogle/api/annotations.proto\x1a+google/devtools/build/v1/build_events.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\"\xd7\x02\n\x1cPublishLifecycleEventRequest\x12Z\n\rservice_level\x18\x01 \x01(\x0e\x32\x43.google.devtools.build.v1.PublishLifecycleEventRequest.ServiceLevel\x12@\n\x0b\x62uild_event\x18\x02 \x01(\x0b\x32+.google.devtools.build.v1.OrderedBuildEvent\x12\x31\n\x0estream_timeout\x18\x03 \x01(\x0b\x32\x19.google.protobuf.Duration\x12\x1d\n\x15notification_keywords\x18\x04 \x03(\t\x12\x12\n\nproject_id\x18\x06 \x01(\t\"3\n\x0cServiceLevel\x12\x12\n\x0eNONINTERACTIVE\x10\x00\x12\x0f\n\x0bINTERACTIVE\x10\x01\"u\n#PublishBuildToolEventStreamResponse\x12\x35\n\tstream_id\x18\x01 \x01(\x0b\x32\".google.devtools.build.v1.StreamId\x12\x17\n\x0fsequence_number\x18\x02 \x01(\x03\"\x98\x01\n\x11OrderedBuildEvent\x12\x35\n\tstream_id\x18\x01 \x01(\x0b\x32\".google.devtools.build.v1.StreamId\x12\x17\n\x0fsequence_number\x18\x02 \x01(\x03\x12\x33\n\x05\x65vent\x18\x03 \x01(\x0b\x32$.google.devtools.build.v1.BuildEvent\"\x9e\x02\n\"PublishBuildToolEventStreamRequest\x12\x39\n\tstream_id\x18\x01 \x01(\x0b\x32\".google.devtools.build.v1.StreamIdB\x02\x18\x01\x12\x1b\n\x0fsequence_number\x18\x02 \x01(\x03\x42\x02\x18\x01\x12\x37\n\x05\x65vent\x18\x03 \x01(\x0b\x32$.google.devtools.build.v1.BuildEventB\x02\x18\x01\x12H\n\x13ordered_build_event\x18\x04 \x01(\x0b\x32+.google.devtools.build.v1.OrderedBuildEvent\x12\x1d\n\x15notification_keywords\x18\x05 \x03(\t2\xd4\x02\n\x11PublishBuildEvent\x12\x8f\x01\n\x15PublishLifecycleEvent\x12\x36.google.devtools.build.v1.PublishLifecycleEventRequest\x1a\x16.google.protobuf.Empty\"&\x82\xd3\xe4\x93\x02 \"\x1b/v1/lifecycleEvents:publish:\x01*\x12\xac\x01\n\x1bPublishBuildToolEventStream\x12+.google.devtools.build.v1.OrderedBuildEvent\x1a=.google.devtools.build.v1.PublishBuildToolEventStreamResponse\"\x1d\x82\xd3\xe4\x93\x02\x17\"\x12/v1/events:publish:\x01*(\x01\x30\x01\x42p\n\x1c\x63om.google.devtools.build.v1B\x0c\x42\x61\x63kendProtoP\x01Z=google.golang.org/genproto/googleapis/devtools/build/v1;build\xf8\x01\x01\x62\x06proto3')
  ,
  dependencies=[google_dot_api_dot_annotations__pb2.DESCRIPTOR,google_dot_devtools_dot_build_dot_v1_dot_build__events__pb2.DESCRIPTOR,google_dot_protobuf_dot_duration__pb2.DESCRIPTOR,google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,])



_PUBLISHLIFECYCLEEVENTREQUEST_SERVICELEVEL = _descriptor.EnumDescriptor(
  name='ServiceLevel',
  full_name='google.devtools.build.v1.PublishLifecycleEventRequest.ServiceLevel',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NONINTERACTIVE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTERACTIVE', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=509,
  serialized_end=560,
)
_sym_db.RegisterEnumDescriptor(_PUBLISHLIFECYCLEEVENTREQUEST_SERVICELEVEL)


_PUBLISHLIFECYCLEEVENTREQUEST = _descriptor.Descriptor(
  name='PublishLifecycleEventRequest',
  full_name='google.devtools.build.v1.PublishLifecycleEventRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='service_level', full_name='google.devtools.build.v1.PublishLifecycleEventRequest.service_level', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='build_event', full_name='google.devtools.build.v1.PublishLifecycleEventRequest.build_event', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stream_timeout', full_name='google.devtools.build.v1.PublishLifecycleEventRequest.stream_timeout', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='notification_keywords', full_name='google.devtools.build.v1.PublishLifecycleEventRequest.notification_keywords', index=3,
      number=4, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='project_id', full_name='google.devtools.build.v1.PublishLifecycleEventRequest.project_id', index=4,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _PUBLISHLIFECYCLEEVENTREQUEST_SERVICELEVEL,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=217,
  serialized_end=560,
)


_PUBLISHBUILDTOOLEVENTSTREAMRESPONSE = _descriptor.Descriptor(
  name='PublishBuildToolEventStreamResponse',
  full_name='google.devtools.build.v1.PublishBuildToolEventStreamResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='stream_id', full_name='google.devtools.build.v1.PublishBuildToolEventStreamResponse.stream_id', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sequence_number', full_name='google.devtools.build.v1.PublishBuildToolEventStreamResponse.sequence_number', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=562,
  serialized_end=679,
)


_ORDEREDBUILDEVENT = _descriptor.Descriptor(
  name='OrderedBuildEvent',
  full_name='google.devtools.build.v1.OrderedBuildEvent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='stream_id', full_name='google.devtools.build.v1.OrderedBuildEvent.stream_id', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sequence_number', full_name='google.devtools.build.v1.OrderedBuildEvent.sequence_number', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='event', full_name='google.devtools.build.v1.OrderedBuildEvent.event', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=682,
  serialized_end=834,
)


_PUBLISHBUILDTOOLEVENTSTREAMREQUEST = _descriptor.Descriptor(
  name='PublishBuildToolEventStreamRequest',
  full_name='google.devtools.build.v1.PublishBuildToolEventStreamRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='stream_id', full_name='google.devtools.build.v1.PublishBuildToolEventStreamRequest.stream_id', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\030\001'))),
    _descriptor.FieldDescriptor(
      name='sequence_number', full_name='google.devtools.build.v1.PublishBuildToolEventStreamRequest.sequence_number', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\030\001'))),
    _descriptor.FieldDescriptor(
      name='event', full_name='google.devtools.build.v1.PublishBuildToolEventStreamRequest.event', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\030\001'))),
    _descriptor.FieldDescriptor(
      name='ordered_build_event', full_name='google.devtools.build.v1.PublishBuildToolEventStreamRequest.ordered_build_event', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='notification_keywords', full_name='google.devtools.build.v1.PublishBuildToolEventStreamRequest.notification_keywords', index=4,
      number=5, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=837,
  serialized_end=1123,
)

_PUBLISHLIFECYCLEEVENTREQUEST.fields_by_name['service_level'].enum_type = _PUBLISHLIFECYCLEEVENTREQUEST_SERVICELEVEL
_PUBLISHLIFECYCLEEVENTREQUEST.fields_by_name['build_event'].message_type = _ORDEREDBUILDEVENT
_PUBLISHLIFECYCLEEVENTREQUEST.fields_by_name['stream_timeout'].message_type = google_dot_protobuf_dot_duration__pb2._DURATION
_PUBLISHLIFECYCLEEVENTREQUEST_SERVICELEVEL.containing_type = _PUBLISHLIFECYCLEEVENTREQUEST
_PUBLISHBUILDTOOLEVENTSTREAMRESPONSE.fields_by_name['stream_id'].message_type = google_dot_devtools_dot_build_dot_v1_dot_build__events__pb2._STREAMID
_ORDEREDBUILDEVENT.fields_by_name['stream_id'].message_type = google_dot_devtools_dot_build_dot_v1_dot_build__events__pb2._STREAMID
_ORDEREDBUILDEVENT.fields_by_name['event'].message_type = google_dot_devtools_dot_build_dot_v1_dot_build__events__pb2._BUILDEVENT
_PUBLISHBUILDTOOLEVENTSTREAMREQUEST.fields_by_name['stream_id'].message_type = google_dot_devtools_dot_build_dot_v1_dot_build__events__pb2._STREAMID
_PUBLISHBUILDTOOLEVENTSTREAMREQUEST.fields_by_name['event'].message_type = google_dot_devtools_dot_build_dot_v1_dot_build__events__pb2._BUILDEVENT
_PUBLISHBUILDTOOLEVENTSTREAMREQUEST.fields_by_name['ordered_build_event'].message_type = _ORDEREDBUILDEVENT
DESCRIPTOR.message_types_by_name['PublishLifecycleEventRequest'] = _PUBLISHLIFECYCLEEVENTREQUEST
DESCRIPTOR.message_types_by_name['PublishBuildToolEventStreamResponse'] = _PUBLISHBUILDTOOLEVENTSTREAMRESPONSE
DESCRIPTOR.message_types_by_name['OrderedBuildEvent'] = _ORDEREDBUILDEVENT
DESCRIPTOR.message_types_by_name['PublishBuildToolEventStreamRequest'] = _PUBLISHBUILDTOOLEVENTSTREAMREQUEST
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

PublishLifecycleEventRequest = _reflection.GeneratedProtocolMessageType('PublishLifecycleEventRequest', (_message.Message,), dict(
  DESCRIPTOR = _PUBLISHLIFECYCLEEVENTREQUEST,
  __module__ = 'google.devtools.build.v1.publish_build_event_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.build.v1.PublishLifecycleEventRequest)
  ))
_sym_db.RegisterMessage(PublishLifecycleEventRequest)

PublishBuildToolEventStreamResponse = _reflection.GeneratedProtocolMessageType('PublishBuildToolEventStreamResponse', (_message.Message,), dict(
  DESCRIPTOR = _PUBLISHBUILDTOOLEVENTSTREAMRESPONSE,
  __module__ = 'google.devtools.build.v1.publish_build_event_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.build.v1.PublishBuildToolEventStreamResponse)
  ))
_sym_db.RegisterMessage(PublishBuildToolEventStreamResponse)

OrderedBuildEvent = _reflection.GeneratedProtocolMessageType('OrderedBuildEvent', (_message.Message,), dict(
  DESCRIPTOR = _ORDEREDBUILDEVENT,
  __module__ = 'google.devtools.build.v1.publish_build_event_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.build.v1.OrderedBuildEvent)
  ))
_sym_db.RegisterMessage(OrderedBuildEvent)

PublishBuildToolEventStreamRequest = _reflection.GeneratedProtocolMessageType('PublishBuildToolEventStreamRequest', (_message.Message,), dict(
  DESCRIPTOR = _PUBLISHBUILDTOOLEVENTSTREAMREQUEST,
  __module__ = 'google.devtools.build.v1.publish_build_event_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.build.v1.PublishBuildToolEventStreamRequest)
  ))
_sym_db.RegisterMessage(PublishBuildToolEventStreamRequest)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\034com.google.devtools.build.v1B\014BackendProtoP\001Z=google.golang.org/genproto/googleapis/devtools/build/v1;build\370\001\001'))
_PUBLISHBUILDTOOLEVENTSTREAMREQUEST.fields_by_name['stream_id'].has_options = True
_PUBLISHBUILDTOOLEVENTSTREAMREQUEST.fields_by_name['stream_id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\030\001'))
_PUBLISHBUILDTOOLEVENTSTREAMREQUEST.fields_by_name['sequence_number'].has_options = True
_PUBLISHBUILDTOOLEVENTSTREAMREQUEST.fields_by_name['sequence_number']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\030\001'))
_PUBLISHBUILDTOOLEVENTSTREAMREQUEST.fields_by_name['event'].has_options = True
_PUBLISHBUILDTOOLEVENTSTREAMREQUEST.fields_by_name['event']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\030\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class PublishBuildEventStub(object):
    """A service for publishing BuildEvents. BuildEvents are generated by Build
    Systems to record actions taken during a Build. Events occur in streams,
    are identified by a StreamId, and ordered by sequence number in a stream.

    A Build may contain several streams of BuildEvents, depending on the systems
    that are involved in the Build. Some BuildEvents are used to declare the
    beginning and end of major portions of a Build; these are called
    LifecycleEvents, and are used (for example) to indicate the beginning or end
    of a Build, and the beginning or end of an Invocation attempt (there can be
    more than 1 Invocation in a Build if, for example, a failure occurs somewhere
    and it needs to be retried).

    Other, build-tool events represent actions taken by the Build tool, such as
    target objects produced via compilation, tests run, et cetera. There could be
    more than one build tool stream for an invocation attempt of a build.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.PublishLifecycleEvent = channel.unary_unary(
          '/google.devtools.build.v1.PublishBuildEvent/PublishLifecycleEvent',
          request_serializer=PublishLifecycleEventRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )
      self.PublishBuildToolEventStream = channel.stream_stream(
          '/google.devtools.build.v1.PublishBuildEvent/PublishBuildToolEventStream',
          request_serializer=OrderedBuildEvent.SerializeToString,
          response_deserializer=PublishBuildToolEventStreamResponse.FromString,
          )


  class PublishBuildEventServicer(object):
    """A service for publishing BuildEvents. BuildEvents are generated by Build
    Systems to record actions taken during a Build. Events occur in streams,
    are identified by a StreamId, and ordered by sequence number in a stream.

    A Build may contain several streams of BuildEvents, depending on the systems
    that are involved in the Build. Some BuildEvents are used to declare the
    beginning and end of major portions of a Build; these are called
    LifecycleEvents, and are used (for example) to indicate the beginning or end
    of a Build, and the beginning or end of an Invocation attempt (there can be
    more than 1 Invocation in a Build if, for example, a failure occurs somewhere
    and it needs to be retried).

    Other, build-tool events represent actions taken by the Build tool, such as
    target objects produced via compilation, tests run, et cetera. There could be
    more than one build tool stream for an invocation attempt of a build.
    """

    def PublishLifecycleEvent(self, request, context):
      """Publish a build event stating the new state of a build (typically from the
      build queue). If the event is a BuildEnqueued event, also register the new
      build request ID and its build type to BES.

      The backend will persist the event and deliver it to registered frontend
      jobs immediately without batching.

      The commit status of the request is reported by the RPC's util_status()
      function. The error code is the canoncial error code defined in
      //util/task/codes.proto.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PublishBuildToolEventStream(self, request_iterator, context):
      """Publish build tool events belonging to the same stream to a backend job
      using bidirectional streaming.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PublishBuildEventServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'PublishLifecycleEvent': grpc.unary_unary_rpc_method_handler(
            servicer.PublishLifecycleEvent,
            request_deserializer=PublishLifecycleEventRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'PublishBuildToolEventStream': grpc.stream_stream_rpc_method_handler(
            servicer.PublishBuildToolEventStream,
            request_deserializer=OrderedBuildEvent.FromString,
            response_serializer=PublishBuildToolEventStreamResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'google.devtools.build.v1.PublishBuildEvent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaPublishBuildEventServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """A service for publishing BuildEvents. BuildEvents are generated by Build
    Systems to record actions taken during a Build. Events occur in streams,
    are identified by a StreamId, and ordered by sequence number in a stream.

    A Build may contain several streams of BuildEvents, depending on the systems
    that are involved in the Build. Some BuildEvents are used to declare the
    beginning and end of major portions of a Build; these are called
    LifecycleEvents, and are used (for example) to indicate the beginning or end
    of a Build, and the beginning or end of an Invocation attempt (there can be
    more than 1 Invocation in a Build if, for example, a failure occurs somewhere
    and it needs to be retried).

    Other, build-tool events represent actions taken by the Build tool, such as
    target objects produced via compilation, tests run, et cetera. There could be
    more than one build tool stream for an invocation attempt of a build.
    """
    def PublishLifecycleEvent(self, request, context):
      """Publish a build event stating the new state of a build (typically from the
      build queue). If the event is a BuildEnqueued event, also register the new
      build request ID and its build type to BES.

      The backend will persist the event and deliver it to registered frontend
      jobs immediately without batching.

      The commit status of the request is reported by the RPC's util_status()
      function. The error code is the canoncial error code defined in
      //util/task/codes.proto.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PublishBuildToolEventStream(self, request_iterator, context):
      """Publish build tool events belonging to the same stream to a backend job
      using bidirectional streaming.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPublishBuildEventStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """A service for publishing BuildEvents. BuildEvents are generated by Build
    Systems to record actions taken during a Build. Events occur in streams,
    are identified by a StreamId, and ordered by sequence number in a stream.

    A Build may contain several streams of BuildEvents, depending on the systems
    that are involved in the Build. Some BuildEvents are used to declare the
    beginning and end of major portions of a Build; these are called
    LifecycleEvents, and are used (for example) to indicate the beginning or end
    of a Build, and the beginning or end of an Invocation attempt (there can be
    more than 1 Invocation in a Build if, for example, a failure occurs somewhere
    and it needs to be retried).

    Other, build-tool events represent actions taken by the Build tool, such as
    target objects produced via compilation, tests run, et cetera. There could be
    more than one build tool stream for an invocation attempt of a build.
    """
    def PublishLifecycleEvent(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Publish a build event stating the new state of a build (typically from the
      build queue). If the event is a BuildEnqueued event, also register the new
      build request ID and its build type to BES.

      The backend will persist the event and deliver it to registered frontend
      jobs immediately without batching.

      The commit status of the request is reported by the RPC's util_status()
      function. The error code is the canoncial error code defined in
      //util/task/codes.proto.
      """
      raise NotImplementedError()
    PublishLifecycleEvent.future = None
    def PublishBuildToolEventStream(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """Publish build tool events belonging to the same stream to a backend job
      using bidirectional streaming.
      """
      raise NotImplementedError()


  def beta_create_PublishBuildEvent_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('google.devtools.build.v1.PublishBuildEvent', 'PublishBuildToolEventStream'): OrderedBuildEvent.FromString,
      ('google.devtools.build.v1.PublishBuildEvent', 'PublishLifecycleEvent'): PublishLifecycleEventRequest.FromString,
    }
    response_serializers = {
      ('google.devtools.build.v1.PublishBuildEvent', 'PublishBuildToolEventStream'): PublishBuildToolEventStreamResponse.SerializeToString,
      ('google.devtools.build.v1.PublishBuildEvent', 'PublishLifecycleEvent'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
    }
    method_implementations = {
      ('google.devtools.build.v1.PublishBuildEvent', 'PublishBuildToolEventStream'): face_utilities.stream_stream_inline(servicer.PublishBuildToolEventStream),
      ('google.devtools.build.v1.PublishBuildEvent', 'PublishLifecycleEvent'): face_utilities.unary_unary_inline(servicer.PublishLifecycleEvent),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PublishBuildEvent_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('google.devtools.build.v1.PublishBuildEvent', 'PublishBuildToolEventStream'): OrderedBuildEvent.SerializeToString,
      ('google.devtools.build.v1.PublishBuildEvent', 'PublishLifecycleEvent'): PublishLifecycleEventRequest.SerializeToString,
    }
    response_deserializers = {
      ('google.devtools.build.v1.PublishBuildEvent', 'PublishBuildToolEventStream'): PublishBuildToolEventStreamResponse.FromString,
      ('google.devtools.build.v1.PublishBuildEvent', 'PublishLifecycleEvent'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
    }
    cardinalities = {
      'PublishBuildToolEventStream': cardinality.Cardinality.STREAM_STREAM,
      'PublishLifecycleEvent': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'google.devtools.build.v1.PublishBuildEvent', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
