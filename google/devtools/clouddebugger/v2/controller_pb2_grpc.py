# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.devtools.clouddebugger.v2 import controller_pb2 as google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2


class Controller2Stub(object):
  """The Controller service provides the API for orchestrating a collection of
  debugger agents to perform debugging tasks. These agents are each attached
  to a process of an application which may include one or more replicas.

  The debugger agents register with the Controller to identify the application
  being debugged, the Debuggee. All agents that register with the same data,
  represent the same Debuggee, and are assigned the same `debuggee_id`.

  The debugger agents call the Controller to retrieve  the list of active
  Breakpoints. Agents with the same `debuggee_id` get the same breakpoints
  list. An agent that can fulfill the breakpoint request updates the
  Controller with the breakpoint result. The controller selects the first
  result received and discards the rest of the results.
  Agents that poll again for active breakpoints will no longer have
  the completed breakpoint in the list and should remove that breakpoint from
  their attached process.

  The Controller service does not provide a way to retrieve the results of
  a completed breakpoint. This functionality is available using the Debugger
  service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RegisterDebuggee = channel.unary_unary(
        '/google.devtools.clouddebugger.v2.Controller2/RegisterDebuggee',
        request_serializer=google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2.RegisterDebuggeeRequest.SerializeToString,
        response_deserializer=google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2.RegisterDebuggeeResponse.FromString,
        )
    self.ListActiveBreakpoints = channel.unary_unary(
        '/google.devtools.clouddebugger.v2.Controller2/ListActiveBreakpoints',
        request_serializer=google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2.ListActiveBreakpointsRequest.SerializeToString,
        response_deserializer=google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2.ListActiveBreakpointsResponse.FromString,
        )
    self.UpdateActiveBreakpoint = channel.unary_unary(
        '/google.devtools.clouddebugger.v2.Controller2/UpdateActiveBreakpoint',
        request_serializer=google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2.UpdateActiveBreakpointRequest.SerializeToString,
        response_deserializer=google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2.UpdateActiveBreakpointResponse.FromString,
        )


class Controller2Servicer(object):
  """The Controller service provides the API for orchestrating a collection of
  debugger agents to perform debugging tasks. These agents are each attached
  to a process of an application which may include one or more replicas.

  The debugger agents register with the Controller to identify the application
  being debugged, the Debuggee. All agents that register with the same data,
  represent the same Debuggee, and are assigned the same `debuggee_id`.

  The debugger agents call the Controller to retrieve  the list of active
  Breakpoints. Agents with the same `debuggee_id` get the same breakpoints
  list. An agent that can fulfill the breakpoint request updates the
  Controller with the breakpoint result. The controller selects the first
  result received and discards the rest of the results.
  Agents that poll again for active breakpoints will no longer have
  the completed breakpoint in the list and should remove that breakpoint from
  their attached process.

  The Controller service does not provide a way to retrieve the results of
  a completed breakpoint. This functionality is available using the Debugger
  service.
  """

  def RegisterDebuggee(self, request, context):
    """Registers the debuggee with the controller service.

    All agents attached to the same application must call this method with
    exactly the same request content to get back the same stable `debuggee_id`.
    Agents should call this method again whenever `google.rpc.Code.NOT_FOUND`
    is returned from any controller method.

    This protocol allows the controller service to disable debuggees, recover
    from data loss, or change the `debuggee_id` format. Agents must handle
    `debuggee_id` value changing upon re-registration.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListActiveBreakpoints(self, request, context):
    """Returns the list of all active breakpoints for the debuggee.

    The breakpoint specification (`location`, `condition`, and `expressions`
    fields) is semantically immutable, although the field values may
    change. For example, an agent may update the location line number
    to reflect the actual line where the breakpoint was set, but this
    doesn't change the breakpoint semantics.

    This means that an agent does not need to check if a breakpoint has changed
    when it encounters the same breakpoint on a successive call.
    Moreover, an agent should remember the breakpoints that are completed
    until the controller removes them from the active list to avoid
    setting those breakpoints again.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateActiveBreakpoint(self, request, context):
    """Updates the breakpoint state or mutable fields.
    The entire Breakpoint message must be sent back to the controller service.

    Updates to active breakpoint fields are only allowed if the new value
    does not change the breakpoint specification. Updates to the `location`,
    `condition` and `expressions` fields should not alter the breakpoint
    semantics. These may only make changes such as canonicalizing a value
    or snapping the location to the correct line of code.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_Controller2Servicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RegisterDebuggee': grpc.unary_unary_rpc_method_handler(
          servicer.RegisterDebuggee,
          request_deserializer=google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2.RegisterDebuggeeRequest.FromString,
          response_serializer=google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2.RegisterDebuggeeResponse.SerializeToString,
      ),
      'ListActiveBreakpoints': grpc.unary_unary_rpc_method_handler(
          servicer.ListActiveBreakpoints,
          request_deserializer=google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2.ListActiveBreakpointsRequest.FromString,
          response_serializer=google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2.ListActiveBreakpointsResponse.SerializeToString,
      ),
      'UpdateActiveBreakpoint': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateActiveBreakpoint,
          request_deserializer=google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2.UpdateActiveBreakpointRequest.FromString,
          response_serializer=google_dot_devtools_dot_clouddebugger_dot_v2_dot_controller__pb2.UpdateActiveBreakpointResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'google.devtools.clouddebugger.v2.Controller2', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
