# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.devtools.cloudprofiler.v2 import profiler_pb2 as google_dot_devtools_dot_cloudprofiler_dot_v2_dot_profiler__pb2


class ProfilerServiceStub(object):
  """Service for recording the profiling data from profiling agents running
  in the cloud or from an offline provider of profiling data.

  General guidelines:
  * Profiles for a single deployment must be created in ascending time order.
  * Profiles can be created in either online or offline mode, see below.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateProfile = channel.unary_unary(
        '/google.devtools.cloudprofiler.v2.ProfilerService/CreateProfile',
        request_serializer=google_dot_devtools_dot_cloudprofiler_dot_v2_dot_profiler__pb2.CreateProfileRequest.SerializeToString,
        response_deserializer=google_dot_devtools_dot_cloudprofiler_dot_v2_dot_profiler__pb2.Profile.FromString,
        )
    self.UpdateProfile = channel.unary_unary(
        '/google.devtools.cloudprofiler.v2.ProfilerService/UpdateProfile',
        request_serializer=google_dot_devtools_dot_cloudprofiler_dot_v2_dot_profiler__pb2.UpdateProfileRequest.SerializeToString,
        response_deserializer=google_dot_devtools_dot_cloudprofiler_dot_v2_dot_profiler__pb2.Profile.FromString,
        )


class ProfilerServiceServicer(object):
  """Service for recording the profiling data from profiling agents running
  in the cloud or from an offline provider of profiling data.

  General guidelines:
  * Profiles for a single deployment must be created in ascending time order.
  * Profiles can be created in either online or offline mode, see below.
  """

  def CreateProfile(self, request, context):
    """CreateProfile creates a new profile resource.

    In the online creation mode:
    * The server ensures that the new profiles are created at a constant rate
    per deployment, so the creation request may hang for some time until the
    next profile session is available.
    * The request may fail with ABORTED error if the creation is not
    available within ~1m, the response will indicate the duration of the
    backoff the client should take before attempting creating a profile
    again. The backoff duration is returned in google.rpc.RetryInfo extension
    on the response status. To a gRPC client, the extension will be return as
    a binary-serialized proto in the trailing metadata item named
    "google.rpc.retryinfo-bin".

    In the offline creation mode:
    * The client provides the profile to create along with the profile bytes,
    the server records it.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateProfile(self, request, context):
    """UpdateProfile updates the profile bytes and labels on the profile resource
    created in the online mode.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ProfilerServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateProfile': grpc.unary_unary_rpc_method_handler(
          servicer.CreateProfile,
          request_deserializer=google_dot_devtools_dot_cloudprofiler_dot_v2_dot_profiler__pb2.CreateProfileRequest.FromString,
          response_serializer=google_dot_devtools_dot_cloudprofiler_dot_v2_dot_profiler__pb2.Profile.SerializeToString,
      ),
      'UpdateProfile': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateProfile,
          request_deserializer=google_dot_devtools_dot_cloudprofiler_dot_v2_dot_profiler__pb2.UpdateProfileRequest.FromString,
          response_serializer=google_dot_devtools_dot_cloudprofiler_dot_v2_dot_profiler__pb2.Profile.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'google.devtools.cloudprofiler.v2.ProfilerService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
