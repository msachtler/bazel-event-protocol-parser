// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudtrace/v1/trace.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/devtools/cloudtrace/v1/trace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace devtools {
namespace cloudtrace {
namespace v1 {
class TraceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Trace> {
} _Trace_default_instance_;
class TracesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Traces> {
} _Traces_default_instance_;
class TraceSpan_LabelsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TraceSpan::TraceSpan_LabelsEntry> {
} _TraceSpan_LabelsEntry_default_instance_;
class TraceSpanDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TraceSpan> {
} _TraceSpan_default_instance_;
class ListTracesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListTracesRequest> {
} _ListTracesRequest_default_instance_;
class ListTracesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListTracesResponse> {
} _ListTracesResponse_default_instance_;
class GetTraceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetTraceRequest> {
} _GetTraceRequest_default_instance_;
class PatchTracesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PatchTracesRequest> {
} _PatchTracesRequest_default_instance_;

namespace protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trace, spans_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traces, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traces, traces_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSpan, span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSpan, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSpan, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSpan, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSpan, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSpan, parent_span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceSpan, labels_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTracesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTracesRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTracesRequest, view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTracesRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTracesRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTracesRequest, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTracesRequest, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTracesRequest, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTracesRequest, order_by_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTracesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTracesResponse, traces_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTracesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTraceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTraceRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTraceRequest, trace_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchTracesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchTracesRequest, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatchTracesRequest, traces_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Trace)},
  { 8, -1, sizeof(Traces)},
  { 14, -1, sizeof(TraceSpan)},
  { 26, -1, sizeof(ListTracesRequest)},
  { 39, -1, sizeof(ListTracesResponse)},
  { 46, -1, sizeof(GetTraceRequest)},
  { 53, -1, sizeof(PatchTracesRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Trace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Traces_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TraceSpan_LabelsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TraceSpan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListTracesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListTracesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetTraceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PatchTracesRequest_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/devtools/cloudtrace/v1/trace.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[2].reflection = TraceSpan::TraceSpan_LabelsEntry::CreateReflection(file_level_metadata[2].descriptor, _TraceSpan_LabelsEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _Trace_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Traces_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TraceSpan_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ListTracesRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ListTracesResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _GetTraceRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _PatchTracesRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _Trace_default_instance_.DefaultConstruct();
  _Traces_default_instance_.DefaultConstruct();
  _TraceSpan_LabelsEntry_default_instance_.DefaultConstruct();
  _TraceSpan_default_instance_.DefaultConstruct();
  _ListTracesRequest_default_instance_.DefaultConstruct();
  _ListTracesResponse_default_instance_.DefaultConstruct();
  _GetTraceRequest_default_instance_.DefaultConstruct();
  _PatchTracesRequest_default_instance_.DefaultConstruct();
  _TraceSpan_LabelsEntry_default_instance_.get_mutable()->set_default_instance(_TraceSpan_LabelsEntry_default_instance_.get_mutable());
  _TraceSpan_LabelsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _TraceSpan_default_instance_.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _TraceSpan_default_instance_.get_mutable()->end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _ListTracesRequest_default_instance_.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _ListTracesRequest_default_instance_.get_mutable()->end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _PatchTracesRequest_default_instance_.get_mutable()->traces_ = const_cast< ::google::devtools::cloudtrace::v1::Traces*>(
      ::google::devtools::cloudtrace::v1::Traces::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n)google/devtools/cloudtrace/v1/trace.pr"
      "oto\022\035google.devtools.cloudtrace.v1\032\034goog"
      "le/api/annotations.proto\032\033google/protobu"
      "f/empty.proto\032\037google/protobuf/timestamp"
      ".proto\"f\n\005Trace\022\022\n\nproject_id\030\001 \001(\t\022\020\n\010t"
      "race_id\030\002 \001(\t\0227\n\005spans\030\003 \003(\0132(.google.de"
      "vtools.cloudtrace.v1.TraceSpan\">\n\006Traces"
      "\0224\n\006traces\030\001 \003(\0132$.google.devtools.cloud"
      "trace.v1.Trace\"\235\003\n\tTraceSpan\022\017\n\007span_id\030"
      "\001 \001(\006\022\?\n\004kind\030\002 \001(\01621.google.devtools.cl"
      "oudtrace.v1.TraceSpan.SpanKind\022\014\n\004name\030\003"
      " \001(\t\022.\n\nstart_time\030\004 \001(\0132\032.google.protob"
      "uf.Timestamp\022,\n\010end_time\030\005 \001(\0132\032.google."
      "protobuf.Timestamp\022\026\n\016parent_span_id\030\006 \001"
      "(\006\022D\n\006labels\030\007 \003(\01324.google.devtools.clo"
      "udtrace.v1.TraceSpan.LabelsEntry\032-\n\013Labe"
      "lsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
      "E\n\010SpanKind\022\031\n\025SPAN_KIND_UNSPECIFIED\020\000\022\016"
      "\n\nRPC_SERVER\020\001\022\016\n\nRPC_CLIENT\020\002\"\347\002\n\021ListT"
      "racesRequest\022\022\n\nproject_id\030\001 \001(\t\022G\n\004view"
      "\030\002 \001(\01629.google.devtools.cloudtrace.v1.L"
      "istTracesRequest.ViewType\022\021\n\tpage_size\030\003"
      " \001(\005\022\022\n\npage_token\030\004 \001(\t\022.\n\nstart_time\030\005"
      " \001(\0132\032.google.protobuf.Timestamp\022,\n\010end_"
      "time\030\006 \001(\0132\032.google.protobuf.Timestamp\022\016"
      "\n\006filter\030\007 \001(\t\022\020\n\010order_by\030\010 \001(\t\"N\n\010View"
      "Type\022\031\n\025VIEW_TYPE_UNSPECIFIED\020\000\022\013\n\007MINIM"
      "AL\020\001\022\014\n\010ROOTSPAN\020\002\022\014\n\010COMPLETE\020\003\"c\n\022List"
      "TracesResponse\0224\n\006traces\030\001 \003(\0132$.google."
      "devtools.cloudtrace.v1.Trace\022\027\n\017next_pag"
      "e_token\030\002 \001(\t\"7\n\017GetTraceRequest\022\022\n\nproj"
      "ect_id\030\001 \001(\t\022\020\n\010trace_id\030\002 \001(\t\"_\n\022PatchT"
      "racesRequest\022\022\n\nproject_id\030\001 \001(\t\0225\n\006trac"
      "es\030\002 \001(\0132%.google.devtools.cloudtrace.v1"
      ".Traces2\321\003\n\014TraceService\022\233\001\n\nListTraces\022"
      "0.google.devtools.cloudtrace.v1.ListTrac"
      "esRequest\0321.google.devtools.cloudtrace.v"
      "1.ListTracesResponse\"(\202\323\344\223\002\"\022 /v1/projec"
      "ts/{project_id}/traces\022\225\001\n\010GetTrace\022..go"
      "ogle.devtools.cloudtrace.v1.GetTraceRequ"
      "est\032$.google.devtools.cloudtrace.v1.Trac"
      "e\"3\202\323\344\223\002-\022+/v1/projects/{project_id}/tra"
      "ces/{trace_id}\022\212\001\n\013PatchTraces\0221.google."
      "devtools.cloudtrace.v1.PatchTracesReques"
      "t\032\026.google.protobuf.Empty\"0\202\323\344\223\002*2 /v1/p"
      "rojects/{project_id}/traces:\006tracesB\222\001\n!"
      "com.google.devtools.cloudtrace.v1B\nTrace"
      "ProtoP\001ZGgoogle.golang.org/genproto/goog"
      "leapis/devtools/cloudtrace/v1;cloudtrace"
      "\252\002\025Google.Cloud.Trace.V1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1992);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/devtools/cloudtrace/v1/trace.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto

const ::google::protobuf::EnumDescriptor* TraceSpan_SpanKind_descriptor() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_enum_descriptors[0];
}
bool TraceSpan_SpanKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TraceSpan_SpanKind TraceSpan::SPAN_KIND_UNSPECIFIED;
const TraceSpan_SpanKind TraceSpan::RPC_SERVER;
const TraceSpan_SpanKind TraceSpan::RPC_CLIENT;
const TraceSpan_SpanKind TraceSpan::SpanKind_MIN;
const TraceSpan_SpanKind TraceSpan::SpanKind_MAX;
const int TraceSpan::SpanKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ListTracesRequest_ViewType_descriptor() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_enum_descriptors[1];
}
bool ListTracesRequest_ViewType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ListTracesRequest_ViewType ListTracesRequest::VIEW_TYPE_UNSPECIFIED;
const ListTracesRequest_ViewType ListTracesRequest::MINIMAL;
const ListTracesRequest_ViewType ListTracesRequest::ROOTSPAN;
const ListTracesRequest_ViewType ListTracesRequest::COMPLETE;
const ListTracesRequest_ViewType ListTracesRequest::ViewType_MIN;
const ListTracesRequest_ViewType ListTracesRequest::ViewType_MAX;
const int ListTracesRequest::ViewType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trace::kProjectIdFieldNumber;
const int Trace::kTraceIdFieldNumber;
const int Trace::kSpansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trace::Trace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v1.Trace)
}
Trace::Trace(const Trace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spans_(from.spans_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  trace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trace_id().size() > 0) {
    trace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v1.Trace)
}

void Trace::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Trace::~Trace() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v1.Trace)
  SharedDtor();
}

void Trace::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Trace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trace::descriptor() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trace& Trace::default_instance() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  return *internal_default_instance();
}

Trace* Trace::New(::google::protobuf::Arena* arena) const {
  Trace* n = new Trace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v1.Trace)
  spans_.Clear();
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Trace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v1.Trace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.Trace.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trace_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trace_id().data(), this->trace_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.Trace.trace_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.devtools.cloudtrace.v1.TraceSpan spans = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v1.Trace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v1.Trace)
  return false;
#undef DO_
}

void Trace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v1.Trace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.Trace.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string trace_id = 2;
  if (this->trace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace_id().data(), this->trace_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.Trace.trace_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trace_id(), output);
  }

  // repeated .google.devtools.cloudtrace.v1.TraceSpan spans = 3;
  for (unsigned int i = 0, n = this->spans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spans(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v1.Trace)
}

::google::protobuf::uint8* Trace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v1.Trace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.Trace.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string trace_id = 2;
  if (this->trace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace_id().data(), this->trace_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.Trace.trace_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trace_id(), target);
  }

  // repeated .google.devtools.cloudtrace.v1.TraceSpan spans = 3;
  for (unsigned int i = 0, n = this->spans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->spans(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v1.Trace)
  return target;
}

size_t Trace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v1.Trace)
  size_t total_size = 0;

  // repeated .google.devtools.cloudtrace.v1.TraceSpan spans = 3;
  {
    unsigned int count = this->spans_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spans(i));
    }
  }

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string trace_id = 2;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trace_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v1.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  const Trace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v1.Trace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v1.Trace)
    MergeFrom(*source);
  }
}

void Trace::MergeFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v1.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spans_.MergeFrom(from.spans_);
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.trace_id().size() > 0) {

    trace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
}

void Trace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v1.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trace::CopyFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v1.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trace::IsInitialized() const {
  return true;
}

void Trace::Swap(Trace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trace::InternalSwap(Trace* other) {
  spans_.InternalSwap(&other->spans_);
  project_id_.Swap(&other->project_id_);
  trace_id_.Swap(&other->trace_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trace::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trace

// string project_id = 1;
void Trace::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Trace::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.Trace.project_id)
  return project_id_.GetNoArena();
}
void Trace::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.Trace.project_id)
}
#if LANG_CXX11
void Trace::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.Trace.project_id)
}
#endif
void Trace::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.Trace.project_id)
}
void Trace::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.Trace.project_id)
}
::std::string* Trace::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.Trace.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Trace::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.Trace.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Trace::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.Trace.project_id)
}

// string trace_id = 2;
void Trace::clear_trace_id() {
  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Trace::trace_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.Trace.trace_id)
  return trace_id_.GetNoArena();
}
void Trace::set_trace_id(const ::std::string& value) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.Trace.trace_id)
}
#if LANG_CXX11
void Trace::set_trace_id(::std::string&& value) {
  
  trace_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.Trace.trace_id)
}
#endif
void Trace::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.Trace.trace_id)
}
void Trace::set_trace_id(const char* value, size_t size) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.Trace.trace_id)
}
::std::string* Trace::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.Trace.trace_id)
  return trace_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Trace::release_trace_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.Trace.trace_id)
  
  return trace_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Trace::set_allocated_trace_id(::std::string* trace_id) {
  if (trace_id != NULL) {
    
  } else {
    
  }
  trace_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.Trace.trace_id)
}

// repeated .google.devtools.cloudtrace.v1.TraceSpan spans = 3;
int Trace::spans_size() const {
  return spans_.size();
}
void Trace::clear_spans() {
  spans_.Clear();
}
const ::google::devtools::cloudtrace::v1::TraceSpan& Trace::spans(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.Trace.spans)
  return spans_.Get(index);
}
::google::devtools::cloudtrace::v1::TraceSpan* Trace::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.Trace.spans)
  return spans_.Mutable(index);
}
::google::devtools::cloudtrace::v1::TraceSpan* Trace::add_spans() {
  // @@protoc_insertion_point(field_add:google.devtools.cloudtrace.v1.Trace.spans)
  return spans_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::TraceSpan >*
Trace::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.cloudtrace.v1.Trace.spans)
  return &spans_;
}
const ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::TraceSpan >&
Trace::spans() const {
  // @@protoc_insertion_point(field_list:google.devtools.cloudtrace.v1.Trace.spans)
  return spans_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Traces::kTracesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Traces::Traces()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v1.Traces)
}
Traces::Traces(const Traces& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      traces_(from.traces_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v1.Traces)
}

void Traces::SharedCtor() {
  _cached_size_ = 0;
}

Traces::~Traces() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v1.Traces)
  SharedDtor();
}

void Traces::SharedDtor() {
}

void Traces::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Traces::descriptor() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Traces& Traces::default_instance() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  return *internal_default_instance();
}

Traces* Traces::New(::google::protobuf::Arena* arena) const {
  Traces* n = new Traces;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Traces::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v1.Traces)
  traces_.Clear();
}

bool Traces::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v1.Traces)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v1.Traces)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v1.Traces)
  return false;
#undef DO_
}

void Traces::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v1.Traces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
  for (unsigned int i = 0, n = this->traces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->traces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v1.Traces)
}

::google::protobuf::uint8* Traces::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v1.Traces)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
  for (unsigned int i = 0, n = this->traces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->traces(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v1.Traces)
  return target;
}

size_t Traces::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v1.Traces)
  size_t total_size = 0;

  // repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
  {
    unsigned int count = this->traces_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traces(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Traces::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v1.Traces)
  GOOGLE_DCHECK_NE(&from, this);
  const Traces* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Traces>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v1.Traces)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v1.Traces)
    MergeFrom(*source);
  }
}

void Traces::MergeFrom(const Traces& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v1.Traces)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traces_.MergeFrom(from.traces_);
}

void Traces::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v1.Traces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Traces::CopyFrom(const Traces& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v1.Traces)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Traces::IsInitialized() const {
  return true;
}

void Traces::Swap(Traces* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Traces::InternalSwap(Traces* other) {
  traces_.InternalSwap(&other->traces_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Traces::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Traces

// repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
int Traces::traces_size() const {
  return traces_.size();
}
void Traces::clear_traces() {
  traces_.Clear();
}
const ::google::devtools::cloudtrace::v1::Trace& Traces::traces(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.Traces.traces)
  return traces_.Get(index);
}
::google::devtools::cloudtrace::v1::Trace* Traces::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.Traces.traces)
  return traces_.Mutable(index);
}
::google::devtools::cloudtrace::v1::Trace* Traces::add_traces() {
  // @@protoc_insertion_point(field_add:google.devtools.cloudtrace.v1.Traces.traces)
  return traces_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace >*
Traces::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.cloudtrace.v1.Traces.traces)
  return &traces_;
}
const ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace >&
Traces::traces() const {
  // @@protoc_insertion_point(field_list:google.devtools.cloudtrace.v1.Traces.traces)
  return traces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

TraceSpan::TraceSpan_LabelsEntry::TraceSpan_LabelsEntry() {}
TraceSpan::TraceSpan_LabelsEntry::TraceSpan_LabelsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata TraceSpan::TraceSpan_LabelsEntry::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[2];
}
void TraceSpan::TraceSpan_LabelsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void TraceSpan::TraceSpan_LabelsEntry::MergeFrom(const TraceSpan_LabelsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceSpan::kSpanIdFieldNumber;
const int TraceSpan::kKindFieldNumber;
const int TraceSpan::kNameFieldNumber;
const int TraceSpan::kStartTimeFieldNumber;
const int TraceSpan::kEndTimeFieldNumber;
const int TraceSpan::kParentSpanIdFieldNumber;
const int TraceSpan::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceSpan::TraceSpan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v1.TraceSpan)
}
TraceSpan::TraceSpan(const TraceSpan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Timestamp(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  ::memcpy(&span_id_, &from.span_id_,
    reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&span_id_) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v1.TraceSpan)
}

void TraceSpan::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(kind_));
  _cached_size_ = 0;
}

TraceSpan::~TraceSpan() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v1.TraceSpan)
  SharedDtor();
}

void TraceSpan::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete start_time_;
  }
  if (this != internal_default_instance()) {
    delete end_time_;
  }
}

void TraceSpan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceSpan::descriptor() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TraceSpan& TraceSpan::default_instance() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  return *internal_default_instance();
}

TraceSpan* TraceSpan::New(::google::protobuf::Arena* arena) const {
  TraceSpan* n = new TraceSpan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TraceSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v1.TraceSpan)
  labels_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  ::memset(&span_id_, 0, reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&span_id_) + sizeof(kind_));
}

bool TraceSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v1.TraceSpan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 span_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v1.TraceSpan.SpanKind kind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::google::devtools::cloudtrace::v1::TraceSpan_SpanKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.TraceSpan.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 parent_span_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &parent_span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          TraceSpan_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              TraceSpan_LabelsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.TraceSpan.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.TraceSpan.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v1.TraceSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v1.TraceSpan)
  return false;
#undef DO_
}

void TraceSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v1.TraceSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 span_id = 1;
  if (this->span_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->span_id(), output);
  }

  // .google.devtools.cloudtrace.v1.TraceSpan.SpanKind kind = 2;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kind(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.TraceSpan.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->start_time_, output);
  }

  // .google.protobuf.Timestamp end_time = 5;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->end_time_, output);
  }

  // fixed64 parent_span_id = 6;
  if (this->parent_span_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->parent_span_id(), output);
  }

  // map<string, string> labels = 7;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.devtools.cloudtrace.v1.TraceSpan.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.devtools.cloudtrace.v1.TraceSpan.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TraceSpan_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TraceSpan_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v1.TraceSpan)
}

::google::protobuf::uint8* TraceSpan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v1.TraceSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 span_id = 1;
  if (this->span_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->span_id(), target);
  }

  // .google.devtools.cloudtrace.v1.TraceSpan.SpanKind kind = 2;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kind(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.TraceSpan.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->start_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp end_time = 5;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->end_time_, deterministic, target);
  }

  // fixed64 parent_span_id = 6;
  if (this->parent_span_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->parent_span_id(), target);
  }

  // map<string, string> labels = 7;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.devtools.cloudtrace.v1.TraceSpan.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.devtools.cloudtrace.v1.TraceSpan.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TraceSpan_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TraceSpan_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v1.TraceSpan)
  return target;
}

size_t TraceSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v1.TraceSpan)
  size_t total_size = 0;

  // map<string, string> labels = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<TraceSpan_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Timestamp start_time = 4;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_time_);
  }

  // .google.protobuf.Timestamp end_time = 5;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_time_);
  }

  // fixed64 span_id = 1;
  if (this->span_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 parent_span_id = 6;
  if (this->parent_span_id() != 0) {
    total_size += 1 + 8;
  }

  // .google.devtools.cloudtrace.v1.TraceSpan.SpanKind kind = 2;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceSpan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v1.TraceSpan)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceSpan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceSpan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v1.TraceSpan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v1.TraceSpan)
    MergeFrom(*source);
  }
}

void TraceSpan::MergeFrom(const TraceSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v1.TraceSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Timestamp::MergeFrom(from.end_time());
  }
  if (from.span_id() != 0) {
    set_span_id(from.span_id());
  }
  if (from.parent_span_id() != 0) {
    set_parent_span_id(from.parent_span_id());
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
}

void TraceSpan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v1.TraceSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceSpan::CopyFrom(const TraceSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v1.TraceSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceSpan::IsInitialized() const {
  return true;
}

void TraceSpan::Swap(TraceSpan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceSpan::InternalSwap(TraceSpan* other) {
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(span_id_, other->span_id_);
  std::swap(parent_span_id_, other->parent_span_id_);
  std::swap(kind_, other->kind_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceSpan::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TraceSpan

// fixed64 span_id = 1;
void TraceSpan::clear_span_id() {
  span_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TraceSpan::span_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.TraceSpan.span_id)
  return span_id_;
}
void TraceSpan::set_span_id(::google::protobuf::uint64 value) {
  
  span_id_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.TraceSpan.span_id)
}

// .google.devtools.cloudtrace.v1.TraceSpan.SpanKind kind = 2;
void TraceSpan::clear_kind() {
  kind_ = 0;
}
::google::devtools::cloudtrace::v1::TraceSpan_SpanKind TraceSpan::kind() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.TraceSpan.kind)
  return static_cast< ::google::devtools::cloudtrace::v1::TraceSpan_SpanKind >(kind_);
}
void TraceSpan::set_kind(::google::devtools::cloudtrace::v1::TraceSpan_SpanKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.TraceSpan.kind)
}

// string name = 3;
void TraceSpan::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TraceSpan::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.TraceSpan.name)
  return name_.GetNoArena();
}
void TraceSpan::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.TraceSpan.name)
}
#if LANG_CXX11
void TraceSpan::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.TraceSpan.name)
}
#endif
void TraceSpan::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.TraceSpan.name)
}
void TraceSpan::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.TraceSpan.name)
}
::std::string* TraceSpan::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.TraceSpan.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TraceSpan::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.TraceSpan.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TraceSpan::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.TraceSpan.name)
}

// .google.protobuf.Timestamp start_time = 4;
bool TraceSpan::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
void TraceSpan::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
}
const ::google::protobuf::Timestamp& TraceSpan::start_time() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.TraceSpan.start_time)
  return start_time_ != NULL ? *start_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* TraceSpan::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.TraceSpan.start_time)
  return start_time_;
}
::google::protobuf::Timestamp* TraceSpan::release_start_time() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.TraceSpan.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
void TraceSpan::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  delete start_time_;
  if (start_time != NULL && start_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_start_time = new ::google::protobuf::Timestamp;
    new_start_time->CopyFrom(*start_time);
    start_time = new_start_time;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.TraceSpan.start_time)
}

// .google.protobuf.Timestamp end_time = 5;
bool TraceSpan::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
void TraceSpan::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) delete end_time_;
  end_time_ = NULL;
}
const ::google::protobuf::Timestamp& TraceSpan::end_time() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.TraceSpan.end_time)
  return end_time_ != NULL ? *end_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* TraceSpan::mutable_end_time() {
  
  if (end_time_ == NULL) {
    end_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.TraceSpan.end_time)
  return end_time_;
}
::google::protobuf::Timestamp* TraceSpan::release_end_time() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.TraceSpan.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
void TraceSpan::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  delete end_time_;
  if (end_time != NULL && end_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_end_time = new ::google::protobuf::Timestamp;
    new_end_time->CopyFrom(*end_time);
    end_time = new_end_time;
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.TraceSpan.end_time)
}

// fixed64 parent_span_id = 6;
void TraceSpan::clear_parent_span_id() {
  parent_span_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TraceSpan::parent_span_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.TraceSpan.parent_span_id)
  return parent_span_id_;
}
void TraceSpan::set_parent_span_id(::google::protobuf::uint64 value) {
  
  parent_span_id_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.TraceSpan.parent_span_id)
}

// map<string, string> labels = 7;
int TraceSpan::labels_size() const {
  return labels_.size();
}
void TraceSpan::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
TraceSpan::labels() const {
  // @@protoc_insertion_point(field_map:google.devtools.cloudtrace.v1.TraceSpan.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
TraceSpan::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.devtools.cloudtrace.v1.TraceSpan.labels)
  return labels_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTracesRequest::kProjectIdFieldNumber;
const int ListTracesRequest::kViewFieldNumber;
const int ListTracesRequest::kPageSizeFieldNumber;
const int ListTracesRequest::kPageTokenFieldNumber;
const int ListTracesRequest::kStartTimeFieldNumber;
const int ListTracesRequest::kEndTimeFieldNumber;
const int ListTracesRequest::kFilterFieldNumber;
const int ListTracesRequest::kOrderByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTracesRequest::ListTracesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v1.ListTracesRequest)
}
ListTracesRequest::ListTracesRequest(const ListTracesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.order_by().size() > 0) {
    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Timestamp(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  ::memcpy(&view_, &from.view_,
    reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&view_) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v1.ListTracesRequest)
}

void ListTracesRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(page_size_));
  _cached_size_ = 0;
}

ListTracesRequest::~ListTracesRequest() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v1.ListTracesRequest)
  SharedDtor();
}

void ListTracesRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete start_time_;
  }
  if (this != internal_default_instance()) {
    delete end_time_;
  }
}

void ListTracesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTracesRequest::descriptor() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListTracesRequest& ListTracesRequest::default_instance() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListTracesRequest* ListTracesRequest::New(::google::protobuf::Arena* arena) const {
  ListTracesRequest* n = new ListTracesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListTracesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v1.ListTracesRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  ::memset(&view_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&view_) + sizeof(page_size_));
}

bool ListTracesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v1.ListTracesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.ListTracesRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v1.ListTracesRequest.ViewType view = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_view(static_cast< ::google::devtools::cloudtrace::v1::ListTracesRequest_ViewType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.ListTracesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.ListTracesRequest.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string order_by = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->order_by().data(), this->order_by().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.ListTracesRequest.order_by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v1.ListTracesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v1.ListTracesRequest)
  return false;
#undef DO_
}

void ListTracesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v1.ListTracesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.ListTracesRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // .google.devtools.cloudtrace.v1.ListTracesRequest.ViewType view = 2;
  if (this->view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->view(), output);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.ListTracesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->start_time_, output);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->end_time_, output);
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.ListTracesRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filter(), output);
  }

  // string order_by = 8;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), this->order_by().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.ListTracesRequest.order_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->order_by(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v1.ListTracesRequest)
}

::google::protobuf::uint8* ListTracesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v1.ListTracesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.ListTracesRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // .google.devtools.cloudtrace.v1.ListTracesRequest.ViewType view = 2;
  if (this->view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->view(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.ListTracesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->start_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->end_time_, deterministic, target);
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.ListTracesRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filter(), target);
  }

  // string order_by = 8;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), this->order_by().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.ListTracesRequest.order_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->order_by(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v1.ListTracesRequest)
  return target;
}

size_t ListTracesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v1.ListTracesRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string filter = 7;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // string order_by = 8;
  if (this->order_by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_by());
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_time_);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_time_);
  }

  // .google.devtools.cloudtrace.v1.ListTracesRequest.ViewType view = 2;
  if (this->view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->view());
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTracesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v1.ListTracesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTracesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTracesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v1.ListTracesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v1.ListTracesRequest)
    MergeFrom(*source);
  }
}

void ListTracesRequest::MergeFrom(const ListTracesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v1.ListTracesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.order_by().size() > 0) {

    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Timestamp::MergeFrom(from.end_time());
  }
  if (from.view() != 0) {
    set_view(from.view());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListTracesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v1.ListTracesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTracesRequest::CopyFrom(const ListTracesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v1.ListTracesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTracesRequest::IsInitialized() const {
  return true;
}

void ListTracesRequest::Swap(ListTracesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListTracesRequest::InternalSwap(ListTracesRequest* other) {
  project_id_.Swap(&other->project_id_);
  page_token_.Swap(&other->page_token_);
  filter_.Swap(&other->filter_);
  order_by_.Swap(&other->order_by_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(view_, other->view_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTracesRequest::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListTracesRequest

// string project_id = 1;
void ListTracesRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListTracesRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
  return project_id_.GetNoArena();
}
void ListTracesRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
}
#if LANG_CXX11
void ListTracesRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
}
#endif
void ListTracesRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
}
void ListTracesRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
}
::std::string* ListTracesRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListTracesRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTracesRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesRequest.project_id)
}

// .google.devtools.cloudtrace.v1.ListTracesRequest.ViewType view = 2;
void ListTracesRequest::clear_view() {
  view_ = 0;
}
::google::devtools::cloudtrace::v1::ListTracesRequest_ViewType ListTracesRequest::view() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.view)
  return static_cast< ::google::devtools::cloudtrace::v1::ListTracesRequest_ViewType >(view_);
}
void ListTracesRequest::set_view(::google::devtools::cloudtrace::v1::ListTracesRequest_ViewType value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesRequest.view)
}

// int32 page_size = 3;
void ListTracesRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListTracesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.page_size)
  return page_size_;
}
void ListTracesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesRequest.page_size)
}

// string page_token = 4;
void ListTracesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListTracesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
  return page_token_.GetNoArena();
}
void ListTracesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
}
#if LANG_CXX11
void ListTracesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
}
#endif
void ListTracesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
}
void ListTracesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
}
::std::string* ListTracesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListTracesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTracesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesRequest.page_token)
}

// .google.protobuf.Timestamp start_time = 5;
bool ListTracesRequest::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
void ListTracesRequest::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
}
const ::google::protobuf::Timestamp& ListTracesRequest::start_time() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.start_time)
  return start_time_ != NULL ? *start_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* ListTracesRequest::mutable_start_time() {
  
  if (start_time_ == NULL) {
    start_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesRequest.start_time)
  return start_time_;
}
::google::protobuf::Timestamp* ListTracesRequest::release_start_time() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesRequest.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = NULL;
  return temp;
}
void ListTracesRequest::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  delete start_time_;
  if (start_time != NULL && start_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_start_time = new ::google::protobuf::Timestamp;
    new_start_time->CopyFrom(*start_time);
    start_time = new_start_time;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 6;
bool ListTracesRequest::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
void ListTracesRequest::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) delete end_time_;
  end_time_ = NULL;
}
const ::google::protobuf::Timestamp& ListTracesRequest::end_time() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.end_time)
  return end_time_ != NULL ? *end_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* ListTracesRequest::mutable_end_time() {
  
  if (end_time_ == NULL) {
    end_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesRequest.end_time)
  return end_time_;
}
::google::protobuf::Timestamp* ListTracesRequest::release_end_time() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesRequest.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = NULL;
  return temp;
}
void ListTracesRequest::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  delete end_time_;
  if (end_time != NULL && end_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_end_time = new ::google::protobuf::Timestamp;
    new_end_time->CopyFrom(*end_time);
    end_time = new_end_time;
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesRequest.end_time)
}

// string filter = 7;
void ListTracesRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListTracesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
  return filter_.GetNoArena();
}
void ListTracesRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
}
#if LANG_CXX11
void ListTracesRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
}
#endif
void ListTracesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
}
void ListTracesRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
}
::std::string* ListTracesRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListTracesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTracesRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesRequest.filter)
}

// string order_by = 8;
void ListTracesRequest::clear_order_by() {
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListTracesRequest::order_by() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
  return order_by_.GetNoArena();
}
void ListTracesRequest::set_order_by(const ::std::string& value) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
}
#if LANG_CXX11
void ListTracesRequest::set_order_by(::std::string&& value) {
  
  order_by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
}
#endif
void ListTracesRequest::set_order_by(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
}
void ListTracesRequest::set_order_by(const char* value, size_t size) {
  
  order_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
}
::std::string* ListTracesRequest::mutable_order_by() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
  return order_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListTracesRequest::release_order_by() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
  
  return order_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTracesRequest::set_allocated_order_by(::std::string* order_by) {
  if (order_by != NULL) {
    
  } else {
    
  }
  order_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_by);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesRequest.order_by)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTracesResponse::kTracesFieldNumber;
const int ListTracesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTracesResponse::ListTracesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v1.ListTracesResponse)
}
ListTracesResponse::ListTracesResponse(const ListTracesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      traces_(from.traces_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v1.ListTracesResponse)
}

void ListTracesResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListTracesResponse::~ListTracesResponse() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v1.ListTracesResponse)
  SharedDtor();
}

void ListTracesResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListTracesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTracesResponse::descriptor() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListTracesResponse& ListTracesResponse::default_instance() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListTracesResponse* ListTracesResponse::New(::google::protobuf::Arena* arena) const {
  ListTracesResponse* n = new ListTracesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListTracesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v1.ListTracesResponse)
  traces_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListTracesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v1.ListTracesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v1.ListTracesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v1.ListTracesResponse)
  return false;
#undef DO_
}

void ListTracesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v1.ListTracesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
  for (unsigned int i = 0, n = this->traces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->traces(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v1.ListTracesResponse)
}

::google::protobuf::uint8* ListTracesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v1.ListTracesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
  for (unsigned int i = 0, n = this->traces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->traces(i), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v1.ListTracesResponse)
  return target;
}

size_t ListTracesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v1.ListTracesResponse)
  size_t total_size = 0;

  // repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
  {
    unsigned int count = this->traces_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traces(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTracesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v1.ListTracesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTracesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTracesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v1.ListTracesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v1.ListTracesResponse)
    MergeFrom(*source);
  }
}

void ListTracesResponse::MergeFrom(const ListTracesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v1.ListTracesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traces_.MergeFrom(from.traces_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListTracesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v1.ListTracesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTracesResponse::CopyFrom(const ListTracesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v1.ListTracesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTracesResponse::IsInitialized() const {
  return true;
}

void ListTracesResponse::Swap(ListTracesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListTracesResponse::InternalSwap(ListTracesResponse* other) {
  traces_.InternalSwap(&other->traces_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTracesResponse::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListTracesResponse

// repeated .google.devtools.cloudtrace.v1.Trace traces = 1;
int ListTracesResponse::traces_size() const {
  return traces_.size();
}
void ListTracesResponse::clear_traces() {
  traces_.Clear();
}
const ::google::devtools::cloudtrace::v1::Trace& ListTracesResponse::traces(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesResponse.traces)
  return traces_.Get(index);
}
::google::devtools::cloudtrace::v1::Trace* ListTracesResponse::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesResponse.traces)
  return traces_.Mutable(index);
}
::google::devtools::cloudtrace::v1::Trace* ListTracesResponse::add_traces() {
  // @@protoc_insertion_point(field_add:google.devtools.cloudtrace.v1.ListTracesResponse.traces)
  return traces_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace >*
ListTracesResponse::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.cloudtrace.v1.ListTracesResponse.traces)
  return &traces_;
}
const ::google::protobuf::RepeatedPtrField< ::google::devtools::cloudtrace::v1::Trace >&
ListTracesResponse::traces() const {
  // @@protoc_insertion_point(field_list:google.devtools.cloudtrace.v1.ListTracesResponse.traces)
  return traces_;
}

// string next_page_token = 2;
void ListTracesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListTracesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
void ListTracesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
}
#if LANG_CXX11
void ListTracesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
}
#endif
void ListTracesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
}
void ListTracesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
}
::std::string* ListTracesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListTracesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListTracesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.ListTracesResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTraceRequest::kProjectIdFieldNumber;
const int GetTraceRequest::kTraceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTraceRequest::GetTraceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v1.GetTraceRequest)
}
GetTraceRequest::GetTraceRequest(const GetTraceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  trace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trace_id().size() > 0) {
    trace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v1.GetTraceRequest)
}

void GetTraceRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetTraceRequest::~GetTraceRequest() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v1.GetTraceRequest)
  SharedDtor();
}

void GetTraceRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetTraceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTraceRequest::descriptor() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTraceRequest& GetTraceRequest::default_instance() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetTraceRequest* GetTraceRequest::New(::google::protobuf::Arena* arena) const {
  GetTraceRequest* n = new GetTraceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTraceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v1.GetTraceRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetTraceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v1.GetTraceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.GetTraceRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trace_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trace_id().data(), this->trace_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.GetTraceRequest.trace_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v1.GetTraceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v1.GetTraceRequest)
  return false;
#undef DO_
}

void GetTraceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v1.GetTraceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.GetTraceRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string trace_id = 2;
  if (this->trace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace_id().data(), this->trace_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.GetTraceRequest.trace_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trace_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v1.GetTraceRequest)
}

::google::protobuf::uint8* GetTraceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v1.GetTraceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.GetTraceRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string trace_id = 2;
  if (this->trace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace_id().data(), this->trace_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.GetTraceRequest.trace_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trace_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v1.GetTraceRequest)
  return target;
}

size_t GetTraceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v1.GetTraceRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string trace_id = 2;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trace_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTraceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v1.GetTraceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTraceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTraceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v1.GetTraceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v1.GetTraceRequest)
    MergeFrom(*source);
  }
}

void GetTraceRequest::MergeFrom(const GetTraceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v1.GetTraceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.trace_id().size() > 0) {

    trace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
}

void GetTraceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v1.GetTraceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTraceRequest::CopyFrom(const GetTraceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v1.GetTraceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTraceRequest::IsInitialized() const {
  return true;
}

void GetTraceRequest::Swap(GetTraceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTraceRequest::InternalSwap(GetTraceRequest* other) {
  project_id_.Swap(&other->project_id_);
  trace_id_.Swap(&other->trace_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTraceRequest::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTraceRequest

// string project_id = 1;
void GetTraceRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetTraceRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
  return project_id_.GetNoArena();
}
void GetTraceRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
}
#if LANG_CXX11
void GetTraceRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
}
#endif
void GetTraceRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
}
void GetTraceRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
}
::std::string* GetTraceRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTraceRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTraceRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.GetTraceRequest.project_id)
}

// string trace_id = 2;
void GetTraceRequest::clear_trace_id() {
  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetTraceRequest::trace_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
  return trace_id_.GetNoArena();
}
void GetTraceRequest::set_trace_id(const ::std::string& value) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
}
#if LANG_CXX11
void GetTraceRequest::set_trace_id(::std::string&& value) {
  
  trace_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
}
#endif
void GetTraceRequest::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
}
void GetTraceRequest::set_trace_id(const char* value, size_t size) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
}
::std::string* GetTraceRequest::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
  return trace_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetTraceRequest::release_trace_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
  
  return trace_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetTraceRequest::set_allocated_trace_id(::std::string* trace_id) {
  if (trace_id != NULL) {
    
  } else {
    
  }
  trace_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.GetTraceRequest.trace_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PatchTracesRequest::kProjectIdFieldNumber;
const int PatchTracesRequest::kTracesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PatchTracesRequest::PatchTracesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v1.PatchTracesRequest)
}
PatchTracesRequest::PatchTracesRequest(const PatchTracesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.has_traces()) {
    traces_ = new ::google::devtools::cloudtrace::v1::Traces(*from.traces_);
  } else {
    traces_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v1.PatchTracesRequest)
}

void PatchTracesRequest::SharedCtor() {
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traces_ = NULL;
  _cached_size_ = 0;
}

PatchTracesRequest::~PatchTracesRequest() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v1.PatchTracesRequest)
  SharedDtor();
}

void PatchTracesRequest::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete traces_;
  }
}

void PatchTracesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatchTracesRequest::descriptor() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PatchTracesRequest& PatchTracesRequest::default_instance() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::InitDefaults();
  return *internal_default_instance();
}

PatchTracesRequest* PatchTracesRequest::New(::google::protobuf::Arena* arena) const {
  PatchTracesRequest* n = new PatchTracesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PatchTracesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v1.PatchTracesRequest)
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && traces_ != NULL) {
    delete traces_;
  }
  traces_ = NULL;
}

bool PatchTracesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v1.PatchTracesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), this->project_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.devtools.cloudtrace.v1.PatchTracesRequest.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v1.Traces traces = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v1.PatchTracesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v1.PatchTracesRequest)
  return false;
#undef DO_
}

void PatchTracesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v1.PatchTracesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.PatchTracesRequest.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // .google.devtools.cloudtrace.v1.Traces traces = 2;
  if (this->has_traces()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->traces_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v1.PatchTracesRequest)
}

::google::protobuf::uint8* PatchTracesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v1.PatchTracesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), this->project_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.devtools.cloudtrace.v1.PatchTracesRequest.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // .google.devtools.cloudtrace.v1.Traces traces = 2;
  if (this->has_traces()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->traces_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v1.PatchTracesRequest)
  return target;
}

size_t PatchTracesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v1.PatchTracesRequest)
  size_t total_size = 0;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // .google.devtools.cloudtrace.v1.Traces traces = 2;
  if (this->has_traces()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->traces_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatchTracesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v1.PatchTracesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchTracesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PatchTracesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v1.PatchTracesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v1.PatchTracesRequest)
    MergeFrom(*source);
  }
}

void PatchTracesRequest::MergeFrom(const PatchTracesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v1.PatchTracesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.has_traces()) {
    mutable_traces()->::google::devtools::cloudtrace::v1::Traces::MergeFrom(from.traces());
  }
}

void PatchTracesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v1.PatchTracesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchTracesRequest::CopyFrom(const PatchTracesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v1.PatchTracesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchTracesRequest::IsInitialized() const {
  return true;
}

void PatchTracesRequest::Swap(PatchTracesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PatchTracesRequest::InternalSwap(PatchTracesRequest* other) {
  project_id_.Swap(&other->project_id_);
  std::swap(traces_, other->traces_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PatchTracesRequest::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv1_2ftrace_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PatchTracesRequest

// string project_id = 1;
void PatchTracesRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PatchTracesRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
  return project_id_.GetNoArena();
}
void PatchTracesRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
}
#if LANG_CXX11
void PatchTracesRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
}
#endif
void PatchTracesRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
}
void PatchTracesRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
}
::std::string* PatchTracesRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PatchTracesRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PatchTracesRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.PatchTracesRequest.project_id)
}

// .google.devtools.cloudtrace.v1.Traces traces = 2;
bool PatchTracesRequest::has_traces() const {
  return this != internal_default_instance() && traces_ != NULL;
}
void PatchTracesRequest::clear_traces() {
  if (GetArenaNoVirtual() == NULL && traces_ != NULL) delete traces_;
  traces_ = NULL;
}
const ::google::devtools::cloudtrace::v1::Traces& PatchTracesRequest::traces() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v1.PatchTracesRequest.traces)
  return traces_ != NULL ? *traces_
                         : *::google::devtools::cloudtrace::v1::Traces::internal_default_instance();
}
::google::devtools::cloudtrace::v1::Traces* PatchTracesRequest::mutable_traces() {
  
  if (traces_ == NULL) {
    traces_ = new ::google::devtools::cloudtrace::v1::Traces;
  }
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v1.PatchTracesRequest.traces)
  return traces_;
}
::google::devtools::cloudtrace::v1::Traces* PatchTracesRequest::release_traces() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v1.PatchTracesRequest.traces)
  
  ::google::devtools::cloudtrace::v1::Traces* temp = traces_;
  traces_ = NULL;
  return temp;
}
void PatchTracesRequest::set_allocated_traces(::google::devtools::cloudtrace::v1::Traces* traces) {
  delete traces_;
  traces_ = traces;
  if (traces) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v1.PatchTracesRequest.traces)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)
