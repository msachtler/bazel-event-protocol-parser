# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/remoteexecution/v1test/remote_execution.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.longrunning import operations_pb2 as google_dot_longrunning_dot_operations__pb2
from google.protobuf import duration_pb2 as google_dot_protobuf_dot_duration__pb2
from google.rpc import status_pb2 as google_dot_rpc_dot_status__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='google/devtools/remoteexecution/v1test/remote_execution.proto',
  package='google.devtools.remoteexecution.v1test',
  syntax='proto3',
  serialized_pb=_b('\n=google/devtools/remoteexecution/v1test/remote_execution.proto\x12&google.devtools.remoteexecution.v1test\x1a\x1cgoogle/api/annotations.proto\x1a#google/longrunning/operations.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x17google/rpc/status.proto\"\xd3\x02\n\x06\x41\x63tion\x12\x46\n\x0e\x63ommand_digest\x18\x01 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\x12I\n\x11input_root_digest\x18\x02 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\x12\x14\n\x0coutput_files\x18\x03 \x03(\t\x12\x1a\n\x12output_directories\x18\x04 \x03(\t\x12\x42\n\x08platform\x18\x05 \x01(\x0b\x32\x30.google.devtools.remoteexecution.v1test.Platform\x12*\n\x07timeout\x18\x06 \x01(\x0b\x32\x19.google.protobuf.Duration\x12\x14\n\x0c\x64o_not_cache\x18\x07 \x01(\x08\"\xb4\x01\n\x07\x43ommand\x12\x11\n\targuments\x18\x01 \x03(\t\x12\x62\n\x15\x65nvironment_variables\x18\x02 \x03(\x0b\x32\x43.google.devtools.remoteexecution.v1test.Command.EnvironmentVariable\x1a\x32\n\x13\x45nvironmentVariable\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t\"\x82\x01\n\x08Platform\x12M\n\nproperties\x18\x01 \x03(\x0b\x32\x39.google.devtools.remoteexecution.v1test.Platform.Property\x1a\'\n\x08Property\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t\"\x98\x01\n\tDirectory\x12?\n\x05\x66iles\x18\x01 \x03(\x0b\x32\x30.google.devtools.remoteexecution.v1test.FileNode\x12J\n\x0b\x64irectories\x18\x02 \x03(\x0b\x32\x35.google.devtools.remoteexecution.v1test.DirectoryNode\"o\n\x08\x46ileNode\x12\x0c\n\x04name\x18\x01 \x01(\t\x12>\n\x06\x64igest\x18\x02 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\x12\x15\n\ris_executable\x18\x04 \x01(\x08\"]\n\rDirectoryNode\x12\x0c\n\x04name\x18\x01 \x01(\t\x12>\n\x06\x64igest\x18\x02 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\"*\n\x06\x44igest\x12\x0c\n\x04hash\x18\x01 \x01(\t\x12\x12\n\nsize_bytes\x18\x02 \x01(\x03\"\xf6\x02\n\x0c\x41\x63tionResult\x12H\n\x0coutput_files\x18\x02 \x03(\x0b\x32\x32.google.devtools.remoteexecution.v1test.OutputFile\x12S\n\x12output_directories\x18\x03 \x03(\x0b\x32\x37.google.devtools.remoteexecution.v1test.OutputDirectory\x12\x11\n\texit_code\x18\x04 \x01(\x05\x12\x12\n\nstdout_raw\x18\x05 \x01(\x0c\x12\x45\n\rstdout_digest\x18\x06 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\x12\x12\n\nstderr_raw\x18\x07 \x01(\x0c\x12\x45\n\rstderr_digest\x18\x08 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\"\x82\x01\n\nOutputFile\x12\x0c\n\x04path\x18\x01 \x01(\t\x12>\n\x06\x64igest\x18\x02 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\x12\x0f\n\x07\x63ontent\x18\x03 \x01(\x0c\x12\x15\n\ris_executable\x18\x04 \x01(\x08\"\x8c\x01\n\x04Tree\x12?\n\x04root\x18\x01 \x01(\x0b\x32\x31.google.devtools.remoteexecution.v1test.Directory\x12\x43\n\x08\x63hildren\x18\x02 \x03(\x0b\x32\x31.google.devtools.remoteexecution.v1test.Directory\"\xa4\x01\n\x0fOutputDirectory\x12\x0c\n\x04path\x18\x01 \x01(\t\x12>\n\x06\x64igest\x18\x02 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\x12\x43\n\x0btree_digest\x18\x03 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\"\xc2\x01\n\x0e\x45xecuteRequest\x12\x15\n\rinstance_name\x18\x01 \x01(\t\x12>\n\x06\x61\x63tion\x18\x02 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Action\x12\x19\n\x11skip_cache_lookup\x18\x03 \x01(\x08\x12\x1e\n\x16total_input_file_count\x18\x04 \x01(\x05\x12\x1e\n\x16total_input_file_bytes\x18\x05 \x01(\x03\"a\n\x07LogFile\x12>\n\x06\x64igest\x18\x01 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\x12\x16\n\x0ehuman_readable\x18\x02 \x01(\x08\"\xd4\x02\n\x0f\x45xecuteResponse\x12\x44\n\x06result\x18\x01 \x01(\x0b\x32\x34.google.devtools.remoteexecution.v1test.ActionResult\x12\x15\n\rcached_result\x18\x02 \x01(\x08\x12\"\n\x06status\x18\x03 \x01(\x0b\x32\x12.google.rpc.Status\x12\\\n\x0bserver_logs\x18\x04 \x03(\x0b\x32G.google.devtools.remoteexecution.v1test.ExecuteResponse.ServerLogsEntry\x1a\x62\n\x0fServerLogsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12>\n\x05value\x18\x02 \x01(\x0b\x32/.google.devtools.remoteexecution.v1test.LogFile:\x02\x38\x01\"\xc1\x02\n\x18\x45xecuteOperationMetadata\x12U\n\x05stage\x18\x01 \x01(\x0e\x32\x46.google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.Stage\x12\x45\n\raction_digest\x18\x02 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\x12\x1a\n\x12stdout_stream_name\x18\x03 \x01(\t\x12\x1a\n\x12stderr_stream_name\x18\x04 \x01(\t\"O\n\x05Stage\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x0f\n\x0b\x43\x41\x43HE_CHECK\x10\x01\x12\n\n\x06QUEUED\x10\x02\x12\r\n\tEXECUTING\x10\x03\x12\r\n\tCOMPLETED\x10\x04\"v\n\x16GetActionResultRequest\x12\x15\n\rinstance_name\x18\x01 \x01(\t\x12\x45\n\raction_digest\x18\x02 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\"\xc6\x01\n\x19UpdateActionResultRequest\x12\x15\n\rinstance_name\x18\x01 \x01(\t\x12\x45\n\raction_digest\x18\x02 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\x12K\n\raction_result\x18\x03 \x01(\x0b\x32\x34.google.devtools.remoteexecution.v1test.ActionResult\"v\n\x17\x46indMissingBlobsRequest\x12\x15\n\rinstance_name\x18\x01 \x01(\t\x12\x44\n\x0c\x62lob_digests\x18\x02 \x03(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\"h\n\x18\x46indMissingBlobsResponse\x12L\n\x14missing_blob_digests\x18\x02 \x03(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\"i\n\x11UpdateBlobRequest\x12\x46\n\x0e\x63ontent_digest\x18\x01 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\x0c\"}\n\x17\x42\x61tchUpdateBlobsRequest\x12\x15\n\rinstance_name\x18\x01 \x01(\t\x12K\n\x08requests\x18\x02 \x03(\x0b\x32\x39.google.devtools.remoteexecution.v1test.UpdateBlobRequest\"\xed\x01\n\x18\x42\x61tchUpdateBlobsResponse\x12\\\n\tresponses\x18\x01 \x03(\x0b\x32I.google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response\x1as\n\x08Response\x12\x43\n\x0b\x62lob_digest\x18\x01 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\x12\"\n\x06status\x18\x02 \x01(\x0b\x32\x12.google.rpc.Status\"\x93\x01\n\x0eGetTreeRequest\x12\x15\n\rinstance_name\x18\x01 \x01(\t\x12\x43\n\x0broot_digest\x18\x02 \x01(\x0b\x32..google.devtools.remoteexecution.v1test.Digest\x12\x11\n\tpage_size\x18\x03 \x01(\x05\x12\x12\n\npage_token\x18\x04 \x01(\t\"r\n\x0fGetTreeResponse\x12\x46\n\x0b\x64irectories\x18\x01 \x03(\x0b\x32\x31.google.devtools.remoteexecution.v1test.Directory\x12\x17\n\x0fnext_page_token\x18\x02 \x01(\t\"6\n\x0bToolDetails\x12\x11\n\ttool_name\x18\x01 \x01(\t\x12\x14\n\x0ctool_version\x18\x02 \x01(\t\"\xae\x01\n\x0fRequestMetadata\x12I\n\x0ctool_details\x18\x01 \x01(\x0b\x32\x33.google.devtools.remoteexecution.v1test.ToolDetails\x12\x11\n\taction_id\x18\x02 \x01(\t\x12\x1a\n\x12tool_invocation_id\x18\x03 \x01(\t\x12!\n\x19\x63orrelated_invocations_id\x18\x04 \x01(\t2\xa5\x01\n\tExecution\x12\x97\x01\n\x07\x45xecute\x12\x36.google.devtools.remoteexecution.v1test.ExecuteRequest\x1a\x1d.google.longrunning.Operation\"5\x82\xd3\xe4\x93\x02/\"*/v1test/{instance_name=**}/actions:execute:\x01*2\xfa\x03\n\x0b\x41\x63tionCache\x12\xe9\x01\n\x0fGetActionResult\x12>.google.devtools.remoteexecution.v1test.GetActionResultRequest\x1a\x34.google.devtools.remoteexecution.v1test.ActionResult\"`\x82\xd3\xe4\x93\x02Z\x12X/v1test/{instance_name=**}/actionResults/{action_digest.hash}/{action_digest.size_bytes}\x12\xfe\x01\n\x12UpdateActionResult\x12\x41.google.devtools.remoteexecution.v1test.UpdateActionResultRequest\x1a\x34.google.devtools.remoteexecution.v1test.ActionResult\"o\x82\xd3\xe4\x93\x02i\x1aX/v1test/{instance_name=**}/actionResults/{action_digest.hash}/{action_digest.size_bytes}:\raction_result2\x98\x05\n\x19\x43ontentAddressableStorage\x12\xce\x01\n\x10\x46indMissingBlobs\x12?.google.devtools.remoteexecution.v1test.FindMissingBlobsRequest\x1a@.google.devtools.remoteexecution.v1test.FindMissingBlobsResponse\"7\x82\xd3\xe4\x93\x02\x31\",/v1test/{instance_name=**}/blobs:findMissing:\x01*\x12\xce\x01\n\x10\x42\x61tchUpdateBlobs\x12?.google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest\x1a@.google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse\"7\x82\xd3\xe4\x93\x02\x31\",/v1test/{instance_name=**}/blobs:batchUpdate:\x01*\x12\xd8\x01\n\x07GetTree\x12\x36.google.devtools.remoteexecution.v1test.GetTreeRequest\x1a\x37.google.devtools.remoteexecution.v1test.GetTreeResponse\"\\\x82\xd3\xe4\x93\x02V\x12T/v1test/{instance_name=**}/blobs/{root_digest.hash}/{root_digest.size_bytes}:getTreeB\xc1\x01\n*com.google.devtools.remoteexecution.v1testB\x14RemoteExecutionProtoP\x01ZUgoogle.golang.org/genproto/googleapis/devtools/remoteexecution/v1test;remoteexecution\xa2\x02\x03REX\xaa\x02\x1dGoogle.RemoteExecution.V1Testb\x06proto3')
  ,
  dependencies=[google_dot_api_dot_annotations__pb2.DESCRIPTOR,google_dot_longrunning_dot_operations__pb2.DESCRIPTOR,google_dot_protobuf_dot_duration__pb2.DESCRIPTOR,google_dot_rpc_dot_status__pb2.DESCRIPTOR,])



_EXECUTEOPERATIONMETADATA_STAGE = _descriptor.EnumDescriptor(
  name='Stage',
  full_name='google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.Stage',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UNKNOWN', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CACHE_CHECK', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='QUEUED', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='EXECUTING', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='COMPLETED', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2996,
  serialized_end=3075,
)
_sym_db.RegisterEnumDescriptor(_EXECUTEOPERATIONMETADATA_STAGE)


_ACTION = _descriptor.Descriptor(
  name='Action',
  full_name='google.devtools.remoteexecution.v1test.Action',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='command_digest', full_name='google.devtools.remoteexecution.v1test.Action.command_digest', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='input_root_digest', full_name='google.devtools.remoteexecution.v1test.Action.input_root_digest', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='output_files', full_name='google.devtools.remoteexecution.v1test.Action.output_files', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='output_directories', full_name='google.devtools.remoteexecution.v1test.Action.output_directories', index=3,
      number=4, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='platform', full_name='google.devtools.remoteexecution.v1test.Action.platform', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timeout', full_name='google.devtools.remoteexecution.v1test.Action.timeout', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='do_not_cache', full_name='google.devtools.remoteexecution.v1test.Action.do_not_cache', index=6,
      number=7, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=230,
  serialized_end=569,
)


_COMMAND_ENVIRONMENTVARIABLE = _descriptor.Descriptor(
  name='EnvironmentVariable',
  full_name='google.devtools.remoteexecution.v1test.Command.EnvironmentVariable',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='google.devtools.remoteexecution.v1test.Command.EnvironmentVariable.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=702,
  serialized_end=752,
)

_COMMAND = _descriptor.Descriptor(
  name='Command',
  full_name='google.devtools.remoteexecution.v1test.Command',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='arguments', full_name='google.devtools.remoteexecution.v1test.Command.arguments', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='environment_variables', full_name='google.devtools.remoteexecution.v1test.Command.environment_variables', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_COMMAND_ENVIRONMENTVARIABLE, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=572,
  serialized_end=752,
)


_PLATFORM_PROPERTY = _descriptor.Descriptor(
  name='Property',
  full_name='google.devtools.remoteexecution.v1test.Platform.Property',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.devtools.remoteexecution.v1test.Platform.Property.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='google.devtools.remoteexecution.v1test.Platform.Property.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=846,
  serialized_end=885,
)

_PLATFORM = _descriptor.Descriptor(
  name='Platform',
  full_name='google.devtools.remoteexecution.v1test.Platform',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='properties', full_name='google.devtools.remoteexecution.v1test.Platform.properties', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_PLATFORM_PROPERTY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=755,
  serialized_end=885,
)


_DIRECTORY = _descriptor.Descriptor(
  name='Directory',
  full_name='google.devtools.remoteexecution.v1test.Directory',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='files', full_name='google.devtools.remoteexecution.v1test.Directory.files', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='directories', full_name='google.devtools.remoteexecution.v1test.Directory.directories', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=888,
  serialized_end=1040,
)


_FILENODE = _descriptor.Descriptor(
  name='FileNode',
  full_name='google.devtools.remoteexecution.v1test.FileNode',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.devtools.remoteexecution.v1test.FileNode.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='digest', full_name='google.devtools.remoteexecution.v1test.FileNode.digest', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_executable', full_name='google.devtools.remoteexecution.v1test.FileNode.is_executable', index=2,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1042,
  serialized_end=1153,
)


_DIRECTORYNODE = _descriptor.Descriptor(
  name='DirectoryNode',
  full_name='google.devtools.remoteexecution.v1test.DirectoryNode',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.devtools.remoteexecution.v1test.DirectoryNode.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='digest', full_name='google.devtools.remoteexecution.v1test.DirectoryNode.digest', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1155,
  serialized_end=1248,
)


_DIGEST = _descriptor.Descriptor(
  name='Digest',
  full_name='google.devtools.remoteexecution.v1test.Digest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hash', full_name='google.devtools.remoteexecution.v1test.Digest.hash', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='size_bytes', full_name='google.devtools.remoteexecution.v1test.Digest.size_bytes', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1250,
  serialized_end=1292,
)


_ACTIONRESULT = _descriptor.Descriptor(
  name='ActionResult',
  full_name='google.devtools.remoteexecution.v1test.ActionResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='output_files', full_name='google.devtools.remoteexecution.v1test.ActionResult.output_files', index=0,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='output_directories', full_name='google.devtools.remoteexecution.v1test.ActionResult.output_directories', index=1,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='exit_code', full_name='google.devtools.remoteexecution.v1test.ActionResult.exit_code', index=2,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stdout_raw', full_name='google.devtools.remoteexecution.v1test.ActionResult.stdout_raw', index=3,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stdout_digest', full_name='google.devtools.remoteexecution.v1test.ActionResult.stdout_digest', index=4,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stderr_raw', full_name='google.devtools.remoteexecution.v1test.ActionResult.stderr_raw', index=5,
      number=7, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stderr_digest', full_name='google.devtools.remoteexecution.v1test.ActionResult.stderr_digest', index=6,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1295,
  serialized_end=1669,
)


_OUTPUTFILE = _descriptor.Descriptor(
  name='OutputFile',
  full_name='google.devtools.remoteexecution.v1test.OutputFile',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='google.devtools.remoteexecution.v1test.OutputFile.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='digest', full_name='google.devtools.remoteexecution.v1test.OutputFile.digest', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='content', full_name='google.devtools.remoteexecution.v1test.OutputFile.content', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_executable', full_name='google.devtools.remoteexecution.v1test.OutputFile.is_executable', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1672,
  serialized_end=1802,
)


_TREE = _descriptor.Descriptor(
  name='Tree',
  full_name='google.devtools.remoteexecution.v1test.Tree',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='root', full_name='google.devtools.remoteexecution.v1test.Tree.root', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='children', full_name='google.devtools.remoteexecution.v1test.Tree.children', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1805,
  serialized_end=1945,
)


_OUTPUTDIRECTORY = _descriptor.Descriptor(
  name='OutputDirectory',
  full_name='google.devtools.remoteexecution.v1test.OutputDirectory',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='google.devtools.remoteexecution.v1test.OutputDirectory.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='digest', full_name='google.devtools.remoteexecution.v1test.OutputDirectory.digest', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tree_digest', full_name='google.devtools.remoteexecution.v1test.OutputDirectory.tree_digest', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1948,
  serialized_end=2112,
)


_EXECUTEREQUEST = _descriptor.Descriptor(
  name='ExecuteRequest',
  full_name='google.devtools.remoteexecution.v1test.ExecuteRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='instance_name', full_name='google.devtools.remoteexecution.v1test.ExecuteRequest.instance_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action', full_name='google.devtools.remoteexecution.v1test.ExecuteRequest.action', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='skip_cache_lookup', full_name='google.devtools.remoteexecution.v1test.ExecuteRequest.skip_cache_lookup', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='total_input_file_count', full_name='google.devtools.remoteexecution.v1test.ExecuteRequest.total_input_file_count', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='total_input_file_bytes', full_name='google.devtools.remoteexecution.v1test.ExecuteRequest.total_input_file_bytes', index=4,
      number=5, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2115,
  serialized_end=2309,
)


_LOGFILE = _descriptor.Descriptor(
  name='LogFile',
  full_name='google.devtools.remoteexecution.v1test.LogFile',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='digest', full_name='google.devtools.remoteexecution.v1test.LogFile.digest', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='human_readable', full_name='google.devtools.remoteexecution.v1test.LogFile.human_readable', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2311,
  serialized_end=2408,
)


_EXECUTERESPONSE_SERVERLOGSENTRY = _descriptor.Descriptor(
  name='ServerLogsEntry',
  full_name='google.devtools.remoteexecution.v1test.ExecuteResponse.ServerLogsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='google.devtools.remoteexecution.v1test.ExecuteResponse.ServerLogsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='google.devtools.remoteexecution.v1test.ExecuteResponse.ServerLogsEntry.value', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2653,
  serialized_end=2751,
)

_EXECUTERESPONSE = _descriptor.Descriptor(
  name='ExecuteResponse',
  full_name='google.devtools.remoteexecution.v1test.ExecuteResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='result', full_name='google.devtools.remoteexecution.v1test.ExecuteResponse.result', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cached_result', full_name='google.devtools.remoteexecution.v1test.ExecuteResponse.cached_result', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='status', full_name='google.devtools.remoteexecution.v1test.ExecuteResponse.status', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='server_logs', full_name='google.devtools.remoteexecution.v1test.ExecuteResponse.server_logs', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_EXECUTERESPONSE_SERVERLOGSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2411,
  serialized_end=2751,
)


_EXECUTEOPERATIONMETADATA = _descriptor.Descriptor(
  name='ExecuteOperationMetadata',
  full_name='google.devtools.remoteexecution.v1test.ExecuteOperationMetadata',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='stage', full_name='google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stage', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_digest', full_name='google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.action_digest', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stdout_stream_name', full_name='google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stdout_stream_name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stderr_stream_name', full_name='google.devtools.remoteexecution.v1test.ExecuteOperationMetadata.stderr_stream_name', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _EXECUTEOPERATIONMETADATA_STAGE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2754,
  serialized_end=3075,
)


_GETACTIONRESULTREQUEST = _descriptor.Descriptor(
  name='GetActionResultRequest',
  full_name='google.devtools.remoteexecution.v1test.GetActionResultRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='instance_name', full_name='google.devtools.remoteexecution.v1test.GetActionResultRequest.instance_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_digest', full_name='google.devtools.remoteexecution.v1test.GetActionResultRequest.action_digest', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3077,
  serialized_end=3195,
)


_UPDATEACTIONRESULTREQUEST = _descriptor.Descriptor(
  name='UpdateActionResultRequest',
  full_name='google.devtools.remoteexecution.v1test.UpdateActionResultRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='instance_name', full_name='google.devtools.remoteexecution.v1test.UpdateActionResultRequest.instance_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_digest', full_name='google.devtools.remoteexecution.v1test.UpdateActionResultRequest.action_digest', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_result', full_name='google.devtools.remoteexecution.v1test.UpdateActionResultRequest.action_result', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3198,
  serialized_end=3396,
)


_FINDMISSINGBLOBSREQUEST = _descriptor.Descriptor(
  name='FindMissingBlobsRequest',
  full_name='google.devtools.remoteexecution.v1test.FindMissingBlobsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='instance_name', full_name='google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.instance_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='blob_digests', full_name='google.devtools.remoteexecution.v1test.FindMissingBlobsRequest.blob_digests', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3398,
  serialized_end=3516,
)


_FINDMISSINGBLOBSRESPONSE = _descriptor.Descriptor(
  name='FindMissingBlobsResponse',
  full_name='google.devtools.remoteexecution.v1test.FindMissingBlobsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='missing_blob_digests', full_name='google.devtools.remoteexecution.v1test.FindMissingBlobsResponse.missing_blob_digests', index=0,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3518,
  serialized_end=3622,
)


_UPDATEBLOBREQUEST = _descriptor.Descriptor(
  name='UpdateBlobRequest',
  full_name='google.devtools.remoteexecution.v1test.UpdateBlobRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='content_digest', full_name='google.devtools.remoteexecution.v1test.UpdateBlobRequest.content_digest', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='google.devtools.remoteexecution.v1test.UpdateBlobRequest.data', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3624,
  serialized_end=3729,
)


_BATCHUPDATEBLOBSREQUEST = _descriptor.Descriptor(
  name='BatchUpdateBlobsRequest',
  full_name='google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='instance_name', full_name='google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.instance_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='requests', full_name='google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest.requests', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3731,
  serialized_end=3856,
)


_BATCHUPDATEBLOBSRESPONSE_RESPONSE = _descriptor.Descriptor(
  name='Response',
  full_name='google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='blob_digest', full_name='google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response.blob_digest', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='status', full_name='google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response.status', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3981,
  serialized_end=4096,
)

_BATCHUPDATEBLOBSRESPONSE = _descriptor.Descriptor(
  name='BatchUpdateBlobsResponse',
  full_name='google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='responses', full_name='google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.responses', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_BATCHUPDATEBLOBSRESPONSE_RESPONSE, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3859,
  serialized_end=4096,
)


_GETTREEREQUEST = _descriptor.Descriptor(
  name='GetTreeRequest',
  full_name='google.devtools.remoteexecution.v1test.GetTreeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='instance_name', full_name='google.devtools.remoteexecution.v1test.GetTreeRequest.instance_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='root_digest', full_name='google.devtools.remoteexecution.v1test.GetTreeRequest.root_digest', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='page_size', full_name='google.devtools.remoteexecution.v1test.GetTreeRequest.page_size', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='page_token', full_name='google.devtools.remoteexecution.v1test.GetTreeRequest.page_token', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4099,
  serialized_end=4246,
)


_GETTREERESPONSE = _descriptor.Descriptor(
  name='GetTreeResponse',
  full_name='google.devtools.remoteexecution.v1test.GetTreeResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='directories', full_name='google.devtools.remoteexecution.v1test.GetTreeResponse.directories', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='next_page_token', full_name='google.devtools.remoteexecution.v1test.GetTreeResponse.next_page_token', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4248,
  serialized_end=4362,
)


_TOOLDETAILS = _descriptor.Descriptor(
  name='ToolDetails',
  full_name='google.devtools.remoteexecution.v1test.ToolDetails',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tool_name', full_name='google.devtools.remoteexecution.v1test.ToolDetails.tool_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tool_version', full_name='google.devtools.remoteexecution.v1test.ToolDetails.tool_version', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4364,
  serialized_end=4418,
)


_REQUESTMETADATA = _descriptor.Descriptor(
  name='RequestMetadata',
  full_name='google.devtools.remoteexecution.v1test.RequestMetadata',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tool_details', full_name='google.devtools.remoteexecution.v1test.RequestMetadata.tool_details', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='action_id', full_name='google.devtools.remoteexecution.v1test.RequestMetadata.action_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tool_invocation_id', full_name='google.devtools.remoteexecution.v1test.RequestMetadata.tool_invocation_id', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='correlated_invocations_id', full_name='google.devtools.remoteexecution.v1test.RequestMetadata.correlated_invocations_id', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4421,
  serialized_end=4595,
)

_ACTION.fields_by_name['command_digest'].message_type = _DIGEST
_ACTION.fields_by_name['input_root_digest'].message_type = _DIGEST
_ACTION.fields_by_name['platform'].message_type = _PLATFORM
_ACTION.fields_by_name['timeout'].message_type = google_dot_protobuf_dot_duration__pb2._DURATION
_COMMAND_ENVIRONMENTVARIABLE.containing_type = _COMMAND
_COMMAND.fields_by_name['environment_variables'].message_type = _COMMAND_ENVIRONMENTVARIABLE
_PLATFORM_PROPERTY.containing_type = _PLATFORM
_PLATFORM.fields_by_name['properties'].message_type = _PLATFORM_PROPERTY
_DIRECTORY.fields_by_name['files'].message_type = _FILENODE
_DIRECTORY.fields_by_name['directories'].message_type = _DIRECTORYNODE
_FILENODE.fields_by_name['digest'].message_type = _DIGEST
_DIRECTORYNODE.fields_by_name['digest'].message_type = _DIGEST
_ACTIONRESULT.fields_by_name['output_files'].message_type = _OUTPUTFILE
_ACTIONRESULT.fields_by_name['output_directories'].message_type = _OUTPUTDIRECTORY
_ACTIONRESULT.fields_by_name['stdout_digest'].message_type = _DIGEST
_ACTIONRESULT.fields_by_name['stderr_digest'].message_type = _DIGEST
_OUTPUTFILE.fields_by_name['digest'].message_type = _DIGEST
_TREE.fields_by_name['root'].message_type = _DIRECTORY
_TREE.fields_by_name['children'].message_type = _DIRECTORY
_OUTPUTDIRECTORY.fields_by_name['digest'].message_type = _DIGEST
_OUTPUTDIRECTORY.fields_by_name['tree_digest'].message_type = _DIGEST
_EXECUTEREQUEST.fields_by_name['action'].message_type = _ACTION
_LOGFILE.fields_by_name['digest'].message_type = _DIGEST
_EXECUTERESPONSE_SERVERLOGSENTRY.fields_by_name['value'].message_type = _LOGFILE
_EXECUTERESPONSE_SERVERLOGSENTRY.containing_type = _EXECUTERESPONSE
_EXECUTERESPONSE.fields_by_name['result'].message_type = _ACTIONRESULT
_EXECUTERESPONSE.fields_by_name['status'].message_type = google_dot_rpc_dot_status__pb2._STATUS
_EXECUTERESPONSE.fields_by_name['server_logs'].message_type = _EXECUTERESPONSE_SERVERLOGSENTRY
_EXECUTEOPERATIONMETADATA.fields_by_name['stage'].enum_type = _EXECUTEOPERATIONMETADATA_STAGE
_EXECUTEOPERATIONMETADATA.fields_by_name['action_digest'].message_type = _DIGEST
_EXECUTEOPERATIONMETADATA_STAGE.containing_type = _EXECUTEOPERATIONMETADATA
_GETACTIONRESULTREQUEST.fields_by_name['action_digest'].message_type = _DIGEST
_UPDATEACTIONRESULTREQUEST.fields_by_name['action_digest'].message_type = _DIGEST
_UPDATEACTIONRESULTREQUEST.fields_by_name['action_result'].message_type = _ACTIONRESULT
_FINDMISSINGBLOBSREQUEST.fields_by_name['blob_digests'].message_type = _DIGEST
_FINDMISSINGBLOBSRESPONSE.fields_by_name['missing_blob_digests'].message_type = _DIGEST
_UPDATEBLOBREQUEST.fields_by_name['content_digest'].message_type = _DIGEST
_BATCHUPDATEBLOBSREQUEST.fields_by_name['requests'].message_type = _UPDATEBLOBREQUEST
_BATCHUPDATEBLOBSRESPONSE_RESPONSE.fields_by_name['blob_digest'].message_type = _DIGEST
_BATCHUPDATEBLOBSRESPONSE_RESPONSE.fields_by_name['status'].message_type = google_dot_rpc_dot_status__pb2._STATUS
_BATCHUPDATEBLOBSRESPONSE_RESPONSE.containing_type = _BATCHUPDATEBLOBSRESPONSE
_BATCHUPDATEBLOBSRESPONSE.fields_by_name['responses'].message_type = _BATCHUPDATEBLOBSRESPONSE_RESPONSE
_GETTREEREQUEST.fields_by_name['root_digest'].message_type = _DIGEST
_GETTREERESPONSE.fields_by_name['directories'].message_type = _DIRECTORY
_REQUESTMETADATA.fields_by_name['tool_details'].message_type = _TOOLDETAILS
DESCRIPTOR.message_types_by_name['Action'] = _ACTION
DESCRIPTOR.message_types_by_name['Command'] = _COMMAND
DESCRIPTOR.message_types_by_name['Platform'] = _PLATFORM
DESCRIPTOR.message_types_by_name['Directory'] = _DIRECTORY
DESCRIPTOR.message_types_by_name['FileNode'] = _FILENODE
DESCRIPTOR.message_types_by_name['DirectoryNode'] = _DIRECTORYNODE
DESCRIPTOR.message_types_by_name['Digest'] = _DIGEST
DESCRIPTOR.message_types_by_name['ActionResult'] = _ACTIONRESULT
DESCRIPTOR.message_types_by_name['OutputFile'] = _OUTPUTFILE
DESCRIPTOR.message_types_by_name['Tree'] = _TREE
DESCRIPTOR.message_types_by_name['OutputDirectory'] = _OUTPUTDIRECTORY
DESCRIPTOR.message_types_by_name['ExecuteRequest'] = _EXECUTEREQUEST
DESCRIPTOR.message_types_by_name['LogFile'] = _LOGFILE
DESCRIPTOR.message_types_by_name['ExecuteResponse'] = _EXECUTERESPONSE
DESCRIPTOR.message_types_by_name['ExecuteOperationMetadata'] = _EXECUTEOPERATIONMETADATA
DESCRIPTOR.message_types_by_name['GetActionResultRequest'] = _GETACTIONRESULTREQUEST
DESCRIPTOR.message_types_by_name['UpdateActionResultRequest'] = _UPDATEACTIONRESULTREQUEST
DESCRIPTOR.message_types_by_name['FindMissingBlobsRequest'] = _FINDMISSINGBLOBSREQUEST
DESCRIPTOR.message_types_by_name['FindMissingBlobsResponse'] = _FINDMISSINGBLOBSRESPONSE
DESCRIPTOR.message_types_by_name['UpdateBlobRequest'] = _UPDATEBLOBREQUEST
DESCRIPTOR.message_types_by_name['BatchUpdateBlobsRequest'] = _BATCHUPDATEBLOBSREQUEST
DESCRIPTOR.message_types_by_name['BatchUpdateBlobsResponse'] = _BATCHUPDATEBLOBSRESPONSE
DESCRIPTOR.message_types_by_name['GetTreeRequest'] = _GETTREEREQUEST
DESCRIPTOR.message_types_by_name['GetTreeResponse'] = _GETTREERESPONSE
DESCRIPTOR.message_types_by_name['ToolDetails'] = _TOOLDETAILS
DESCRIPTOR.message_types_by_name['RequestMetadata'] = _REQUESTMETADATA
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Action = _reflection.GeneratedProtocolMessageType('Action', (_message.Message,), dict(
  DESCRIPTOR = _ACTION,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Action)
  ))
_sym_db.RegisterMessage(Action)

Command = _reflection.GeneratedProtocolMessageType('Command', (_message.Message,), dict(

  EnvironmentVariable = _reflection.GeneratedProtocolMessageType('EnvironmentVariable', (_message.Message,), dict(
    DESCRIPTOR = _COMMAND_ENVIRONMENTVARIABLE,
    __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
    # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Command.EnvironmentVariable)
    ))
  ,
  DESCRIPTOR = _COMMAND,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Command)
  ))
_sym_db.RegisterMessage(Command)
_sym_db.RegisterMessage(Command.EnvironmentVariable)

Platform = _reflection.GeneratedProtocolMessageType('Platform', (_message.Message,), dict(

  Property = _reflection.GeneratedProtocolMessageType('Property', (_message.Message,), dict(
    DESCRIPTOR = _PLATFORM_PROPERTY,
    __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
    # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Platform.Property)
    ))
  ,
  DESCRIPTOR = _PLATFORM,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Platform)
  ))
_sym_db.RegisterMessage(Platform)
_sym_db.RegisterMessage(Platform.Property)

Directory = _reflection.GeneratedProtocolMessageType('Directory', (_message.Message,), dict(
  DESCRIPTOR = _DIRECTORY,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Directory)
  ))
_sym_db.RegisterMessage(Directory)

FileNode = _reflection.GeneratedProtocolMessageType('FileNode', (_message.Message,), dict(
  DESCRIPTOR = _FILENODE,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.FileNode)
  ))
_sym_db.RegisterMessage(FileNode)

DirectoryNode = _reflection.GeneratedProtocolMessageType('DirectoryNode', (_message.Message,), dict(
  DESCRIPTOR = _DIRECTORYNODE,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.DirectoryNode)
  ))
_sym_db.RegisterMessage(DirectoryNode)

Digest = _reflection.GeneratedProtocolMessageType('Digest', (_message.Message,), dict(
  DESCRIPTOR = _DIGEST,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Digest)
  ))
_sym_db.RegisterMessage(Digest)

ActionResult = _reflection.GeneratedProtocolMessageType('ActionResult', (_message.Message,), dict(
  DESCRIPTOR = _ACTIONRESULT,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.ActionResult)
  ))
_sym_db.RegisterMessage(ActionResult)

OutputFile = _reflection.GeneratedProtocolMessageType('OutputFile', (_message.Message,), dict(
  DESCRIPTOR = _OUTPUTFILE,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.OutputFile)
  ))
_sym_db.RegisterMessage(OutputFile)

Tree = _reflection.GeneratedProtocolMessageType('Tree', (_message.Message,), dict(
  DESCRIPTOR = _TREE,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.Tree)
  ))
_sym_db.RegisterMessage(Tree)

OutputDirectory = _reflection.GeneratedProtocolMessageType('OutputDirectory', (_message.Message,), dict(
  DESCRIPTOR = _OUTPUTDIRECTORY,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.OutputDirectory)
  ))
_sym_db.RegisterMessage(OutputDirectory)

ExecuteRequest = _reflection.GeneratedProtocolMessageType('ExecuteRequest', (_message.Message,), dict(
  DESCRIPTOR = _EXECUTEREQUEST,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.ExecuteRequest)
  ))
_sym_db.RegisterMessage(ExecuteRequest)

LogFile = _reflection.GeneratedProtocolMessageType('LogFile', (_message.Message,), dict(
  DESCRIPTOR = _LOGFILE,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.LogFile)
  ))
_sym_db.RegisterMessage(LogFile)

ExecuteResponse = _reflection.GeneratedProtocolMessageType('ExecuteResponse', (_message.Message,), dict(

  ServerLogsEntry = _reflection.GeneratedProtocolMessageType('ServerLogsEntry', (_message.Message,), dict(
    DESCRIPTOR = _EXECUTERESPONSE_SERVERLOGSENTRY,
    __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
    # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.ExecuteResponse.ServerLogsEntry)
    ))
  ,
  DESCRIPTOR = _EXECUTERESPONSE,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.ExecuteResponse)
  ))
_sym_db.RegisterMessage(ExecuteResponse)
_sym_db.RegisterMessage(ExecuteResponse.ServerLogsEntry)

ExecuteOperationMetadata = _reflection.GeneratedProtocolMessageType('ExecuteOperationMetadata', (_message.Message,), dict(
  DESCRIPTOR = _EXECUTEOPERATIONMETADATA,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.ExecuteOperationMetadata)
  ))
_sym_db.RegisterMessage(ExecuteOperationMetadata)

GetActionResultRequest = _reflection.GeneratedProtocolMessageType('GetActionResultRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETACTIONRESULTREQUEST,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.GetActionResultRequest)
  ))
_sym_db.RegisterMessage(GetActionResultRequest)

UpdateActionResultRequest = _reflection.GeneratedProtocolMessageType('UpdateActionResultRequest', (_message.Message,), dict(
  DESCRIPTOR = _UPDATEACTIONRESULTREQUEST,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.UpdateActionResultRequest)
  ))
_sym_db.RegisterMessage(UpdateActionResultRequest)

FindMissingBlobsRequest = _reflection.GeneratedProtocolMessageType('FindMissingBlobsRequest', (_message.Message,), dict(
  DESCRIPTOR = _FINDMISSINGBLOBSREQUEST,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.FindMissingBlobsRequest)
  ))
_sym_db.RegisterMessage(FindMissingBlobsRequest)

FindMissingBlobsResponse = _reflection.GeneratedProtocolMessageType('FindMissingBlobsResponse', (_message.Message,), dict(
  DESCRIPTOR = _FINDMISSINGBLOBSRESPONSE,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.FindMissingBlobsResponse)
  ))
_sym_db.RegisterMessage(FindMissingBlobsResponse)

UpdateBlobRequest = _reflection.GeneratedProtocolMessageType('UpdateBlobRequest', (_message.Message,), dict(
  DESCRIPTOR = _UPDATEBLOBREQUEST,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.UpdateBlobRequest)
  ))
_sym_db.RegisterMessage(UpdateBlobRequest)

BatchUpdateBlobsRequest = _reflection.GeneratedProtocolMessageType('BatchUpdateBlobsRequest', (_message.Message,), dict(
  DESCRIPTOR = _BATCHUPDATEBLOBSREQUEST,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.BatchUpdateBlobsRequest)
  ))
_sym_db.RegisterMessage(BatchUpdateBlobsRequest)

BatchUpdateBlobsResponse = _reflection.GeneratedProtocolMessageType('BatchUpdateBlobsResponse', (_message.Message,), dict(

  Response = _reflection.GeneratedProtocolMessageType('Response', (_message.Message,), dict(
    DESCRIPTOR = _BATCHUPDATEBLOBSRESPONSE_RESPONSE,
    __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
    # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse.Response)
    ))
  ,
  DESCRIPTOR = _BATCHUPDATEBLOBSRESPONSE,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.BatchUpdateBlobsResponse)
  ))
_sym_db.RegisterMessage(BatchUpdateBlobsResponse)
_sym_db.RegisterMessage(BatchUpdateBlobsResponse.Response)

GetTreeRequest = _reflection.GeneratedProtocolMessageType('GetTreeRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETTREEREQUEST,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.GetTreeRequest)
  ))
_sym_db.RegisterMessage(GetTreeRequest)

GetTreeResponse = _reflection.GeneratedProtocolMessageType('GetTreeResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETTREERESPONSE,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.GetTreeResponse)
  ))
_sym_db.RegisterMessage(GetTreeResponse)

ToolDetails = _reflection.GeneratedProtocolMessageType('ToolDetails', (_message.Message,), dict(
  DESCRIPTOR = _TOOLDETAILS,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.ToolDetails)
  ))
_sym_db.RegisterMessage(ToolDetails)

RequestMetadata = _reflection.GeneratedProtocolMessageType('RequestMetadata', (_message.Message,), dict(
  DESCRIPTOR = _REQUESTMETADATA,
  __module__ = 'google.devtools.remoteexecution.v1test.remote_execution_pb2'
  # @@protoc_insertion_point(class_scope:google.devtools.remoteexecution.v1test.RequestMetadata)
  ))
_sym_db.RegisterMessage(RequestMetadata)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n*com.google.devtools.remoteexecution.v1testB\024RemoteExecutionProtoP\001ZUgoogle.golang.org/genproto/googleapis/devtools/remoteexecution/v1test;remoteexecution\242\002\003REX\252\002\035Google.RemoteExecution.V1Test'))
_EXECUTERESPONSE_SERVERLOGSENTRY.has_options = True
_EXECUTERESPONSE_SERVERLOGSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class ExecutionStub(object):
    """The Remote Execution API is used to execute an
    [Action][google.devtools.remoteexecution.v1test.Action] on the remote
    workers.

    As with other services in the Remote Execution API, any call may return an
    error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
    information about when the client should retry the request; clients SHOULD
    respect the information provided.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Execute = channel.unary_unary(
          '/google.devtools.remoteexecution.v1test.Execution/Execute',
          request_serializer=ExecuteRequest.SerializeToString,
          response_deserializer=google_dot_longrunning_dot_operations__pb2.Operation.FromString,
          )


  class ExecutionServicer(object):
    """The Remote Execution API is used to execute an
    [Action][google.devtools.remoteexecution.v1test.Action] on the remote
    workers.

    As with other services in the Remote Execution API, any call may return an
    error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
    information about when the client should retry the request; clients SHOULD
    respect the information provided.
    """

    def Execute(self, request, context):
      """Execute an action remotely.

      In order to execute an action, the client must first upload all of the
      inputs, as well as the
      [Command][google.devtools.remoteexecution.v1test.Command] to run, into the
      [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
      It then calls `Execute` with an
      [Action][google.devtools.remoteexecution.v1test.Action] referring to them.
      The server will run the action and eventually return the result.

      The input `Action`'s fields MUST meet the various canonicalization
      requirements specified in the documentation for their types so that it has
      the same digest as other logically equivalent `Action`s. The server MAY
      enforce the requirements and return errors if a non-canonical input is
      received. It MAY also proceed without verifying some or all of the
      requirements, such as for performance reasons. If the server does not
      verify the requirement, then it will treat the `Action` as distinct from
      another logically equivalent action if they hash differently.

      Returns a [google.longrunning.Operation][google.longrunning.Operation]
      describing the resulting execution, with eventual `response`
      [ExecuteResponse][google.devtools.remoteexecution.v1test.ExecuteResponse].
      The `metadata` on the operation is of type
      [ExecuteOperationMetadata][google.devtools.remoteexecution.v1test.ExecuteOperationMetadata].

      To query the operation, you can use the
      [Operations API][google.longrunning.Operations.GetOperation]. If you wish
      to allow the server to stream operations updates, rather than requiring
      client polling, you can use the
      [Watcher API][google.watcher.v1.Watcher.Watch] with the Operation's `name`
      as the `target`.

      When using the Watcher API, the initial `data` will be the `Operation` at
      the time of the request. Updates will be provided periodically by the
      server until the `Operation` completes, at which point the response message
      will (assuming no error) be at `data.response`.

      The server NEED NOT implement other methods or functionality of the
      Operation and Watcher APIs.

      Errors discovered during creation of the `Operation` will be reported
      as gRPC Status errors, while errors that occurred while running the
      action will be reported in the `status` field of the `ExecuteResponse`. The
      server MUST NOT set the `error` field of the `Operation` proto.
      The possible errors include:
      * `INVALID_ARGUMENT`: One or more arguments are invalid.
      * `FAILED_PRECONDITION`: One or more errors occurred in setting up the
      action requested, such as a missing input or command or no worker being
      available. The client may be able to fix the errors and retry.
      * `RESOURCE_EXHAUSTED`: There is insufficient quota of some resource to run
      the action.
      * `UNAVAILABLE`: Due to a transient condition, such as all workers being
      occupied (and the server does not support a queue), the action could not
      be started. The client should retry.
      * `INTERNAL`: An internal error occurred in the execution engine or the
      worker.
      * `DEADLINE_EXCEEDED`: The execution timed out.

      In the case of a missing input or command, the server SHOULD additionally
      send a [PreconditionFailure][google.rpc.PreconditionFailure] error detail
      where, for each requested blob not present in the CAS, there is a
      `Violation` with a `type` of `MISSING` and a `subject` of
      `"blobs/{hash}/{size}"` indicating the digest of the missing blob.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ExecutionServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Execute': grpc.unary_unary_rpc_method_handler(
            servicer.Execute,
            request_deserializer=ExecuteRequest.FromString,
            response_serializer=google_dot_longrunning_dot_operations__pb2.Operation.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'google.devtools.remoteexecution.v1test.Execution', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class ActionCacheStub(object):
    """The action cache API is used to query whether a given action has already been
    performed and, if so, retrieve its result. Unlike the
    [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage],
    which addresses blobs by their own content, the action cache addresses the
    [ActionResult][google.devtools.remoteexecution.v1test.ActionResult] by a
    digest of the encoded [Action][google.devtools.remoteexecution.v1test.Action]
    which produced them.

    The lifetime of entries in the action cache is implementation-specific, but
    the server SHOULD assume that more recently used entries are more likely to
    be used again. Additionally, action cache implementations SHOULD ensure that
    any blobs referenced in the
    [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage]
    are still valid when returning a result.

    As with other services in the Remote Execution API, any call may return an
    error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
    information about when the client should retry the request; clients SHOULD
    respect the information provided.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetActionResult = channel.unary_unary(
          '/google.devtools.remoteexecution.v1test.ActionCache/GetActionResult',
          request_serializer=GetActionResultRequest.SerializeToString,
          response_deserializer=ActionResult.FromString,
          )
      self.UpdateActionResult = channel.unary_unary(
          '/google.devtools.remoteexecution.v1test.ActionCache/UpdateActionResult',
          request_serializer=UpdateActionResultRequest.SerializeToString,
          response_deserializer=ActionResult.FromString,
          )


  class ActionCacheServicer(object):
    """The action cache API is used to query whether a given action has already been
    performed and, if so, retrieve its result. Unlike the
    [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage],
    which addresses blobs by their own content, the action cache addresses the
    [ActionResult][google.devtools.remoteexecution.v1test.ActionResult] by a
    digest of the encoded [Action][google.devtools.remoteexecution.v1test.Action]
    which produced them.

    The lifetime of entries in the action cache is implementation-specific, but
    the server SHOULD assume that more recently used entries are more likely to
    be used again. Additionally, action cache implementations SHOULD ensure that
    any blobs referenced in the
    [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage]
    are still valid when returning a result.

    As with other services in the Remote Execution API, any call may return an
    error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
    information about when the client should retry the request; clients SHOULD
    respect the information provided.
    """

    def GetActionResult(self, request, context):
      """Retrieve a cached execution result.

      Errors:
      * `NOT_FOUND`: The requested `ActionResult` is not in the cache.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpdateActionResult(self, request, context):
      """Upload a new execution result.

      This method is intended for servers which implement the distributed cache
      independently of the
      [Execution][google.devtools.remoteexecution.v1test.Execution] API. As a
      result, it is OPTIONAL for servers to implement.

      Errors:
      * `NOT_IMPLEMENTED`: This method is not supported by the server.
      * `RESOURCE_EXHAUSTED`: There is insufficient storage space to add the
      entry to the cache.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ActionCacheServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetActionResult': grpc.unary_unary_rpc_method_handler(
            servicer.GetActionResult,
            request_deserializer=GetActionResultRequest.FromString,
            response_serializer=ActionResult.SerializeToString,
        ),
        'UpdateActionResult': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateActionResult,
            request_deserializer=UpdateActionResultRequest.FromString,
            response_serializer=ActionResult.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'google.devtools.remoteexecution.v1test.ActionCache', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class ContentAddressableStorageStub(object):
    """The CAS (content-addressable storage) is used to store the inputs to and
    outputs from the execution service. Each piece of content is addressed by the
    digest of its binary data.

    Most of the binary data stored in the CAS is opaque to the execution engine,
    and is only used as a communication medium. In order to build an
    [Action][google.devtools.remoteexecution.v1test.Action],
    however, the client will need to also upload the
    [Command][google.devtools.remoteexecution.v1test.Command] and input root
    [Directory][google.devtools.remoteexecution.v1test.Directory] for the Action.
    The Command and Directory messages must be marshalled to wire format and then
    uploaded under the hash as with any other piece of content. In practice, the
    input root directory is likely to refer to other Directories in its
    hierarchy, which must also each be uploaded on their own.

    For small file uploads the client should group them together and call
    [BatchUpdateBlobs][google.devtools.remoteexecution.v1test.ContentAddressableStorage.BatchUpdateBlobs]
    on chunks of no more than 10 MiB. For large uploads, the client must use the
    [Write method][google.bytestream.ByteStream.Write] of the ByteStream API. The
    `resource_name` is `{instance_name}/uploads/{uuid}/blobs/{hash}/{size}`,
    where `instance_name` is as described in the next paragraph, `uuid` is a
    version 4 UUID generated by the client, and `hash` and `size` are the
    [Digest][google.devtools.remoteexecution.v1test.Digest] of the blob. The
    `uuid` is used only to avoid collisions when multiple clients try to upload
    the same file (or the same client tries to upload the file multiple times at
    once on different threads), so the client MAY reuse the `uuid` for uploading
    different blobs. The `resource_name` may optionally have a trailing filename
    (or other metadata) for a client to use if it is storing URLs, as in
    `{instance}/uploads/{uuid}/blobs/{hash}/{size}/foo/bar/baz.cc`. Anything
    after the `size` is ignored.

    A single server MAY support multiple instances of the execution system, each
    with their own workers, storage, cache, etc. The exact relationship between
    instances is up to the server. If the server does, then the `instance_name`
    is an identifier, possibly containing multiple path segments, used to
    distinguish between the various instances on the server, in a manner defined
    by the server. For servers which do not support multiple instances, then the
    `instance_name` is the empty path and the leading slash is omitted, so that
    the `resource_name` becomes `uploads/{uuid}/blobs/{hash}/{size}`.

    When attempting an upload, if another client has already completed the upload
    (which may occur in the middle of a single upload if another client uploads
    the same blob concurrently), the request will terminate immediately with
    a response whose `committed_size` is the full size of the uploaded file
    (regardless of how much data was transmitted by the client). If the client
    completes the upload but the
    [Digest][google.devtools.remoteexecution.v1test.Digest] does not match, an
    `INVALID_ARGUMENT` error will be returned. In either case, the client should
    not attempt to retry the upload.

    For downloading blobs, the client must use the
    [Read method][google.bytestream.ByteStream.Read] of the ByteStream API, with
    a `resource_name` of `"{instance_name}/blobs/{hash}/{size}"`, where
    `instance_name` is the instance name (see above), and `hash` and `size` are
    the [Digest][google.devtools.remoteexecution.v1test.Digest] of the blob.

    The lifetime of entries in the CAS is implementation specific, but it SHOULD
    be long enough to allow for newly-added and recently looked-up entries to be
    used in subsequent calls (e.g. to
    [Execute][google.devtools.remoteexecution.v1test.Execution.Execute]).

    As with other services in the Remote Execution API, any call may return an
    error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
    information about when the client should retry the request; clients SHOULD
    respect the information provided.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.FindMissingBlobs = channel.unary_unary(
          '/google.devtools.remoteexecution.v1test.ContentAddressableStorage/FindMissingBlobs',
          request_serializer=FindMissingBlobsRequest.SerializeToString,
          response_deserializer=FindMissingBlobsResponse.FromString,
          )
      self.BatchUpdateBlobs = channel.unary_unary(
          '/google.devtools.remoteexecution.v1test.ContentAddressableStorage/BatchUpdateBlobs',
          request_serializer=BatchUpdateBlobsRequest.SerializeToString,
          response_deserializer=BatchUpdateBlobsResponse.FromString,
          )
      self.GetTree = channel.unary_unary(
          '/google.devtools.remoteexecution.v1test.ContentAddressableStorage/GetTree',
          request_serializer=GetTreeRequest.SerializeToString,
          response_deserializer=GetTreeResponse.FromString,
          )


  class ContentAddressableStorageServicer(object):
    """The CAS (content-addressable storage) is used to store the inputs to and
    outputs from the execution service. Each piece of content is addressed by the
    digest of its binary data.

    Most of the binary data stored in the CAS is opaque to the execution engine,
    and is only used as a communication medium. In order to build an
    [Action][google.devtools.remoteexecution.v1test.Action],
    however, the client will need to also upload the
    [Command][google.devtools.remoteexecution.v1test.Command] and input root
    [Directory][google.devtools.remoteexecution.v1test.Directory] for the Action.
    The Command and Directory messages must be marshalled to wire format and then
    uploaded under the hash as with any other piece of content. In practice, the
    input root directory is likely to refer to other Directories in its
    hierarchy, which must also each be uploaded on their own.

    For small file uploads the client should group them together and call
    [BatchUpdateBlobs][google.devtools.remoteexecution.v1test.ContentAddressableStorage.BatchUpdateBlobs]
    on chunks of no more than 10 MiB. For large uploads, the client must use the
    [Write method][google.bytestream.ByteStream.Write] of the ByteStream API. The
    `resource_name` is `{instance_name}/uploads/{uuid}/blobs/{hash}/{size}`,
    where `instance_name` is as described in the next paragraph, `uuid` is a
    version 4 UUID generated by the client, and `hash` and `size` are the
    [Digest][google.devtools.remoteexecution.v1test.Digest] of the blob. The
    `uuid` is used only to avoid collisions when multiple clients try to upload
    the same file (or the same client tries to upload the file multiple times at
    once on different threads), so the client MAY reuse the `uuid` for uploading
    different blobs. The `resource_name` may optionally have a trailing filename
    (or other metadata) for a client to use if it is storing URLs, as in
    `{instance}/uploads/{uuid}/blobs/{hash}/{size}/foo/bar/baz.cc`. Anything
    after the `size` is ignored.

    A single server MAY support multiple instances of the execution system, each
    with their own workers, storage, cache, etc. The exact relationship between
    instances is up to the server. If the server does, then the `instance_name`
    is an identifier, possibly containing multiple path segments, used to
    distinguish between the various instances on the server, in a manner defined
    by the server. For servers which do not support multiple instances, then the
    `instance_name` is the empty path and the leading slash is omitted, so that
    the `resource_name` becomes `uploads/{uuid}/blobs/{hash}/{size}`.

    When attempting an upload, if another client has already completed the upload
    (which may occur in the middle of a single upload if another client uploads
    the same blob concurrently), the request will terminate immediately with
    a response whose `committed_size` is the full size of the uploaded file
    (regardless of how much data was transmitted by the client). If the client
    completes the upload but the
    [Digest][google.devtools.remoteexecution.v1test.Digest] does not match, an
    `INVALID_ARGUMENT` error will be returned. In either case, the client should
    not attempt to retry the upload.

    For downloading blobs, the client must use the
    [Read method][google.bytestream.ByteStream.Read] of the ByteStream API, with
    a `resource_name` of `"{instance_name}/blobs/{hash}/{size}"`, where
    `instance_name` is the instance name (see above), and `hash` and `size` are
    the [Digest][google.devtools.remoteexecution.v1test.Digest] of the blob.

    The lifetime of entries in the CAS is implementation specific, but it SHOULD
    be long enough to allow for newly-added and recently looked-up entries to be
    used in subsequent calls (e.g. to
    [Execute][google.devtools.remoteexecution.v1test.Execution.Execute]).

    As with other services in the Remote Execution API, any call may return an
    error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
    information about when the client should retry the request; clients SHOULD
    respect the information provided.
    """

    def FindMissingBlobs(self, request, context):
      """Determine if blobs are present in the CAS.

      Clients can use this API before uploading blobs to determine which ones are
      already present in the CAS and do not need to be uploaded again.

      There are no method-specific errors.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def BatchUpdateBlobs(self, request, context):
      """Upload many blobs at once.

      The client MUST NOT upload blobs with a combined total size of more than 10
      MiB using this API. Such requests should either be split into smaller
      chunks or uploaded using the
      [ByteStream API][google.bytestream.ByteStream], as appropriate.

      This request is equivalent to calling [UpdateBlob][] on each individual
      blob, in parallel. The requests may succeed or fail independently.

      Errors:
      * `INVALID_ARGUMENT`: The client attempted to upload more than 10 MiB of
      data.

      Individual requests may return the following errors, additionally:
      * `RESOURCE_EXHAUSTED`: There is insufficient disk quota to store the blob.
      * `INVALID_ARGUMENT`: The
      [Digest][google.devtools.remoteexecution.v1test.Digest] does not match the
      provided data.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetTree(self, request, context):
      """DEPRECATED: This method is deprecated and should no longer be used.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ContentAddressableStorageServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'FindMissingBlobs': grpc.unary_unary_rpc_method_handler(
            servicer.FindMissingBlobs,
            request_deserializer=FindMissingBlobsRequest.FromString,
            response_serializer=FindMissingBlobsResponse.SerializeToString,
        ),
        'BatchUpdateBlobs': grpc.unary_unary_rpc_method_handler(
            servicer.BatchUpdateBlobs,
            request_deserializer=BatchUpdateBlobsRequest.FromString,
            response_serializer=BatchUpdateBlobsResponse.SerializeToString,
        ),
        'GetTree': grpc.unary_unary_rpc_method_handler(
            servicer.GetTree,
            request_deserializer=GetTreeRequest.FromString,
            response_serializer=GetTreeResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'google.devtools.remoteexecution.v1test.ContentAddressableStorage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaExecutionServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The Remote Execution API is used to execute an
    [Action][google.devtools.remoteexecution.v1test.Action] on the remote
    workers.

    As with other services in the Remote Execution API, any call may return an
    error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
    information about when the client should retry the request; clients SHOULD
    respect the information provided.
    """
    def Execute(self, request, context):
      """Execute an action remotely.

      In order to execute an action, the client must first upload all of the
      inputs, as well as the
      [Command][google.devtools.remoteexecution.v1test.Command] to run, into the
      [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
      It then calls `Execute` with an
      [Action][google.devtools.remoteexecution.v1test.Action] referring to them.
      The server will run the action and eventually return the result.

      The input `Action`'s fields MUST meet the various canonicalization
      requirements specified in the documentation for their types so that it has
      the same digest as other logically equivalent `Action`s. The server MAY
      enforce the requirements and return errors if a non-canonical input is
      received. It MAY also proceed without verifying some or all of the
      requirements, such as for performance reasons. If the server does not
      verify the requirement, then it will treat the `Action` as distinct from
      another logically equivalent action if they hash differently.

      Returns a [google.longrunning.Operation][google.longrunning.Operation]
      describing the resulting execution, with eventual `response`
      [ExecuteResponse][google.devtools.remoteexecution.v1test.ExecuteResponse].
      The `metadata` on the operation is of type
      [ExecuteOperationMetadata][google.devtools.remoteexecution.v1test.ExecuteOperationMetadata].

      To query the operation, you can use the
      [Operations API][google.longrunning.Operations.GetOperation]. If you wish
      to allow the server to stream operations updates, rather than requiring
      client polling, you can use the
      [Watcher API][google.watcher.v1.Watcher.Watch] with the Operation's `name`
      as the `target`.

      When using the Watcher API, the initial `data` will be the `Operation` at
      the time of the request. Updates will be provided periodically by the
      server until the `Operation` completes, at which point the response message
      will (assuming no error) be at `data.response`.

      The server NEED NOT implement other methods or functionality of the
      Operation and Watcher APIs.

      Errors discovered during creation of the `Operation` will be reported
      as gRPC Status errors, while errors that occurred while running the
      action will be reported in the `status` field of the `ExecuteResponse`. The
      server MUST NOT set the `error` field of the `Operation` proto.
      The possible errors include:
      * `INVALID_ARGUMENT`: One or more arguments are invalid.
      * `FAILED_PRECONDITION`: One or more errors occurred in setting up the
      action requested, such as a missing input or command or no worker being
      available. The client may be able to fix the errors and retry.
      * `RESOURCE_EXHAUSTED`: There is insufficient quota of some resource to run
      the action.
      * `UNAVAILABLE`: Due to a transient condition, such as all workers being
      occupied (and the server does not support a queue), the action could not
      be started. The client should retry.
      * `INTERNAL`: An internal error occurred in the execution engine or the
      worker.
      * `DEADLINE_EXCEEDED`: The execution timed out.

      In the case of a missing input or command, the server SHOULD additionally
      send a [PreconditionFailure][google.rpc.PreconditionFailure] error detail
      where, for each requested blob not present in the CAS, there is a
      `Violation` with a `type` of `MISSING` and a `subject` of
      `"blobs/{hash}/{size}"` indicating the digest of the missing blob.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaExecutionStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The Remote Execution API is used to execute an
    [Action][google.devtools.remoteexecution.v1test.Action] on the remote
    workers.

    As with other services in the Remote Execution API, any call may return an
    error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
    information about when the client should retry the request; clients SHOULD
    respect the information provided.
    """
    def Execute(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Execute an action remotely.

      In order to execute an action, the client must first upload all of the
      inputs, as well as the
      [Command][google.devtools.remoteexecution.v1test.Command] to run, into the
      [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
      It then calls `Execute` with an
      [Action][google.devtools.remoteexecution.v1test.Action] referring to them.
      The server will run the action and eventually return the result.

      The input `Action`'s fields MUST meet the various canonicalization
      requirements specified in the documentation for their types so that it has
      the same digest as other logically equivalent `Action`s. The server MAY
      enforce the requirements and return errors if a non-canonical input is
      received. It MAY also proceed without verifying some or all of the
      requirements, such as for performance reasons. If the server does not
      verify the requirement, then it will treat the `Action` as distinct from
      another logically equivalent action if they hash differently.

      Returns a [google.longrunning.Operation][google.longrunning.Operation]
      describing the resulting execution, with eventual `response`
      [ExecuteResponse][google.devtools.remoteexecution.v1test.ExecuteResponse].
      The `metadata` on the operation is of type
      [ExecuteOperationMetadata][google.devtools.remoteexecution.v1test.ExecuteOperationMetadata].

      To query the operation, you can use the
      [Operations API][google.longrunning.Operations.GetOperation]. If you wish
      to allow the server to stream operations updates, rather than requiring
      client polling, you can use the
      [Watcher API][google.watcher.v1.Watcher.Watch] with the Operation's `name`
      as the `target`.

      When using the Watcher API, the initial `data` will be the `Operation` at
      the time of the request. Updates will be provided periodically by the
      server until the `Operation` completes, at which point the response message
      will (assuming no error) be at `data.response`.

      The server NEED NOT implement other methods or functionality of the
      Operation and Watcher APIs.

      Errors discovered during creation of the `Operation` will be reported
      as gRPC Status errors, while errors that occurred while running the
      action will be reported in the `status` field of the `ExecuteResponse`. The
      server MUST NOT set the `error` field of the `Operation` proto.
      The possible errors include:
      * `INVALID_ARGUMENT`: One or more arguments are invalid.
      * `FAILED_PRECONDITION`: One or more errors occurred in setting up the
      action requested, such as a missing input or command or no worker being
      available. The client may be able to fix the errors and retry.
      * `RESOURCE_EXHAUSTED`: There is insufficient quota of some resource to run
      the action.
      * `UNAVAILABLE`: Due to a transient condition, such as all workers being
      occupied (and the server does not support a queue), the action could not
      be started. The client should retry.
      * `INTERNAL`: An internal error occurred in the execution engine or the
      worker.
      * `DEADLINE_EXCEEDED`: The execution timed out.

      In the case of a missing input or command, the server SHOULD additionally
      send a [PreconditionFailure][google.rpc.PreconditionFailure] error detail
      where, for each requested blob not present in the CAS, there is a
      `Violation` with a `type` of `MISSING` and a `subject` of
      `"blobs/{hash}/{size}"` indicating the digest of the missing blob.
      """
      raise NotImplementedError()
    Execute.future = None


  def beta_create_Execution_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('google.devtools.remoteexecution.v1test.Execution', 'Execute'): ExecuteRequest.FromString,
    }
    response_serializers = {
      ('google.devtools.remoteexecution.v1test.Execution', 'Execute'): google_dot_longrunning_dot_operations__pb2.Operation.SerializeToString,
    }
    method_implementations = {
      ('google.devtools.remoteexecution.v1test.Execution', 'Execute'): face_utilities.unary_unary_inline(servicer.Execute),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Execution_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('google.devtools.remoteexecution.v1test.Execution', 'Execute'): ExecuteRequest.SerializeToString,
    }
    response_deserializers = {
      ('google.devtools.remoteexecution.v1test.Execution', 'Execute'): google_dot_longrunning_dot_operations__pb2.Operation.FromString,
    }
    cardinalities = {
      'Execute': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'google.devtools.remoteexecution.v1test.Execution', cardinalities, options=stub_options)


  class BetaActionCacheServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The action cache API is used to query whether a given action has already been
    performed and, if so, retrieve its result. Unlike the
    [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage],
    which addresses blobs by their own content, the action cache addresses the
    [ActionResult][google.devtools.remoteexecution.v1test.ActionResult] by a
    digest of the encoded [Action][google.devtools.remoteexecution.v1test.Action]
    which produced them.

    The lifetime of entries in the action cache is implementation-specific, but
    the server SHOULD assume that more recently used entries are more likely to
    be used again. Additionally, action cache implementations SHOULD ensure that
    any blobs referenced in the
    [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage]
    are still valid when returning a result.

    As with other services in the Remote Execution API, any call may return an
    error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
    information about when the client should retry the request; clients SHOULD
    respect the information provided.
    """
    def GetActionResult(self, request, context):
      """Retrieve a cached execution result.

      Errors:
      * `NOT_FOUND`: The requested `ActionResult` is not in the cache.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpdateActionResult(self, request, context):
      """Upload a new execution result.

      This method is intended for servers which implement the distributed cache
      independently of the
      [Execution][google.devtools.remoteexecution.v1test.Execution] API. As a
      result, it is OPTIONAL for servers to implement.

      Errors:
      * `NOT_IMPLEMENTED`: This method is not supported by the server.
      * `RESOURCE_EXHAUSTED`: There is insufficient storage space to add the
      entry to the cache.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaActionCacheStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The action cache API is used to query whether a given action has already been
    performed and, if so, retrieve its result. Unlike the
    [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage],
    which addresses blobs by their own content, the action cache addresses the
    [ActionResult][google.devtools.remoteexecution.v1test.ActionResult] by a
    digest of the encoded [Action][google.devtools.remoteexecution.v1test.Action]
    which produced them.

    The lifetime of entries in the action cache is implementation-specific, but
    the server SHOULD assume that more recently used entries are more likely to
    be used again. Additionally, action cache implementations SHOULD ensure that
    any blobs referenced in the
    [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage]
    are still valid when returning a result.

    As with other services in the Remote Execution API, any call may return an
    error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
    information about when the client should retry the request; clients SHOULD
    respect the information provided.
    """
    def GetActionResult(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Retrieve a cached execution result.

      Errors:
      * `NOT_FOUND`: The requested `ActionResult` is not in the cache.
      """
      raise NotImplementedError()
    GetActionResult.future = None
    def UpdateActionResult(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Upload a new execution result.

      This method is intended for servers which implement the distributed cache
      independently of the
      [Execution][google.devtools.remoteexecution.v1test.Execution] API. As a
      result, it is OPTIONAL for servers to implement.

      Errors:
      * `NOT_IMPLEMENTED`: This method is not supported by the server.
      * `RESOURCE_EXHAUSTED`: There is insufficient storage space to add the
      entry to the cache.
      """
      raise NotImplementedError()
    UpdateActionResult.future = None


  def beta_create_ActionCache_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('google.devtools.remoteexecution.v1test.ActionCache', 'GetActionResult'): GetActionResultRequest.FromString,
      ('google.devtools.remoteexecution.v1test.ActionCache', 'UpdateActionResult'): UpdateActionResultRequest.FromString,
    }
    response_serializers = {
      ('google.devtools.remoteexecution.v1test.ActionCache', 'GetActionResult'): ActionResult.SerializeToString,
      ('google.devtools.remoteexecution.v1test.ActionCache', 'UpdateActionResult'): ActionResult.SerializeToString,
    }
    method_implementations = {
      ('google.devtools.remoteexecution.v1test.ActionCache', 'GetActionResult'): face_utilities.unary_unary_inline(servicer.GetActionResult),
      ('google.devtools.remoteexecution.v1test.ActionCache', 'UpdateActionResult'): face_utilities.unary_unary_inline(servicer.UpdateActionResult),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_ActionCache_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('google.devtools.remoteexecution.v1test.ActionCache', 'GetActionResult'): GetActionResultRequest.SerializeToString,
      ('google.devtools.remoteexecution.v1test.ActionCache', 'UpdateActionResult'): UpdateActionResultRequest.SerializeToString,
    }
    response_deserializers = {
      ('google.devtools.remoteexecution.v1test.ActionCache', 'GetActionResult'): ActionResult.FromString,
      ('google.devtools.remoteexecution.v1test.ActionCache', 'UpdateActionResult'): ActionResult.FromString,
    }
    cardinalities = {
      'GetActionResult': cardinality.Cardinality.UNARY_UNARY,
      'UpdateActionResult': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'google.devtools.remoteexecution.v1test.ActionCache', cardinalities, options=stub_options)


  class BetaContentAddressableStorageServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The CAS (content-addressable storage) is used to store the inputs to and
    outputs from the execution service. Each piece of content is addressed by the
    digest of its binary data.

    Most of the binary data stored in the CAS is opaque to the execution engine,
    and is only used as a communication medium. In order to build an
    [Action][google.devtools.remoteexecution.v1test.Action],
    however, the client will need to also upload the
    [Command][google.devtools.remoteexecution.v1test.Command] and input root
    [Directory][google.devtools.remoteexecution.v1test.Directory] for the Action.
    The Command and Directory messages must be marshalled to wire format and then
    uploaded under the hash as with any other piece of content. In practice, the
    input root directory is likely to refer to other Directories in its
    hierarchy, which must also each be uploaded on their own.

    For small file uploads the client should group them together and call
    [BatchUpdateBlobs][google.devtools.remoteexecution.v1test.ContentAddressableStorage.BatchUpdateBlobs]
    on chunks of no more than 10 MiB. For large uploads, the client must use the
    [Write method][google.bytestream.ByteStream.Write] of the ByteStream API. The
    `resource_name` is `{instance_name}/uploads/{uuid}/blobs/{hash}/{size}`,
    where `instance_name` is as described in the next paragraph, `uuid` is a
    version 4 UUID generated by the client, and `hash` and `size` are the
    [Digest][google.devtools.remoteexecution.v1test.Digest] of the blob. The
    `uuid` is used only to avoid collisions when multiple clients try to upload
    the same file (or the same client tries to upload the file multiple times at
    once on different threads), so the client MAY reuse the `uuid` for uploading
    different blobs. The `resource_name` may optionally have a trailing filename
    (or other metadata) for a client to use if it is storing URLs, as in
    `{instance}/uploads/{uuid}/blobs/{hash}/{size}/foo/bar/baz.cc`. Anything
    after the `size` is ignored.

    A single server MAY support multiple instances of the execution system, each
    with their own workers, storage, cache, etc. The exact relationship between
    instances is up to the server. If the server does, then the `instance_name`
    is an identifier, possibly containing multiple path segments, used to
    distinguish between the various instances on the server, in a manner defined
    by the server. For servers which do not support multiple instances, then the
    `instance_name` is the empty path and the leading slash is omitted, so that
    the `resource_name` becomes `uploads/{uuid}/blobs/{hash}/{size}`.

    When attempting an upload, if another client has already completed the upload
    (which may occur in the middle of a single upload if another client uploads
    the same blob concurrently), the request will terminate immediately with
    a response whose `committed_size` is the full size of the uploaded file
    (regardless of how much data was transmitted by the client). If the client
    completes the upload but the
    [Digest][google.devtools.remoteexecution.v1test.Digest] does not match, an
    `INVALID_ARGUMENT` error will be returned. In either case, the client should
    not attempt to retry the upload.

    For downloading blobs, the client must use the
    [Read method][google.bytestream.ByteStream.Read] of the ByteStream API, with
    a `resource_name` of `"{instance_name}/blobs/{hash}/{size}"`, where
    `instance_name` is the instance name (see above), and `hash` and `size` are
    the [Digest][google.devtools.remoteexecution.v1test.Digest] of the blob.

    The lifetime of entries in the CAS is implementation specific, but it SHOULD
    be long enough to allow for newly-added and recently looked-up entries to be
    used in subsequent calls (e.g. to
    [Execute][google.devtools.remoteexecution.v1test.Execution.Execute]).

    As with other services in the Remote Execution API, any call may return an
    error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
    information about when the client should retry the request; clients SHOULD
    respect the information provided.
    """
    def FindMissingBlobs(self, request, context):
      """Determine if blobs are present in the CAS.

      Clients can use this API before uploading blobs to determine which ones are
      already present in the CAS and do not need to be uploaded again.

      There are no method-specific errors.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def BatchUpdateBlobs(self, request, context):
      """Upload many blobs at once.

      The client MUST NOT upload blobs with a combined total size of more than 10
      MiB using this API. Such requests should either be split into smaller
      chunks or uploaded using the
      [ByteStream API][google.bytestream.ByteStream], as appropriate.

      This request is equivalent to calling [UpdateBlob][] on each individual
      blob, in parallel. The requests may succeed or fail independently.

      Errors:
      * `INVALID_ARGUMENT`: The client attempted to upload more than 10 MiB of
      data.

      Individual requests may return the following errors, additionally:
      * `RESOURCE_EXHAUSTED`: There is insufficient disk quota to store the blob.
      * `INVALID_ARGUMENT`: The
      [Digest][google.devtools.remoteexecution.v1test.Digest] does not match the
      provided data.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetTree(self, request, context):
      """DEPRECATED: This method is deprecated and should no longer be used.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaContentAddressableStorageStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The CAS (content-addressable storage) is used to store the inputs to and
    outputs from the execution service. Each piece of content is addressed by the
    digest of its binary data.

    Most of the binary data stored in the CAS is opaque to the execution engine,
    and is only used as a communication medium. In order to build an
    [Action][google.devtools.remoteexecution.v1test.Action],
    however, the client will need to also upload the
    [Command][google.devtools.remoteexecution.v1test.Command] and input root
    [Directory][google.devtools.remoteexecution.v1test.Directory] for the Action.
    The Command and Directory messages must be marshalled to wire format and then
    uploaded under the hash as with any other piece of content. In practice, the
    input root directory is likely to refer to other Directories in its
    hierarchy, which must also each be uploaded on their own.

    For small file uploads the client should group them together and call
    [BatchUpdateBlobs][google.devtools.remoteexecution.v1test.ContentAddressableStorage.BatchUpdateBlobs]
    on chunks of no more than 10 MiB. For large uploads, the client must use the
    [Write method][google.bytestream.ByteStream.Write] of the ByteStream API. The
    `resource_name` is `{instance_name}/uploads/{uuid}/blobs/{hash}/{size}`,
    where `instance_name` is as described in the next paragraph, `uuid` is a
    version 4 UUID generated by the client, and `hash` and `size` are the
    [Digest][google.devtools.remoteexecution.v1test.Digest] of the blob. The
    `uuid` is used only to avoid collisions when multiple clients try to upload
    the same file (or the same client tries to upload the file multiple times at
    once on different threads), so the client MAY reuse the `uuid` for uploading
    different blobs. The `resource_name` may optionally have a trailing filename
    (or other metadata) for a client to use if it is storing URLs, as in
    `{instance}/uploads/{uuid}/blobs/{hash}/{size}/foo/bar/baz.cc`. Anything
    after the `size` is ignored.

    A single server MAY support multiple instances of the execution system, each
    with their own workers, storage, cache, etc. The exact relationship between
    instances is up to the server. If the server does, then the `instance_name`
    is an identifier, possibly containing multiple path segments, used to
    distinguish between the various instances on the server, in a manner defined
    by the server. For servers which do not support multiple instances, then the
    `instance_name` is the empty path and the leading slash is omitted, so that
    the `resource_name` becomes `uploads/{uuid}/blobs/{hash}/{size}`.

    When attempting an upload, if another client has already completed the upload
    (which may occur in the middle of a single upload if another client uploads
    the same blob concurrently), the request will terminate immediately with
    a response whose `committed_size` is the full size of the uploaded file
    (regardless of how much data was transmitted by the client). If the client
    completes the upload but the
    [Digest][google.devtools.remoteexecution.v1test.Digest] does not match, an
    `INVALID_ARGUMENT` error will be returned. In either case, the client should
    not attempt to retry the upload.

    For downloading blobs, the client must use the
    [Read method][google.bytestream.ByteStream.Read] of the ByteStream API, with
    a `resource_name` of `"{instance_name}/blobs/{hash}/{size}"`, where
    `instance_name` is the instance name (see above), and `hash` and `size` are
    the [Digest][google.devtools.remoteexecution.v1test.Digest] of the blob.

    The lifetime of entries in the CAS is implementation specific, but it SHOULD
    be long enough to allow for newly-added and recently looked-up entries to be
    used in subsequent calls (e.g. to
    [Execute][google.devtools.remoteexecution.v1test.Execution.Execute]).

    As with other services in the Remote Execution API, any call may return an
    error with a [RetryInfo][google.rpc.RetryInfo] error detail providing
    information about when the client should retry the request; clients SHOULD
    respect the information provided.
    """
    def FindMissingBlobs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Determine if blobs are present in the CAS.

      Clients can use this API before uploading blobs to determine which ones are
      already present in the CAS and do not need to be uploaded again.

      There are no method-specific errors.
      """
      raise NotImplementedError()
    FindMissingBlobs.future = None
    def BatchUpdateBlobs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Upload many blobs at once.

      The client MUST NOT upload blobs with a combined total size of more than 10
      MiB using this API. Such requests should either be split into smaller
      chunks or uploaded using the
      [ByteStream API][google.bytestream.ByteStream], as appropriate.

      This request is equivalent to calling [UpdateBlob][] on each individual
      blob, in parallel. The requests may succeed or fail independently.

      Errors:
      * `INVALID_ARGUMENT`: The client attempted to upload more than 10 MiB of
      data.

      Individual requests may return the following errors, additionally:
      * `RESOURCE_EXHAUSTED`: There is insufficient disk quota to store the blob.
      * `INVALID_ARGUMENT`: The
      [Digest][google.devtools.remoteexecution.v1test.Digest] does not match the
      provided data.
      """
      raise NotImplementedError()
    BatchUpdateBlobs.future = None
    def GetTree(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """DEPRECATED: This method is deprecated and should no longer be used.
      """
      raise NotImplementedError()
    GetTree.future = None


  def beta_create_ContentAddressableStorage_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'BatchUpdateBlobs'): BatchUpdateBlobsRequest.FromString,
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'FindMissingBlobs'): FindMissingBlobsRequest.FromString,
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'GetTree'): GetTreeRequest.FromString,
    }
    response_serializers = {
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'BatchUpdateBlobs'): BatchUpdateBlobsResponse.SerializeToString,
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'FindMissingBlobs'): FindMissingBlobsResponse.SerializeToString,
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'GetTree'): GetTreeResponse.SerializeToString,
    }
    method_implementations = {
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'BatchUpdateBlobs'): face_utilities.unary_unary_inline(servicer.BatchUpdateBlobs),
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'FindMissingBlobs'): face_utilities.unary_unary_inline(servicer.FindMissingBlobs),
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'GetTree'): face_utilities.unary_unary_inline(servicer.GetTree),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_ContentAddressableStorage_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'BatchUpdateBlobs'): BatchUpdateBlobsRequest.SerializeToString,
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'FindMissingBlobs'): FindMissingBlobsRequest.SerializeToString,
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'GetTree'): GetTreeRequest.SerializeToString,
    }
    response_deserializers = {
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'BatchUpdateBlobs'): BatchUpdateBlobsResponse.FromString,
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'FindMissingBlobs'): FindMissingBlobsResponse.FromString,
      ('google.devtools.remoteexecution.v1test.ContentAddressableStorage', 'GetTree'): GetTreeResponse.FromString,
    }
    cardinalities = {
      'BatchUpdateBlobs': cardinality.Cardinality.UNARY_UNARY,
      'FindMissingBlobs': cardinality.Cardinality.UNARY_UNARY,
      'GetTree': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'google.devtools.remoteexecution.v1test.ContentAddressableStorage', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
