// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/log_entry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/logging/v2/log_entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace logging {
namespace v2 {
class LogEntry_LabelsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogEntry::LogEntry_LabelsEntry> {
} _LogEntry_LabelsEntry_default_instance_;
class LogEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogEntry> {
  public:
  const ::google::protobuf::Any* proto_payload_;
  ::google::protobuf::internal::ArenaStringPtr text_payload_;
  const ::google::protobuf::Struct* json_payload_;
} _LogEntry_default_instance_;
class LogEntryOperationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogEntryOperation> {
} _LogEntryOperation_default_instance_;
class LogEntrySourceLocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogEntrySourceLocation> {
} _LogEntrySourceLocation_default_instance_;

namespace protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, log_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, resource_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LogEntry_default_instance_), proto_payload_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LogEntry_default_instance_), text_payload_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LogEntry_default_instance_), json_payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, receive_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, insert_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, http_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, source_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryOperation, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryOperation, producer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryOperation, first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryOperation, last_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntrySourceLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntrySourceLocation, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntrySourceLocation, line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntrySourceLocation, function_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LogEntry)},
  { 20, -1, sizeof(LogEntryOperation)},
  { 29, -1, sizeof(LogEntrySourceLocation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogEntry_LabelsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogEntryOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogEntrySourceLocation_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/logging/v2/log_entry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
file_level_metadata[0].reflection = LogEntry::LogEntry_LabelsEntry::CreateReflection(file_level_metadata[0].descriptor, _LogEntry_LabelsEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _LogEntry_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LogEntryOperation_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LogEntrySourceLocation_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::api::protobuf_google_2fapi_2fmonitored_5fresource_2eproto::InitDefaults();
  ::google::logging::type::protobuf_google_2flogging_2ftype_2fhttp_5frequest_2eproto::InitDefaults();
  ::google::logging::type::protobuf_google_2flogging_2ftype_2flog_5fseverity_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _LogEntry_LabelsEntry_default_instance_.DefaultConstruct();
  _LogEntry_default_instance_.DefaultConstruct();
  _LogEntryOperation_default_instance_.DefaultConstruct();
  _LogEntrySourceLocation_default_instance_.DefaultConstruct();
  _LogEntry_LabelsEntry_default_instance_.get_mutable()->set_default_instance(_LogEntry_LabelsEntry_default_instance_.get_mutable());
  _LogEntry_LabelsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _LogEntry_default_instance_.get_mutable()->resource_ = const_cast< ::google::api::MonitoredResource*>(
      ::google::api::MonitoredResource::internal_default_instance());
  _LogEntry_default_instance_.proto_payload_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  _LogEntry_default_instance_.text_payload_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _LogEntry_default_instance_.json_payload_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  _LogEntry_default_instance_.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _LogEntry_default_instance_.get_mutable()->receive_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _LogEntry_default_instance_.get_mutable()->http_request_ = const_cast< ::google::logging::type::HttpRequest*>(
      ::google::logging::type::HttpRequest::internal_default_instance());
  _LogEntry_default_instance_.get_mutable()->operation_ = const_cast< ::google::logging::v2::LogEntryOperation*>(
      ::google::logging::v2::LogEntryOperation::internal_default_instance());
  _LogEntry_default_instance_.get_mutable()->source_location_ = const_cast< ::google::logging::v2::LogEntrySourceLocation*>(
      ::google::logging::v2::LogEntrySourceLocation::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n!google/logging/v2/log_entry.proto\022\021goo"
      "gle.logging.v2\032\034google/api/annotations.p"
      "roto\032#google/api/monitored_resource.prot"
      "o\032&google/logging/type/http_request.prot"
      "o\032&google/logging/type/log_severity.prot"
      "o\032\031google/protobuf/any.proto\032\034google/pro"
      "tobuf/struct.proto\032\037google/protobuf/time"
      "stamp.proto\"\251\005\n\010LogEntry\022\020\n\010log_name\030\014 \001"
      "(\t\022/\n\010resource\030\010 \001(\0132\035.google.api.Monito"
      "redResource\022-\n\rproto_payload\030\002 \001(\0132\024.goo"
      "gle.protobuf.AnyH\000\022\026\n\014text_payload\030\003 \001(\t"
      "H\000\022/\n\014json_payload\030\006 \001(\0132\027.google.protob"
      "uf.StructH\000\022-\n\ttimestamp\030\t \001(\0132\032.google."
      "protobuf.Timestamp\0225\n\021receive_timestamp\030"
      "\030 \001(\0132\032.google.protobuf.Timestamp\0222\n\010sev"
      "erity\030\n \001(\0162 .google.logging.type.LogSev"
      "erity\022\021\n\tinsert_id\030\004 \001(\t\0226\n\014http_request"
      "\030\007 \001(\0132 .google.logging.type.HttpRequest"
      "\0227\n\006labels\030\013 \003(\0132\'.google.logging.v2.Log"
      "Entry.LabelsEntry\0227\n\toperation\030\017 \001(\0132$.g"
      "oogle.logging.v2.LogEntryOperation\022\r\n\005tr"
      "ace\030\026 \001(\t\022B\n\017source_location\030\027 \001(\0132).goo"
      "gle.logging.v2.LogEntrySourceLocation\032-\n"
      "\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
      ":\0028\001B\t\n\007payload\"N\n\021LogEntryOperation\022\n\n\002"
      "id\030\001 \001(\t\022\020\n\010producer\030\002 \001(\t\022\r\n\005first\030\003 \001("
      "\010\022\014\n\004last\030\004 \001(\010\"F\n\026LogEntrySourceLocatio"
      "n\022\014\n\004file\030\001 \001(\t\022\014\n\004line\030\002 \001(\003\022\020\n\010functio"
      "n\030\003 \001(\tB\177\n\025com.google.logging.v2B\rLogEnt"
      "ryProtoP\001Z8google.golang.org/genproto/go"
      "ogleapis/logging/v2;logging\370\001\001\252\002\027Google."
      "Cloud.Logging.V2b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1264);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/logging/v2/log_entry.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::api::protobuf_google_2fapi_2fmonitored_5fresource_2eproto::AddDescriptors();
  ::google::logging::type::protobuf_google_2flogging_2ftype_2fhttp_5frequest_2eproto::AddDescriptors();
  ::google::logging::type::protobuf_google_2flogging_2ftype_2flog_5fseverity_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto


// ===================================================================

LogEntry::LogEntry_LabelsEntry::LogEntry_LabelsEntry() {}
LogEntry::LogEntry_LabelsEntry::LogEntry_LabelsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata LogEntry::LogEntry_LabelsEntry::GetMetadata() const {
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::file_level_metadata[0];
}
void LogEntry::LogEntry_LabelsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void LogEntry::LogEntry_LabelsEntry::MergeFrom(const LogEntry_LabelsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void LogEntry::_slow_mutable_resource() {
  resource_ = ::google::protobuf::Arena::CreateMessage< ::google::api::MonitoredResource >(
      GetArenaNoVirtual());
}
::google::api::MonitoredResource* LogEntry::_slow_release_resource() {
  if (resource_ == NULL) {
    return NULL;
  } else {
    ::google::api::MonitoredResource* temp = new ::google::api::MonitoredResource(*resource_);
    resource_ = NULL;
    return temp;
  }
}
::google::api::MonitoredResource* LogEntry::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.resource)
  
  ::google::api::MonitoredResource* temp = resource_;
  resource_ = NULL;
  return temp;
}
void LogEntry::_slow_set_allocated_resource(
    ::google::protobuf::Arena* message_arena, ::google::api::MonitoredResource** resource) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*resource) == NULL) {
      message_arena->Own(*resource);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*resource)) {
      ::google::api::MonitoredResource* new_resource = 
            ::google::protobuf::Arena::CreateMessage< ::google::api::MonitoredResource >(
            message_arena);
      new_resource->CopyFrom(**resource);
      *resource = new_resource;
    }
}
void LogEntry::unsafe_arena_set_allocated_resource(
    ::google::api::MonitoredResource* resource) {
  if (GetArenaNoVirtual() == NULL) {
    delete resource_;
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.resource)
}
void LogEntry::_slow_mutable_timestamp() {
  timestamp_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
::google::protobuf::Timestamp* LogEntry::_slow_release_timestamp() {
  if (timestamp_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Timestamp* temp = new ::google::protobuf::Timestamp(*timestamp_);
    timestamp_ = NULL;
    return temp;
  }
}
::google::protobuf::Timestamp* LogEntry::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void LogEntry::_slow_set_allocated_timestamp(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** timestamp) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*timestamp) == NULL) {
      message_arena->Own(*timestamp);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*timestamp)) {
      ::google::protobuf::Timestamp* new_timestamp = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
            message_arena);
      new_timestamp->CopyFrom(**timestamp);
      *timestamp = new_timestamp;
    }
}
void LogEntry::unsafe_arena_set_allocated_timestamp(
    ::google::protobuf::Timestamp* timestamp) {
  if (GetArenaNoVirtual() == NULL) {
    delete timestamp_;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.timestamp)
}
void LogEntry::_slow_mutable_receive_timestamp() {
  receive_timestamp_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
::google::protobuf::Timestamp* LogEntry::_slow_release_receive_timestamp() {
  if (receive_timestamp_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Timestamp* temp = new ::google::protobuf::Timestamp(*receive_timestamp_);
    receive_timestamp_ = NULL;
    return temp;
  }
}
::google::protobuf::Timestamp* LogEntry::unsafe_arena_release_receive_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.receive_timestamp)
  
  ::google::protobuf::Timestamp* temp = receive_timestamp_;
  receive_timestamp_ = NULL;
  return temp;
}
void LogEntry::_slow_set_allocated_receive_timestamp(
    ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** receive_timestamp) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*receive_timestamp) == NULL) {
      message_arena->Own(*receive_timestamp);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*receive_timestamp)) {
      ::google::protobuf::Timestamp* new_receive_timestamp = 
            ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
            message_arena);
      new_receive_timestamp->CopyFrom(**receive_timestamp);
      *receive_timestamp = new_receive_timestamp;
    }
}
void LogEntry::unsafe_arena_set_allocated_receive_timestamp(
    ::google::protobuf::Timestamp* receive_timestamp) {
  if (GetArenaNoVirtual() == NULL) {
    delete receive_timestamp_;
  }
  receive_timestamp_ = receive_timestamp;
  if (receive_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.receive_timestamp)
}
void LogEntry::_slow_mutable_http_request() {
  http_request_ = ::google::protobuf::Arena::Create< ::google::logging::type::HttpRequest >(
      GetArenaNoVirtual());
}
::google::logging::type::HttpRequest* LogEntry::_slow_release_http_request() {
  if (http_request_ == NULL) {
    return NULL;
  } else {
    ::google::logging::type::HttpRequest* temp = new ::google::logging::type::HttpRequest(*http_request_);
    http_request_ = NULL;
    return temp;
  }
}
::google::logging::type::HttpRequest* LogEntry::unsafe_arena_release_http_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.http_request)
  
  ::google::logging::type::HttpRequest* temp = http_request_;
  http_request_ = NULL;
  return temp;
}
void LogEntry::unsafe_arena_set_allocated_http_request(
    ::google::logging::type::HttpRequest* http_request) {
  if (GetArenaNoVirtual() == NULL) {
    delete http_request_;
  }
  http_request_ = http_request;
  if (http_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.http_request)
}
void LogEntry::_slow_mutable_operation() {
  operation_ = ::google::protobuf::Arena::CreateMessage< ::google::logging::v2::LogEntryOperation >(
      GetArenaNoVirtual());
}
::google::logging::v2::LogEntryOperation* LogEntry::_slow_release_operation() {
  if (operation_ == NULL) {
    return NULL;
  } else {
    ::google::logging::v2::LogEntryOperation* temp = new ::google::logging::v2::LogEntryOperation(*operation_);
    operation_ = NULL;
    return temp;
  }
}
::google::logging::v2::LogEntryOperation* LogEntry::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.operation)
  
  ::google::logging::v2::LogEntryOperation* temp = operation_;
  operation_ = NULL;
  return temp;
}
void LogEntry::_slow_set_allocated_operation(
    ::google::protobuf::Arena* message_arena, ::google::logging::v2::LogEntryOperation** operation) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*operation) == NULL) {
      message_arena->Own(*operation);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*operation)) {
      ::google::logging::v2::LogEntryOperation* new_operation = 
            ::google::protobuf::Arena::CreateMessage< ::google::logging::v2::LogEntryOperation >(
            message_arena);
      new_operation->CopyFrom(**operation);
      *operation = new_operation;
    }
}
void LogEntry::unsafe_arena_set_allocated_operation(
    ::google::logging::v2::LogEntryOperation* operation) {
  if (GetArenaNoVirtual() == NULL) {
    delete operation_;
  }
  operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.operation)
}
void LogEntry::_slow_mutable_source_location() {
  source_location_ = ::google::protobuf::Arena::CreateMessage< ::google::logging::v2::LogEntrySourceLocation >(
      GetArenaNoVirtual());
}
::google::logging::v2::LogEntrySourceLocation* LogEntry::_slow_release_source_location() {
  if (source_location_ == NULL) {
    return NULL;
  } else {
    ::google::logging::v2::LogEntrySourceLocation* temp = new ::google::logging::v2::LogEntrySourceLocation(*source_location_);
    source_location_ = NULL;
    return temp;
  }
}
::google::logging::v2::LogEntrySourceLocation* LogEntry::unsafe_arena_release_source_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.source_location)
  
  ::google::logging::v2::LogEntrySourceLocation* temp = source_location_;
  source_location_ = NULL;
  return temp;
}
void LogEntry::_slow_set_allocated_source_location(
    ::google::protobuf::Arena* message_arena, ::google::logging::v2::LogEntrySourceLocation** source_location) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*source_location) == NULL) {
      message_arena->Own(*source_location);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*source_location)) {
      ::google::logging::v2::LogEntrySourceLocation* new_source_location = 
            ::google::protobuf::Arena::CreateMessage< ::google::logging::v2::LogEntrySourceLocation >(
            message_arena);
      new_source_location->CopyFrom(**source_location);
      *source_location = new_source_location;
    }
}
void LogEntry::unsafe_arena_set_allocated_source_location(
    ::google::logging::v2::LogEntrySourceLocation* source_location) {
  if (GetArenaNoVirtual() == NULL) {
    delete source_location_;
  }
  source_location_ = source_location;
  if (source_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.source_location)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntry::kLogNameFieldNumber;
const int LogEntry::kResourceFieldNumber;
const int LogEntry::kProtoPayloadFieldNumber;
const int LogEntry::kTextPayloadFieldNumber;
const int LogEntry::kJsonPayloadFieldNumber;
const int LogEntry::kTimestampFieldNumber;
const int LogEntry::kReceiveTimestampFieldNumber;
const int LogEntry::kSeverityFieldNumber;
const int LogEntry::kInsertIdFieldNumber;
const int LogEntry::kHttpRequestFieldNumber;
const int LogEntry::kLabelsFieldNumber;
const int LogEntry::kOperationFieldNumber;
const int LogEntry::kTraceFieldNumber;
const int LogEntry::kSourceLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntry::LogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.LogEntry)
}
LogEntry::LogEntry(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  insert_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.insert_id().size() > 0) {
    insert_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_id(),
      GetArenaNoVirtual());
  }
  log_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log_name().size() > 0) {
    log_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_name(),
      GetArenaNoVirtual());
  }
  trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trace().size() > 0) {
    trace_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace(),
      GetArenaNoVirtual());
  }
  if (from.has_http_request()) {
    http_request_ = new ::google::logging::type::HttpRequest(*from.http_request_);
  } else {
    http_request_ = NULL;
  }
  if (from.has_resource()) {
    resource_ = new ::google::api::MonitoredResource(*from.resource_);
  } else {
    resource_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_operation()) {
    operation_ = new ::google::logging::v2::LogEntryOperation(*from.operation_);
  } else {
    operation_ = NULL;
  }
  if (from.has_source_location()) {
    source_location_ = new ::google::logging::v2::LogEntrySourceLocation(*from.source_location_);
  } else {
    source_location_ = NULL;
  }
  if (from.has_receive_timestamp()) {
    receive_timestamp_ = new ::google::protobuf::Timestamp(*from.receive_timestamp_);
  } else {
    receive_timestamp_ = NULL;
  }
  severity_ = from.severity_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kProtoPayload: {
      mutable_proto_payload()->::google::protobuf::Any::MergeFrom(from.proto_payload());
      break;
    }
    case kTextPayload: {
      set_text_payload(from.text_payload());
      break;
    }
    case kJsonPayload: {
      mutable_json_payload()->::google::protobuf::Struct::MergeFrom(from.json_payload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.LogEntry)
}

void LogEntry::SharedCtor() {
  insert_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&http_request_, 0, reinterpret_cast<char*>(&severity_) -
    reinterpret_cast<char*>(&http_request_) + sizeof(severity_));
  clear_has_payload();
  _cached_size_ = 0;
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:google.logging.v2.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  insert_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  log_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  trace_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete http_request_;
  }
  if (this != internal_default_instance()) {
    delete resource_;
  }
  if (this != internal_default_instance()) {
    delete timestamp_;
  }
  if (this != internal_default_instance()) {
    delete operation_;
  }
  if (this != internal_default_instance()) {
    delete source_location_;
  }
  if (this != internal_default_instance()) {
    delete receive_timestamp_;
  }
  if (has_payload()) {
    clear_payload();
  }
}

void LogEntry::ArenaDtor(void* object) {
  LogEntry* _this = reinterpret_cast< LogEntry* >(object);
  (void)_this;
}
void LogEntry::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogEntry& LogEntry::default_instance() {
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogEntry* LogEntry::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LogEntry>(arena);
}

void LogEntry::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:google.logging.v2.LogEntry)
  switch (payload_case()) {
    case kProtoPayload: {
      if (GetArenaNoVirtual() == NULL) {
        delete payload_.proto_payload_;
      }
      break;
    }
    case kTextPayload: {
      payload_.text_payload_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kJsonPayload: {
      if (GetArenaNoVirtual() == NULL) {
        delete payload_.json_payload_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.LogEntry)
  labels_.Clear();
  insert_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  log_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  trace_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && http_request_ != NULL) {
    delete http_request_;
  }
  http_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) {
    delete resource_;
  }
  resource_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && operation_ != NULL) {
    delete operation_;
  }
  operation_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_location_ != NULL) {
    delete source_location_;
  }
  source_location_ = NULL;
  if (GetArenaNoVirtual() == NULL && receive_timestamp_ != NULL) {
    delete receive_timestamp_;
  }
  receive_timestamp_ = NULL;
  severity_ = 0;
  clear_payload();
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.LogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Any proto_payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proto_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text_payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_payload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text_payload().data(), this->text_payload().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.text_payload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string insert_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insert_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->insert_id().data(), this->insert_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.insert_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct json_payload = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_json_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.logging.type.HttpRequest http_request = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.api.MonitoredResource resource = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.logging.type.LogSeverity severity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_severity(static_cast< ::google::logging::type::LogSeverity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          LogEntry_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              LogEntry_LabelsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log_name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log_name().data(), this->log_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.log_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.logging.v2.LogEntryOperation operation = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trace = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trace().data(), this->trace().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.trace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.logging.v2.LogEntrySourceLocation source_location = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp receive_timestamp = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receive_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.LogEntry)
  return false;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any proto_payload = 2;
  if (has_proto_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.proto_payload_, output);
  }

  // string text_payload = 3;
  if (has_text_payload()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_payload().data(), this->text_payload().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.text_payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text_payload(), output);
  }

  // string insert_id = 4;
  if (this->insert_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->insert_id().data(), this->insert_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.insert_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->insert_id(), output);
  }

  // .google.protobuf.Struct json_payload = 6;
  if (has_json_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *payload_.json_payload_, output);
  }

  // .google.logging.type.HttpRequest http_request = 7;
  if (this->has_http_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->http_request_, output);
  }

  // .google.api.MonitoredResource resource = 8;
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->resource_, output);
  }

  // .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->timestamp_, output);
  }

  // .google.logging.type.LogSeverity severity = 10;
  if (this->severity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->severity(), output);
  }

  // map<string, string> labels = 11;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.logging.v2.LogEntry.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.logging.v2.LogEntry.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<LogEntry_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<LogEntry_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // string log_name = 12;
  if (this->log_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_name().data(), this->log_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.log_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->log_name(), output);
  }

  // .google.logging.v2.LogEntryOperation operation = 15;
  if (this->has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->operation_, output);
  }

  // string trace = 22;
  if (this->trace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace().data(), this->trace().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.trace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->trace(), output);
  }

  // .google.logging.v2.LogEntrySourceLocation source_location = 23;
  if (this->has_source_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->source_location_, output);
  }

  // .google.protobuf.Timestamp receive_timestamp = 24;
  if (this->has_receive_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->receive_timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.logging.v2.LogEntry)
}

::google::protobuf::uint8* LogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any proto_payload = 2;
  if (has_proto_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.proto_payload_, deterministic, target);
  }

  // string text_payload = 3;
  if (has_text_payload()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_payload().data(), this->text_payload().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.text_payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text_payload(), target);
  }

  // string insert_id = 4;
  if (this->insert_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->insert_id().data(), this->insert_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.insert_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->insert_id(), target);
  }

  // .google.protobuf.Struct json_payload = 6;
  if (has_json_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *payload_.json_payload_, deterministic, target);
  }

  // .google.logging.type.HttpRequest http_request = 7;
  if (this->has_http_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->http_request_, deterministic, target);
  }

  // .google.api.MonitoredResource resource = 8;
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->resource_, deterministic, target);
  }

  // .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->timestamp_, deterministic, target);
  }

  // .google.logging.type.LogSeverity severity = 10;
  if (this->severity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->severity(), target);
  }

  // map<string, string> labels = 11;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.logging.v2.LogEntry.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.logging.v2.LogEntry.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<LogEntry_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<LogEntry_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // string log_name = 12;
  if (this->log_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_name().data(), this->log_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.log_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->log_name(), target);
  }

  // .google.logging.v2.LogEntryOperation operation = 15;
  if (this->has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->operation_, deterministic, target);
  }

  // string trace = 22;
  if (this->trace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace().data(), this->trace().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.trace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->trace(), target);
  }

  // .google.logging.v2.LogEntrySourceLocation source_location = 23;
  if (this->has_source_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->source_location_, deterministic, target);
  }

  // .google.protobuf.Timestamp receive_timestamp = 24;
  if (this->has_receive_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->receive_timestamp_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.LogEntry)
  size_t total_size = 0;

  // map<string, string> labels = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<LogEntry_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string insert_id = 4;
  if (this->insert_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->insert_id());
  }

  // string log_name = 12;
  if (this->log_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log_name());
  }

  // string trace = 22;
  if (this->trace().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trace());
  }

  // .google.logging.type.HttpRequest http_request = 7;
  if (this->has_http_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->http_request_);
  }

  // .google.api.MonitoredResource resource = 8;
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_);
  }

  // .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // .google.logging.v2.LogEntryOperation operation = 15;
  if (this->has_operation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operation_);
  }

  // .google.logging.v2.LogEntrySourceLocation source_location = 23;
  if (this->has_source_location()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_location_);
  }

  // .google.protobuf.Timestamp receive_timestamp = 24;
  if (this->has_receive_timestamp()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receive_timestamp_);
  }

  // .google.logging.type.LogSeverity severity = 10;
  if (this->severity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
  }

  switch (payload_case()) {
    // .google.protobuf.Any proto_payload = 2;
    case kProtoPayload: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.proto_payload_);
      break;
    }
    // string text_payload = 3;
    case kTextPayload: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_payload());
      break;
    }
    // .google.protobuf.Struct json_payload = 6;
    case kJsonPayload: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.json_payload_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.LogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.insert_id().size() > 0) {
    set_insert_id(from.insert_id());
  }
  if (from.log_name().size() > 0) {
    set_log_name(from.log_name());
  }
  if (from.trace().size() > 0) {
    set_trace(from.trace());
  }
  if (from.has_http_request()) {
    mutable_http_request()->::google::logging::type::HttpRequest::MergeFrom(from.http_request());
  }
  if (from.has_resource()) {
    mutable_resource()->::google::api::MonitoredResource::MergeFrom(from.resource());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_operation()) {
    mutable_operation()->::google::logging::v2::LogEntryOperation::MergeFrom(from.operation());
  }
  if (from.has_source_location()) {
    mutable_source_location()->::google::logging::v2::LogEntrySourceLocation::MergeFrom(from.source_location());
  }
  if (from.has_receive_timestamp()) {
    mutable_receive_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.receive_timestamp());
  }
  if (from.severity() != 0) {
    set_severity(from.severity());
  }
  switch (from.payload_case()) {
    case kProtoPayload: {
      mutable_proto_payload()->::google::protobuf::Any::MergeFrom(from.proto_payload());
      break;
    }
    case kTextPayload: {
      set_text_payload(from.text_payload());
      break;
    }
    case kJsonPayload: {
      mutable_json_payload()->::google::protobuf::Struct::MergeFrom(from.json_payload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LogEntry* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LogEntry::UnsafeArenaSwap(LogEntry* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LogEntry::InternalSwap(LogEntry* other) {
  labels_.Swap(&other->labels_);
  insert_id_.Swap(&other->insert_id_);
  log_name_.Swap(&other->log_name_);
  trace_.Swap(&other->trace_);
  std::swap(http_request_, other->http_request_);
  std::swap(resource_, other->resource_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(operation_, other->operation_);
  std::swap(source_location_, other->source_location_);
  std::swap(receive_timestamp_, other->receive_timestamp_);
  std::swap(severity_, other->severity_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogEntry

// string log_name = 12;
void LogEntry::clear_log_name() {
  log_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LogEntry::log_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.log_name)
  return log_name_.Get();
}
void LogEntry::set_log_name(const ::std::string& value) {
  
  log_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.log_name)
}
void LogEntry::set_log_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.log_name)
}
void LogEntry::set_log_name(const char* value,
    size_t size) {
  
  log_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.log_name)
}
::std::string* LogEntry::mutable_log_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.log_name)
  return log_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntry::release_log_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.log_name)
  
  return log_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntry::unsafe_arena_release_log_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.log_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return log_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LogEntry::set_allocated_log_name(::std::string* log_name) {
  if (log_name != NULL) {
    
  } else {
    
  }
  log_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.log_name)
}
void LogEntry::unsafe_arena_set_allocated_log_name(
    ::std::string* log_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (log_name != NULL) {
    
  } else {
    
  }
  log_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      log_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.log_name)
}

// .google.api.MonitoredResource resource = 8;
bool LogEntry::has_resource() const {
  return this != internal_default_instance() && resource_ != NULL;
}
void LogEntry::clear_resource() {
  if (GetArenaNoVirtual() == NULL && resource_ != NULL) delete resource_;
  resource_ = NULL;
}
const ::google::api::MonitoredResource& LogEntry::resource() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.resource)
  return resource_ != NULL ? *resource_
                         : *::google::api::MonitoredResource::internal_default_instance();
}
::google::api::MonitoredResource* LogEntry::mutable_resource() {
  
  if (resource_ == NULL) {
    _slow_mutable_resource();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.resource)
  return resource_;
}
::google::api::MonitoredResource* LogEntry::release_resource() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.resource)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_resource();
  } else {
    ::google::api::MonitoredResource* temp = resource_;
    resource_ = NULL;
    return temp;
  }
}
 void LogEntry::set_allocated_resource(::google::api::MonitoredResource* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource != NULL) {
    _slow_set_allocated_resource(message_arena, &resource);
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.resource)
}

// .google.protobuf.Any proto_payload = 2;
bool LogEntry::has_proto_payload() const {
  return payload_case() == kProtoPayload;
}
void LogEntry::set_has_proto_payload() {
  _oneof_case_[0] = kProtoPayload;
}
void LogEntry::clear_proto_payload() {
  if (has_proto_payload()) {
    if (GetArenaNoVirtual() == NULL) {
      delete payload_.proto_payload_;
    }
    clear_has_payload();
  }
}
 const ::google::protobuf::Any& LogEntry::proto_payload() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.proto_payload)
  return has_proto_payload()
      ? *payload_.proto_payload_
      : ::google::protobuf::Any::default_instance();
}
::google::protobuf::Any* LogEntry::mutable_proto_payload() {
  if (!has_proto_payload()) {
    clear_payload();
    set_has_proto_payload();
    payload_.proto_payload_ = 
      ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.proto_payload)
  return payload_.proto_payload_;
}
::google::protobuf::Any* LogEntry::release_proto_payload() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.proto_payload)
  if (has_proto_payload()) {
    clear_has_payload();
    if (GetArenaNoVirtual() != NULL) {
      ::google::protobuf::Any* temp = new ::google::protobuf::Any(*payload_.proto_payload_);
      payload_.proto_payload_ = NULL;
      return temp;
    } else {
      ::google::protobuf::Any* temp = payload_.proto_payload_;
      payload_.proto_payload_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void LogEntry::set_allocated_proto_payload(::google::protobuf::Any* proto_payload) {
  clear_payload();
  if (proto_payload) {
    if (GetArenaNoVirtual() != NULL) {
      GetArenaNoVirtual()->Own(proto_payload);
    }
    set_has_proto_payload();
    payload_.proto_payload_ = proto_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.proto_payload)
}
 ::google::protobuf::Any* LogEntry::unsafe_arena_release_proto_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.proto_payload)
  if (has_proto_payload()) {
    clear_has_payload();
    ::google::protobuf::Any* temp = payload_.proto_payload_;
    payload_.proto_payload_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void LogEntry::unsafe_arena_set_allocated_proto_payload(::google::protobuf::Any* proto_payload) {
  clear_payload();
  if (proto_payload) {
    set_has_proto_payload();
    payload_.proto_payload_ = proto_payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.proto_payload)
}

// string text_payload = 3;
bool LogEntry::has_text_payload() const {
  return payload_case() == kTextPayload;
}
void LogEntry::set_has_text_payload() {
  _oneof_case_[0] = kTextPayload;
}
void LogEntry::clear_text_payload() {
  if (has_text_payload()) {
    payload_.text_payload_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_payload();
  }
}
const ::std::string& LogEntry::text_payload() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.text_payload)
  if (has_text_payload()) {
    return payload_.text_payload_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void LogEntry::set_text_payload(const ::std::string& value) {
  if (!has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.text_payload)
}
void LogEntry::set_text_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.text_payload)
}
void LogEntry::set_text_payload(const char* value,
                             size_t size) {
  if (!has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.text_payload)
}
::std::string* LogEntry::mutable_text_payload() {
  if (!has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.text_payload_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.text_payload)
}
::std::string* LogEntry::release_text_payload() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.text_payload)
  if (has_text_payload()) {
    clear_has_payload();
    return payload_.text_payload_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
::std::string* LogEntry::unsafe_arena_release_text_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.text_payload)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_text_payload()) {
    clear_has_payload();
    return payload_.text_payload_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
void LogEntry::set_allocated_text_payload(::std::string* text_payload) {
  if (!has_text_payload()) {
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (text_payload != NULL) {
    set_has_text_payload();
    payload_.text_payload_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_payload,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.text_payload)
}
void LogEntry::unsafe_arena_set_allocated_text_payload(::std::string* text_payload) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_text_payload()) {
    payload_.text_payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (text_payload) {
    set_has_text_payload();
    payload_.text_payload_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_payload, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.text_payload)
}

// .google.protobuf.Struct json_payload = 6;
bool LogEntry::has_json_payload() const {
  return payload_case() == kJsonPayload;
}
void LogEntry::set_has_json_payload() {
  _oneof_case_[0] = kJsonPayload;
}
void LogEntry::clear_json_payload() {
  if (has_json_payload()) {
    if (GetArenaNoVirtual() == NULL) {
      delete payload_.json_payload_;
    }
    clear_has_payload();
  }
}
 const ::google::protobuf::Struct& LogEntry::json_payload() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.json_payload)
  return has_json_payload()
      ? *payload_.json_payload_
      : ::google::protobuf::Struct::default_instance();
}
::google::protobuf::Struct* LogEntry::mutable_json_payload() {
  if (!has_json_payload()) {
    clear_payload();
    set_has_json_payload();
    payload_.json_payload_ = 
      ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Struct >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.json_payload)
  return payload_.json_payload_;
}
::google::protobuf::Struct* LogEntry::release_json_payload() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.json_payload)
  if (has_json_payload()) {
    clear_has_payload();
    if (GetArenaNoVirtual() != NULL) {
      ::google::protobuf::Struct* temp = new ::google::protobuf::Struct(*payload_.json_payload_);
      payload_.json_payload_ = NULL;
      return temp;
    } else {
      ::google::protobuf::Struct* temp = payload_.json_payload_;
      payload_.json_payload_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void LogEntry::set_allocated_json_payload(::google::protobuf::Struct* json_payload) {
  clear_payload();
  if (json_payload) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(json_payload) == NULL) {
      GetArenaNoVirtual()->Own(json_payload);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(json_payload)) {
      ::google::protobuf::Struct* new_json_payload = 
          ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Struct >(
          GetArenaNoVirtual());
      new_json_payload->CopyFrom(*json_payload);
      json_payload = new_json_payload;
    }
    set_has_json_payload();
    payload_.json_payload_ = json_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.json_payload)
}
 ::google::protobuf::Struct* LogEntry::unsafe_arena_release_json_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.json_payload)
  if (has_json_payload()) {
    clear_has_payload();
    ::google::protobuf::Struct* temp = payload_.json_payload_;
    payload_.json_payload_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void LogEntry::unsafe_arena_set_allocated_json_payload(::google::protobuf::Struct* json_payload) {
  clear_payload();
  if (json_payload) {
    set_has_json_payload();
    payload_.json_payload_ = json_payload;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.json_payload)
}

// .google.protobuf.Timestamp timestamp = 9;
bool LogEntry::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void LogEntry::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& LogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* LogEntry::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    _slow_mutable_timestamp();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* LogEntry::release_timestamp() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.timestamp)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_timestamp();
  } else {
    ::google::protobuf::Timestamp* temp = timestamp_;
    timestamp_ = NULL;
    return temp;
  }
}
 void LogEntry::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timestamp_;
  }
  if (timestamp != NULL) {
    _slow_set_allocated_timestamp(message_arena, &timestamp);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.timestamp)
}

// .google.protobuf.Timestamp receive_timestamp = 24;
bool LogEntry::has_receive_timestamp() const {
  return this != internal_default_instance() && receive_timestamp_ != NULL;
}
void LogEntry::clear_receive_timestamp() {
  if (GetArenaNoVirtual() == NULL && receive_timestamp_ != NULL) delete receive_timestamp_;
  receive_timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& LogEntry::receive_timestamp() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.receive_timestamp)
  return receive_timestamp_ != NULL ? *receive_timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* LogEntry::mutable_receive_timestamp() {
  
  if (receive_timestamp_ == NULL) {
    _slow_mutable_receive_timestamp();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.receive_timestamp)
  return receive_timestamp_;
}
::google::protobuf::Timestamp* LogEntry::release_receive_timestamp() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.receive_timestamp)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_receive_timestamp();
  } else {
    ::google::protobuf::Timestamp* temp = receive_timestamp_;
    receive_timestamp_ = NULL;
    return temp;
  }
}
 void LogEntry::set_allocated_receive_timestamp(::google::protobuf::Timestamp* receive_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete receive_timestamp_;
  }
  if (receive_timestamp != NULL) {
    _slow_set_allocated_receive_timestamp(message_arena, &receive_timestamp);
  }
  receive_timestamp_ = receive_timestamp;
  if (receive_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.receive_timestamp)
}

// .google.logging.type.LogSeverity severity = 10;
void LogEntry::clear_severity() {
  severity_ = 0;
}
::google::logging::type::LogSeverity LogEntry::severity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.severity)
  return static_cast< ::google::logging::type::LogSeverity >(severity_);
}
void LogEntry::set_severity(::google::logging::type::LogSeverity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.severity)
}

// string insert_id = 4;
void LogEntry::clear_insert_id() {
  insert_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LogEntry::insert_id() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.insert_id)
  return insert_id_.Get();
}
void LogEntry::set_insert_id(const ::std::string& value) {
  
  insert_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.insert_id)
}
void LogEntry::set_insert_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  insert_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.insert_id)
}
void LogEntry::set_insert_id(const char* value,
    size_t size) {
  
  insert_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.insert_id)
}
::std::string* LogEntry::mutable_insert_id() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.insert_id)
  return insert_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntry::release_insert_id() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.insert_id)
  
  return insert_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntry::unsafe_arena_release_insert_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.insert_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return insert_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LogEntry::set_allocated_insert_id(::std::string* insert_id) {
  if (insert_id != NULL) {
    
  } else {
    
  }
  insert_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insert_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.insert_id)
}
void LogEntry::unsafe_arena_set_allocated_insert_id(
    ::std::string* insert_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (insert_id != NULL) {
    
  } else {
    
  }
  insert_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      insert_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.insert_id)
}

// .google.logging.type.HttpRequest http_request = 7;
bool LogEntry::has_http_request() const {
  return this != internal_default_instance() && http_request_ != NULL;
}
void LogEntry::clear_http_request() {
  if (GetArenaNoVirtual() == NULL && http_request_ != NULL) delete http_request_;
  http_request_ = NULL;
}
const ::google::logging::type::HttpRequest& LogEntry::http_request() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.http_request)
  return http_request_ != NULL ? *http_request_
                         : *::google::logging::type::HttpRequest::internal_default_instance();
}
::google::logging::type::HttpRequest* LogEntry::mutable_http_request() {
  
  if (http_request_ == NULL) {
    _slow_mutable_http_request();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.http_request)
  return http_request_;
}
::google::logging::type::HttpRequest* LogEntry::release_http_request() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.http_request)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_http_request();
  } else {
    ::google::logging::type::HttpRequest* temp = http_request_;
    http_request_ = NULL;
    return temp;
  }
}
 void LogEntry::set_allocated_http_request(::google::logging::type::HttpRequest* http_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete http_request_;
  }
  if (http_request != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(http_request);
    }
  }
  http_request_ = http_request;
  if (http_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.http_request)
}

// map<string, string> labels = 11;
int LogEntry::labels_size() const {
  return labels_.size();
}
void LogEntry::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
LogEntry::labels() const {
  // @@protoc_insertion_point(field_map:google.logging.v2.LogEntry.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
LogEntry::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.logging.v2.LogEntry.labels)
  return labels_.MutableMap();
}

// .google.logging.v2.LogEntryOperation operation = 15;
bool LogEntry::has_operation() const {
  return this != internal_default_instance() && operation_ != NULL;
}
void LogEntry::clear_operation() {
  if (GetArenaNoVirtual() == NULL && operation_ != NULL) delete operation_;
  operation_ = NULL;
}
const ::google::logging::v2::LogEntryOperation& LogEntry::operation() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.operation)
  return operation_ != NULL ? *operation_
                         : *::google::logging::v2::LogEntryOperation::internal_default_instance();
}
::google::logging::v2::LogEntryOperation* LogEntry::mutable_operation() {
  
  if (operation_ == NULL) {
    _slow_mutable_operation();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.operation)
  return operation_;
}
::google::logging::v2::LogEntryOperation* LogEntry::release_operation() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.operation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_operation();
  } else {
    ::google::logging::v2::LogEntryOperation* temp = operation_;
    operation_ = NULL;
    return temp;
  }
}
 void LogEntry::set_allocated_operation(::google::logging::v2::LogEntryOperation* operation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operation_;
  }
  if (operation != NULL) {
    _slow_set_allocated_operation(message_arena, &operation);
  }
  operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.operation)
}

// string trace = 22;
void LogEntry::clear_trace() {
  trace_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LogEntry::trace() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.trace)
  return trace_.Get();
}
void LogEntry::set_trace(const ::std::string& value) {
  
  trace_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntry.trace)
}
void LogEntry::set_trace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trace_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntry.trace)
}
void LogEntry::set_trace(const char* value,
    size_t size) {
  
  trace_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntry.trace)
}
::std::string* LogEntry::mutable_trace() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.trace)
  return trace_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntry::release_trace() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.trace)
  
  return trace_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntry::unsafe_arena_release_trace() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntry.trace)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return trace_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LogEntry::set_allocated_trace(::std::string* trace) {
  if (trace != NULL) {
    
  } else {
    
  }
  trace_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.trace)
}
void LogEntry::unsafe_arena_set_allocated_trace(
    ::std::string* trace) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (trace != NULL) {
    
  } else {
    
  }
  trace_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      trace, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.trace)
}

// .google.logging.v2.LogEntrySourceLocation source_location = 23;
bool LogEntry::has_source_location() const {
  return this != internal_default_instance() && source_location_ != NULL;
}
void LogEntry::clear_source_location() {
  if (GetArenaNoVirtual() == NULL && source_location_ != NULL) delete source_location_;
  source_location_ = NULL;
}
const ::google::logging::v2::LogEntrySourceLocation& LogEntry::source_location() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntry.source_location)
  return source_location_ != NULL ? *source_location_
                         : *::google::logging::v2::LogEntrySourceLocation::internal_default_instance();
}
::google::logging::v2::LogEntrySourceLocation* LogEntry::mutable_source_location() {
  
  if (source_location_ == NULL) {
    _slow_mutable_source_location();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntry.source_location)
  return source_location_;
}
::google::logging::v2::LogEntrySourceLocation* LogEntry::release_source_location() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntry.source_location)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_location();
  } else {
    ::google::logging::v2::LogEntrySourceLocation* temp = source_location_;
    source_location_ = NULL;
    return temp;
  }
}
 void LogEntry::set_allocated_source_location(::google::logging::v2::LogEntrySourceLocation* source_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_location_;
  }
  if (source_location != NULL) {
    _slow_set_allocated_source_location(message_arena, &source_location);
  }
  source_location_ = source_location;
  if (source_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.source_location)
}

bool LogEntry::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void LogEntry::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
LogEntry::PayloadCase LogEntry::payload_case() const {
  return LogEntry::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntryOperation::kIdFieldNumber;
const int LogEntryOperation::kProducerFieldNumber;
const int LogEntryOperation::kFirstFieldNumber;
const int LogEntryOperation::kLastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntryOperation::LogEntryOperation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.LogEntryOperation)
}
LogEntryOperation::LogEntryOperation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.LogEntryOperation)
}
LogEntryOperation::LogEntryOperation(const LogEntryOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  producer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.producer().size() > 0) {
    producer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer(),
      GetArenaNoVirtual());
  }
  ::memcpy(&first_, &from.first_,
    reinterpret_cast<char*>(&last_) -
    reinterpret_cast<char*>(&first_) + sizeof(last_));
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.LogEntryOperation)
}

void LogEntryOperation::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&first_, 0, reinterpret_cast<char*>(&last_) -
    reinterpret_cast<char*>(&first_) + sizeof(last_));
  _cached_size_ = 0;
}

LogEntryOperation::~LogEntryOperation() {
  // @@protoc_insertion_point(destructor:google.logging.v2.LogEntryOperation)
  SharedDtor();
}

void LogEntryOperation::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  producer_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void LogEntryOperation::ArenaDtor(void* object) {
  LogEntryOperation* _this = reinterpret_cast< LogEntryOperation* >(object);
  (void)_this;
}
void LogEntryOperation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LogEntryOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntryOperation::descriptor() {
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogEntryOperation& LogEntryOperation::default_instance() {
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogEntryOperation* LogEntryOperation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LogEntryOperation>(arena);
}

void LogEntryOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.LogEntryOperation)
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  producer_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&first_, 0, reinterpret_cast<char*>(&last_) -
    reinterpret_cast<char*>(&first_) + sizeof(last_));
}

bool LogEntryOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.LogEntryOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntryOperation.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string producer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->producer().data(), this->producer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntryOperation.producer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool first = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool last = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.LogEntryOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.LogEntryOperation)
  return false;
#undef DO_
}

void LogEntryOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.LogEntryOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntryOperation.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string producer = 2;
  if (this->producer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer().data(), this->producer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntryOperation.producer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->producer(), output);
  }

  // bool first = 3;
  if (this->first() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->first(), output);
  }

  // bool last = 4;
  if (this->last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->last(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.logging.v2.LogEntryOperation)
}

::google::protobuf::uint8* LogEntryOperation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.LogEntryOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntryOperation.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string producer = 2;
  if (this->producer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer().data(), this->producer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntryOperation.producer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->producer(), target);
  }

  // bool first = 3;
  if (this->first() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->first(), target);
  }

  // bool last = 4;
  if (this->last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->last(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.LogEntryOperation)
  return target;
}

size_t LogEntryOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.LogEntryOperation)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string producer = 2;
  if (this->producer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->producer());
  }

  // bool first = 3;
  if (this->first() != 0) {
    total_size += 1 + 1;
  }

  // bool last = 4;
  if (this->last() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntryOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.LogEntryOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntryOperation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogEntryOperation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.LogEntryOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.LogEntryOperation)
    MergeFrom(*source);
  }
}

void LogEntryOperation::MergeFrom(const LogEntryOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.LogEntryOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.producer().size() > 0) {
    set_producer(from.producer());
  }
  if (from.first() != 0) {
    set_first(from.first());
  }
  if (from.last() != 0) {
    set_last(from.last());
  }
}

void LogEntryOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.LogEntryOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntryOperation::CopyFrom(const LogEntryOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.LogEntryOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntryOperation::IsInitialized() const {
  return true;
}

void LogEntryOperation::Swap(LogEntryOperation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LogEntryOperation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LogEntryOperation::UnsafeArenaSwap(LogEntryOperation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LogEntryOperation::InternalSwap(LogEntryOperation* other) {
  id_.Swap(&other->id_);
  producer_.Swap(&other->producer_);
  std::swap(first_, other->first_);
  std::swap(last_, other->last_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogEntryOperation::GetMetadata() const {
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogEntryOperation

// string id = 1;
void LogEntryOperation::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LogEntryOperation::id() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntryOperation.id)
  return id_.Get();
}
void LogEntryOperation::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntryOperation.id)
}
void LogEntryOperation::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntryOperation.id)
}
void LogEntryOperation::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntryOperation.id)
}
::std::string* LogEntryOperation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntryOperation.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntryOperation::release_id() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntryOperation.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntryOperation::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntryOperation.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LogEntryOperation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntryOperation.id)
}
void LogEntryOperation::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntryOperation.id)
}

// string producer = 2;
void LogEntryOperation::clear_producer() {
  producer_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LogEntryOperation::producer() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntryOperation.producer)
  return producer_.Get();
}
void LogEntryOperation::set_producer(const ::std::string& value) {
  
  producer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntryOperation.producer)
}
void LogEntryOperation::set_producer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  producer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntryOperation.producer)
}
void LogEntryOperation::set_producer(const char* value,
    size_t size) {
  
  producer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntryOperation.producer)
}
::std::string* LogEntryOperation::mutable_producer() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntryOperation.producer)
  return producer_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntryOperation::release_producer() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntryOperation.producer)
  
  return producer_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntryOperation::unsafe_arena_release_producer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntryOperation.producer)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return producer_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LogEntryOperation::set_allocated_producer(::std::string* producer) {
  if (producer != NULL) {
    
  } else {
    
  }
  producer_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntryOperation.producer)
}
void LogEntryOperation::unsafe_arena_set_allocated_producer(
    ::std::string* producer) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (producer != NULL) {
    
  } else {
    
  }
  producer_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      producer, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntryOperation.producer)
}

// bool first = 3;
void LogEntryOperation::clear_first() {
  first_ = false;
}
bool LogEntryOperation::first() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntryOperation.first)
  return first_;
}
void LogEntryOperation::set_first(bool value) {
  
  first_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntryOperation.first)
}

// bool last = 4;
void LogEntryOperation::clear_last() {
  last_ = false;
}
bool LogEntryOperation::last() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntryOperation.last)
  return last_;
}
void LogEntryOperation::set_last(bool value) {
  
  last_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntryOperation.last)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntrySourceLocation::kFileFieldNumber;
const int LogEntrySourceLocation::kLineFieldNumber;
const int LogEntrySourceLocation::kFunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntrySourceLocation::LogEntrySourceLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.LogEntrySourceLocation)
}
LogEntrySourceLocation::LogEntrySourceLocation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.LogEntrySourceLocation)
}
LogEntrySourceLocation::LogEntrySourceLocation(const LogEntrySourceLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file(),
      GetArenaNoVirtual());
  }
  function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.function().size() > 0) {
    function_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function(),
      GetArenaNoVirtual());
  }
  line_ = from.line_;
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.LogEntrySourceLocation)
}

void LogEntrySourceLocation::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

LogEntrySourceLocation::~LogEntrySourceLocation() {
  // @@protoc_insertion_point(destructor:google.logging.v2.LogEntrySourceLocation)
  SharedDtor();
}

void LogEntrySourceLocation::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  file_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  function_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void LogEntrySourceLocation::ArenaDtor(void* object) {
  LogEntrySourceLocation* _this = reinterpret_cast< LogEntrySourceLocation* >(object);
  (void)_this;
}
void LogEntrySourceLocation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LogEntrySourceLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntrySourceLocation::descriptor() {
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogEntrySourceLocation& LogEntrySourceLocation::default_instance() {
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogEntrySourceLocation* LogEntrySourceLocation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LogEntrySourceLocation>(arena);
}

void LogEntrySourceLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.LogEntrySourceLocation)
  file_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  function_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  line_ = GOOGLE_LONGLONG(0);
}

bool LogEntrySourceLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.LogEntrySourceLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntrySourceLocation.file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 line = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string function = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntrySourceLocation.function"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.LogEntrySourceLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.LogEntrySourceLocation)
  return false;
#undef DO_
}

void LogEntrySourceLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.LogEntrySourceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntrySourceLocation.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file(), output);
  }

  // int64 line = 2;
  if (this->line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->line(), output);
  }

  // string function = 3;
  if (this->function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntrySourceLocation.function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->function(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.logging.v2.LogEntrySourceLocation)
}

::google::protobuf::uint8* LogEntrySourceLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.LogEntrySourceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntrySourceLocation.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  // int64 line = 2;
  if (this->line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->line(), target);
  }

  // string function = 3;
  if (this->function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntrySourceLocation.function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->function(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.LogEntrySourceLocation)
  return target;
}

size_t LogEntrySourceLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.LogEntrySourceLocation)
  size_t total_size = 0;

  // string file = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // string function = 3;
  if (this->function().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->function());
  }

  // int64 line = 2;
  if (this->line() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->line());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntrySourceLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.LogEntrySourceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntrySourceLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogEntrySourceLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.LogEntrySourceLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.LogEntrySourceLocation)
    MergeFrom(*source);
  }
}

void LogEntrySourceLocation::MergeFrom(const LogEntrySourceLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.LogEntrySourceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {
    set_file(from.file());
  }
  if (from.function().size() > 0) {
    set_function(from.function());
  }
  if (from.line() != 0) {
    set_line(from.line());
  }
}

void LogEntrySourceLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.LogEntrySourceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntrySourceLocation::CopyFrom(const LogEntrySourceLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.LogEntrySourceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntrySourceLocation::IsInitialized() const {
  return true;
}

void LogEntrySourceLocation::Swap(LogEntrySourceLocation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LogEntrySourceLocation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LogEntrySourceLocation::UnsafeArenaSwap(LogEntrySourceLocation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LogEntrySourceLocation::InternalSwap(LogEntrySourceLocation* other) {
  file_.Swap(&other->file_);
  function_.Swap(&other->function_);
  std::swap(line_, other->line_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogEntrySourceLocation::GetMetadata() const {
  protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2flogging_2fv2_2flog_5fentry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogEntrySourceLocation

// string file = 1;
void LogEntrySourceLocation::clear_file() {
  file_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LogEntrySourceLocation::file() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntrySourceLocation.file)
  return file_.Get();
}
void LogEntrySourceLocation::set_file(const ::std::string& value) {
  
  file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntrySourceLocation.file)
}
void LogEntrySourceLocation::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntrySourceLocation.file)
}
void LogEntrySourceLocation::set_file(const char* value,
    size_t size) {
  
  file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntrySourceLocation.file)
}
::std::string* LogEntrySourceLocation::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntrySourceLocation.file)
  return file_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntrySourceLocation::release_file() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntrySourceLocation.file)
  
  return file_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntrySourceLocation::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntrySourceLocation.file)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return file_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LogEntrySourceLocation::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntrySourceLocation.file)
}
void LogEntrySourceLocation::unsafe_arena_set_allocated_file(
    ::std::string* file) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (file != NULL) {
    
  } else {
    
  }
  file_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      file, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntrySourceLocation.file)
}

// int64 line = 2;
void LogEntrySourceLocation::clear_line() {
  line_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LogEntrySourceLocation::line() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntrySourceLocation.line)
  return line_;
}
void LogEntrySourceLocation::set_line(::google::protobuf::int64 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntrySourceLocation.line)
}

// string function = 3;
void LogEntrySourceLocation::clear_function() {
  function_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LogEntrySourceLocation::function() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogEntrySourceLocation.function)
  return function_.Get();
}
void LogEntrySourceLocation::set_function(const ::std::string& value) {
  
  function_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogEntrySourceLocation.function)
}
void LogEntrySourceLocation::set_function(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogEntrySourceLocation.function)
}
void LogEntrySourceLocation::set_function(const char* value,
    size_t size) {
  
  function_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogEntrySourceLocation.function)
}
::std::string* LogEntrySourceLocation::mutable_function() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogEntrySourceLocation.function)
  return function_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntrySourceLocation::release_function() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogEntrySourceLocation.function)
  
  return function_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LogEntrySourceLocation::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogEntrySourceLocation.function)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return function_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LogEntrySourceLocation::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    
  } else {
    
  }
  function_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntrySourceLocation.function)
}
void LogEntrySourceLocation::unsafe_arena_set_allocated_function(
    ::std::string* function) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (function != NULL) {
    
  } else {
    
  }
  function_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      function, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntrySourceLocation.function)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace logging
}  // namespace google

// @@protoc_insertion_point(global_scope)
