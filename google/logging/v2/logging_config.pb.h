// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto

#ifndef PROTOBUF_google_2flogging_2fv2_2flogging_5fconfig_2eproto__INCLUDED
#define PROTOBUF_google_2flogging_2fv2_2flogging_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
namespace google {
namespace api {
}  // namespace api
namespace logging {
namespace v2 {
class CreateExclusionRequest;
class CreateExclusionRequestDefaultTypeInternal;
extern CreateExclusionRequestDefaultTypeInternal _CreateExclusionRequest_default_instance_;
class CreateSinkRequest;
class CreateSinkRequestDefaultTypeInternal;
extern CreateSinkRequestDefaultTypeInternal _CreateSinkRequest_default_instance_;
class DeleteExclusionRequest;
class DeleteExclusionRequestDefaultTypeInternal;
extern DeleteExclusionRequestDefaultTypeInternal _DeleteExclusionRequest_default_instance_;
class DeleteSinkRequest;
class DeleteSinkRequestDefaultTypeInternal;
extern DeleteSinkRequestDefaultTypeInternal _DeleteSinkRequest_default_instance_;
class GetExclusionRequest;
class GetExclusionRequestDefaultTypeInternal;
extern GetExclusionRequestDefaultTypeInternal _GetExclusionRequest_default_instance_;
class GetSinkRequest;
class GetSinkRequestDefaultTypeInternal;
extern GetSinkRequestDefaultTypeInternal _GetSinkRequest_default_instance_;
class ListExclusionsRequest;
class ListExclusionsRequestDefaultTypeInternal;
extern ListExclusionsRequestDefaultTypeInternal _ListExclusionsRequest_default_instance_;
class ListExclusionsResponse;
class ListExclusionsResponseDefaultTypeInternal;
extern ListExclusionsResponseDefaultTypeInternal _ListExclusionsResponse_default_instance_;
class ListSinksRequest;
class ListSinksRequestDefaultTypeInternal;
extern ListSinksRequestDefaultTypeInternal _ListSinksRequest_default_instance_;
class ListSinksResponse;
class ListSinksResponseDefaultTypeInternal;
extern ListSinksResponseDefaultTypeInternal _ListSinksResponse_default_instance_;
class LogExclusion;
class LogExclusionDefaultTypeInternal;
extern LogExclusionDefaultTypeInternal _LogExclusion_default_instance_;
class LogSink;
class LogSinkDefaultTypeInternal;
extern LogSinkDefaultTypeInternal _LogSink_default_instance_;
class UpdateExclusionRequest;
class UpdateExclusionRequestDefaultTypeInternal;
extern UpdateExclusionRequestDefaultTypeInternal _UpdateExclusionRequest_default_instance_;
class UpdateSinkRequest;
class UpdateSinkRequestDefaultTypeInternal;
extern UpdateSinkRequestDefaultTypeInternal _UpdateSinkRequest_default_instance_;
}  // namespace v2
}  // namespace logging
namespace protobuf {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class FieldMask;
class FieldMaskDefaultTypeInternal;
extern FieldMaskDefaultTypeInternal _FieldMask_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace google {
namespace logging {
namespace v2 {

namespace protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto

enum LogSink_VersionFormat {
  LogSink_VersionFormat_VERSION_FORMAT_UNSPECIFIED = 0,
  LogSink_VersionFormat_V2 = 1,
  LogSink_VersionFormat_V1 = 2,
  LogSink_VersionFormat_LogSink_VersionFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LogSink_VersionFormat_LogSink_VersionFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LogSink_VersionFormat_IsValid(int value);
const LogSink_VersionFormat LogSink_VersionFormat_VersionFormat_MIN = LogSink_VersionFormat_VERSION_FORMAT_UNSPECIFIED;
const LogSink_VersionFormat LogSink_VersionFormat_VersionFormat_MAX = LogSink_VersionFormat_V1;
const int LogSink_VersionFormat_VersionFormat_ARRAYSIZE = LogSink_VersionFormat_VersionFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogSink_VersionFormat_descriptor();
inline const ::std::string& LogSink_VersionFormat_Name(LogSink_VersionFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogSink_VersionFormat_descriptor(), value);
}
inline bool LogSink_VersionFormat_Parse(
    const ::std::string& name, LogSink_VersionFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogSink_VersionFormat>(
    LogSink_VersionFormat_descriptor(), name, value);
}
// ===================================================================

class LogSink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogSink) */ {
 public:
  LogSink();
  virtual ~LogSink();

  LogSink(const LogSink& from);

  inline LogSink& operator=(const LogSink& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogSink& default_instance();

  static inline const LogSink* internal_default_instance() {
    return reinterpret_cast<const LogSink*>(
               &_LogSink_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(LogSink* other);
  void Swap(LogSink* other);

  // implements Message ----------------------------------------------

  inline LogSink* New() const PROTOBUF_FINAL { return New(NULL); }

  LogSink* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogSink& from);
  void MergeFrom(const LogSink& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogSink* other);
  protected:
  explicit LogSink(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LogSink_VersionFormat VersionFormat;
  static const VersionFormat VERSION_FORMAT_UNSPECIFIED =
    LogSink_VersionFormat_VERSION_FORMAT_UNSPECIFIED;
  static const VersionFormat V2 =
    LogSink_VersionFormat_V2;
  static const VersionFormat V1 =
    LogSink_VersionFormat_V1;
  static inline bool VersionFormat_IsValid(int value) {
    return LogSink_VersionFormat_IsValid(value);
  }
  static const VersionFormat VersionFormat_MIN =
    LogSink_VersionFormat_VersionFormat_MIN;
  static const VersionFormat VersionFormat_MAX =
    LogSink_VersionFormat_VersionFormat_MAX;
  static const int VersionFormat_ARRAYSIZE =
    LogSink_VersionFormat_VersionFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VersionFormat_descriptor() {
    return LogSink_VersionFormat_descriptor();
  }
  static inline const ::std::string& VersionFormat_Name(VersionFormat value) {
    return LogSink_VersionFormat_Name(value);
  }
  static inline bool VersionFormat_Parse(const ::std::string& name,
      VersionFormat* value) {
    return LogSink_VersionFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string destination = 3;
  void clear_destination();
  static const int kDestinationFieldNumber = 3;
  const ::std::string& destination() const;
  void set_destination(const ::std::string& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  ::std::string* mutable_destination();
  ::std::string* release_destination();
  void set_allocated_destination(::std::string* destination);
  ::std::string* unsafe_arena_release_destination();
  void unsafe_arena_set_allocated_destination(
      ::std::string* destination);

  // string filter = 5;
  void clear_filter();
  static const int kFilterFieldNumber = 5;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);
  ::std::string* unsafe_arena_release_filter();
  void unsafe_arena_set_allocated_filter(
      ::std::string* filter);

  // string writer_identity = 8;
  void clear_writer_identity();
  static const int kWriterIdentityFieldNumber = 8;
  const ::std::string& writer_identity() const;
  void set_writer_identity(const ::std::string& value);
  void set_writer_identity(const char* value);
  void set_writer_identity(const char* value, size_t size);
  ::std::string* mutable_writer_identity();
  ::std::string* release_writer_identity();
  void set_allocated_writer_identity(::std::string* writer_identity);
  ::std::string* unsafe_arena_release_writer_identity();
  void unsafe_arena_set_allocated_writer_identity(
      ::std::string* writer_identity);

  // .google.protobuf.Timestamp start_time = 10;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 10;
  private:
  void _slow_mutable_start_time();
  void _slow_set_allocated_start_time(
      ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** start_time);
  ::google::protobuf::Timestamp* _slow_release_start_time();
  public:
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* mutable_start_time();
  ::google::protobuf::Timestamp* release_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_start_time();
  void unsafe_arena_set_allocated_start_time(
      ::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 11;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 11;
  private:
  void _slow_mutable_end_time();
  void _slow_set_allocated_end_time(
      ::google::protobuf::Arena* message_arena, ::google::protobuf::Timestamp** end_time);
  ::google::protobuf::Timestamp* _slow_release_end_time();
  public:
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* mutable_end_time();
  ::google::protobuf::Timestamp* release_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_end_time();
  void unsafe_arena_set_allocated_end_time(
      ::google::protobuf::Timestamp* end_time);

  // .google.logging.v2.LogSink.VersionFormat output_version_format = 6;
  void clear_output_version_format();
  static const int kOutputVersionFormatFieldNumber = 6;
  ::google::logging::v2::LogSink_VersionFormat output_version_format() const;
  void set_output_version_format(::google::logging::v2::LogSink_VersionFormat value);

  // bool include_children = 9;
  void clear_include_children();
  static const int kIncludeChildrenFieldNumber = 9;
  bool include_children() const;
  void set_include_children(bool value);

  // @@protoc_insertion_point(class_scope:google.logging.v2.LogSink)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr destination_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr writer_identity_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  int output_version_format_;
  bool include_children_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListSinksRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListSinksRequest) */ {
 public:
  ListSinksRequest();
  virtual ~ListSinksRequest();

  ListSinksRequest(const ListSinksRequest& from);

  inline ListSinksRequest& operator=(const ListSinksRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSinksRequest& default_instance();

  static inline const ListSinksRequest* internal_default_instance() {
    return reinterpret_cast<const ListSinksRequest*>(
               &_ListSinksRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ListSinksRequest* other);
  void Swap(ListSinksRequest* other);

  // implements Message ----------------------------------------------

  inline ListSinksRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListSinksRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListSinksRequest& from);
  void MergeFrom(const ListSinksRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListSinksRequest* other);
  protected:
  explicit ListSinksRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);
  ::std::string* unsafe_arena_release_parent();
  void unsafe_arena_set_allocated_parent(
      ::std::string* parent);

  // string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  ::std::string* unsafe_arena_release_page_token();
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListSinksRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListSinksResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListSinksResponse) */ {
 public:
  ListSinksResponse();
  virtual ~ListSinksResponse();

  ListSinksResponse(const ListSinksResponse& from);

  inline ListSinksResponse& operator=(const ListSinksResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSinksResponse& default_instance();

  static inline const ListSinksResponse* internal_default_instance() {
    return reinterpret_cast<const ListSinksResponse*>(
               &_ListSinksResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(ListSinksResponse* other);
  void Swap(ListSinksResponse* other);

  // implements Message ----------------------------------------------

  inline ListSinksResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListSinksResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListSinksResponse& from);
  void MergeFrom(const ListSinksResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListSinksResponse* other);
  protected:
  explicit ListSinksResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.logging.v2.LogSink sinks = 1;
  int sinks_size() const;
  void clear_sinks();
  static const int kSinksFieldNumber = 1;
  const ::google::logging::v2::LogSink& sinks(int index) const;
  ::google::logging::v2::LogSink* mutable_sinks(int index);
  ::google::logging::v2::LogSink* add_sinks();
  ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogSink >*
      mutable_sinks();
  const ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogSink >&
      sinks() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  ::std::string* unsafe_arena_release_next_page_token();
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListSinksResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogSink > sinks_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSinkRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.GetSinkRequest) */ {
 public:
  GetSinkRequest();
  virtual ~GetSinkRequest();

  GetSinkRequest(const GetSinkRequest& from);

  inline GetSinkRequest& operator=(const GetSinkRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSinkRequest& default_instance();

  static inline const GetSinkRequest* internal_default_instance() {
    return reinterpret_cast<const GetSinkRequest*>(
               &_GetSinkRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(GetSinkRequest* other);
  void Swap(GetSinkRequest* other);

  // implements Message ----------------------------------------------

  inline GetSinkRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetSinkRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetSinkRequest& from);
  void MergeFrom(const GetSinkRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetSinkRequest* other);
  protected:
  explicit GetSinkRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sink_name = 1;
  void clear_sink_name();
  static const int kSinkNameFieldNumber = 1;
  const ::std::string& sink_name() const;
  void set_sink_name(const ::std::string& value);
  void set_sink_name(const char* value);
  void set_sink_name(const char* value, size_t size);
  ::std::string* mutable_sink_name();
  ::std::string* release_sink_name();
  void set_allocated_sink_name(::std::string* sink_name);
  ::std::string* unsafe_arena_release_sink_name();
  void unsafe_arena_set_allocated_sink_name(
      ::std::string* sink_name);

  // @@protoc_insertion_point(class_scope:google.logging.v2.GetSinkRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr sink_name_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateSinkRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.CreateSinkRequest) */ {
 public:
  CreateSinkRequest();
  virtual ~CreateSinkRequest();

  CreateSinkRequest(const CreateSinkRequest& from);

  inline CreateSinkRequest& operator=(const CreateSinkRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSinkRequest& default_instance();

  static inline const CreateSinkRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSinkRequest*>(
               &_CreateSinkRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(CreateSinkRequest* other);
  void Swap(CreateSinkRequest* other);

  // implements Message ----------------------------------------------

  inline CreateSinkRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateSinkRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateSinkRequest& from);
  void MergeFrom(const CreateSinkRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateSinkRequest* other);
  protected:
  explicit CreateSinkRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);
  ::std::string* unsafe_arena_release_parent();
  void unsafe_arena_set_allocated_parent(
      ::std::string* parent);

  // .google.logging.v2.LogSink sink = 2;
  bool has_sink() const;
  void clear_sink();
  static const int kSinkFieldNumber = 2;
  private:
  void _slow_mutable_sink();
  void _slow_set_allocated_sink(
      ::google::protobuf::Arena* message_arena, ::google::logging::v2::LogSink** sink);
  ::google::logging::v2::LogSink* _slow_release_sink();
  public:
  const ::google::logging::v2::LogSink& sink() const;
  ::google::logging::v2::LogSink* mutable_sink();
  ::google::logging::v2::LogSink* release_sink();
  void set_allocated_sink(::google::logging::v2::LogSink* sink);
  ::google::logging::v2::LogSink* unsafe_arena_release_sink();
  void unsafe_arena_set_allocated_sink(
      ::google::logging::v2::LogSink* sink);

  // bool unique_writer_identity = 3;
  void clear_unique_writer_identity();
  static const int kUniqueWriterIdentityFieldNumber = 3;
  bool unique_writer_identity() const;
  void set_unique_writer_identity(bool value);

  // @@protoc_insertion_point(class_scope:google.logging.v2.CreateSinkRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::logging::v2::LogSink* sink_;
  bool unique_writer_identity_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateSinkRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.UpdateSinkRequest) */ {
 public:
  UpdateSinkRequest();
  virtual ~UpdateSinkRequest();

  UpdateSinkRequest(const UpdateSinkRequest& from);

  inline UpdateSinkRequest& operator=(const UpdateSinkRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSinkRequest& default_instance();

  static inline const UpdateSinkRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSinkRequest*>(
               &_UpdateSinkRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(UpdateSinkRequest* other);
  void Swap(UpdateSinkRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateSinkRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateSinkRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateSinkRequest& from);
  void MergeFrom(const UpdateSinkRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateSinkRequest* other);
  protected:
  explicit UpdateSinkRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sink_name = 1;
  void clear_sink_name();
  static const int kSinkNameFieldNumber = 1;
  const ::std::string& sink_name() const;
  void set_sink_name(const ::std::string& value);
  void set_sink_name(const char* value);
  void set_sink_name(const char* value, size_t size);
  ::std::string* mutable_sink_name();
  ::std::string* release_sink_name();
  void set_allocated_sink_name(::std::string* sink_name);
  ::std::string* unsafe_arena_release_sink_name();
  void unsafe_arena_set_allocated_sink_name(
      ::std::string* sink_name);

  // .google.logging.v2.LogSink sink = 2;
  bool has_sink() const;
  void clear_sink();
  static const int kSinkFieldNumber = 2;
  private:
  void _slow_mutable_sink();
  void _slow_set_allocated_sink(
      ::google::protobuf::Arena* message_arena, ::google::logging::v2::LogSink** sink);
  ::google::logging::v2::LogSink* _slow_release_sink();
  public:
  const ::google::logging::v2::LogSink& sink() const;
  ::google::logging::v2::LogSink* mutable_sink();
  ::google::logging::v2::LogSink* release_sink();
  void set_allocated_sink(::google::logging::v2::LogSink* sink);
  ::google::logging::v2::LogSink* unsafe_arena_release_sink();
  void unsafe_arena_set_allocated_sink(
      ::google::logging::v2::LogSink* sink);

  // bool unique_writer_identity = 3;
  void clear_unique_writer_identity();
  static const int kUniqueWriterIdentityFieldNumber = 3;
  bool unique_writer_identity() const;
  void set_unique_writer_identity(bool value);

  // @@protoc_insertion_point(class_scope:google.logging.v2.UpdateSinkRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr sink_name_;
  ::google::logging::v2::LogSink* sink_;
  bool unique_writer_identity_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteSinkRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.DeleteSinkRequest) */ {
 public:
  DeleteSinkRequest();
  virtual ~DeleteSinkRequest();

  DeleteSinkRequest(const DeleteSinkRequest& from);

  inline DeleteSinkRequest& operator=(const DeleteSinkRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSinkRequest& default_instance();

  static inline const DeleteSinkRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSinkRequest*>(
               &_DeleteSinkRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(DeleteSinkRequest* other);
  void Swap(DeleteSinkRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteSinkRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteSinkRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteSinkRequest& from);
  void MergeFrom(const DeleteSinkRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteSinkRequest* other);
  protected:
  explicit DeleteSinkRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sink_name = 1;
  void clear_sink_name();
  static const int kSinkNameFieldNumber = 1;
  const ::std::string& sink_name() const;
  void set_sink_name(const ::std::string& value);
  void set_sink_name(const char* value);
  void set_sink_name(const char* value, size_t size);
  ::std::string* mutable_sink_name();
  ::std::string* release_sink_name();
  void set_allocated_sink_name(::std::string* sink_name);
  ::std::string* unsafe_arena_release_sink_name();
  void unsafe_arena_set_allocated_sink_name(
      ::std::string* sink_name);

  // @@protoc_insertion_point(class_scope:google.logging.v2.DeleteSinkRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr sink_name_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogExclusion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogExclusion) */ {
 public:
  LogExclusion();
  virtual ~LogExclusion();

  LogExclusion(const LogExclusion& from);

  inline LogExclusion& operator=(const LogExclusion& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogExclusion& default_instance();

  static inline const LogExclusion* internal_default_instance() {
    return reinterpret_cast<const LogExclusion*>(
               &_LogExclusion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(LogExclusion* other);
  void Swap(LogExclusion* other);

  // implements Message ----------------------------------------------

  inline LogExclusion* New() const PROTOBUF_FINAL { return New(NULL); }

  LogExclusion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogExclusion& from);
  void MergeFrom(const LogExclusion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogExclusion* other);
  protected:
  explicit LogExclusion(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);
  ::std::string* unsafe_arena_release_description();
  void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // string filter = 3;
  void clear_filter();
  static const int kFilterFieldNumber = 3;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);
  ::std::string* unsafe_arena_release_filter();
  void unsafe_arena_set_allocated_filter(
      ::std::string* filter);

  // bool disabled = 4;
  void clear_disabled();
  static const int kDisabledFieldNumber = 4;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.logging.v2.LogExclusion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  bool disabled_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListExclusionsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListExclusionsRequest) */ {
 public:
  ListExclusionsRequest();
  virtual ~ListExclusionsRequest();

  ListExclusionsRequest(const ListExclusionsRequest& from);

  inline ListExclusionsRequest& operator=(const ListExclusionsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListExclusionsRequest& default_instance();

  static inline const ListExclusionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListExclusionsRequest*>(
               &_ListExclusionsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(ListExclusionsRequest* other);
  void Swap(ListExclusionsRequest* other);

  // implements Message ----------------------------------------------

  inline ListExclusionsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListExclusionsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListExclusionsRequest& from);
  void MergeFrom(const ListExclusionsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListExclusionsRequest* other);
  protected:
  explicit ListExclusionsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);
  ::std::string* unsafe_arena_release_parent();
  void unsafe_arena_set_allocated_parent(
      ::std::string* parent);

  // string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  ::std::string* unsafe_arena_release_page_token();
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListExclusionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListExclusionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListExclusionsResponse) */ {
 public:
  ListExclusionsResponse();
  virtual ~ListExclusionsResponse();

  ListExclusionsResponse(const ListExclusionsResponse& from);

  inline ListExclusionsResponse& operator=(const ListExclusionsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListExclusionsResponse& default_instance();

  static inline const ListExclusionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListExclusionsResponse*>(
               &_ListExclusionsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(ListExclusionsResponse* other);
  void Swap(ListExclusionsResponse* other);

  // implements Message ----------------------------------------------

  inline ListExclusionsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListExclusionsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListExclusionsResponse& from);
  void MergeFrom(const ListExclusionsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListExclusionsResponse* other);
  protected:
  explicit ListExclusionsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.logging.v2.LogExclusion exclusions = 1;
  int exclusions_size() const;
  void clear_exclusions();
  static const int kExclusionsFieldNumber = 1;
  const ::google::logging::v2::LogExclusion& exclusions(int index) const;
  ::google::logging::v2::LogExclusion* mutable_exclusions(int index);
  ::google::logging::v2::LogExclusion* add_exclusions();
  ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogExclusion >*
      mutable_exclusions();
  const ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogExclusion >&
      exclusions() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  ::std::string* unsafe_arena_release_next_page_token();
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListExclusionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogExclusion > exclusions_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetExclusionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.GetExclusionRequest) */ {
 public:
  GetExclusionRequest();
  virtual ~GetExclusionRequest();

  GetExclusionRequest(const GetExclusionRequest& from);

  inline GetExclusionRequest& operator=(const GetExclusionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetExclusionRequest& default_instance();

  static inline const GetExclusionRequest* internal_default_instance() {
    return reinterpret_cast<const GetExclusionRequest*>(
               &_GetExclusionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(GetExclusionRequest* other);
  void Swap(GetExclusionRequest* other);

  // implements Message ----------------------------------------------

  inline GetExclusionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetExclusionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetExclusionRequest& from);
  void MergeFrom(const GetExclusionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetExclusionRequest* other);
  protected:
  explicit GetExclusionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.logging.v2.GetExclusionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateExclusionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.CreateExclusionRequest) */ {
 public:
  CreateExclusionRequest();
  virtual ~CreateExclusionRequest();

  CreateExclusionRequest(const CreateExclusionRequest& from);

  inline CreateExclusionRequest& operator=(const CreateExclusionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateExclusionRequest& default_instance();

  static inline const CreateExclusionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateExclusionRequest*>(
               &_CreateExclusionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(CreateExclusionRequest* other);
  void Swap(CreateExclusionRequest* other);

  // implements Message ----------------------------------------------

  inline CreateExclusionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateExclusionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateExclusionRequest& from);
  void MergeFrom(const CreateExclusionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateExclusionRequest* other);
  protected:
  explicit CreateExclusionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);
  ::std::string* unsafe_arena_release_parent();
  void unsafe_arena_set_allocated_parent(
      ::std::string* parent);

  // .google.logging.v2.LogExclusion exclusion = 2;
  bool has_exclusion() const;
  void clear_exclusion();
  static const int kExclusionFieldNumber = 2;
  private:
  void _slow_mutable_exclusion();
  void _slow_set_allocated_exclusion(
      ::google::protobuf::Arena* message_arena, ::google::logging::v2::LogExclusion** exclusion);
  ::google::logging::v2::LogExclusion* _slow_release_exclusion();
  public:
  const ::google::logging::v2::LogExclusion& exclusion() const;
  ::google::logging::v2::LogExclusion* mutable_exclusion();
  ::google::logging::v2::LogExclusion* release_exclusion();
  void set_allocated_exclusion(::google::logging::v2::LogExclusion* exclusion);
  ::google::logging::v2::LogExclusion* unsafe_arena_release_exclusion();
  void unsafe_arena_set_allocated_exclusion(
      ::google::logging::v2::LogExclusion* exclusion);

  // @@protoc_insertion_point(class_scope:google.logging.v2.CreateExclusionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::logging::v2::LogExclusion* exclusion_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateExclusionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.UpdateExclusionRequest) */ {
 public:
  UpdateExclusionRequest();
  virtual ~UpdateExclusionRequest();

  UpdateExclusionRequest(const UpdateExclusionRequest& from);

  inline UpdateExclusionRequest& operator=(const UpdateExclusionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateExclusionRequest& default_instance();

  static inline const UpdateExclusionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateExclusionRequest*>(
               &_UpdateExclusionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(UpdateExclusionRequest* other);
  void Swap(UpdateExclusionRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateExclusionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateExclusionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateExclusionRequest& from);
  void MergeFrom(const UpdateExclusionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateExclusionRequest* other);
  protected:
  explicit UpdateExclusionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .google.logging.v2.LogExclusion exclusion = 2;
  bool has_exclusion() const;
  void clear_exclusion();
  static const int kExclusionFieldNumber = 2;
  private:
  void _slow_mutable_exclusion();
  void _slow_set_allocated_exclusion(
      ::google::protobuf::Arena* message_arena, ::google::logging::v2::LogExclusion** exclusion);
  ::google::logging::v2::LogExclusion* _slow_release_exclusion();
  public:
  const ::google::logging::v2::LogExclusion& exclusion() const;
  ::google::logging::v2::LogExclusion* mutable_exclusion();
  ::google::logging::v2::LogExclusion* release_exclusion();
  void set_allocated_exclusion(::google::logging::v2::LogExclusion* exclusion);
  ::google::logging::v2::LogExclusion* unsafe_arena_release_exclusion();
  void unsafe_arena_set_allocated_exclusion(
      ::google::logging::v2::LogExclusion* exclusion);

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 3;
  private:
  void _slow_mutable_update_mask();
  ::google::protobuf::FieldMask* _slow_release_update_mask();
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* mutable_update_mask();
  ::google::protobuf::FieldMask* release_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);
  ::google::protobuf::FieldMask* unsafe_arena_release_update_mask();
  void unsafe_arena_set_allocated_update_mask(
      ::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.logging.v2.UpdateExclusionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::logging::v2::LogExclusion* exclusion_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteExclusionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.DeleteExclusionRequest) */ {
 public:
  DeleteExclusionRequest();
  virtual ~DeleteExclusionRequest();

  DeleteExclusionRequest(const DeleteExclusionRequest& from);

  inline DeleteExclusionRequest& operator=(const DeleteExclusionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteExclusionRequest& default_instance();

  static inline const DeleteExclusionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteExclusionRequest*>(
               &_DeleteExclusionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(DeleteExclusionRequest* other);
  void Swap(DeleteExclusionRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteExclusionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteExclusionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteExclusionRequest& from);
  void MergeFrom(const DeleteExclusionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteExclusionRequest* other);
  protected:
  explicit DeleteExclusionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.logging.v2.DeleteExclusionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_google_2flogging_2fv2_2flogging_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LogSink

// string name = 1;
inline void LogSink::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogSink::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.name)
  return name_.Get();
}
inline void LogSink::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.name)
}
inline void LogSink::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.name)
}
inline void LogSink::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.name)
}
inline ::std::string* LogSink::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogSink::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogSink::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogSink.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogSink::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.name)
}
inline void LogSink::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.name)
}

// string destination = 3;
inline void LogSink::clear_destination() {
  destination_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogSink::destination() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.destination)
  return destination_.Get();
}
inline void LogSink::set_destination(const ::std::string& value) {
  
  destination_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.destination)
}
inline void LogSink::set_destination(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destination_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.destination)
}
inline void LogSink::set_destination(const char* value,
    size_t size) {
  
  destination_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.destination)
}
inline ::std::string* LogSink::mutable_destination() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.destination)
  return destination_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogSink::release_destination() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.destination)
  
  return destination_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogSink::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogSink.destination)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return destination_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogSink::set_allocated_destination(::std::string* destination) {
  if (destination != NULL) {
    
  } else {
    
  }
  destination_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.destination)
}
inline void LogSink::unsafe_arena_set_allocated_destination(
    ::std::string* destination) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (destination != NULL) {
    
  } else {
    
  }
  destination_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      destination, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.destination)
}

// string filter = 5;
inline void LogSink::clear_filter() {
  filter_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogSink::filter() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.filter)
  return filter_.Get();
}
inline void LogSink::set_filter(const ::std::string& value) {
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.filter)
}
inline void LogSink::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.filter)
}
inline void LogSink::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.filter)
}
inline ::std::string* LogSink::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.filter)
  return filter_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogSink::release_filter() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.filter)
  
  return filter_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogSink::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogSink.filter)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return filter_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogSink::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.filter)
}
inline void LogSink::unsafe_arena_set_allocated_filter(
    ::std::string* filter) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      filter, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.filter)
}

// .google.logging.v2.LogSink.VersionFormat output_version_format = 6;
inline void LogSink::clear_output_version_format() {
  output_version_format_ = 0;
}
inline ::google::logging::v2::LogSink_VersionFormat LogSink::output_version_format() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.output_version_format)
  return static_cast< ::google::logging::v2::LogSink_VersionFormat >(output_version_format_);
}
inline void LogSink::set_output_version_format(::google::logging::v2::LogSink_VersionFormat value) {
  
  output_version_format_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.output_version_format)
}

// string writer_identity = 8;
inline void LogSink::clear_writer_identity() {
  writer_identity_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogSink::writer_identity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.writer_identity)
  return writer_identity_.Get();
}
inline void LogSink::set_writer_identity(const ::std::string& value) {
  
  writer_identity_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.writer_identity)
}
inline void LogSink::set_writer_identity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  writer_identity_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.writer_identity)
}
inline void LogSink::set_writer_identity(const char* value,
    size_t size) {
  
  writer_identity_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.writer_identity)
}
inline ::std::string* LogSink::mutable_writer_identity() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.writer_identity)
  return writer_identity_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogSink::release_writer_identity() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.writer_identity)
  
  return writer_identity_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogSink::unsafe_arena_release_writer_identity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogSink.writer_identity)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return writer_identity_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogSink::set_allocated_writer_identity(::std::string* writer_identity) {
  if (writer_identity != NULL) {
    
  } else {
    
  }
  writer_identity_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), writer_identity,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.writer_identity)
}
inline void LogSink::unsafe_arena_set_allocated_writer_identity(
    ::std::string* writer_identity) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (writer_identity != NULL) {
    
  } else {
    
  }
  writer_identity_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      writer_identity, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.writer_identity)
}

// bool include_children = 9;
inline void LogSink::clear_include_children() {
  include_children_ = false;
}
inline bool LogSink::include_children() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.include_children)
  return include_children_;
}
inline void LogSink::set_include_children(bool value) {
  
  include_children_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.include_children)
}

// .google.protobuf.Timestamp start_time = 10;
inline bool LogSink::has_start_time() const {
  return this != internal_default_instance() && start_time_ != NULL;
}
inline void LogSink::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) delete start_time_;
  start_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& LogSink::start_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.start_time)
  return start_time_ != NULL ? *start_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* LogSink::mutable_start_time() {
  
  if (start_time_ == NULL) {
    _slow_mutable_start_time();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.start_time)
  return start_time_;
}
inline ::google::protobuf::Timestamp* LogSink::release_start_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.start_time)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_start_time();
  } else {
    ::google::protobuf::Timestamp* temp = start_time_;
    start_time_ = NULL;
    return temp;
  }
}
inline  void LogSink::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_time_;
  }
  if (start_time != NULL) {
    _slow_set_allocated_start_time(message_arena, &start_time);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.start_time)
}

// .google.protobuf.Timestamp end_time = 11;
inline bool LogSink::has_end_time() const {
  return this != internal_default_instance() && end_time_ != NULL;
}
inline void LogSink::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) delete end_time_;
  end_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& LogSink::end_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.end_time)
  return end_time_ != NULL ? *end_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* LogSink::mutable_end_time() {
  
  if (end_time_ == NULL) {
    _slow_mutable_end_time();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.end_time)
  return end_time_;
}
inline ::google::protobuf::Timestamp* LogSink::release_end_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.end_time)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_end_time();
  } else {
    ::google::protobuf::Timestamp* temp = end_time_;
    end_time_ = NULL;
    return temp;
  }
}
inline  void LogSink::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete end_time_;
  }
  if (end_time != NULL) {
    _slow_set_allocated_end_time(message_arena, &end_time);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.end_time)
}

// -------------------------------------------------------------------

// ListSinksRequest

// string parent = 1;
inline void ListSinksRequest::clear_parent() {
  parent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSinksRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksRequest.parent)
  return parent_.Get();
}
inline void ListSinksRequest::set_parent(const ::std::string& value) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksRequest.parent)
}
inline void ListSinksRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListSinksRequest.parent)
}
inline void ListSinksRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListSinksRequest.parent)
}
inline ::std::string* ListSinksRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksRequest.parent)
  return parent_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSinksRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListSinksRequest.parent)
  
  return parent_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSinksRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListSinksRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return parent_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSinksRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListSinksRequest.parent)
}
inline void ListSinksRequest::unsafe_arena_set_allocated_parent(
    ::std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListSinksRequest.parent)
}

// string page_token = 2;
inline void ListSinksRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSinksRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksRequest.page_token)
  return page_token_.Get();
}
inline void ListSinksRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksRequest.page_token)
}
inline void ListSinksRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListSinksRequest.page_token)
}
inline void ListSinksRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListSinksRequest.page_token)
}
inline ::std::string* ListSinksRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSinksRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListSinksRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSinksRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListSinksRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSinksRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListSinksRequest.page_token)
}
inline void ListSinksRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListSinksRequest.page_token)
}

// int32 page_size = 3;
inline void ListSinksRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListSinksRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksRequest.page_size)
  return page_size_;
}
inline void ListSinksRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksRequest.page_size)
}

// -------------------------------------------------------------------

// ListSinksResponse

// repeated .google.logging.v2.LogSink sinks = 1;
inline int ListSinksResponse::sinks_size() const {
  return sinks_.size();
}
inline void ListSinksResponse::clear_sinks() {
  sinks_.Clear();
}
inline const ::google::logging::v2::LogSink& ListSinksResponse::sinks(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksResponse.sinks)
  return sinks_.Get(index);
}
inline ::google::logging::v2::LogSink* ListSinksResponse::mutable_sinks(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksResponse.sinks)
  return sinks_.Mutable(index);
}
inline ::google::logging::v2::LogSink* ListSinksResponse::add_sinks() {
  // @@protoc_insertion_point(field_add:google.logging.v2.ListSinksResponse.sinks)
  return sinks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogSink >*
ListSinksResponse::mutable_sinks() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListSinksResponse.sinks)
  return &sinks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogSink >&
ListSinksResponse::sinks() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListSinksResponse.sinks)
  return sinks_;
}

// string next_page_token = 2;
inline void ListSinksResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSinksResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListSinksResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksResponse.next_page_token)
}
inline void ListSinksResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListSinksResponse.next_page_token)
}
inline void ListSinksResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListSinksResponse.next_page_token)
}
inline ::std::string* ListSinksResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSinksResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListSinksResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSinksResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListSinksResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSinksResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListSinksResponse.next_page_token)
}
inline void ListSinksResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListSinksResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetSinkRequest

// string sink_name = 1;
inline void GetSinkRequest::clear_sink_name() {
  sink_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetSinkRequest::sink_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.GetSinkRequest.sink_name)
  return sink_name_.Get();
}
inline void GetSinkRequest::set_sink_name(const ::std::string& value) {
  
  sink_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.GetSinkRequest.sink_name)
}
inline void GetSinkRequest::set_sink_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sink_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.GetSinkRequest.sink_name)
}
inline void GetSinkRequest::set_sink_name(const char* value,
    size_t size) {
  
  sink_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.GetSinkRequest.sink_name)
}
inline ::std::string* GetSinkRequest::mutable_sink_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.GetSinkRequest.sink_name)
  return sink_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetSinkRequest::release_sink_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.GetSinkRequest.sink_name)
  
  return sink_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetSinkRequest::unsafe_arena_release_sink_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.GetSinkRequest.sink_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sink_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetSinkRequest::set_allocated_sink_name(::std::string* sink_name) {
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sink_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.GetSinkRequest.sink_name)
}
inline void GetSinkRequest::unsafe_arena_set_allocated_sink_name(
    ::std::string* sink_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sink_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.GetSinkRequest.sink_name)
}

// -------------------------------------------------------------------

// CreateSinkRequest

// string parent = 1;
inline void CreateSinkRequest::clear_parent() {
  parent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateSinkRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateSinkRequest.parent)
  return parent_.Get();
}
inline void CreateSinkRequest::set_parent(const ::std::string& value) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.CreateSinkRequest.parent)
}
inline void CreateSinkRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.CreateSinkRequest.parent)
}
inline void CreateSinkRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.CreateSinkRequest.parent)
}
inline ::std::string* CreateSinkRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateSinkRequest.parent)
  return parent_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateSinkRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateSinkRequest.parent)
  
  return parent_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateSinkRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.CreateSinkRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return parent_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateSinkRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateSinkRequest.parent)
}
inline void CreateSinkRequest::unsafe_arena_set_allocated_parent(
    ::std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.CreateSinkRequest.parent)
}

// .google.logging.v2.LogSink sink = 2;
inline bool CreateSinkRequest::has_sink() const {
  return this != internal_default_instance() && sink_ != NULL;
}
inline void CreateSinkRequest::clear_sink() {
  if (GetArenaNoVirtual() == NULL && sink_ != NULL) delete sink_;
  sink_ = NULL;
}
inline const ::google::logging::v2::LogSink& CreateSinkRequest::sink() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateSinkRequest.sink)
  return sink_ != NULL ? *sink_
                         : *::google::logging::v2::LogSink::internal_default_instance();
}
inline ::google::logging::v2::LogSink* CreateSinkRequest::mutable_sink() {
  
  if (sink_ == NULL) {
    _slow_mutable_sink();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateSinkRequest.sink)
  return sink_;
}
inline ::google::logging::v2::LogSink* CreateSinkRequest::release_sink() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateSinkRequest.sink)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sink();
  } else {
    ::google::logging::v2::LogSink* temp = sink_;
    sink_ = NULL;
    return temp;
  }
}
inline  void CreateSinkRequest::set_allocated_sink(::google::logging::v2::LogSink* sink) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sink_;
  }
  if (sink != NULL) {
    _slow_set_allocated_sink(message_arena, &sink);
  }
  sink_ = sink;
  if (sink) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateSinkRequest.sink)
}

// bool unique_writer_identity = 3;
inline void CreateSinkRequest::clear_unique_writer_identity() {
  unique_writer_identity_ = false;
}
inline bool CreateSinkRequest::unique_writer_identity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateSinkRequest.unique_writer_identity)
  return unique_writer_identity_;
}
inline void CreateSinkRequest::set_unique_writer_identity(bool value) {
  
  unique_writer_identity_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.CreateSinkRequest.unique_writer_identity)
}

// -------------------------------------------------------------------

// UpdateSinkRequest

// string sink_name = 1;
inline void UpdateSinkRequest::clear_sink_name() {
  sink_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& UpdateSinkRequest::sink_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.sink_name)
  return sink_name_.Get();
}
inline void UpdateSinkRequest::set_sink_name(const ::std::string& value) {
  
  sink_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.UpdateSinkRequest.sink_name)
}
inline void UpdateSinkRequest::set_sink_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sink_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.UpdateSinkRequest.sink_name)
}
inline void UpdateSinkRequest::set_sink_name(const char* value,
    size_t size) {
  
  sink_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.UpdateSinkRequest.sink_name)
}
inline ::std::string* UpdateSinkRequest::mutable_sink_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateSinkRequest.sink_name)
  return sink_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UpdateSinkRequest::release_sink_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateSinkRequest.sink_name)
  
  return sink_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UpdateSinkRequest::unsafe_arena_release_sink_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.UpdateSinkRequest.sink_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sink_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UpdateSinkRequest::set_allocated_sink_name(::std::string* sink_name) {
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sink_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateSinkRequest.sink_name)
}
inline void UpdateSinkRequest::unsafe_arena_set_allocated_sink_name(
    ::std::string* sink_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sink_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.UpdateSinkRequest.sink_name)
}

// .google.logging.v2.LogSink sink = 2;
inline bool UpdateSinkRequest::has_sink() const {
  return this != internal_default_instance() && sink_ != NULL;
}
inline void UpdateSinkRequest::clear_sink() {
  if (GetArenaNoVirtual() == NULL && sink_ != NULL) delete sink_;
  sink_ = NULL;
}
inline const ::google::logging::v2::LogSink& UpdateSinkRequest::sink() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.sink)
  return sink_ != NULL ? *sink_
                         : *::google::logging::v2::LogSink::internal_default_instance();
}
inline ::google::logging::v2::LogSink* UpdateSinkRequest::mutable_sink() {
  
  if (sink_ == NULL) {
    _slow_mutable_sink();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateSinkRequest.sink)
  return sink_;
}
inline ::google::logging::v2::LogSink* UpdateSinkRequest::release_sink() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateSinkRequest.sink)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sink();
  } else {
    ::google::logging::v2::LogSink* temp = sink_;
    sink_ = NULL;
    return temp;
  }
}
inline  void UpdateSinkRequest::set_allocated_sink(::google::logging::v2::LogSink* sink) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sink_;
  }
  if (sink != NULL) {
    _slow_set_allocated_sink(message_arena, &sink);
  }
  sink_ = sink;
  if (sink) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateSinkRequest.sink)
}

// bool unique_writer_identity = 3;
inline void UpdateSinkRequest::clear_unique_writer_identity() {
  unique_writer_identity_ = false;
}
inline bool UpdateSinkRequest::unique_writer_identity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.unique_writer_identity)
  return unique_writer_identity_;
}
inline void UpdateSinkRequest::set_unique_writer_identity(bool value) {
  
  unique_writer_identity_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.UpdateSinkRequest.unique_writer_identity)
}

// -------------------------------------------------------------------

// DeleteSinkRequest

// string sink_name = 1;
inline void DeleteSinkRequest::clear_sink_name() {
  sink_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteSinkRequest::sink_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.DeleteSinkRequest.sink_name)
  return sink_name_.Get();
}
inline void DeleteSinkRequest::set_sink_name(const ::std::string& value) {
  
  sink_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.DeleteSinkRequest.sink_name)
}
inline void DeleteSinkRequest::set_sink_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sink_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.DeleteSinkRequest.sink_name)
}
inline void DeleteSinkRequest::set_sink_name(const char* value,
    size_t size) {
  
  sink_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.DeleteSinkRequest.sink_name)
}
inline ::std::string* DeleteSinkRequest::mutable_sink_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.DeleteSinkRequest.sink_name)
  return sink_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteSinkRequest::release_sink_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.DeleteSinkRequest.sink_name)
  
  return sink_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteSinkRequest::unsafe_arena_release_sink_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.DeleteSinkRequest.sink_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sink_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteSinkRequest::set_allocated_sink_name(::std::string* sink_name) {
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sink_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.DeleteSinkRequest.sink_name)
}
inline void DeleteSinkRequest::unsafe_arena_set_allocated_sink_name(
    ::std::string* sink_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sink_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.DeleteSinkRequest.sink_name)
}

// -------------------------------------------------------------------

// LogExclusion

// string name = 1;
inline void LogExclusion::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogExclusion::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogExclusion.name)
  return name_.Get();
}
inline void LogExclusion::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogExclusion.name)
}
inline void LogExclusion::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogExclusion.name)
}
inline void LogExclusion::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogExclusion.name)
}
inline ::std::string* LogExclusion::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogExclusion.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogExclusion::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogExclusion.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogExclusion::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogExclusion.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogExclusion::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogExclusion.name)
}
inline void LogExclusion::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogExclusion.name)
}

// string description = 2;
inline void LogExclusion::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogExclusion::description() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogExclusion.description)
  return description_.Get();
}
inline void LogExclusion::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogExclusion.description)
}
inline void LogExclusion::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogExclusion.description)
}
inline void LogExclusion::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogExclusion.description)
}
inline ::std::string* LogExclusion::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogExclusion.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogExclusion::release_description() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogExclusion.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogExclusion::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogExclusion.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogExclusion::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogExclusion.description)
}
inline void LogExclusion::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogExclusion.description)
}

// string filter = 3;
inline void LogExclusion::clear_filter() {
  filter_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LogExclusion::filter() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogExclusion.filter)
  return filter_.Get();
}
inline void LogExclusion::set_filter(const ::std::string& value) {
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.LogExclusion.filter)
}
inline void LogExclusion::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogExclusion.filter)
}
inline void LogExclusion::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogExclusion.filter)
}
inline ::std::string* LogExclusion::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogExclusion.filter)
  return filter_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogExclusion::release_filter() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogExclusion.filter)
  
  return filter_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LogExclusion::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogExclusion.filter)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return filter_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogExclusion::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogExclusion.filter)
}
inline void LogExclusion::unsafe_arena_set_allocated_filter(
    ::std::string* filter) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      filter, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogExclusion.filter)
}

// bool disabled = 4;
inline void LogExclusion::clear_disabled() {
  disabled_ = false;
}
inline bool LogExclusion::disabled() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogExclusion.disabled)
  return disabled_;
}
inline void LogExclusion::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.LogExclusion.disabled)
}

// -------------------------------------------------------------------

// ListExclusionsRequest

// string parent = 1;
inline void ListExclusionsRequest::clear_parent() {
  parent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListExclusionsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListExclusionsRequest.parent)
  return parent_.Get();
}
inline void ListExclusionsRequest::set_parent(const ::std::string& value) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.ListExclusionsRequest.parent)
}
inline void ListExclusionsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListExclusionsRequest.parent)
}
inline void ListExclusionsRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListExclusionsRequest.parent)
}
inline ::std::string* ListExclusionsRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListExclusionsRequest.parent)
  return parent_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListExclusionsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListExclusionsRequest.parent)
  
  return parent_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListExclusionsRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListExclusionsRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return parent_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListExclusionsRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListExclusionsRequest.parent)
}
inline void ListExclusionsRequest::unsafe_arena_set_allocated_parent(
    ::std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListExclusionsRequest.parent)
}

// string page_token = 2;
inline void ListExclusionsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListExclusionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListExclusionsRequest.page_token)
  return page_token_.Get();
}
inline void ListExclusionsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.ListExclusionsRequest.page_token)
}
inline void ListExclusionsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListExclusionsRequest.page_token)
}
inline void ListExclusionsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListExclusionsRequest.page_token)
}
inline ::std::string* ListExclusionsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListExclusionsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListExclusionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListExclusionsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListExclusionsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListExclusionsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListExclusionsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListExclusionsRequest.page_token)
}
inline void ListExclusionsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListExclusionsRequest.page_token)
}

// int32 page_size = 3;
inline void ListExclusionsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListExclusionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListExclusionsRequest.page_size)
  return page_size_;
}
inline void ListExclusionsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.logging.v2.ListExclusionsRequest.page_size)
}

// -------------------------------------------------------------------

// ListExclusionsResponse

// repeated .google.logging.v2.LogExclusion exclusions = 1;
inline int ListExclusionsResponse::exclusions_size() const {
  return exclusions_.size();
}
inline void ListExclusionsResponse::clear_exclusions() {
  exclusions_.Clear();
}
inline const ::google::logging::v2::LogExclusion& ListExclusionsResponse::exclusions(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListExclusionsResponse.exclusions)
  return exclusions_.Get(index);
}
inline ::google::logging::v2::LogExclusion* ListExclusionsResponse::mutable_exclusions(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListExclusionsResponse.exclusions)
  return exclusions_.Mutable(index);
}
inline ::google::logging::v2::LogExclusion* ListExclusionsResponse::add_exclusions() {
  // @@protoc_insertion_point(field_add:google.logging.v2.ListExclusionsResponse.exclusions)
  return exclusions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogExclusion >*
ListExclusionsResponse::mutable_exclusions() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListExclusionsResponse.exclusions)
  return &exclusions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::logging::v2::LogExclusion >&
ListExclusionsResponse::exclusions() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListExclusionsResponse.exclusions)
  return exclusions_;
}

// string next_page_token = 2;
inline void ListExclusionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListExclusionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListExclusionsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListExclusionsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.ListExclusionsResponse.next_page_token)
}
inline void ListExclusionsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListExclusionsResponse.next_page_token)
}
inline void ListExclusionsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListExclusionsResponse.next_page_token)
}
inline ::std::string* ListExclusionsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListExclusionsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListExclusionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListExclusionsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListExclusionsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListExclusionsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListExclusionsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListExclusionsResponse.next_page_token)
}
inline void ListExclusionsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListExclusionsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetExclusionRequest

// string name = 1;
inline void GetExclusionRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetExclusionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.GetExclusionRequest.name)
  return name_.Get();
}
inline void GetExclusionRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.GetExclusionRequest.name)
}
inline void GetExclusionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.GetExclusionRequest.name)
}
inline void GetExclusionRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.GetExclusionRequest.name)
}
inline ::std::string* GetExclusionRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.GetExclusionRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetExclusionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.GetExclusionRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetExclusionRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.GetExclusionRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetExclusionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.GetExclusionRequest.name)
}
inline void GetExclusionRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.GetExclusionRequest.name)
}

// -------------------------------------------------------------------

// CreateExclusionRequest

// string parent = 1;
inline void CreateExclusionRequest::clear_parent() {
  parent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateExclusionRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateExclusionRequest.parent)
  return parent_.Get();
}
inline void CreateExclusionRequest::set_parent(const ::std::string& value) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.CreateExclusionRequest.parent)
}
inline void CreateExclusionRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.CreateExclusionRequest.parent)
}
inline void CreateExclusionRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.CreateExclusionRequest.parent)
}
inline ::std::string* CreateExclusionRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateExclusionRequest.parent)
  return parent_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateExclusionRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateExclusionRequest.parent)
  
  return parent_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateExclusionRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.CreateExclusionRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return parent_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateExclusionRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateExclusionRequest.parent)
}
inline void CreateExclusionRequest::unsafe_arena_set_allocated_parent(
    ::std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.CreateExclusionRequest.parent)
}

// .google.logging.v2.LogExclusion exclusion = 2;
inline bool CreateExclusionRequest::has_exclusion() const {
  return this != internal_default_instance() && exclusion_ != NULL;
}
inline void CreateExclusionRequest::clear_exclusion() {
  if (GetArenaNoVirtual() == NULL && exclusion_ != NULL) delete exclusion_;
  exclusion_ = NULL;
}
inline const ::google::logging::v2::LogExclusion& CreateExclusionRequest::exclusion() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateExclusionRequest.exclusion)
  return exclusion_ != NULL ? *exclusion_
                         : *::google::logging::v2::LogExclusion::internal_default_instance();
}
inline ::google::logging::v2::LogExclusion* CreateExclusionRequest::mutable_exclusion() {
  
  if (exclusion_ == NULL) {
    _slow_mutable_exclusion();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateExclusionRequest.exclusion)
  return exclusion_;
}
inline ::google::logging::v2::LogExclusion* CreateExclusionRequest::release_exclusion() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateExclusionRequest.exclusion)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_exclusion();
  } else {
    ::google::logging::v2::LogExclusion* temp = exclusion_;
    exclusion_ = NULL;
    return temp;
  }
}
inline  void CreateExclusionRequest::set_allocated_exclusion(::google::logging::v2::LogExclusion* exclusion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exclusion_;
  }
  if (exclusion != NULL) {
    _slow_set_allocated_exclusion(message_arena, &exclusion);
  }
  exclusion_ = exclusion;
  if (exclusion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateExclusionRequest.exclusion)
}

// -------------------------------------------------------------------

// UpdateExclusionRequest

// string name = 1;
inline void UpdateExclusionRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& UpdateExclusionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateExclusionRequest.name)
  return name_.Get();
}
inline void UpdateExclusionRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.UpdateExclusionRequest.name)
}
inline void UpdateExclusionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.UpdateExclusionRequest.name)
}
inline void UpdateExclusionRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.UpdateExclusionRequest.name)
}
inline ::std::string* UpdateExclusionRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateExclusionRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UpdateExclusionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateExclusionRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UpdateExclusionRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.UpdateExclusionRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UpdateExclusionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateExclusionRequest.name)
}
inline void UpdateExclusionRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.UpdateExclusionRequest.name)
}

// .google.logging.v2.LogExclusion exclusion = 2;
inline bool UpdateExclusionRequest::has_exclusion() const {
  return this != internal_default_instance() && exclusion_ != NULL;
}
inline void UpdateExclusionRequest::clear_exclusion() {
  if (GetArenaNoVirtual() == NULL && exclusion_ != NULL) delete exclusion_;
  exclusion_ = NULL;
}
inline const ::google::logging::v2::LogExclusion& UpdateExclusionRequest::exclusion() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateExclusionRequest.exclusion)
  return exclusion_ != NULL ? *exclusion_
                         : *::google::logging::v2::LogExclusion::internal_default_instance();
}
inline ::google::logging::v2::LogExclusion* UpdateExclusionRequest::mutable_exclusion() {
  
  if (exclusion_ == NULL) {
    _slow_mutable_exclusion();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateExclusionRequest.exclusion)
  return exclusion_;
}
inline ::google::logging::v2::LogExclusion* UpdateExclusionRequest::release_exclusion() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateExclusionRequest.exclusion)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_exclusion();
  } else {
    ::google::logging::v2::LogExclusion* temp = exclusion_;
    exclusion_ = NULL;
    return temp;
  }
}
inline  void UpdateExclusionRequest::set_allocated_exclusion(::google::logging::v2::LogExclusion* exclusion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exclusion_;
  }
  if (exclusion != NULL) {
    _slow_set_allocated_exclusion(message_arena, &exclusion);
  }
  exclusion_ = exclusion;
  if (exclusion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateExclusionRequest.exclusion)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateExclusionRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline void UpdateExclusionRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}
inline const ::google::protobuf::FieldMask& UpdateExclusionRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateExclusionRequest.update_mask)
  return update_mask_ != NULL ? *update_mask_
                         : *::google::protobuf::FieldMask::internal_default_instance();
}
inline ::google::protobuf::FieldMask* UpdateExclusionRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateExclusionRequest.update_mask)
  return update_mask_;
}
inline ::google::protobuf::FieldMask* UpdateExclusionRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateExclusionRequest.update_mask)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_update_mask();
  } else {
    ::google::protobuf::FieldMask* temp = update_mask_;
    update_mask_ = NULL;
    return temp;
  }
}
inline  void UpdateExclusionRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_mask_;
  }
  if (update_mask != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(update_mask);
    }
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateExclusionRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteExclusionRequest

// string name = 1;
inline void DeleteExclusionRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteExclusionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.DeleteExclusionRequest.name)
  return name_.Get();
}
inline void DeleteExclusionRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.logging.v2.DeleteExclusionRequest.name)
}
inline void DeleteExclusionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.DeleteExclusionRequest.name)
}
inline void DeleteExclusionRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.DeleteExclusionRequest.name)
}
inline ::std::string* DeleteExclusionRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.logging.v2.DeleteExclusionRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteExclusionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.DeleteExclusionRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteExclusionRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.DeleteExclusionRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteExclusionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.DeleteExclusionRequest.name)
}
inline void DeleteExclusionRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.DeleteExclusionRequest.name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v2
}  // namespace logging
}  // namespace google

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::logging::v2::LogSink_VersionFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::logging::v2::LogSink_VersionFormat>() {
  return ::google::logging::v2::LogSink_VersionFormat_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2flogging_2fv2_2flogging_5fconfig_2eproto__INCLUDED
