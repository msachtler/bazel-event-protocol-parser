// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/privacy/dlp/v2beta1/dlp.proto

#include "google/privacy/dlp/v2beta1/dlp.pb.h"
#include "google/privacy/dlp/v2beta1/dlp.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace google {
namespace privacy {
namespace dlp {
namespace v2beta1 {

static const char* DlpService_method_names[] = {
  "/google.privacy.dlp.v2beta1.DlpService/InspectContent",
  "/google.privacy.dlp.v2beta1.DlpService/RedactContent",
  "/google.privacy.dlp.v2beta1.DlpService/CreateInspectOperation",
  "/google.privacy.dlp.v2beta1.DlpService/ListInspectFindings",
  "/google.privacy.dlp.v2beta1.DlpService/ListInfoTypes",
  "/google.privacy.dlp.v2beta1.DlpService/ListRootCategories",
};

std::unique_ptr< DlpService::Stub> DlpService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DlpService::Stub> stub(new DlpService::Stub(channel));
  return stub;
}

DlpService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_InspectContent_(DlpService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RedactContent_(DlpService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateInspectOperation_(DlpService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListInspectFindings_(DlpService_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListInfoTypes_(DlpService_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRootCategories_(DlpService_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DlpService::Stub::InspectContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest& request, ::google::privacy::dlp::v2beta1::InspectContentResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_InspectContent_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::InspectContentResponse>* DlpService::Stub::AsyncInspectContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::InspectContentResponse>::Create(channel_.get(), cq, rpcmethod_InspectContent_, context, request);
}

::grpc::Status DlpService::Stub::RedactContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest& request, ::google::privacy::dlp::v2beta1::RedactContentResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RedactContent_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::RedactContentResponse>* DlpService::Stub::AsyncRedactContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::RedactContentResponse>::Create(channel_.get(), cq, rpcmethod_RedactContent_, context, request);
}

::grpc::Status DlpService::Stub::CreateInspectOperation(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateInspectOperation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* DlpService::Stub::AsyncCreateInspectOperationRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_CreateInspectOperation_, context, request);
}

::grpc::Status DlpService::Stub::ListInspectFindings(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest& request, ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListInspectFindings_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>* DlpService::Stub::AsyncListInspectFindingsRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>::Create(channel_.get(), cq, rpcmethod_ListInspectFindings_, context, request);
}

::grpc::Status DlpService::Stub::ListInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest& request, ::google::privacy::dlp::v2beta1::ListInfoTypesResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListInfoTypes_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>* DlpService::Stub::AsyncListInfoTypesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>::Create(channel_.get(), cq, rpcmethod_ListInfoTypes_, context, request);
}

::grpc::Status DlpService::Stub::ListRootCategories(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest& request, ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListRootCategories_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>* DlpService::Stub::AsyncListRootCategoriesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>::Create(channel_.get(), cq, rpcmethod_ListRootCategories_, context, request);
}

DlpService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      DlpService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2beta1::InspectContentRequest, ::google::privacy::dlp::v2beta1::InspectContentResponse>(
          std::mem_fn(&DlpService::Service::InspectContent), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DlpService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2beta1::RedactContentRequest, ::google::privacy::dlp::v2beta1::RedactContentResponse>(
          std::mem_fn(&DlpService::Service::RedactContent), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DlpService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest, ::google::longrunning::Operation>(
          std::mem_fn(&DlpService::Service::CreateInspectOperation), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DlpService_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest, ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>(
          std::mem_fn(&DlpService::Service::ListInspectFindings), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DlpService_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2beta1::ListInfoTypesRequest, ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>(
          std::mem_fn(&DlpService::Service::ListInfoTypes), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DlpService_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest, ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>(
          std::mem_fn(&DlpService::Service::ListRootCategories), this)));
}

DlpService::Service::~Service() {
}

::grpc::Status DlpService::Service::InspectContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest* request, ::google::privacy::dlp::v2beta1::InspectContentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::RedactContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest* request, ::google::privacy::dlp::v2beta1::RedactContentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::CreateInspectOperation(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::ListInspectFindings(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest* request, ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::ListInfoTypes(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest* request, ::google::privacy::dlp::v2beta1::ListInfoTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::ListRootCategories(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest* request, ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace privacy
}  // namespace dlp
}  // namespace v2beta1

