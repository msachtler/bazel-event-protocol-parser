// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/dlp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/privacy/dlp/v2beta1/dlp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace privacy {
namespace dlp {
namespace v2beta1 {
class InspectConfig_InfoTypeLimitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectConfig_InfoTypeLimit> {
} _InspectConfig_InfoTypeLimit_default_instance_;
class InspectConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectConfig> {
} _InspectConfig_default_instance_;
class OperationConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationConfig> {
} _OperationConfig_default_instance_;
class ContentItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContentItem> {
  public:
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  const ::google::privacy::dlp::v2beta1::Table* table_;
} _ContentItem_default_instance_;
class Table_RowDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Table_Row> {
} _Table_Row_default_instance_;
class TableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Table> {
} _Table_default_instance_;
class InspectResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectResult> {
} _InspectResult_default_instance_;
class FindingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Finding> {
} _Finding_default_instance_;
class LocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Location> {
} _Location_default_instance_;
class TableLocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableLocation> {
} _TableLocation_default_instance_;
class RangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Range> {
} _Range_default_instance_;
class ImageLocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageLocation> {
} _ImageLocation_default_instance_;
class RedactContentRequest_ReplaceConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RedactContentRequest_ReplaceConfig> {
} _RedactContentRequest_ReplaceConfig_default_instance_;
class RedactContentRequest_ImageRedactionConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RedactContentRequest_ImageRedactionConfig> {
  public:
  const ::google::privacy::dlp::v2beta1::InfoType* info_type_;
  bool redact_all_text_;
} _RedactContentRequest_ImageRedactionConfig_default_instance_;
class RedactContentRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RedactContentRequest> {
} _RedactContentRequest_default_instance_;
class ColorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Color> {
} _Color_default_instance_;
class RedactContentResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RedactContentResponse> {
} _RedactContentResponse_default_instance_;
class InspectContentRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectContentRequest> {
} _InspectContentRequest_default_instance_;
class InspectContentResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectContentResponse> {
} _InspectContentResponse_default_instance_;
class CreateInspectOperationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateInspectOperationRequest> {
} _CreateInspectOperationRequest_default_instance_;
class OutputStorageConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OutputStorageConfig> {
  public:
  const ::google::privacy::dlp::v2beta1::BigQueryTable* table_;
  const ::google::privacy::dlp::v2beta1::CloudStoragePath* storage_path_;
} _OutputStorageConfig_default_instance_;
class InfoTypeStatisticsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfoTypeStatistics> {
} _InfoTypeStatistics_default_instance_;
class InspectOperationMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectOperationMetadata> {
} _InspectOperationMetadata_default_instance_;
class InspectOperationResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectOperationResult> {
} _InspectOperationResult_default_instance_;
class ListInspectFindingsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListInspectFindingsRequest> {
} _ListInspectFindingsRequest_default_instance_;
class ListInspectFindingsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListInspectFindingsResponse> {
} _ListInspectFindingsResponse_default_instance_;
class InfoTypeDescriptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfoTypeDescription> {
} _InfoTypeDescription_default_instance_;
class ListInfoTypesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListInfoTypesRequest> {
} _ListInfoTypesRequest_default_instance_;
class ListInfoTypesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListInfoTypesResponse> {
} _ListInfoTypesResponse_default_instance_;
class CategoryDescriptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CategoryDescription> {
} _CategoryDescription_default_instance_;
class ListRootCategoriesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListRootCategoriesRequest> {
} _ListRootCategoriesRequest_default_instance_;
class ListRootCategoriesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListRootCategoriesResponse> {
} _ListRootCategoriesResponse_default_instance_;
class ValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Value> {
  public:
  ::google::protobuf::int64 integer_value_;
  double float_value_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  bool boolean_value_;
  const ::google::protobuf::Timestamp* timestamp_value_;
  const ::google::type::TimeOfDay* time_value_;
  const ::google::type::Date* date_value_;
} _Value_default_instance_;

namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[33];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig_InfoTypeLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig_InfoTypeLimit, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig_InfoTypeLimit, max_findings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, info_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, min_likelihood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, max_findings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, include_quote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, exclude_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, info_type_limits_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationConfig, max_item_findings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentItem, type_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ContentItem_default_instance_), data_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ContentItem_default_instance_), value_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ContentItem_default_instance_), table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentItem, data_item_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_Row, values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, rows_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectResult, findings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectResult, findings_truncated_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finding, quote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finding, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finding, likelihood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finding, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finding, create_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, byte_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, codepoint_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, image_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, record_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, field_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, table_location_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableLocation, row_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocation, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocation, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocation, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocation, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest_ReplaceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest_ReplaceConfig, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest_ReplaceConfig, replace_with_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest_ImageRedactionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest_ImageRedactionConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RedactContentRequest_ImageRedactionConfig_default_instance_), info_type_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RedactContentRequest_ImageRedactionConfig_default_instance_), redact_all_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest_ImageRedactionConfig, redaction_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest_ImageRedactionConfig, target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest, inspect_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest, replace_configs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest, image_redaction_configs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, red_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, green_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, blue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentResponse, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectContentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectContentRequest, inspect_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectContentRequest, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectContentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectContentResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInspectOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInspectOperationRequest, inspect_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInspectOperationRequest, storage_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInspectOperationRequest, output_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInspectOperationRequest, operation_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputStorageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputStorageConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OutputStorageConfig_default_instance_), table_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_OutputStorageConfig_default_instance_), storage_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputStorageConfig, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeStatistics, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeStatistics, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, processed_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, total_estimated_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, info_type_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, request_inspect_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, request_storage_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, request_output_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationResult, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsRequest, filter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeDescription, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeDescription, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeDescription, categories_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInfoTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInfoTypesRequest, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInfoTypesRequest, language_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInfoTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInfoTypesResponse, info_types_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDescription, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDescription, display_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRootCategoriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRootCategoriesRequest, language_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRootCategoriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRootCategoriesResponse, categories_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Value_default_instance_), integer_value_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Value_default_instance_), float_value_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Value_default_instance_), string_value_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Value_default_instance_), boolean_value_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Value_default_instance_), timestamp_value_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Value_default_instance_), time_value_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Value_default_instance_), date_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, type_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(InspectConfig_InfoTypeLimit)},
  { 7, -1, sizeof(InspectConfig)},
  { 18, -1, sizeof(OperationConfig)},
  { 24, -1, sizeof(ContentItem)},
  { 34, -1, sizeof(Table_Row)},
  { 40, -1, sizeof(Table)},
  { 47, -1, sizeof(InspectResult)},
  { 54, -1, sizeof(Finding)},
  { 64, -1, sizeof(Location)},
  { 75, -1, sizeof(TableLocation)},
  { 81, -1, sizeof(Range)},
  { 88, -1, sizeof(ImageLocation)},
  { 97, -1, sizeof(RedactContentRequest_ReplaceConfig)},
  { 104, -1, sizeof(RedactContentRequest_ImageRedactionConfig)},
  { 113, -1, sizeof(RedactContentRequest)},
  { 122, -1, sizeof(Color)},
  { 130, -1, sizeof(RedactContentResponse)},
  { 136, -1, sizeof(InspectContentRequest)},
  { 143, -1, sizeof(InspectContentResponse)},
  { 149, -1, sizeof(CreateInspectOperationRequest)},
  { 158, -1, sizeof(OutputStorageConfig)},
  { 166, -1, sizeof(InfoTypeStatistics)},
  { 173, -1, sizeof(InspectOperationMetadata)},
  { 185, -1, sizeof(InspectOperationResult)},
  { 191, -1, sizeof(ListInspectFindingsRequest)},
  { 200, -1, sizeof(ListInspectFindingsResponse)},
  { 207, -1, sizeof(InfoTypeDescription)},
  { 215, -1, sizeof(ListInfoTypesRequest)},
  { 222, -1, sizeof(ListInfoTypesResponse)},
  { 228, -1, sizeof(CategoryDescription)},
  { 235, -1, sizeof(ListRootCategoriesRequest)},
  { 241, -1, sizeof(ListRootCategoriesResponse)},
  { 247, -1, sizeof(Value)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectConfig_InfoTypeLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OperationConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContentItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Table_Row_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Table_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Finding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedactContentRequest_ReplaceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedactContentRequest_ImageRedactionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedactContentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Color_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedactContentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectContentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectContentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateInspectOperationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OutputStorageConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfoTypeStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectOperationMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectOperationResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListInspectFindingsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListInspectFindingsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfoTypeDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListInfoTypesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListInfoTypesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CategoryDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListRootCategoriesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListRootCategoriesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Value_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/privacy/dlp/v2beta1/dlp.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 33);
}

}  // namespace

void TableStruct::Shutdown() {
  _InspectConfig_InfoTypeLimit_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _InspectConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _OperationConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ContentItem_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Table_Row_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Table_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _InspectResult_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Finding_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Location_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _TableLocation_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Range_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ImageLocation_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _RedactContentRequest_ReplaceConfig_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _RedactContentRequest_ImageRedactionConfig_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _RedactContentRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _Color_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _RedactContentResponse_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _InspectContentRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _InspectContentResponse_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CreateInspectOperationRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _OutputStorageConfig_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _InfoTypeStatistics_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _InspectOperationMetadata_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _InspectOperationResult_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _ListInspectFindingsRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _ListInspectFindingsResponse_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _InfoTypeDescription_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _ListInfoTypesRequest_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _ListInfoTypesResponse_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CategoryDescription_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _ListRootCategoriesRequest_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _ListRootCategoriesResponse_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _Value_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::InitDefaults();
  ::google::privacy::dlp::v2beta1::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  ::google::type::protobuf_google_2ftype_2fdate_2eproto::InitDefaults();
  ::google::type::protobuf_google_2ftype_2ftimeofday_2eproto::InitDefaults();
  _InspectConfig_InfoTypeLimit_default_instance_.DefaultConstruct();
  _InspectConfig_default_instance_.DefaultConstruct();
  _OperationConfig_default_instance_.DefaultConstruct();
  _ContentItem_default_instance_.DefaultConstruct();
  _Table_Row_default_instance_.DefaultConstruct();
  _Table_default_instance_.DefaultConstruct();
  _InspectResult_default_instance_.DefaultConstruct();
  _Finding_default_instance_.DefaultConstruct();
  _Location_default_instance_.DefaultConstruct();
  _TableLocation_default_instance_.DefaultConstruct();
  _Range_default_instance_.DefaultConstruct();
  _ImageLocation_default_instance_.DefaultConstruct();
  _RedactContentRequest_ReplaceConfig_default_instance_.DefaultConstruct();
  _RedactContentRequest_ImageRedactionConfig_default_instance_.DefaultConstruct();
  _RedactContentRequest_default_instance_.DefaultConstruct();
  _Color_default_instance_.DefaultConstruct();
  _RedactContentResponse_default_instance_.DefaultConstruct();
  _InspectContentRequest_default_instance_.DefaultConstruct();
  _InspectContentResponse_default_instance_.DefaultConstruct();
  _CreateInspectOperationRequest_default_instance_.DefaultConstruct();
  _OutputStorageConfig_default_instance_.DefaultConstruct();
  _InfoTypeStatistics_default_instance_.DefaultConstruct();
  _InspectOperationMetadata_default_instance_.DefaultConstruct();
  _InspectOperationResult_default_instance_.DefaultConstruct();
  _ListInspectFindingsRequest_default_instance_.DefaultConstruct();
  _ListInspectFindingsResponse_default_instance_.DefaultConstruct();
  _InfoTypeDescription_default_instance_.DefaultConstruct();
  _ListInfoTypesRequest_default_instance_.DefaultConstruct();
  _ListInfoTypesResponse_default_instance_.DefaultConstruct();
  _CategoryDescription_default_instance_.DefaultConstruct();
  _ListRootCategoriesRequest_default_instance_.DefaultConstruct();
  _ListRootCategoriesResponse_default_instance_.DefaultConstruct();
  _Value_default_instance_.DefaultConstruct();
  _InspectConfig_InfoTypeLimit_default_instance_.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
  _ContentItem_default_instance_.data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ContentItem_default_instance_.value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ContentItem_default_instance_.table_ = const_cast< ::google::privacy::dlp::v2beta1::Table*>(
      ::google::privacy::dlp::v2beta1::Table::internal_default_instance());
  _Finding_default_instance_.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
  _Finding_default_instance_.get_mutable()->location_ = const_cast< ::google::privacy::dlp::v2beta1::Location*>(
      ::google::privacy::dlp::v2beta1::Location::internal_default_instance());
  _Finding_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Location_default_instance_.get_mutable()->byte_range_ = const_cast< ::google::privacy::dlp::v2beta1::Range*>(
      ::google::privacy::dlp::v2beta1::Range::internal_default_instance());
  _Location_default_instance_.get_mutable()->codepoint_range_ = const_cast< ::google::privacy::dlp::v2beta1::Range*>(
      ::google::privacy::dlp::v2beta1::Range::internal_default_instance());
  _Location_default_instance_.get_mutable()->record_key_ = const_cast< ::google::privacy::dlp::v2beta1::RecordKey*>(
      ::google::privacy::dlp::v2beta1::RecordKey::internal_default_instance());
  _Location_default_instance_.get_mutable()->field_id_ = const_cast< ::google::privacy::dlp::v2beta1::FieldId*>(
      ::google::privacy::dlp::v2beta1::FieldId::internal_default_instance());
  _Location_default_instance_.get_mutable()->table_location_ = const_cast< ::google::privacy::dlp::v2beta1::TableLocation*>(
      ::google::privacy::dlp::v2beta1::TableLocation::internal_default_instance());
  _RedactContentRequest_ReplaceConfig_default_instance_.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
  _RedactContentRequest_ImageRedactionConfig_default_instance_.info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
  _RedactContentRequest_ImageRedactionConfig_default_instance_.redact_all_text_ = false;
  _RedactContentRequest_ImageRedactionConfig_default_instance_.get_mutable()->redaction_color_ = const_cast< ::google::privacy::dlp::v2beta1::Color*>(
      ::google::privacy::dlp::v2beta1::Color::internal_default_instance());
  _RedactContentRequest_default_instance_.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2beta1::InspectConfig*>(
      ::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance());
  _InspectContentRequest_default_instance_.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2beta1::InspectConfig*>(
      ::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance());
  _CreateInspectOperationRequest_default_instance_.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2beta1::InspectConfig*>(
      ::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance());
  _CreateInspectOperationRequest_default_instance_.get_mutable()->storage_config_ = const_cast< ::google::privacy::dlp::v2beta1::StorageConfig*>(
      ::google::privacy::dlp::v2beta1::StorageConfig::internal_default_instance());
  _CreateInspectOperationRequest_default_instance_.get_mutable()->output_config_ = const_cast< ::google::privacy::dlp::v2beta1::OutputStorageConfig*>(
      ::google::privacy::dlp::v2beta1::OutputStorageConfig::internal_default_instance());
  _CreateInspectOperationRequest_default_instance_.get_mutable()->operation_config_ = const_cast< ::google::privacy::dlp::v2beta1::OperationConfig*>(
      ::google::privacy::dlp::v2beta1::OperationConfig::internal_default_instance());
  _OutputStorageConfig_default_instance_.table_ = const_cast< ::google::privacy::dlp::v2beta1::BigQueryTable*>(
      ::google::privacy::dlp::v2beta1::BigQueryTable::internal_default_instance());
  _OutputStorageConfig_default_instance_.storage_path_ = const_cast< ::google::privacy::dlp::v2beta1::CloudStoragePath*>(
      ::google::privacy::dlp::v2beta1::CloudStoragePath::internal_default_instance());
  _InfoTypeStatistics_default_instance_.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
  _InspectOperationMetadata_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _InspectOperationMetadata_default_instance_.get_mutable()->request_inspect_config_ = const_cast< ::google::privacy::dlp::v2beta1::InspectConfig*>(
      ::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance());
  _InspectOperationMetadata_default_instance_.get_mutable()->request_storage_config_ = const_cast< ::google::privacy::dlp::v2beta1::StorageConfig*>(
      ::google::privacy::dlp::v2beta1::StorageConfig::internal_default_instance());
  _InspectOperationMetadata_default_instance_.get_mutable()->request_output_config_ = const_cast< ::google::privacy::dlp::v2beta1::OutputStorageConfig*>(
      ::google::privacy::dlp::v2beta1::OutputStorageConfig::internal_default_instance());
  _ListInspectFindingsResponse_default_instance_.get_mutable()->result_ = const_cast< ::google::privacy::dlp::v2beta1::InspectResult*>(
      ::google::privacy::dlp::v2beta1::InspectResult::internal_default_instance());
  _Value_default_instance_.integer_value_ = GOOGLE_LONGLONG(0);
  _Value_default_instance_.float_value_ = 0;
  _Value_default_instance_.string_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Value_default_instance_.boolean_value_ = false;
  _Value_default_instance_.timestamp_value_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Value_default_instance_.time_value_ = const_cast< ::google::type::TimeOfDay*>(
      ::google::type::TimeOfDay::internal_default_instance());
  _Value_default_instance_.date_value_ = const_cast< ::google::type::Date*>(
      ::google::type::Date::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n$google/privacy/dlp/v2beta1/dlp.proto\022\032"
      "google.privacy.dlp.v2beta1\032\034google/api/a"
      "nnotations.proto\032#google/longrunning/ope"
      "rations.proto\032(google/privacy/dlp/v2beta"
      "1/storage.proto\032\033google/protobuf/empty.p"
      "roto\032\037google/protobuf/timestamp.proto\032\026g"
      "oogle/type/date.proto\032\033google/type/timeo"
      "fday.proto\"\200\003\n\rInspectConfig\0228\n\ninfo_typ"
      "es\030\001 \003(\0132$.google.privacy.dlp.v2beta1.In"
      "foType\022>\n\016min_likelihood\030\002 \001(\0162&.google."
      "privacy.dlp.v2beta1.Likelihood\022\024\n\014max_fi"
      "ndings\030\003 \001(\005\022\025\n\rinclude_quote\030\004 \001(\010\022\025\n\re"
      "xclude_types\030\006 \001(\010\022Q\n\020info_type_limits\030\007"
      " \003(\01327.google.privacy.dlp.v2beta1.Inspec"
      "tConfig.InfoTypeLimit\032^\n\rInfoTypeLimit\0227"
      "\n\tinfo_type\030\001 \001(\0132$.google.privacy.dlp.v"
      "2beta1.InfoType\022\024\n\014max_findings\030\002 \001(\005\",\n"
      "\017OperationConfig\022\031\n\021max_item_findings\030\001 "
      "\001(\003\"}\n\013ContentItem\022\014\n\004type\030\001 \001(\t\022\016\n\004data"
      "\030\002 \001(\014H\000\022\017\n\005value\030\003 \001(\tH\000\0222\n\005table\030\004 \001(\013"
      "2!.google.privacy.dlp.v2beta1.TableH\000B\013\n"
      "\tdata_item\"\254\001\n\005Table\0224\n\007headers\030\001 \003(\0132#."
      "google.privacy.dlp.v2beta1.FieldId\0223\n\004ro"
      "ws\030\002 \003(\0132%.google.privacy.dlp.v2beta1.Ta"
      "ble.Row\0328\n\003Row\0221\n\006values\030\001 \003(\0132!.google."
      "privacy.dlp.v2beta1.Value\"b\n\rInspectResu"
      "lt\0225\n\010findings\030\001 \003(\0132#.google.privacy.dl"
      "p.v2beta1.Finding\022\032\n\022findings_truncated\030"
      "\002 \001(\010\"\366\001\n\007Finding\022\r\n\005quote\030\001 \001(\t\0227\n\tinfo"
      "_type\030\002 \001(\0132$.google.privacy.dlp.v2beta1"
      ".InfoType\022:\n\nlikelihood\030\003 \001(\0162&.google.p"
      "rivacy.dlp.v2beta1.Likelihood\0226\n\010locatio"
      "n\030\004 \001(\0132$.google.privacy.dlp.v2beta1.Loc"
      "ation\022/\n\013create_time\030\006 \001(\0132\032.google.prot"
      "obuf.Timestamp\"\362\002\n\010Location\0225\n\nbyte_rang"
      "e\030\001 \001(\0132!.google.privacy.dlp.v2beta1.Ran"
      "ge\022:\n\017codepoint_range\030\002 \001(\0132!.google.pri"
      "vacy.dlp.v2beta1.Range\022>\n\013image_boxes\030\003 "
      "\003(\0132).google.privacy.dlp.v2beta1.ImageLo"
      "cation\0229\n\nrecord_key\030\004 \001(\0132%.google.priv"
      "acy.dlp.v2beta1.RecordKey\0225\n\010field_id\030\005 "
      "\001(\0132#.google.privacy.dlp.v2beta1.FieldId"
      "\022A\n\016table_location\030\006 \001(\0132).google.privac"
      "y.dlp.v2beta1.TableLocation\"\"\n\rTableLoca"
      "tion\022\021\n\trow_index\030\001 \001(\003\"#\n\005Range\022\r\n\005star"
      "t\030\001 \001(\003\022\013\n\003end\030\002 \001(\003\"I\n\rImageLocation\022\013\n"
      "\003top\030\001 \001(\005\022\014\n\004left\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022"
      "\016\n\006height\030\004 \001(\005\"\347\004\n\024RedactContentRequest"
      "\022A\n\016inspect_config\030\001 \001(\0132).google.privac"
      "y.dlp.v2beta1.InspectConfig\0226\n\005items\030\002 \003"
      "(\0132\'.google.privacy.dlp.v2beta1.ContentI"
      "tem\022W\n\017replace_configs\030\003 \003(\0132>.google.pr"
      "ivacy.dlp.v2beta1.RedactContentRequest.R"
      "eplaceConfig\022f\n\027image_redaction_configs\030"
      "\004 \003(\0132E.google.privacy.dlp.v2beta1.Redac"
      "tContentRequest.ImageRedactionConfig\032^\n\r"
      "ReplaceConfig\0227\n\tinfo_type\030\001 \001(\0132$.googl"
      "e.privacy.dlp.v2beta1.InfoType\022\024\n\014replac"
      "e_with\030\002 \001(\t\032\262\001\n\024ImageRedactionConfig\0229\n"
      "\tinfo_type\030\001 \001(\0132$.google.privacy.dlp.v2"
      "beta1.InfoTypeH\000\022\031\n\017redact_all_text\030\002 \001("
      "\010H\000\022:\n\017redaction_color\030\003 \001(\0132!.google.pr"
      "ivacy.dlp.v2beta1.ColorB\010\n\006target\"1\n\005Col"
      "or\022\013\n\003red\030\001 \001(\002\022\r\n\005green\030\002 \001(\002\022\014\n\004blue\030\003"
      " \001(\002\"O\n\025RedactContentResponse\0226\n\005items\030\001"
      " \003(\0132\'.google.privacy.dlp.v2beta1.Conten"
      "tItem\"\222\001\n\025InspectContentRequest\022A\n\016inspe"
      "ct_config\030\001 \001(\0132).google.privacy.dlp.v2b"
      "eta1.InspectConfig\0226\n\005items\030\002 \003(\0132\'.goog"
      "le.privacy.dlp.v2beta1.ContentItem\"T\n\026In"
      "spectContentResponse\022:\n\007results\030\001 \003(\0132)."
      "google.privacy.dlp.v2beta1.InspectResult"
      "\"\264\002\n\035CreateInspectOperationRequest\022A\n\016in"
      "spect_config\030\001 \001(\0132).google.privacy.dlp."
      "v2beta1.InspectConfig\022A\n\016storage_config\030"
      "\002 \001(\0132).google.privacy.dlp.v2beta1.Stora"
      "geConfig\022F\n\routput_config\030\003 \001(\0132/.google"
      ".privacy.dlp.v2beta1.OutputStorageConfig"
      "\022E\n\020operation_config\030\005 \001(\0132+.google.priv"
      "acy.dlp.v2beta1.OperationConfig\"\237\001\n\023Outp"
      "utStorageConfig\022:\n\005table\030\001 \001(\0132).google."
      "privacy.dlp.v2beta1.BigQueryTableH\000\022D\n\014s"
      "torage_path\030\002 \001(\0132,.google.privacy.dlp.v"
      "2beta1.CloudStoragePathH\000B\006\n\004type\"\\\n\022Inf"
      "oTypeStatistics\0227\n\tinfo_type\030\001 \001(\0132$.goo"
      "gle.privacy.dlp.v2beta1.InfoType\022\r\n\005coun"
      "t\030\002 \001(\003\"\262\003\n\030InspectOperationMetadata\022\027\n\017"
      "processed_bytes\030\001 \001(\003\022\035\n\025total_estimated"
      "_bytes\030\004 \001(\003\022G\n\017info_type_stats\030\002 \003(\0132.."
      "google.privacy.dlp.v2beta1.InfoTypeStati"
      "stics\022/\n\013create_time\030\003 \001(\0132\032.google.prot"
      "obuf.Timestamp\022I\n\026request_inspect_config"
      "\030\005 \001(\0132).google.privacy.dlp.v2beta1.Insp"
      "ectConfig\022I\n\026request_storage_config\030\006 \001("
      "\0132).google.privacy.dlp.v2beta1.StorageCo"
      "nfig\022N\n\025request_output_config\030\007 \001(\0132/.go"
      "ogle.privacy.dlp.v2beta1.OutputStorageCo"
      "nfig\"&\n\026InspectOperationResult\022\014\n\004name\030\001"
      " \001(\t\"a\n\032ListInspectFindingsRequest\022\014\n\004na"
      "me\030\001 \001(\t\022\021\n\tpage_size\030\002 \001(\005\022\022\n\npage_toke"
      "n\030\003 \001(\t\022\016\n\006filter\030\004 \001(\t\"q\n\033ListInspectFi"
      "ndingsResponse\0229\n\006result\030\001 \001(\0132).google."
      "privacy.dlp.v2beta1.InspectResult\022\027\n\017nex"
      "t_page_token\030\002 \001(\t\"~\n\023InfoTypeDescriptio"
      "n\022\014\n\004name\030\001 \001(\t\022\024\n\014display_name\030\002 \001(\t\022C\n"
      "\ncategories\030\003 \003(\0132/.google.privacy.dlp.v"
      "2beta1.CategoryDescription\"\?\n\024ListInfoTy"
      "pesRequest\022\020\n\010category\030\001 \001(\t\022\025\n\rlanguage"
      "_code\030\002 \001(\t\"\\\n\025ListInfoTypesResponse\022C\n\n"
      "info_types\030\001 \003(\0132/.google.privacy.dlp.v2"
      "beta1.InfoTypeDescription\"9\n\023CategoryDes"
      "cription\022\014\n\004name\030\001 \001(\t\022\024\n\014display_name\030\002"
      " \001(\t\"2\n\031ListRootCategoriesRequest\022\025\n\rlan"
      "guage_code\030\001 \001(\t\"a\n\032ListRootCategoriesRe"
      "sponse\022C\n\ncategories\030\001 \003(\0132/.google.priv"
      "acy.dlp.v2beta1.CategoryDescription\"\376\001\n\005"
      "Value\022\027\n\rinteger_value\030\001 \001(\003H\000\022\025\n\013float_"
      "value\030\002 \001(\001H\000\022\026\n\014string_value\030\003 \001(\tH\000\022\027\n"
      "\rboolean_value\030\004 \001(\010H\000\0225\n\017timestamp_valu"
      "e\030\005 \001(\0132\032.google.protobuf.TimestampH\000\022,\n"
      "\ntime_value\030\006 \001(\0132\026.google.type.TimeOfDa"
      "yH\000\022\'\n\ndate_value\030\007 \001(\0132\021.google.type.Da"
      "teH\000B\006\n\004type*t\n\nLikelihood\022\032\n\026LIKELIHOOD"
      "_UNSPECIFIED\020\000\022\021\n\rVERY_UNLIKELY\020\001\022\014\n\010UNL"
      "IKELY\020\002\022\014\n\010POSSIBLE\020\003\022\n\n\006LIKELY\020\004\022\017\n\013VER"
      "Y_LIKELY\020\0052\366\007\n\nDlpService\022\234\001\n\016InspectCon"
      "tent\0221.google.privacy.dlp.v2beta1.Inspec"
      "tContentRequest\0322.google.privacy.dlp.v2b"
      "eta1.InspectContentResponse\"#\202\323\344\223\002\035\"\030/v2"
      "beta1/content:inspect:\001*\022\230\001\n\rRedactConte"
      "nt\0220.google.privacy.dlp.v2beta1.RedactCo"
      "ntentRequest\0321.google.privacy.dlp.v2beta"
      "1.RedactContentResponse\"\"\202\323\344\223\002\034\"\027/v2beta"
      "1/content:redact:\001*\022\232\001\n\026CreateInspectOpe"
      "ration\0229.google.privacy.dlp.v2beta1.Crea"
      "teInspectOperationRequest\032\035.google.longr"
      "unning.Operation\"&\202\323\344\223\002 \"\033/v2beta1/inspe"
      "ct/operations:\001*\022\272\001\n\023ListInspectFindings"
      "\0226.google.privacy.dlp.v2beta1.ListInspec"
      "tFindingsRequest\0327.google.privacy.dlp.v2"
      "beta1.ListInspectFindingsResponse\"2\202\323\344\223\002"
      ",\022*/v2beta1/{name=inspect/results/*}/fin"
      "dings\022\254\001\n\rListInfoTypes\0220.google.privacy"
      ".dlp.v2beta1.ListInfoTypesRequest\0321.goog"
      "le.privacy.dlp.v2beta1.ListInfoTypesResp"
      "onse\"6\202\323\344\223\0020\022./v2beta1/rootCategories/{c"
      "ategory=*}/infoTypes\022\244\001\n\022ListRootCategor"
      "ies\0225.google.privacy.dlp.v2beta1.ListRoo"
      "tCategoriesRequest\0326.google.privacy.dlp."
      "v2beta1.ListRootCategoriesResponse\"\037\202\323\344\223"
      "\002\031\022\027/v2beta1/rootCategoriesB\206\001\n\036com.goog"
      "le.privacy.dlp.v2beta1B\010DlpProtoP\001Z=goog"
      "le.golang.org/genproto/googleapis/privac"
      "y/dlp/v2beta1;dlp\252\002\030Google.Cloud.Dlp.V2B"
      "eta1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/privacy/dlp/v2beta1/dlp.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::google::privacy::dlp::v2beta1::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::type::protobuf_google_2ftype_2fdate_2eproto::AddDescriptors();
  ::google::type::protobuf_google_2ftype_2ftimeofday_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto

const ::google::protobuf::EnumDescriptor* Likelihood_descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_enum_descriptors[0];
}
bool Likelihood_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectConfig_InfoTypeLimit::kInfoTypeFieldNumber;
const int InspectConfig_InfoTypeLimit::kMaxFindingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectConfig_InfoTypeLimit::InspectConfig_InfoTypeLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
}
InspectConfig_InfoTypeLimit::InspectConfig_InfoTypeLimit(const InspectConfig_InfoTypeLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType(*from.info_type_);
  } else {
    info_type_ = NULL;
  }
  max_findings_ = from.max_findings_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
}

void InspectConfig_InfoTypeLimit::SharedCtor() {
  ::memset(&info_type_, 0, reinterpret_cast<char*>(&max_findings_) -
    reinterpret_cast<char*>(&info_type_) + sizeof(max_findings_));
  _cached_size_ = 0;
}

InspectConfig_InfoTypeLimit::~InspectConfig_InfoTypeLimit() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  SharedDtor();
}

void InspectConfig_InfoTypeLimit::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_type_;
  }
}

void InspectConfig_InfoTypeLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectConfig_InfoTypeLimit::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectConfig_InfoTypeLimit& InspectConfig_InfoTypeLimit::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectConfig_InfoTypeLimit* InspectConfig_InfoTypeLimit::New(::google::protobuf::Arena* arena) const {
  InspectConfig_InfoTypeLimit* n = new InspectConfig_InfoTypeLimit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectConfig_InfoTypeLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
  max_findings_ = 0;
}

bool InspectConfig_InfoTypeLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_findings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_findings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  return false;
#undef DO_
}

void InspectConfig_InfoTypeLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_type_, output);
  }

  // int32 max_findings = 2;
  if (this->max_findings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_findings(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
}

::google::protobuf::uint8* InspectConfig_InfoTypeLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_type_, deterministic, target);
  }

  // int32 max_findings = 2;
  if (this->max_findings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_findings(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  return target;
}

size_t InspectConfig_InfoTypeLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  size_t total_size = 0;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_type_);
  }

  // int32 max_findings = 2;
  if (this->max_findings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_findings());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectConfig_InfoTypeLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectConfig_InfoTypeLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectConfig_InfoTypeLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
    MergeFrom(*source);
  }
}

void InspectConfig_InfoTypeLimit::MergeFrom(const InspectConfig_InfoTypeLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
  }
  if (from.max_findings() != 0) {
    set_max_findings(from.max_findings());
  }
}

void InspectConfig_InfoTypeLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectConfig_InfoTypeLimit::CopyFrom(const InspectConfig_InfoTypeLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectConfig_InfoTypeLimit::IsInitialized() const {
  return true;
}

void InspectConfig_InfoTypeLimit::Swap(InspectConfig_InfoTypeLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectConfig_InfoTypeLimit::InternalSwap(InspectConfig_InfoTypeLimit* other) {
  std::swap(info_type_, other->info_type_);
  std::swap(max_findings_, other->max_findings_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectConfig_InfoTypeLimit::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectConfig_InfoTypeLimit

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
bool InspectConfig_InfoTypeLimit::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
void InspectConfig_InfoTypeLimit::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) delete info_type_;
  info_type_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InfoType& InspectConfig_InfoTypeLimit::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.info_type)
  return info_type_ != NULL ? *info_type_
                         : *::google::privacy::dlp::v2beta1::InfoType::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InfoType* InspectConfig_InfoTypeLimit::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.info_type)
  return info_type_;
}
::google::privacy::dlp::v2beta1::InfoType* InspectConfig_InfoTypeLimit::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
void InspectConfig_InfoTypeLimit::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  delete info_type_;
  info_type_ = info_type;
  if (info_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.info_type)
}

// int32 max_findings = 2;
void InspectConfig_InfoTypeLimit::clear_max_findings() {
  max_findings_ = 0;
}
::google::protobuf::int32 InspectConfig_InfoTypeLimit::max_findings() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.max_findings)
  return max_findings_;
}
void InspectConfig_InfoTypeLimit::set_max_findings(::google::protobuf::int32 value) {
  
  max_findings_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit.max_findings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectConfig::kInfoTypesFieldNumber;
const int InspectConfig::kMinLikelihoodFieldNumber;
const int InspectConfig::kMaxFindingsFieldNumber;
const int InspectConfig::kIncludeQuoteFieldNumber;
const int InspectConfig::kExcludeTypesFieldNumber;
const int InspectConfig::kInfoTypeLimitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectConfig::InspectConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectConfig)
}
InspectConfig::InspectConfig(const InspectConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_types_(from.info_types_),
      info_type_limits_(from.info_type_limits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_likelihood_, &from.min_likelihood_,
    reinterpret_cast<char*>(&exclude_types_) -
    reinterpret_cast<char*>(&min_likelihood_) + sizeof(exclude_types_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectConfig)
}

void InspectConfig::SharedCtor() {
  ::memset(&min_likelihood_, 0, reinterpret_cast<char*>(&exclude_types_) -
    reinterpret_cast<char*>(&min_likelihood_) + sizeof(exclude_types_));
  _cached_size_ = 0;
}

InspectConfig::~InspectConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectConfig)
  SharedDtor();
}

void InspectConfig::SharedDtor() {
}

void InspectConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectConfig::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectConfig& InspectConfig::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectConfig* InspectConfig::New(::google::protobuf::Arena* arena) const {
  InspectConfig* n = new InspectConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectConfig)
  info_types_.Clear();
  info_type_limits_.Clear();
  ::memset(&min_likelihood_, 0, reinterpret_cast<char*>(&exclude_types_) -
    reinterpret_cast<char*>(&min_likelihood_) + sizeof(exclude_types_));
}

bool InspectConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_min_likelihood(static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_findings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_findings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_quote = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_quote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool exclude_types = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_type_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectConfig)
  return false;
#undef DO_
}

void InspectConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  for (unsigned int i = 0, n = this->info_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_types(i), output);
  }

  // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
  if (this->min_likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->min_likelihood(), output);
  }

  // int32 max_findings = 3;
  if (this->max_findings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_findings(), output);
  }

  // bool include_quote = 4;
  if (this->include_quote() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->include_quote(), output);
  }

  // bool exclude_types = 6;
  if (this->exclude_types() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->exclude_types(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;
  for (unsigned int i = 0, n = this->info_type_limits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->info_type_limits(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectConfig)
}

::google::protobuf::uint8* InspectConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  for (unsigned int i = 0, n = this->info_types_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->info_types(i), deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
  if (this->min_likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->min_likelihood(), target);
  }

  // int32 max_findings = 3;
  if (this->max_findings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_findings(), target);
  }

  // bool include_quote = 4;
  if (this->include_quote() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->include_quote(), target);
  }

  // bool exclude_types = 6;
  if (this->exclude_types() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->exclude_types(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;
  for (unsigned int i = 0, n = this->info_type_limits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->info_type_limits(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectConfig)
  return target;
}

size_t InspectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectConfig)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  {
    unsigned int count = this->info_types_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_types(i));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;
  {
    unsigned int count = this->info_type_limits_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_type_limits(i));
    }
  }

  // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
  if (this->min_likelihood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->min_likelihood());
  }

  // int32 max_findings = 3;
  if (this->max_findings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_findings());
  }

  // bool include_quote = 4;
  if (this->include_quote() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_types = 6;
  if (this->exclude_types() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectConfig)
    MergeFrom(*source);
  }
}

void InspectConfig::MergeFrom(const InspectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_types_.MergeFrom(from.info_types_);
  info_type_limits_.MergeFrom(from.info_type_limits_);
  if (from.min_likelihood() != 0) {
    set_min_likelihood(from.min_likelihood());
  }
  if (from.max_findings() != 0) {
    set_max_findings(from.max_findings());
  }
  if (from.include_quote() != 0) {
    set_include_quote(from.include_quote());
  }
  if (from.exclude_types() != 0) {
    set_exclude_types(from.exclude_types());
  }
}

void InspectConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectConfig::CopyFrom(const InspectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectConfig::IsInitialized() const {
  return true;
}

void InspectConfig::Swap(InspectConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectConfig::InternalSwap(InspectConfig* other) {
  info_types_.InternalSwap(&other->info_types_);
  info_type_limits_.InternalSwap(&other->info_type_limits_);
  std::swap(min_likelihood_, other->min_likelihood_);
  std::swap(max_findings_, other->max_findings_);
  std::swap(include_quote_, other->include_quote_);
  std::swap(exclude_types_, other->exclude_types_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectConfig

// repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
int InspectConfig::info_types_size() const {
  return info_types_.size();
}
void InspectConfig::clear_info_types() {
  info_types_.Clear();
}
const ::google::privacy::dlp::v2beta1::InfoType& InspectConfig::info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_.Get(index);
}
::google::privacy::dlp::v2beta1::InfoType* InspectConfig::mutable_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_.Mutable(index);
}
::google::privacy::dlp::v2beta1::InfoType* InspectConfig::add_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >*
InspectConfig::mutable_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return &info_types_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >&
InspectConfig::info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_;
}

// .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
void InspectConfig::clear_min_likelihood() {
  min_likelihood_ = 0;
}
::google::privacy::dlp::v2beta1::Likelihood InspectConfig::min_likelihood() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.min_likelihood)
  return static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(min_likelihood_);
}
void InspectConfig::set_min_likelihood(::google::privacy::dlp::v2beta1::Likelihood value) {
  
  min_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.min_likelihood)
}

// int32 max_findings = 3;
void InspectConfig::clear_max_findings() {
  max_findings_ = 0;
}
::google::protobuf::int32 InspectConfig::max_findings() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.max_findings)
  return max_findings_;
}
void InspectConfig::set_max_findings(::google::protobuf::int32 value) {
  
  max_findings_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.max_findings)
}

// bool include_quote = 4;
void InspectConfig::clear_include_quote() {
  include_quote_ = false;
}
bool InspectConfig::include_quote() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.include_quote)
  return include_quote_;
}
void InspectConfig::set_include_quote(bool value) {
  
  include_quote_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.include_quote)
}

// bool exclude_types = 6;
void InspectConfig::clear_exclude_types() {
  exclude_types_ = false;
}
bool InspectConfig::exclude_types() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.exclude_types)
  return exclude_types_;
}
void InspectConfig::set_exclude_types(bool value) {
  
  exclude_types_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.exclude_types)
}

// repeated .google.privacy.dlp.v2beta1.InspectConfig.InfoTypeLimit info_type_limits = 7;
int InspectConfig::info_type_limits_size() const {
  return info_type_limits_.size();
}
void InspectConfig::clear_info_type_limits() {
  info_type_limits_.Clear();
}
const ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit& InspectConfig::info_type_limits(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.info_type_limits)
  return info_type_limits_.Get(index);
}
::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit* InspectConfig::mutable_info_type_limits(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectConfig.info_type_limits)
  return info_type_limits_.Mutable(index);
}
::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit* InspectConfig::add_info_type_limits() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectConfig.info_type_limits)
  return info_type_limits_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit >*
InspectConfig::mutable_info_type_limits() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectConfig.info_type_limits)
  return &info_type_limits_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectConfig_InfoTypeLimit >&
InspectConfig::info_type_limits() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectConfig.info_type_limits)
  return info_type_limits_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationConfig::kMaxItemFindingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationConfig::OperationConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.OperationConfig)
}
OperationConfig::OperationConfig(const OperationConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_item_findings_ = from.max_item_findings_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.OperationConfig)
}

void OperationConfig::SharedCtor() {
  max_item_findings_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

OperationConfig::~OperationConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.OperationConfig)
  SharedDtor();
}

void OperationConfig::SharedDtor() {
}

void OperationConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationConfig::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OperationConfig& OperationConfig::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationConfig* OperationConfig::New(::google::protobuf::Arena* arena) const {
  OperationConfig* n = new OperationConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.OperationConfig)
  max_item_findings_ = GOOGLE_LONGLONG(0);
}

bool OperationConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.OperationConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 max_item_findings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_item_findings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.OperationConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.OperationConfig)
  return false;
#undef DO_
}

void OperationConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.OperationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_item_findings = 1;
  if (this->max_item_findings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_item_findings(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.OperationConfig)
}

::google::protobuf::uint8* OperationConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.OperationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_item_findings = 1;
  if (this->max_item_findings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->max_item_findings(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.OperationConfig)
  return target;
}

size_t OperationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.OperationConfig)
  size_t total_size = 0;

  // int64 max_item_findings = 1;
  if (this->max_item_findings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_item_findings());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.OperationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OperationConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.OperationConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.OperationConfig)
    MergeFrom(*source);
  }
}

void OperationConfig::MergeFrom(const OperationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.OperationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_item_findings() != 0) {
    set_max_item_findings(from.max_item_findings());
  }
}

void OperationConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.OperationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationConfig::CopyFrom(const OperationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.OperationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationConfig::IsInitialized() const {
  return true;
}

void OperationConfig::Swap(OperationConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationConfig::InternalSwap(OperationConfig* other) {
  std::swap(max_item_findings_, other->max_item_findings_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperationConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationConfig

// int64 max_item_findings = 1;
void OperationConfig::clear_max_item_findings() {
  max_item_findings_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OperationConfig::max_item_findings() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.OperationConfig.max_item_findings)
  return max_item_findings_;
}
void OperationConfig::set_max_item_findings(::google::protobuf::int64 value) {
  
  max_item_findings_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.OperationConfig.max_item_findings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentItem::kTypeFieldNumber;
const int ContentItem::kDataFieldNumber;
const int ContentItem::kValueFieldNumber;
const int ContentItem::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentItem::ContentItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ContentItem)
}
ContentItem::ContentItem(const ContentItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  clear_has_data_item();
  switch (from.data_item_case()) {
    case kData: {
      set_data(from.data());
      break;
    }
    case kValue: {
      set_value(from.value());
      break;
    }
    case kTable: {
      mutable_table()->::google::privacy::dlp::v2beta1::Table::MergeFrom(from.table());
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ContentItem)
}

void ContentItem::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_item();
  _cached_size_ = 0;
}

ContentItem::~ContentItem() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ContentItem)
  SharedDtor();
}

void ContentItem::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_data_item()) {
    clear_data_item();
  }
}

void ContentItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentItem::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentItem& ContentItem::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContentItem* ContentItem::New(::google::protobuf::Arena* arena) const {
  ContentItem* n = new ContentItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentItem::clear_data_item() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.ContentItem)
  switch (data_item_case()) {
    case kData: {
      data_item_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kValue: {
      data_item_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kTable: {
      delete data_item_.table_;
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ITEM_NOT_SET;
}


void ContentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ContentItem)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_data_item();
}

bool ContentItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ContentItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ContentItem.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ContentItem.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Table table = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ContentItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ContentItem)
  return false;
#undef DO_
}

void ContentItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ContentItem.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ContentItem.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // .google.privacy.dlp.v2beta1.Table table = 4;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *data_item_.table_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ContentItem)
}

::google::protobuf::uint8* ContentItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ContentItem.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ContentItem.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // .google.privacy.dlp.v2beta1.Table table = 4;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *data_item_.table_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ContentItem)
  return target;
}

size_t ContentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ContentItem)
  size_t total_size = 0;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  switch (data_item_case()) {
    // bytes data = 2;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
      break;
    }
    // string value = 3;
    case kValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
      break;
    }
    // .google.privacy.dlp.v2beta1.Table table = 4;
    case kTable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_item_.table_);
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ContentItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ContentItem)
    MergeFrom(*source);
  }
}

void ContentItem::MergeFrom(const ContentItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  switch (from.data_item_case()) {
    case kData: {
      set_data(from.data());
      break;
    }
    case kValue: {
      set_value(from.value());
      break;
    }
    case kTable: {
      mutable_table()->::google::privacy::dlp::v2beta1::Table::MergeFrom(from.table());
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
}

void ContentItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentItem::CopyFrom(const ContentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentItem::IsInitialized() const {
  return true;
}

void ContentItem::Swap(ContentItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentItem::InternalSwap(ContentItem* other) {
  type_.Swap(&other->type_);
  std::swap(data_item_, other->data_item_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentItem::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentItem

// string type = 1;
void ContentItem::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentItem::type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.type)
  return type_.GetNoArena();
}
void ContentItem::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.type)
}
#if LANG_CXX11
void ContentItem::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ContentItem.type)
}
#endif
void ContentItem::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ContentItem.type)
}
void ContentItem::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ContentItem.type)
}
::std::string* ContentItem::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentItem::release_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentItem::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.type)
}

// bytes data = 2;
bool ContentItem::has_data() const {
  return data_item_case() == kData;
}
void ContentItem::set_has_data() {
  _oneof_case_[0] = kData;
}
void ContentItem::clear_data() {
  if (has_data()) {
    data_item_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_item();
  }
}
const ::std::string& ContentItem::data() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.data)
  if (has_data()) {
    return data_item_.data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ContentItem::set_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.data)
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.data)
}
#if LANG_CXX11
void ContentItem::set_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.data)
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ContentItem.data)
}
#endif
void ContentItem::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ContentItem.data)
}
void ContentItem::set_data(const void* value, size_t size) {
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ContentItem.data)
}
::std::string* ContentItem::mutable_data() {
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.data)
  return data_item_.data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentItem::release_data() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.data)
  if (has_data()) {
    clear_has_data_item();
    return data_item_.data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ContentItem::set_allocated_data(::std::string* data) {
  if (!has_data()) {
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_item();
  if (data != NULL) {
    set_has_data();
    data_item_.data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        data);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.data)
}

// string value = 3;
bool ContentItem::has_value() const {
  return data_item_case() == kValue;
}
void ContentItem::set_has_value() {
  _oneof_case_[0] = kValue;
}
void ContentItem::clear_value() {
  if (has_value()) {
    data_item_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_item();
  }
}
const ::std::string& ContentItem::value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.value)
  if (has_value()) {
    return data_item_.value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ContentItem::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.value)
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.value)
}
#if LANG_CXX11
void ContentItem::set_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.value)
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ContentItem.value)
}
#endif
void ContentItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ContentItem.value)
}
void ContentItem::set_value(const char* value, size_t size) {
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ContentItem.value)
}
::std::string* ContentItem::mutable_value() {
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.value)
  return data_item_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentItem::release_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.value)
  if (has_value()) {
    clear_has_data_item();
    return data_item_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ContentItem::set_allocated_value(::std::string* value) {
  if (!has_value()) {
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_item();
  if (value != NULL) {
    set_has_value();
    data_item_.value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.value)
}

// .google.privacy.dlp.v2beta1.Table table = 4;
bool ContentItem::has_table() const {
  return data_item_case() == kTable;
}
void ContentItem::set_has_table() {
  _oneof_case_[0] = kTable;
}
void ContentItem::clear_table() {
  if (has_table()) {
    delete data_item_.table_;
    clear_has_data_item();
  }
}
 const ::google::privacy::dlp::v2beta1::Table& ContentItem::table() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.table)
  return has_table()
      ? *data_item_.table_
      : ::google::privacy::dlp::v2beta1::Table::default_instance();
}
::google::privacy::dlp::v2beta1::Table* ContentItem::mutable_table() {
  if (!has_table()) {
    clear_data_item();
    set_has_table();
    data_item_.table_ = new ::google::privacy::dlp::v2beta1::Table;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.table)
  return data_item_.table_;
}
::google::privacy::dlp::v2beta1::Table* ContentItem::release_table() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.table)
  if (has_table()) {
    clear_has_data_item();
    ::google::privacy::dlp::v2beta1::Table* temp = data_item_.table_;
    data_item_.table_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ContentItem::set_allocated_table(::google::privacy::dlp::v2beta1::Table* table) {
  clear_data_item();
  if (table) {
    set_has_table();
    data_item_.table_ = table;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.table)
}

bool ContentItem::has_data_item() const {
  return data_item_case() != DATA_ITEM_NOT_SET;
}
void ContentItem::clear_has_data_item() {
  _oneof_case_[0] = DATA_ITEM_NOT_SET;
}
ContentItem::DataItemCase ContentItem::data_item_case() const {
  return ContentItem::DataItemCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table_Row::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table_Row::Table_Row()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Table.Row)
}
Table_Row::Table_Row(const Table_Row& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Table.Row)
}

void Table_Row::SharedCtor() {
  _cached_size_ = 0;
}

Table_Row::~Table_Row() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Table.Row)
  SharedDtor();
}

void Table_Row::SharedDtor() {
}

void Table_Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table_Row::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Table_Row& Table_Row::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Table_Row* Table_Row::New(::google::protobuf::Arena* arena) const {
  Table_Row* n = new Table_Row;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table_Row::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Table.Row)
  values_.Clear();
}

bool Table_Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Table.Row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.Value values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Table.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Table.Row)
  return false;
#undef DO_
}

void Table_Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Table.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.Value values = 1;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Table.Row)
}

::google::protobuf::uint8* Table_Row::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Table.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.Value values = 1;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->values(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Table.Row)
  return target;
}

size_t Table_Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Table.Row)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.Value values = 1;
  {
    unsigned int count = this->values_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table_Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Table.Row)
  GOOGLE_DCHECK_NE(&from, this);
  const Table_Row* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table_Row>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Table.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Table.Row)
    MergeFrom(*source);
  }
}

void Table_Row::MergeFrom(const Table_Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Table.Row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Table_Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Table.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table_Row::CopyFrom(const Table_Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Table.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table_Row::IsInitialized() const {
  return true;
}

void Table_Row::Swap(Table_Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table_Row::InternalSwap(Table_Row* other) {
  values_.InternalSwap(&other->values_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table_Row::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Table_Row

// repeated .google.privacy.dlp.v2beta1.Value values = 1;
int Table_Row::values_size() const {
  return values_.size();
}
void Table_Row::clear_values() {
  values_.Clear();
}
const ::google::privacy::dlp::v2beta1::Value& Table_Row::values(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Table.Row.values)
  return values_.Get(index);
}
::google::privacy::dlp::v2beta1::Value* Table_Row::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Table.Row.values)
  return values_.Mutable(index);
}
::google::privacy::dlp::v2beta1::Value* Table_Row::add_values() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.Table.Row.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >*
Table_Row::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.Table.Row.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Value >&
Table_Row::values() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.Table.Row.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kHeadersFieldNumber;
const int Table::kRowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Table)
}
Table::Table(const Table& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_),
      rows_(from.rows_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Table)
}

void Table::SharedCtor() {
  _cached_size_ = 0;
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Table)
  SharedDtor();
}

void Table::SharedDtor() {
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Table& Table::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Table)
  headers_.Clear();
  rows_.Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.FieldId headers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.Table.Row rows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.FieldId headers = 1;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->headers(i), output);
  }

  // repeated .google.privacy.dlp.v2beta1.Table.Row rows = 2;
  for (unsigned int i = 0, n = this->rows_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rows(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.FieldId headers = 1;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->headers(i), deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.Table.Row rows = 2;
  for (unsigned int i = 0, n = this->rows_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->rows(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Table)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.FieldId headers = 1;
  {
    unsigned int count = this->headers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(i));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.Table.Row rows = 2;
  {
    unsigned int count = this->rows_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rows(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  rows_.MergeFrom(from.rows_);
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  headers_.InternalSwap(&other->headers_);
  rows_.InternalSwap(&other->rows_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Table

// repeated .google.privacy.dlp.v2beta1.FieldId headers = 1;
int Table::headers_size() const {
  return headers_.size();
}
void Table::clear_headers() {
  headers_.Clear();
}
const ::google::privacy::dlp::v2beta1::FieldId& Table::headers(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Table.headers)
  return headers_.Get(index);
}
::google::privacy::dlp::v2beta1::FieldId* Table::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Table.headers)
  return headers_.Mutable(index);
}
::google::privacy::dlp::v2beta1::FieldId* Table::add_headers() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.Table.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >*
Table::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.Table.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >&
Table::headers() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.Table.headers)
  return headers_;
}

// repeated .google.privacy.dlp.v2beta1.Table.Row rows = 2;
int Table::rows_size() const {
  return rows_.size();
}
void Table::clear_rows() {
  rows_.Clear();
}
const ::google::privacy::dlp::v2beta1::Table_Row& Table::rows(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Table.rows)
  return rows_.Get(index);
}
::google::privacy::dlp::v2beta1::Table_Row* Table::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Table.rows)
  return rows_.Mutable(index);
}
::google::privacy::dlp::v2beta1::Table_Row* Table::add_rows() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.Table.rows)
  return rows_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Table_Row >*
Table::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.Table.rows)
  return &rows_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Table_Row >&
Table::rows() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.Table.rows)
  return rows_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectResult::kFindingsFieldNumber;
const int InspectResult::kFindingsTruncatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectResult::InspectResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectResult)
}
InspectResult::InspectResult(const InspectResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      findings_(from.findings_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  findings_truncated_ = from.findings_truncated_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectResult)
}

void InspectResult::SharedCtor() {
  findings_truncated_ = false;
  _cached_size_ = 0;
}

InspectResult::~InspectResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectResult)
  SharedDtor();
}

void InspectResult::SharedDtor() {
}

void InspectResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectResult::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectResult& InspectResult::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectResult* InspectResult::New(::google::protobuf::Arena* arena) const {
  InspectResult* n = new InspectResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectResult)
  findings_.Clear();
  findings_truncated_ = false;
}

bool InspectResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_findings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool findings_truncated = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &findings_truncated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectResult)
  return false;
#undef DO_
}

void InspectResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
  for (unsigned int i = 0, n = this->findings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->findings(i), output);
  }

  // bool findings_truncated = 2;
  if (this->findings_truncated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->findings_truncated(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectResult)
}

::google::protobuf::uint8* InspectResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
  for (unsigned int i = 0, n = this->findings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->findings(i), deterministic, target);
  }

  // bool findings_truncated = 2;
  if (this->findings_truncated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->findings_truncated(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectResult)
  return target;
}

size_t InspectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectResult)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
  {
    unsigned int count = this->findings_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->findings(i));
    }
  }

  // bool findings_truncated = 2;
  if (this->findings_truncated() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectResult)
    MergeFrom(*source);
  }
}

void InspectResult::MergeFrom(const InspectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  findings_.MergeFrom(from.findings_);
  if (from.findings_truncated() != 0) {
    set_findings_truncated(from.findings_truncated());
  }
}

void InspectResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectResult::CopyFrom(const InspectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectResult::IsInitialized() const {
  return true;
}

void InspectResult::Swap(InspectResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectResult::InternalSwap(InspectResult* other) {
  findings_.InternalSwap(&other->findings_);
  std::swap(findings_truncated_, other->findings_truncated_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectResult::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectResult

// repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
int InspectResult::findings_size() const {
  return findings_.size();
}
void InspectResult::clear_findings() {
  findings_.Clear();
}
const ::google::privacy::dlp::v2beta1::Finding& InspectResult::findings(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_.Get(index);
}
::google::privacy::dlp::v2beta1::Finding* InspectResult::mutable_findings(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_.Mutable(index);
}
::google::privacy::dlp::v2beta1::Finding* InspectResult::add_findings() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding >*
InspectResult::mutable_findings() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectResult.findings)
  return &findings_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding >&
InspectResult::findings() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_;
}

// bool findings_truncated = 2;
void InspectResult::clear_findings_truncated() {
  findings_truncated_ = false;
}
bool InspectResult::findings_truncated() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectResult.findings_truncated)
  return findings_truncated_;
}
void InspectResult::set_findings_truncated(bool value) {
  
  findings_truncated_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectResult.findings_truncated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Finding::kQuoteFieldNumber;
const int Finding::kInfoTypeFieldNumber;
const int Finding::kLikelihoodFieldNumber;
const int Finding::kLocationFieldNumber;
const int Finding::kCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Finding::Finding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Finding)
}
Finding::Finding(const Finding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.quote().size() > 0) {
    quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
  }
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType(*from.info_type_);
  } else {
    info_type_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::google::privacy::dlp::v2beta1::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  likelihood_ = from.likelihood_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Finding)
}

void Finding::SharedCtor() {
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_type_, 0, reinterpret_cast<char*>(&likelihood_) -
    reinterpret_cast<char*>(&info_type_) + sizeof(likelihood_));
  _cached_size_ = 0;
}

Finding::~Finding() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Finding)
  SharedDtor();
}

void Finding::SharedDtor() {
  quote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete info_type_;
  }
  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete create_time_;
  }
}

void Finding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Finding::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Finding& Finding::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Finding* Finding::New(::google::protobuf::Arena* arena) const {
  Finding* n = new Finding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Finding::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Finding)
  quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  likelihood_ = 0;
}

bool Finding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Finding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string quote = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quote()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->quote().data(), this->quote().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.Finding.quote"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_likelihood(static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Location location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Finding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Finding)
  return false;
#undef DO_
}

void Finding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Finding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string quote = 1;
  if (this->quote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quote().data(), this->quote().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Finding.quote");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->quote(), output);
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_type_, output);
  }

  // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
  if (this->likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->likelihood(), output);
  }

  // .google.privacy.dlp.v2beta1.Location location = 4;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->location_, output);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->create_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Finding)
}

::google::protobuf::uint8* Finding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Finding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string quote = 1;
  if (this->quote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quote().data(), this->quote().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Finding.quote");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->quote(), target);
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_type_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
  if (this->likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->likelihood(), target);
  }

  // .google.privacy.dlp.v2beta1.Location location = 4;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->location_, deterministic, target);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->create_time_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Finding)
  return target;
}

size_t Finding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Finding)
  size_t total_size = 0;

  // string quote = 1;
  if (this->quote().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->quote());
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_type_);
  }

  // .google.privacy.dlp.v2beta1.Location location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
  if (this->likelihood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->likelihood());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Finding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Finding)
  GOOGLE_DCHECK_NE(&from, this);
  const Finding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Finding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Finding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Finding)
    MergeFrom(*source);
  }
}

void Finding::MergeFrom(const Finding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Finding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.quote().size() > 0) {

    quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
  }
  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
  }
  if (from.has_location()) {
    mutable_location()->::google::privacy::dlp::v2beta1::Location::MergeFrom(from.location());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.likelihood() != 0) {
    set_likelihood(from.likelihood());
  }
}

void Finding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Finding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Finding::CopyFrom(const Finding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Finding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Finding::IsInitialized() const {
  return true;
}

void Finding::Swap(Finding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Finding::InternalSwap(Finding* other) {
  quote_.Swap(&other->quote_);
  std::swap(info_type_, other->info_type_);
  std::swap(location_, other->location_);
  std::swap(create_time_, other->create_time_);
  std::swap(likelihood_, other->likelihood_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Finding::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Finding

// string quote = 1;
void Finding::clear_quote() {
  quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Finding::quote() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.quote)
  return quote_.GetNoArena();
}
void Finding::set_quote(const ::std::string& value) {
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Finding.quote)
}
#if LANG_CXX11
void Finding::set_quote(::std::string&& value) {
  
  quote_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.Finding.quote)
}
#endif
void Finding::set_quote(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.Finding.quote)
}
void Finding::set_quote(const char* value, size_t size) {
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.Finding.quote)
}
::std::string* Finding::mutable_quote() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.quote)
  return quote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Finding::release_quote() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.quote)
  
  return quote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Finding::set_allocated_quote(::std::string* quote) {
  if (quote != NULL) {
    
  } else {
    
  }
  quote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quote);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.quote)
}

// .google.privacy.dlp.v2beta1.InfoType info_type = 2;
bool Finding::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
void Finding::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) delete info_type_;
  info_type_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InfoType& Finding::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.info_type)
  return info_type_ != NULL ? *info_type_
                         : *::google::privacy::dlp::v2beta1::InfoType::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InfoType* Finding::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.info_type)
  return info_type_;
}
::google::privacy::dlp::v2beta1::InfoType* Finding::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
void Finding::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  delete info_type_;
  info_type_ = info_type;
  if (info_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.info_type)
}

// .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
void Finding::clear_likelihood() {
  likelihood_ = 0;
}
::google::privacy::dlp::v2beta1::Likelihood Finding::likelihood() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.likelihood)
  return static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(likelihood_);
}
void Finding::set_likelihood(::google::privacy::dlp::v2beta1::Likelihood value) {
  
  likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Finding.likelihood)
}

// .google.privacy.dlp.v2beta1.Location location = 4;
bool Finding::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void Finding::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::google::privacy::dlp::v2beta1::Location& Finding::location() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.location)
  return location_ != NULL ? *location_
                         : *::google::privacy::dlp::v2beta1::Location::internal_default_instance();
}
::google::privacy::dlp::v2beta1::Location* Finding::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::google::privacy::dlp::v2beta1::Location;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.location)
  return location_;
}
::google::privacy::dlp::v2beta1::Location* Finding::release_location() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.location)
  
  ::google::privacy::dlp::v2beta1::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void Finding::set_allocated_location(::google::privacy::dlp::v2beta1::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.location)
}

// .google.protobuf.Timestamp create_time = 6;
bool Finding::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void Finding::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& Finding::create_time() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Finding::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* Finding::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void Finding::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.create_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kByteRangeFieldNumber;
const int Location::kCodepointRangeFieldNumber;
const int Location::kImageBoxesFieldNumber;
const int Location::kRecordKeyFieldNumber;
const int Location::kFieldIdFieldNumber;
const int Location::kTableLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Location)
}
Location::Location(const Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_boxes_(from.image_boxes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_byte_range()) {
    byte_range_ = new ::google::privacy::dlp::v2beta1::Range(*from.byte_range_);
  } else {
    byte_range_ = NULL;
  }
  if (from.has_codepoint_range()) {
    codepoint_range_ = new ::google::privacy::dlp::v2beta1::Range(*from.codepoint_range_);
  } else {
    codepoint_range_ = NULL;
  }
  if (from.has_record_key()) {
    record_key_ = new ::google::privacy::dlp::v2beta1::RecordKey(*from.record_key_);
  } else {
    record_key_ = NULL;
  }
  if (from.has_field_id()) {
    field_id_ = new ::google::privacy::dlp::v2beta1::FieldId(*from.field_id_);
  } else {
    field_id_ = NULL;
  }
  if (from.has_table_location()) {
    table_location_ = new ::google::privacy::dlp::v2beta1::TableLocation(*from.table_location_);
  } else {
    table_location_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Location)
}

void Location::SharedCtor() {
  ::memset(&byte_range_, 0, reinterpret_cast<char*>(&table_location_) -
    reinterpret_cast<char*>(&byte_range_) + sizeof(table_location_));
  _cached_size_ = 0;
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (this != internal_default_instance()) {
    delete byte_range_;
  }
  if (this != internal_default_instance()) {
    delete codepoint_range_;
  }
  if (this != internal_default_instance()) {
    delete record_key_;
  }
  if (this != internal_default_instance()) {
    delete field_id_;
  }
  if (this != internal_default_instance()) {
    delete table_location_;
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Location& Location::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Location)
  image_boxes_.Clear();
  if (GetArenaNoVirtual() == NULL && byte_range_ != NULL) {
    delete byte_range_;
  }
  byte_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && codepoint_range_ != NULL) {
    delete codepoint_range_;
  }
  codepoint_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && record_key_ != NULL) {
    delete record_key_;
  }
  record_key_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_id_ != NULL) {
    delete field_id_;
  }
  field_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && table_location_ != NULL) {
    delete table_location_;
  }
  table_location_ = NULL;
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.Range byte_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_byte_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_codepoint_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image_boxes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.TableLocation table_location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Range byte_range = 1;
  if (this->has_byte_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->byte_range_, output);
  }

  // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
  if (this->has_codepoint_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->codepoint_range_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
  for (unsigned int i = 0, n = this->image_boxes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->image_boxes(i), output);
  }

  // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
  if (this->has_record_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->record_key_, output);
  }

  // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
  if (this->has_field_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->field_id_, output);
  }

  // .google.privacy.dlp.v2beta1.TableLocation table_location = 6;
  if (this->has_table_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->table_location_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.Range byte_range = 1;
  if (this->has_byte_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->byte_range_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
  if (this->has_codepoint_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->codepoint_range_, deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
  for (unsigned int i = 0, n = this->image_boxes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->image_boxes(i), deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
  if (this->has_record_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->record_key_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
  if (this->has_field_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->field_id_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.TableLocation table_location = 6;
  if (this->has_table_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->table_location_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Location)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
  {
    unsigned int count = this->image_boxes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_boxes(i));
    }
  }

  // .google.privacy.dlp.v2beta1.Range byte_range = 1;
  if (this->has_byte_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->byte_range_);
  }

  // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
  if (this->has_codepoint_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->codepoint_range_);
  }

  // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
  if (this->has_record_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->record_key_);
  }

  // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
  if (this->has_field_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_id_);
  }

  // .google.privacy.dlp.v2beta1.TableLocation table_location = 6;
  if (this->has_table_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_location_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_boxes_.MergeFrom(from.image_boxes_);
  if (from.has_byte_range()) {
    mutable_byte_range()->::google::privacy::dlp::v2beta1::Range::MergeFrom(from.byte_range());
  }
  if (from.has_codepoint_range()) {
    mutable_codepoint_range()->::google::privacy::dlp::v2beta1::Range::MergeFrom(from.codepoint_range());
  }
  if (from.has_record_key()) {
    mutable_record_key()->::google::privacy::dlp::v2beta1::RecordKey::MergeFrom(from.record_key());
  }
  if (from.has_field_id()) {
    mutable_field_id()->::google::privacy::dlp::v2beta1::FieldId::MergeFrom(from.field_id());
  }
  if (from.has_table_location()) {
    mutable_table_location()->::google::privacy::dlp::v2beta1::TableLocation::MergeFrom(from.table_location());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  image_boxes_.InternalSwap(&other->image_boxes_);
  std::swap(byte_range_, other->byte_range_);
  std::swap(codepoint_range_, other->codepoint_range_);
  std::swap(record_key_, other->record_key_);
  std::swap(field_id_, other->field_id_);
  std::swap(table_location_, other->table_location_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// .google.privacy.dlp.v2beta1.Range byte_range = 1;
bool Location::has_byte_range() const {
  return this != internal_default_instance() && byte_range_ != NULL;
}
void Location::clear_byte_range() {
  if (GetArenaNoVirtual() == NULL && byte_range_ != NULL) delete byte_range_;
  byte_range_ = NULL;
}
const ::google::privacy::dlp::v2beta1::Range& Location::byte_range() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.byte_range)
  return byte_range_ != NULL ? *byte_range_
                         : *::google::privacy::dlp::v2beta1::Range::internal_default_instance();
}
::google::privacy::dlp::v2beta1::Range* Location::mutable_byte_range() {
  
  if (byte_range_ == NULL) {
    byte_range_ = new ::google::privacy::dlp::v2beta1::Range;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.byte_range)
  return byte_range_;
}
::google::privacy::dlp::v2beta1::Range* Location::release_byte_range() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.byte_range)
  
  ::google::privacy::dlp::v2beta1::Range* temp = byte_range_;
  byte_range_ = NULL;
  return temp;
}
void Location::set_allocated_byte_range(::google::privacy::dlp::v2beta1::Range* byte_range) {
  delete byte_range_;
  byte_range_ = byte_range;
  if (byte_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.byte_range)
}

// .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
bool Location::has_codepoint_range() const {
  return this != internal_default_instance() && codepoint_range_ != NULL;
}
void Location::clear_codepoint_range() {
  if (GetArenaNoVirtual() == NULL && codepoint_range_ != NULL) delete codepoint_range_;
  codepoint_range_ = NULL;
}
const ::google::privacy::dlp::v2beta1::Range& Location::codepoint_range() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.codepoint_range)
  return codepoint_range_ != NULL ? *codepoint_range_
                         : *::google::privacy::dlp::v2beta1::Range::internal_default_instance();
}
::google::privacy::dlp::v2beta1::Range* Location::mutable_codepoint_range() {
  
  if (codepoint_range_ == NULL) {
    codepoint_range_ = new ::google::privacy::dlp::v2beta1::Range;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.codepoint_range)
  return codepoint_range_;
}
::google::privacy::dlp::v2beta1::Range* Location::release_codepoint_range() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.codepoint_range)
  
  ::google::privacy::dlp::v2beta1::Range* temp = codepoint_range_;
  codepoint_range_ = NULL;
  return temp;
}
void Location::set_allocated_codepoint_range(::google::privacy::dlp::v2beta1::Range* codepoint_range) {
  delete codepoint_range_;
  codepoint_range_ = codepoint_range;
  if (codepoint_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.codepoint_range)
}

// repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
int Location::image_boxes_size() const {
  return image_boxes_.size();
}
void Location::clear_image_boxes() {
  image_boxes_.Clear();
}
const ::google::privacy::dlp::v2beta1::ImageLocation& Location::image_boxes(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_.Get(index);
}
::google::privacy::dlp::v2beta1::ImageLocation* Location::mutable_image_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_.Mutable(index);
}
::google::privacy::dlp::v2beta1::ImageLocation* Location::add_image_boxes() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation >*
Location::mutable_image_boxes() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.Location.image_boxes)
  return &image_boxes_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation >&
Location::image_boxes() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_;
}

// .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
bool Location::has_record_key() const {
  return this != internal_default_instance() && record_key_ != NULL;
}
void Location::clear_record_key() {
  if (GetArenaNoVirtual() == NULL && record_key_ != NULL) delete record_key_;
  record_key_ = NULL;
}
const ::google::privacy::dlp::v2beta1::RecordKey& Location::record_key() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.record_key)
  return record_key_ != NULL ? *record_key_
                         : *::google::privacy::dlp::v2beta1::RecordKey::internal_default_instance();
}
::google::privacy::dlp::v2beta1::RecordKey* Location::mutable_record_key() {
  
  if (record_key_ == NULL) {
    record_key_ = new ::google::privacy::dlp::v2beta1::RecordKey;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.record_key)
  return record_key_;
}
::google::privacy::dlp::v2beta1::RecordKey* Location::release_record_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.record_key)
  
  ::google::privacy::dlp::v2beta1::RecordKey* temp = record_key_;
  record_key_ = NULL;
  return temp;
}
void Location::set_allocated_record_key(::google::privacy::dlp::v2beta1::RecordKey* record_key) {
  delete record_key_;
  record_key_ = record_key;
  if (record_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.record_key)
}

// .google.privacy.dlp.v2beta1.FieldId field_id = 5;
bool Location::has_field_id() const {
  return this != internal_default_instance() && field_id_ != NULL;
}
void Location::clear_field_id() {
  if (GetArenaNoVirtual() == NULL && field_id_ != NULL) delete field_id_;
  field_id_ = NULL;
}
const ::google::privacy::dlp::v2beta1::FieldId& Location::field_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.field_id)
  return field_id_ != NULL ? *field_id_
                         : *::google::privacy::dlp::v2beta1::FieldId::internal_default_instance();
}
::google::privacy::dlp::v2beta1::FieldId* Location::mutable_field_id() {
  
  if (field_id_ == NULL) {
    field_id_ = new ::google::privacy::dlp::v2beta1::FieldId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.field_id)
  return field_id_;
}
::google::privacy::dlp::v2beta1::FieldId* Location::release_field_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.field_id)
  
  ::google::privacy::dlp::v2beta1::FieldId* temp = field_id_;
  field_id_ = NULL;
  return temp;
}
void Location::set_allocated_field_id(::google::privacy::dlp::v2beta1::FieldId* field_id) {
  delete field_id_;
  field_id_ = field_id;
  if (field_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.field_id)
}

// .google.privacy.dlp.v2beta1.TableLocation table_location = 6;
bool Location::has_table_location() const {
  return this != internal_default_instance() && table_location_ != NULL;
}
void Location::clear_table_location() {
  if (GetArenaNoVirtual() == NULL && table_location_ != NULL) delete table_location_;
  table_location_ = NULL;
}
const ::google::privacy::dlp::v2beta1::TableLocation& Location::table_location() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.table_location)
  return table_location_ != NULL ? *table_location_
                         : *::google::privacy::dlp::v2beta1::TableLocation::internal_default_instance();
}
::google::privacy::dlp::v2beta1::TableLocation* Location::mutable_table_location() {
  
  if (table_location_ == NULL) {
    table_location_ = new ::google::privacy::dlp::v2beta1::TableLocation;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.table_location)
  return table_location_;
}
::google::privacy::dlp::v2beta1::TableLocation* Location::release_table_location() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.table_location)
  
  ::google::privacy::dlp::v2beta1::TableLocation* temp = table_location_;
  table_location_ = NULL;
  return temp;
}
void Location::set_allocated_table_location(::google::privacy::dlp::v2beta1::TableLocation* table_location) {
  delete table_location_;
  table_location_ = table_location;
  if (table_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.table_location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableLocation::kRowIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableLocation::TableLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.TableLocation)
}
TableLocation::TableLocation(const TableLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_index_ = from.row_index_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.TableLocation)
}

void TableLocation::SharedCtor() {
  row_index_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TableLocation::~TableLocation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.TableLocation)
  SharedDtor();
}

void TableLocation::SharedDtor() {
}

void TableLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableLocation::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableLocation& TableLocation::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableLocation* TableLocation::New(::google::protobuf::Arena* arena) const {
  TableLocation* n = new TableLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.TableLocation)
  row_index_ = GOOGLE_LONGLONG(0);
}

bool TableLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.TableLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 row_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &row_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.TableLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.TableLocation)
  return false;
#undef DO_
}

void TableLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.TableLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 row_index = 1;
  if (this->row_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->row_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.TableLocation)
}

::google::protobuf::uint8* TableLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.TableLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 row_index = 1;
  if (this->row_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->row_index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.TableLocation)
  return target;
}

size_t TableLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.TableLocation)
  size_t total_size = 0;

  // int64 row_index = 1;
  if (this->row_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->row_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.TableLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const TableLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.TableLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.TableLocation)
    MergeFrom(*source);
  }
}

void TableLocation::MergeFrom(const TableLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.TableLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row_index() != 0) {
    set_row_index(from.row_index());
  }
}

void TableLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.TableLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableLocation::CopyFrom(const TableLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.TableLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableLocation::IsInitialized() const {
  return true;
}

void TableLocation::Swap(TableLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableLocation::InternalSwap(TableLocation* other) {
  std::swap(row_index_, other->row_index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableLocation::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableLocation

// int64 row_index = 1;
void TableLocation::clear_row_index() {
  row_index_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TableLocation::row_index() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.TableLocation.row_index)
  return row_index_;
}
void TableLocation::set_row_index(::google::protobuf::int64 value) {
  
  row_index_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.TableLocation.row_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Range::kStartFieldNumber;
const int Range::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Range::Range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Range)
}
Range::Range(const Range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Range)
}

void Range::SharedCtor() {
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  _cached_size_ = 0;
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Range)
  SharedDtor();
}

void Range::SharedDtor() {
}

void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Range& Range::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Range* Range::New(::google::protobuf::Arena* arena) const {
  Range* n = new Range;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Range)
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Range)
  return false;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Range)
}

::google::protobuf::uint8* Range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Range)
  size_t total_size = 0;

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::Swap(Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Range::InternalSwap(Range* other) {
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Range

// int64 start = 1;
void Range::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Range::start() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Range.start)
  return start_;
}
void Range::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Range.start)
}

// int64 end = 2;
void Range::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Range::end() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Range.end)
  return end_;
}
void Range::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Range.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageLocation::kTopFieldNumber;
const int ImageLocation::kLeftFieldNumber;
const int ImageLocation::kWidthFieldNumber;
const int ImageLocation::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageLocation::ImageLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ImageLocation)
}
ImageLocation::ImageLocation(const ImageLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&top_, &from.top_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&top_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ImageLocation)
}

void ImageLocation::SharedCtor() {
  ::memset(&top_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&top_) + sizeof(height_));
  _cached_size_ = 0;
}

ImageLocation::~ImageLocation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ImageLocation)
  SharedDtor();
}

void ImageLocation::SharedDtor() {
}

void ImageLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageLocation::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageLocation& ImageLocation::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageLocation* ImageLocation::New(::google::protobuf::Arena* arena) const {
  ImageLocation* n = new ImageLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ImageLocation)
  ::memset(&top_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&top_) + sizeof(height_));
}

bool ImageLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ImageLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 top = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ImageLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ImageLocation)
  return false;
#undef DO_
}

void ImageLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ImageLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 top = 1;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->top(), output);
  }

  // int32 left = 2;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left(), output);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ImageLocation)
}

::google::protobuf::uint8* ImageLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ImageLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 top = 1;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->top(), target);
  }

  // int32 left = 2;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ImageLocation)
  return target;
}

size_t ImageLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ImageLocation)
  size_t total_size = 0;

  // int32 top = 1;
  if (this->top() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top());
  }

  // int32 left = 2;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ImageLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ImageLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ImageLocation)
    MergeFrom(*source);
  }
}

void ImageLocation::MergeFrom(const ImageLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ImageLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void ImageLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ImageLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageLocation::CopyFrom(const ImageLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ImageLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageLocation::IsInitialized() const {
  return true;
}

void ImageLocation::Swap(ImageLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageLocation::InternalSwap(ImageLocation* other) {
  std::swap(top_, other->top_);
  std::swap(left_, other->left_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageLocation::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageLocation

// int32 top = 1;
void ImageLocation::clear_top() {
  top_ = 0;
}
::google::protobuf::int32 ImageLocation::top() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.top)
  return top_;
}
void ImageLocation::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.top)
}

// int32 left = 2;
void ImageLocation::clear_left() {
  left_ = 0;
}
::google::protobuf::int32 ImageLocation::left() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.left)
  return left_;
}
void ImageLocation::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.left)
}

// int32 width = 3;
void ImageLocation::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 ImageLocation::width() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.width)
  return width_;
}
void ImageLocation::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.width)
}

// int32 height = 4;
void ImageLocation::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 ImageLocation::height() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.height)
  return height_;
}
void ImageLocation::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactContentRequest_ReplaceConfig::kInfoTypeFieldNumber;
const int RedactContentRequest_ReplaceConfig::kReplaceWithFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactContentRequest_ReplaceConfig::RedactContentRequest_ReplaceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
}
RedactContentRequest_ReplaceConfig::RedactContentRequest_ReplaceConfig(const RedactContentRequest_ReplaceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replace_with_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.replace_with().size() > 0) {
    replace_with_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replace_with_);
  }
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType(*from.info_type_);
  } else {
    info_type_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
}

void RedactContentRequest_ReplaceConfig::SharedCtor() {
  replace_with_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_type_ = NULL;
  _cached_size_ = 0;
}

RedactContentRequest_ReplaceConfig::~RedactContentRequest_ReplaceConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  SharedDtor();
}

void RedactContentRequest_ReplaceConfig::SharedDtor() {
  replace_with_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete info_type_;
  }
}

void RedactContentRequest_ReplaceConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedactContentRequest_ReplaceConfig::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedactContentRequest_ReplaceConfig& RedactContentRequest_ReplaceConfig::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedactContentRequest_ReplaceConfig* RedactContentRequest_ReplaceConfig::New(::google::protobuf::Arena* arena) const {
  RedactContentRequest_ReplaceConfig* n = new RedactContentRequest_ReplaceConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedactContentRequest_ReplaceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  replace_with_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
}

bool RedactContentRequest_ReplaceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string replace_with = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replace_with()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->replace_with().data(), this->replace_with().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  return false;
#undef DO_
}

void RedactContentRequest_ReplaceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_type_, output);
  }

  // string replace_with = 2;
  if (this->replace_with().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->replace_with().data(), this->replace_with().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->replace_with(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
}

::google::protobuf::uint8* RedactContentRequest_ReplaceConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_type_, deterministic, target);
  }

  // string replace_with = 2;
  if (this->replace_with().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->replace_with().data(), this->replace_with().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->replace_with(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  return target;
}

size_t RedactContentRequest_ReplaceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  size_t total_size = 0;

  // string replace_with = 2;
  if (this->replace_with().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->replace_with());
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_type_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedactContentRequest_ReplaceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactContentRequest_ReplaceConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedactContentRequest_ReplaceConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
    MergeFrom(*source);
  }
}

void RedactContentRequest_ReplaceConfig::MergeFrom(const RedactContentRequest_ReplaceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.replace_with().size() > 0) {

    replace_with_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replace_with_);
  }
  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
  }
}

void RedactContentRequest_ReplaceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactContentRequest_ReplaceConfig::CopyFrom(const RedactContentRequest_ReplaceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactContentRequest_ReplaceConfig::IsInitialized() const {
  return true;
}

void RedactContentRequest_ReplaceConfig::Swap(RedactContentRequest_ReplaceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactContentRequest_ReplaceConfig::InternalSwap(RedactContentRequest_ReplaceConfig* other) {
  replace_with_.Swap(&other->replace_with_);
  std::swap(info_type_, other->info_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedactContentRequest_ReplaceConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedactContentRequest_ReplaceConfig

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
bool RedactContentRequest_ReplaceConfig::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
void RedactContentRequest_ReplaceConfig::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) delete info_type_;
  info_type_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InfoType& RedactContentRequest_ReplaceConfig::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
  return info_type_ != NULL ? *info_type_
                         : *::google::privacy::dlp::v2beta1::InfoType::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InfoType* RedactContentRequest_ReplaceConfig::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
  return info_type_;
}
::google::privacy::dlp::v2beta1::InfoType* RedactContentRequest_ReplaceConfig::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
void RedactContentRequest_ReplaceConfig::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  delete info_type_;
  info_type_ = info_type;
  if (info_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
}

// string replace_with = 2;
void RedactContentRequest_ReplaceConfig::clear_replace_with() {
  replace_with_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RedactContentRequest_ReplaceConfig::replace_with() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
  return replace_with_.GetNoArena();
}
void RedactContentRequest_ReplaceConfig::set_replace_with(const ::std::string& value) {
  
  replace_with_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
#if LANG_CXX11
void RedactContentRequest_ReplaceConfig::set_replace_with(::std::string&& value) {
  
  replace_with_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
#endif
void RedactContentRequest_ReplaceConfig::set_replace_with(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  replace_with_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
void RedactContentRequest_ReplaceConfig::set_replace_with(const char* value, size_t size) {
  
  replace_with_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
::std::string* RedactContentRequest_ReplaceConfig::mutable_replace_with() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
  return replace_with_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedactContentRequest_ReplaceConfig::release_replace_with() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
  
  return replace_with_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedactContentRequest_ReplaceConfig::set_allocated_replace_with(::std::string* replace_with) {
  if (replace_with != NULL) {
    
  } else {
    
  }
  replace_with_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replace_with);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactContentRequest_ImageRedactionConfig::kInfoTypeFieldNumber;
const int RedactContentRequest_ImageRedactionConfig::kRedactAllTextFieldNumber;
const int RedactContentRequest_ImageRedactionConfig::kRedactionColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactContentRequest_ImageRedactionConfig::RedactContentRequest_ImageRedactionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
}
RedactContentRequest_ImageRedactionConfig::RedactContentRequest_ImageRedactionConfig(const RedactContentRequest_ImageRedactionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_redaction_color()) {
    redaction_color_ = new ::google::privacy::dlp::v2beta1::Color(*from.redaction_color_);
  } else {
    redaction_color_ = NULL;
  }
  clear_has_target();
  switch (from.target_case()) {
    case kInfoType: {
      mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
      break;
    }
    case kRedactAllText: {
      set_redact_all_text(from.redact_all_text());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
}

void RedactContentRequest_ImageRedactionConfig::SharedCtor() {
  redaction_color_ = NULL;
  clear_has_target();
  _cached_size_ = 0;
}

RedactContentRequest_ImageRedactionConfig::~RedactContentRequest_ImageRedactionConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  SharedDtor();
}

void RedactContentRequest_ImageRedactionConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete redaction_color_;
  }
  if (has_target()) {
    clear_target();
  }
}

void RedactContentRequest_ImageRedactionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedactContentRequest_ImageRedactionConfig::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedactContentRequest_ImageRedactionConfig& RedactContentRequest_ImageRedactionConfig::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedactContentRequest_ImageRedactionConfig* RedactContentRequest_ImageRedactionConfig::New(::google::protobuf::Arena* arena) const {
  RedactContentRequest_ImageRedactionConfig* n = new RedactContentRequest_ImageRedactionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedactContentRequest_ImageRedactionConfig::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  switch (target_case()) {
    case kInfoType: {
      delete target_.info_type_;
      break;
    }
    case kRedactAllText: {
      // No need to clear
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void RedactContentRequest_ImageRedactionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  if (GetArenaNoVirtual() == NULL && redaction_color_ != NULL) {
    delete redaction_color_;
  }
  redaction_color_ = NULL;
  clear_target();
}

bool RedactContentRequest_ImageRedactionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool redact_all_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          clear_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_.redact_all_text_)));
          set_has_redact_all_text();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Color redaction_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redaction_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  return false;
#undef DO_
}

void RedactContentRequest_ImageRedactionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *target_.info_type_, output);
  }

  // bool redact_all_text = 2;
  if (has_redact_all_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->redact_all_text(), output);
  }

  // .google.privacy.dlp.v2beta1.Color redaction_color = 3;
  if (this->has_redaction_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->redaction_color_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
}

::google::protobuf::uint8* RedactContentRequest_ImageRedactionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *target_.info_type_, deterministic, target);
  }

  // bool redact_all_text = 2;
  if (has_redact_all_text()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->redact_all_text(), target);
  }

  // .google.privacy.dlp.v2beta1.Color redaction_color = 3;
  if (this->has_redaction_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->redaction_color_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  return target;
}

size_t RedactContentRequest_ImageRedactionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  size_t total_size = 0;

  // .google.privacy.dlp.v2beta1.Color redaction_color = 3;
  if (this->has_redaction_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->redaction_color_);
  }

  switch (target_case()) {
    // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
    case kInfoType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *target_.info_type_);
      break;
    }
    // bool redact_all_text = 2;
    case kRedactAllText: {
      total_size += 1 + 1;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedactContentRequest_ImageRedactionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactContentRequest_ImageRedactionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedactContentRequest_ImageRedactionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
    MergeFrom(*source);
  }
}

void RedactContentRequest_ImageRedactionConfig::MergeFrom(const RedactContentRequest_ImageRedactionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_redaction_color()) {
    mutable_redaction_color()->::google::privacy::dlp::v2beta1::Color::MergeFrom(from.redaction_color());
  }
  switch (from.target_case()) {
    case kInfoType: {
      mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
      break;
    }
    case kRedactAllText: {
      set_redact_all_text(from.redact_all_text());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void RedactContentRequest_ImageRedactionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactContentRequest_ImageRedactionConfig::CopyFrom(const RedactContentRequest_ImageRedactionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactContentRequest_ImageRedactionConfig::IsInitialized() const {
  return true;
}

void RedactContentRequest_ImageRedactionConfig::Swap(RedactContentRequest_ImageRedactionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactContentRequest_ImageRedactionConfig::InternalSwap(RedactContentRequest_ImageRedactionConfig* other) {
  std::swap(redaction_color_, other->redaction_color_);
  std::swap(target_, other->target_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedactContentRequest_ImageRedactionConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedactContentRequest_ImageRedactionConfig

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
bool RedactContentRequest_ImageRedactionConfig::has_info_type() const {
  return target_case() == kInfoType;
}
void RedactContentRequest_ImageRedactionConfig::set_has_info_type() {
  _oneof_case_[0] = kInfoType;
}
void RedactContentRequest_ImageRedactionConfig::clear_info_type() {
  if (has_info_type()) {
    delete target_.info_type_;
    clear_has_target();
  }
}
 const ::google::privacy::dlp::v2beta1::InfoType& RedactContentRequest_ImageRedactionConfig::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.info_type)
  return has_info_type()
      ? *target_.info_type_
      : ::google::privacy::dlp::v2beta1::InfoType::default_instance();
}
::google::privacy::dlp::v2beta1::InfoType* RedactContentRequest_ImageRedactionConfig::mutable_info_type() {
  if (!has_info_type()) {
    clear_target();
    set_has_info_type();
    target_.info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.info_type)
  return target_.info_type_;
}
::google::privacy::dlp::v2beta1::InfoType* RedactContentRequest_ImageRedactionConfig::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.info_type)
  if (has_info_type()) {
    clear_has_target();
    ::google::privacy::dlp::v2beta1::InfoType* temp = target_.info_type_;
    target_.info_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RedactContentRequest_ImageRedactionConfig::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  clear_target();
  if (info_type) {
    set_has_info_type();
    target_.info_type_ = info_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.info_type)
}

// bool redact_all_text = 2;
bool RedactContentRequest_ImageRedactionConfig::has_redact_all_text() const {
  return target_case() == kRedactAllText;
}
void RedactContentRequest_ImageRedactionConfig::set_has_redact_all_text() {
  _oneof_case_[0] = kRedactAllText;
}
void RedactContentRequest_ImageRedactionConfig::clear_redact_all_text() {
  if (has_redact_all_text()) {
    target_.redact_all_text_ = false;
    clear_has_target();
  }
}
bool RedactContentRequest_ImageRedactionConfig::redact_all_text() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.redact_all_text)
  if (has_redact_all_text()) {
    return target_.redact_all_text_;
  }
  return false;
}
void RedactContentRequest_ImageRedactionConfig::set_redact_all_text(bool value) {
  if (!has_redact_all_text()) {
    clear_target();
    set_has_redact_all_text();
  }
  target_.redact_all_text_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.redact_all_text)
}

// .google.privacy.dlp.v2beta1.Color redaction_color = 3;
bool RedactContentRequest_ImageRedactionConfig::has_redaction_color() const {
  return this != internal_default_instance() && redaction_color_ != NULL;
}
void RedactContentRequest_ImageRedactionConfig::clear_redaction_color() {
  if (GetArenaNoVirtual() == NULL && redaction_color_ != NULL) delete redaction_color_;
  redaction_color_ = NULL;
}
const ::google::privacy::dlp::v2beta1::Color& RedactContentRequest_ImageRedactionConfig::redaction_color() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.redaction_color)
  return redaction_color_ != NULL ? *redaction_color_
                         : *::google::privacy::dlp::v2beta1::Color::internal_default_instance();
}
::google::privacy::dlp::v2beta1::Color* RedactContentRequest_ImageRedactionConfig::mutable_redaction_color() {
  
  if (redaction_color_ == NULL) {
    redaction_color_ = new ::google::privacy::dlp::v2beta1::Color;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.redaction_color)
  return redaction_color_;
}
::google::privacy::dlp::v2beta1::Color* RedactContentRequest_ImageRedactionConfig::release_redaction_color() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.redaction_color)
  
  ::google::privacy::dlp::v2beta1::Color* temp = redaction_color_;
  redaction_color_ = NULL;
  return temp;
}
void RedactContentRequest_ImageRedactionConfig::set_allocated_redaction_color(::google::privacy::dlp::v2beta1::Color* redaction_color) {
  delete redaction_color_;
  redaction_color_ = redaction_color;
  if (redaction_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig.redaction_color)
}

bool RedactContentRequest_ImageRedactionConfig::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
void RedactContentRequest_ImageRedactionConfig::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
RedactContentRequest_ImageRedactionConfig::TargetCase RedactContentRequest_ImageRedactionConfig::target_case() const {
  return RedactContentRequest_ImageRedactionConfig::TargetCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactContentRequest::kInspectConfigFieldNumber;
const int RedactContentRequest::kItemsFieldNumber;
const int RedactContentRequest::kReplaceConfigsFieldNumber;
const int RedactContentRequest::kImageRedactionConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactContentRequest::RedactContentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RedactContentRequest)
}
RedactContentRequest::RedactContentRequest(const RedactContentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      replace_configs_(from.replace_configs_),
      image_redaction_configs_(from.image_redaction_configs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RedactContentRequest)
}

void RedactContentRequest::SharedCtor() {
  inspect_config_ = NULL;
  _cached_size_ = 0;
}

RedactContentRequest::~RedactContentRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RedactContentRequest)
  SharedDtor();
}

void RedactContentRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete inspect_config_;
  }
}

void RedactContentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedactContentRequest::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedactContentRequest& RedactContentRequest::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedactContentRequest* RedactContentRequest::New(::google::protobuf::Arena* arena) const {
  RedactContentRequest* n = new RedactContentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedactContentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  items_.Clear();
  replace_configs_.Clear();
  image_redaction_configs_.Clear();
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}

bool RedactContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replace_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig image_redaction_configs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image_redaction_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RedactContentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RedactContentRequest)
  return false;
#undef DO_
}

void RedactContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->inspect_config_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
  for (unsigned int i = 0, n = this->replace_configs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->replace_configs(i), output);
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig image_redaction_configs = 4;
  for (unsigned int i = 0, n = this->image_redaction_configs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->image_redaction_configs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RedactContentRequest)
}

::google::protobuf::uint8* RedactContentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->inspect_config_, deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
  for (unsigned int i = 0, n = this->replace_configs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->replace_configs(i), deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig image_redaction_configs = 4;
  for (unsigned int i = 0, n = this->image_redaction_configs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->image_redaction_configs(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RedactContentRequest)
  return target;
}

size_t RedactContentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
  {
    unsigned int count = this->replace_configs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replace_configs(i));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig image_redaction_configs = 4;
  {
    unsigned int count = this->image_redaction_configs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_redaction_configs(i));
    }
  }

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inspect_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedactContentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactContentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedactContentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RedactContentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RedactContentRequest)
    MergeFrom(*source);
  }
}

void RedactContentRequest::MergeFrom(const RedactContentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  replace_configs_.MergeFrom(from.replace_configs_);
  image_redaction_configs_.MergeFrom(from.image_redaction_configs_);
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2beta1::InspectConfig::MergeFrom(from.inspect_config());
  }
}

void RedactContentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactContentRequest::CopyFrom(const RedactContentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactContentRequest::IsInitialized() const {
  return true;
}

void RedactContentRequest::Swap(RedactContentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactContentRequest::InternalSwap(RedactContentRequest* other) {
  items_.InternalSwap(&other->items_);
  replace_configs_.InternalSwap(&other->replace_configs_);
  image_redaction_configs_.InternalSwap(&other->image_redaction_configs_);
  std::swap(inspect_config_, other->inspect_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedactContentRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedactContentRequest

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
bool RedactContentRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
void RedactContentRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) delete inspect_config_;
  inspect_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InspectConfig& RedactContentRequest::inspect_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
  return inspect_config_ != NULL ? *inspect_config_
                         : *::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InspectConfig* RedactContentRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
  return inspect_config_;
}
::google::privacy::dlp::v2beta1::InspectConfig* RedactContentRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
void RedactContentRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  delete inspect_config_;
  inspect_config_ = inspect_config;
  if (inspect_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
}

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
int RedactContentRequest::items_size() const {
  return items_.size();
}
void RedactContentRequest::clear_items() {
  items_.Clear();
}
const ::google::privacy::dlp::v2beta1::ContentItem& RedactContentRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_.Get(index);
}
::google::privacy::dlp::v2beta1::ContentItem* RedactContentRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_.Mutable(index);
}
::google::privacy::dlp::v2beta1::ContentItem* RedactContentRequest::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
RedactContentRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
RedactContentRequest::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_;
}

// repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
int RedactContentRequest::replace_configs_size() const {
  return replace_configs_.size();
}
void RedactContentRequest::clear_replace_configs() {
  replace_configs_.Clear();
}
const ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig& RedactContentRequest::replace_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_.Get(index);
}
::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig* RedactContentRequest::mutable_replace_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_.Mutable(index);
}
::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig* RedactContentRequest::add_replace_configs() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig >*
RedactContentRequest::mutable_replace_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return &replace_configs_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig >&
RedactContentRequest::replace_configs() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_;
}

// repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ImageRedactionConfig image_redaction_configs = 4;
int RedactContentRequest::image_redaction_configs_size() const {
  return image_redaction_configs_.size();
}
void RedactContentRequest::clear_image_redaction_configs() {
  image_redaction_configs_.Clear();
}
const ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig& RedactContentRequest::image_redaction_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.image_redaction_configs)
  return image_redaction_configs_.Get(index);
}
::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig* RedactContentRequest::mutable_image_redaction_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.image_redaction_configs)
  return image_redaction_configs_.Mutable(index);
}
::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig* RedactContentRequest::add_image_redaction_configs() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentRequest.image_redaction_configs)
  return image_redaction_configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig >*
RedactContentRequest::mutable_image_redaction_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentRequest.image_redaction_configs)
  return &image_redaction_configs_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ImageRedactionConfig >&
RedactContentRequest::image_redaction_configs() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentRequest.image_redaction_configs)
  return image_redaction_configs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kRedFieldNumber;
const int Color::kGreenFieldNumber;
const int Color::kBlueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Color)
}
Color::Color(const Color& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&red_, &from.red_,
    reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Color)
}

void Color::SharedCtor() {
  ::memset(&red_, 0, reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_) + sizeof(blue_));
  _cached_size_ = 0;
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Color)
  SharedDtor();
}

void Color::SharedDtor() {
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Color& Color::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Color)
  ::memset(&red_, 0, reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_) + sizeof(blue_));
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float red = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &red_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float green = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &green_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float red = 1;
  if (this->red() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->red(), output);
  }

  // float green = 2;
  if (this->green() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->green(), output);
  }

  // float blue = 3;
  if (this->blue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->blue(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float red = 1;
  if (this->red() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->red(), target);
  }

  // float green = 2;
  if (this->green() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->green(), target);
  }

  // float blue = 3;
  if (this->blue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->blue(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Color)
  size_t total_size = 0;

  // float red = 1;
  if (this->red() != 0) {
    total_size += 1 + 4;
  }

  // float green = 2;
  if (this->green() != 0) {
    total_size += 1 + 4;
  }

  // float blue = 3;
  if (this->blue() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.red() != 0) {
    set_red(from.red());
  }
  if (from.green() != 0) {
    set_green(from.green());
  }
  if (from.blue() != 0) {
    set_blue(from.blue());
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  std::swap(red_, other->red_);
  std::swap(green_, other->green_);
  std::swap(blue_, other->blue_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// float red = 1;
void Color::clear_red() {
  red_ = 0;
}
float Color::red() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Color.red)
  return red_;
}
void Color::set_red(float value) {
  
  red_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Color.red)
}

// float green = 2;
void Color::clear_green() {
  green_ = 0;
}
float Color::green() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Color.green)
  return green_;
}
void Color::set_green(float value) {
  
  green_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Color.green)
}

// float blue = 3;
void Color::clear_blue() {
  blue_ = 0;
}
float Color::blue() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Color.blue)
  return blue_;
}
void Color::set_blue(float value) {
  
  blue_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Color.blue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactContentResponse::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactContentResponse::RedactContentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RedactContentResponse)
}
RedactContentResponse::RedactContentResponse(const RedactContentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RedactContentResponse)
}

void RedactContentResponse::SharedCtor() {
  _cached_size_ = 0;
}

RedactContentResponse::~RedactContentResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RedactContentResponse)
  SharedDtor();
}

void RedactContentResponse::SharedDtor() {
}

void RedactContentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedactContentResponse::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedactContentResponse& RedactContentResponse::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedactContentResponse* RedactContentResponse::New(::google::protobuf::Arena* arena) const {
  RedactContentResponse* n = new RedactContentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedactContentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  items_.Clear();
}

bool RedactContentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RedactContentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RedactContentResponse)
  return false;
#undef DO_
}

void RedactContentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RedactContentResponse)
}

::google::protobuf::uint8* RedactContentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RedactContentResponse)
  return target;
}

size_t RedactContentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedactContentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactContentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedactContentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RedactContentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RedactContentResponse)
    MergeFrom(*source);
  }
}

void RedactContentResponse::MergeFrom(const RedactContentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void RedactContentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactContentResponse::CopyFrom(const RedactContentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactContentResponse::IsInitialized() const {
  return true;
}

void RedactContentResponse::Swap(RedactContentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactContentResponse::InternalSwap(RedactContentResponse* other) {
  items_.InternalSwap(&other->items_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedactContentResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedactContentResponse

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
int RedactContentResponse::items_size() const {
  return items_.size();
}
void RedactContentResponse::clear_items() {
  items_.Clear();
}
const ::google::privacy::dlp::v2beta1::ContentItem& RedactContentResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_.Get(index);
}
::google::privacy::dlp::v2beta1::ContentItem* RedactContentResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_.Mutable(index);
}
::google::privacy::dlp::v2beta1::ContentItem* RedactContentResponse::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
RedactContentResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
RedactContentResponse::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectContentRequest::kInspectConfigFieldNumber;
const int InspectContentRequest::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectContentRequest::InspectContentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectContentRequest)
}
InspectContentRequest::InspectContentRequest(const InspectContentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectContentRequest)
}

void InspectContentRequest::SharedCtor() {
  inspect_config_ = NULL;
  _cached_size_ = 0;
}

InspectContentRequest::~InspectContentRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectContentRequest)
  SharedDtor();
}

void InspectContentRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete inspect_config_;
  }
}

void InspectContentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectContentRequest::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectContentRequest& InspectContentRequest::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectContentRequest* InspectContentRequest::New(::google::protobuf::Arena* arena) const {
  InspectContentRequest* n = new InspectContentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectContentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  items_.Clear();
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}

bool InspectContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectContentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectContentRequest)
  return false;
#undef DO_
}

void InspectContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->inspect_config_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectContentRequest)
}

::google::protobuf::uint8* InspectContentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->inspect_config_, deterministic, target);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectContentRequest)
  return target;
}

size_t InspectContentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inspect_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectContentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectContentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectContentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectContentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectContentRequest)
    MergeFrom(*source);
  }
}

void InspectContentRequest::MergeFrom(const InspectContentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2beta1::InspectConfig::MergeFrom(from.inspect_config());
  }
}

void InspectContentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectContentRequest::CopyFrom(const InspectContentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectContentRequest::IsInitialized() const {
  return true;
}

void InspectContentRequest::Swap(InspectContentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectContentRequest::InternalSwap(InspectContentRequest* other) {
  items_.InternalSwap(&other->items_);
  std::swap(inspect_config_, other->inspect_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectContentRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectContentRequest

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
bool InspectContentRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
void InspectContentRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) delete inspect_config_;
  inspect_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InspectConfig& InspectContentRequest::inspect_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
  return inspect_config_ != NULL ? *inspect_config_
                         : *::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InspectConfig* InspectContentRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
  return inspect_config_;
}
::google::privacy::dlp::v2beta1::InspectConfig* InspectContentRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
void InspectContentRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  delete inspect_config_;
  inspect_config_ = inspect_config;
  if (inspect_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
}

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
int InspectContentRequest::items_size() const {
  return items_.size();
}
void InspectContentRequest::clear_items() {
  items_.Clear();
}
const ::google::privacy::dlp::v2beta1::ContentItem& InspectContentRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_.Get(index);
}
::google::privacy::dlp::v2beta1::ContentItem* InspectContentRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_.Mutable(index);
}
::google::privacy::dlp::v2beta1::ContentItem* InspectContentRequest::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
InspectContentRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
InspectContentRequest::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectContentResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectContentResponse::InspectContentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectContentResponse)
}
InspectContentResponse::InspectContentResponse(const InspectContentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectContentResponse)
}

void InspectContentResponse::SharedCtor() {
  _cached_size_ = 0;
}

InspectContentResponse::~InspectContentResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectContentResponse)
  SharedDtor();
}

void InspectContentResponse::SharedDtor() {
}

void InspectContentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectContentResponse::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectContentResponse& InspectContentResponse::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectContentResponse* InspectContentResponse::New(::google::protobuf::Arena* arena) const {
  InspectContentResponse* n = new InspectContentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectContentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  results_.Clear();
}

bool InspectContentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectContentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectContentResponse)
  return false;
#undef DO_
}

void InspectContentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectContentResponse)
}

::google::protobuf::uint8* InspectContentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectContentResponse)
  return target;
}

size_t InspectContentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectContentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectContentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectContentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectContentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectContentResponse)
    MergeFrom(*source);
  }
}

void InspectContentResponse::MergeFrom(const InspectContentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void InspectContentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectContentResponse::CopyFrom(const InspectContentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectContentResponse::IsInitialized() const {
  return true;
}

void InspectContentResponse::Swap(InspectContentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectContentResponse::InternalSwap(InspectContentResponse* other) {
  results_.InternalSwap(&other->results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectContentResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectContentResponse

// repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
int InspectContentResponse::results_size() const {
  return results_.size();
}
void InspectContentResponse::clear_results() {
  results_.Clear();
}
const ::google::privacy::dlp::v2beta1::InspectResult& InspectContentResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_.Get(index);
}
::google::privacy::dlp::v2beta1::InspectResult* InspectContentResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_.Mutable(index);
}
::google::privacy::dlp::v2beta1::InspectResult* InspectContentResponse::add_results() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult >*
InspectContentResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult >&
InspectContentResponse::results() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateInspectOperationRequest::kInspectConfigFieldNumber;
const int CreateInspectOperationRequest::kStorageConfigFieldNumber;
const int CreateInspectOperationRequest::kOutputConfigFieldNumber;
const int CreateInspectOperationRequest::kOperationConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateInspectOperationRequest::CreateInspectOperationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
}
CreateInspectOperationRequest::CreateInspectOperationRequest(const CreateInspectOperationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = NULL;
  }
  if (from.has_storage_config()) {
    storage_config_ = new ::google::privacy::dlp::v2beta1::StorageConfig(*from.storage_config_);
  } else {
    storage_config_ = NULL;
  }
  if (from.has_output_config()) {
    output_config_ = new ::google::privacy::dlp::v2beta1::OutputStorageConfig(*from.output_config_);
  } else {
    output_config_ = NULL;
  }
  if (from.has_operation_config()) {
    operation_config_ = new ::google::privacy::dlp::v2beta1::OperationConfig(*from.operation_config_);
  } else {
    operation_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
}

void CreateInspectOperationRequest::SharedCtor() {
  ::memset(&inspect_config_, 0, reinterpret_cast<char*>(&operation_config_) -
    reinterpret_cast<char*>(&inspect_config_) + sizeof(operation_config_));
  _cached_size_ = 0;
}

CreateInspectOperationRequest::~CreateInspectOperationRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  SharedDtor();
}

void CreateInspectOperationRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete inspect_config_;
  }
  if (this != internal_default_instance()) {
    delete storage_config_;
  }
  if (this != internal_default_instance()) {
    delete output_config_;
  }
  if (this != internal_default_instance()) {
    delete operation_config_;
  }
}

void CreateInspectOperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateInspectOperationRequest::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateInspectOperationRequest& CreateInspectOperationRequest::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateInspectOperationRequest* CreateInspectOperationRequest::New(::google::protobuf::Arena* arena) const {
  CreateInspectOperationRequest* n = new CreateInspectOperationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateInspectOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && storage_config_ != NULL) {
    delete storage_config_;
  }
  storage_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && output_config_ != NULL) {
    delete output_config_;
  }
  output_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && operation_config_ != NULL) {
    delete operation_config_;
  }
  operation_config_ = NULL;
}

bool CreateInspectOperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.OperationConfig operation_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operation_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  return false;
#undef DO_
}

void CreateInspectOperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->inspect_config_, output);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
  if (this->has_storage_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->storage_config_, output);
  }

  // .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;
  if (this->has_output_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->output_config_, output);
  }

  // .google.privacy.dlp.v2beta1.OperationConfig operation_config = 5;
  if (this->has_operation_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->operation_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
}

::google::protobuf::uint8* CreateInspectOperationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->inspect_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
  if (this->has_storage_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->storage_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;
  if (this->has_output_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->output_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.OperationConfig operation_config = 5;
  if (this->has_operation_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->operation_config_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  return target;
}

size_t CreateInspectOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  size_t total_size = 0;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inspect_config_);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
  if (this->has_storage_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->storage_config_);
  }

  // .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;
  if (this->has_output_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->output_config_);
  }

  // .google.privacy.dlp.v2beta1.OperationConfig operation_config = 5;
  if (this->has_operation_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operation_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateInspectOperationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateInspectOperationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateInspectOperationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
    MergeFrom(*source);
  }
}

void CreateInspectOperationRequest::MergeFrom(const CreateInspectOperationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2beta1::InspectConfig::MergeFrom(from.inspect_config());
  }
  if (from.has_storage_config()) {
    mutable_storage_config()->::google::privacy::dlp::v2beta1::StorageConfig::MergeFrom(from.storage_config());
  }
  if (from.has_output_config()) {
    mutable_output_config()->::google::privacy::dlp::v2beta1::OutputStorageConfig::MergeFrom(from.output_config());
  }
  if (from.has_operation_config()) {
    mutable_operation_config()->::google::privacy::dlp::v2beta1::OperationConfig::MergeFrom(from.operation_config());
  }
}

void CreateInspectOperationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateInspectOperationRequest::CopyFrom(const CreateInspectOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInspectOperationRequest::IsInitialized() const {
  return true;
}

void CreateInspectOperationRequest::Swap(CreateInspectOperationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateInspectOperationRequest::InternalSwap(CreateInspectOperationRequest* other) {
  std::swap(inspect_config_, other->inspect_config_);
  std::swap(storage_config_, other->storage_config_);
  std::swap(output_config_, other->output_config_);
  std::swap(operation_config_, other->operation_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateInspectOperationRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateInspectOperationRequest

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
bool CreateInspectOperationRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
void CreateInspectOperationRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) delete inspect_config_;
  inspect_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InspectConfig& CreateInspectOperationRequest::inspect_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
  return inspect_config_ != NULL ? *inspect_config_
                         : *::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InspectConfig* CreateInspectOperationRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
  return inspect_config_;
}
::google::privacy::dlp::v2beta1::InspectConfig* CreateInspectOperationRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
void CreateInspectOperationRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  delete inspect_config_;
  inspect_config_ = inspect_config;
  if (inspect_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
}

// .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
bool CreateInspectOperationRequest::has_storage_config() const {
  return this != internal_default_instance() && storage_config_ != NULL;
}
void CreateInspectOperationRequest::clear_storage_config() {
  if (GetArenaNoVirtual() == NULL && storage_config_ != NULL) delete storage_config_;
  storage_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::StorageConfig& CreateInspectOperationRequest::storage_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
  return storage_config_ != NULL ? *storage_config_
                         : *::google::privacy::dlp::v2beta1::StorageConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::StorageConfig* CreateInspectOperationRequest::mutable_storage_config() {
  
  if (storage_config_ == NULL) {
    storage_config_ = new ::google::privacy::dlp::v2beta1::StorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
  return storage_config_;
}
::google::privacy::dlp::v2beta1::StorageConfig* CreateInspectOperationRequest::release_storage_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
  
  ::google::privacy::dlp::v2beta1::StorageConfig* temp = storage_config_;
  storage_config_ = NULL;
  return temp;
}
void CreateInspectOperationRequest::set_allocated_storage_config(::google::privacy::dlp::v2beta1::StorageConfig* storage_config) {
  delete storage_config_;
  storage_config_ = storage_config;
  if (storage_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
}

// .google.privacy.dlp.v2beta1.OutputStorageConfig output_config = 3;
bool CreateInspectOperationRequest::has_output_config() const {
  return this != internal_default_instance() && output_config_ != NULL;
}
void CreateInspectOperationRequest::clear_output_config() {
  if (GetArenaNoVirtual() == NULL && output_config_ != NULL) delete output_config_;
  output_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::OutputStorageConfig& CreateInspectOperationRequest::output_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.output_config)
  return output_config_ != NULL ? *output_config_
                         : *::google::privacy::dlp::v2beta1::OutputStorageConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::OutputStorageConfig* CreateInspectOperationRequest::mutable_output_config() {
  
  if (output_config_ == NULL) {
    output_config_ = new ::google::privacy::dlp::v2beta1::OutputStorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.output_config)
  return output_config_;
}
::google::privacy::dlp::v2beta1::OutputStorageConfig* CreateInspectOperationRequest::release_output_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.output_config)
  
  ::google::privacy::dlp::v2beta1::OutputStorageConfig* temp = output_config_;
  output_config_ = NULL;
  return temp;
}
void CreateInspectOperationRequest::set_allocated_output_config(::google::privacy::dlp::v2beta1::OutputStorageConfig* output_config) {
  delete output_config_;
  output_config_ = output_config;
  if (output_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.output_config)
}

// .google.privacy.dlp.v2beta1.OperationConfig operation_config = 5;
bool CreateInspectOperationRequest::has_operation_config() const {
  return this != internal_default_instance() && operation_config_ != NULL;
}
void CreateInspectOperationRequest::clear_operation_config() {
  if (GetArenaNoVirtual() == NULL && operation_config_ != NULL) delete operation_config_;
  operation_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::OperationConfig& CreateInspectOperationRequest::operation_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.operation_config)
  return operation_config_ != NULL ? *operation_config_
                         : *::google::privacy::dlp::v2beta1::OperationConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::OperationConfig* CreateInspectOperationRequest::mutable_operation_config() {
  
  if (operation_config_ == NULL) {
    operation_config_ = new ::google::privacy::dlp::v2beta1::OperationConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.operation_config)
  return operation_config_;
}
::google::privacy::dlp::v2beta1::OperationConfig* CreateInspectOperationRequest::release_operation_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.operation_config)
  
  ::google::privacy::dlp::v2beta1::OperationConfig* temp = operation_config_;
  operation_config_ = NULL;
  return temp;
}
void CreateInspectOperationRequest::set_allocated_operation_config(::google::privacy::dlp::v2beta1::OperationConfig* operation_config) {
  delete operation_config_;
  operation_config_ = operation_config;
  if (operation_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.operation_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutputStorageConfig::kTableFieldNumber;
const int OutputStorageConfig::kStoragePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutputStorageConfig::OutputStorageConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.OutputStorageConfig)
}
OutputStorageConfig::OutputStorageConfig(const OutputStorageConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kTable: {
      mutable_table()->::google::privacy::dlp::v2beta1::BigQueryTable::MergeFrom(from.table());
      break;
    }
    case kStoragePath: {
      mutable_storage_path()->::google::privacy::dlp::v2beta1::CloudStoragePath::MergeFrom(from.storage_path());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.OutputStorageConfig)
}

void OutputStorageConfig::SharedCtor() {
  clear_has_type();
  _cached_size_ = 0;
}

OutputStorageConfig::~OutputStorageConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.OutputStorageConfig)
  SharedDtor();
}

void OutputStorageConfig::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void OutputStorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutputStorageConfig::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OutputStorageConfig& OutputStorageConfig::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

OutputStorageConfig* OutputStorageConfig::New(::google::protobuf::Arena* arena) const {
  OutputStorageConfig* n = new OutputStorageConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OutputStorageConfig::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  switch (type_case()) {
    case kTable: {
      delete type_.table_;
      break;
    }
    case kStoragePath: {
      delete type_.storage_path_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void OutputStorageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  clear_type();
}

bool OutputStorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.BigQueryTable table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.CloudStoragePath storage_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.OutputStorageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.OutputStorageConfig)
  return false;
#undef DO_
}

void OutputStorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.BigQueryTable table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *type_.table_, output);
  }

  // .google.privacy.dlp.v2beta1.CloudStoragePath storage_path = 2;
  if (has_storage_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.storage_path_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.OutputStorageConfig)
}

::google::protobuf::uint8* OutputStorageConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.BigQueryTable table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *type_.table_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.CloudStoragePath storage_path = 2;
  if (has_storage_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *type_.storage_path_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.OutputStorageConfig)
  return target;
}

size_t OutputStorageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  size_t total_size = 0;

  switch (type_case()) {
    // .google.privacy.dlp.v2beta1.BigQueryTable table = 1;
    case kTable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.table_);
      break;
    }
    // .google.privacy.dlp.v2beta1.CloudStoragePath storage_path = 2;
    case kStoragePath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.storage_path_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutputStorageConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputStorageConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OutputStorageConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.OutputStorageConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.OutputStorageConfig)
    MergeFrom(*source);
  }
}

void OutputStorageConfig::MergeFrom(const OutputStorageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kTable: {
      mutable_table()->::google::privacy::dlp::v2beta1::BigQueryTable::MergeFrom(from.table());
      break;
    }
    case kStoragePath: {
      mutable_storage_path()->::google::privacy::dlp::v2beta1::CloudStoragePath::MergeFrom(from.storage_path());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void OutputStorageConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputStorageConfig::CopyFrom(const OutputStorageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.OutputStorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputStorageConfig::IsInitialized() const {
  return true;
}

void OutputStorageConfig::Swap(OutputStorageConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutputStorageConfig::InternalSwap(OutputStorageConfig* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OutputStorageConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OutputStorageConfig

// .google.privacy.dlp.v2beta1.BigQueryTable table = 1;
bool OutputStorageConfig::has_table() const {
  return type_case() == kTable;
}
void OutputStorageConfig::set_has_table() {
  _oneof_case_[0] = kTable;
}
void OutputStorageConfig::clear_table() {
  if (has_table()) {
    delete type_.table_;
    clear_has_type();
  }
}
 const ::google::privacy::dlp::v2beta1::BigQueryTable& OutputStorageConfig::table() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.OutputStorageConfig.table)
  return has_table()
      ? *type_.table_
      : ::google::privacy::dlp::v2beta1::BigQueryTable::default_instance();
}
::google::privacy::dlp::v2beta1::BigQueryTable* OutputStorageConfig::mutable_table() {
  if (!has_table()) {
    clear_type();
    set_has_table();
    type_.table_ = new ::google::privacy::dlp::v2beta1::BigQueryTable;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.OutputStorageConfig.table)
  return type_.table_;
}
::google::privacy::dlp::v2beta1::BigQueryTable* OutputStorageConfig::release_table() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.OutputStorageConfig.table)
  if (has_table()) {
    clear_has_type();
    ::google::privacy::dlp::v2beta1::BigQueryTable* temp = type_.table_;
    type_.table_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OutputStorageConfig::set_allocated_table(::google::privacy::dlp::v2beta1::BigQueryTable* table) {
  clear_type();
  if (table) {
    set_has_table();
    type_.table_ = table;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.OutputStorageConfig.table)
}

// .google.privacy.dlp.v2beta1.CloudStoragePath storage_path = 2;
bool OutputStorageConfig::has_storage_path() const {
  return type_case() == kStoragePath;
}
void OutputStorageConfig::set_has_storage_path() {
  _oneof_case_[0] = kStoragePath;
}
void OutputStorageConfig::clear_storage_path() {
  if (has_storage_path()) {
    delete type_.storage_path_;
    clear_has_type();
  }
}
 const ::google::privacy::dlp::v2beta1::CloudStoragePath& OutputStorageConfig::storage_path() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.OutputStorageConfig.storage_path)
  return has_storage_path()
      ? *type_.storage_path_
      : ::google::privacy::dlp::v2beta1::CloudStoragePath::default_instance();
}
::google::privacy::dlp::v2beta1::CloudStoragePath* OutputStorageConfig::mutable_storage_path() {
  if (!has_storage_path()) {
    clear_type();
    set_has_storage_path();
    type_.storage_path_ = new ::google::privacy::dlp::v2beta1::CloudStoragePath;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.OutputStorageConfig.storage_path)
  return type_.storage_path_;
}
::google::privacy::dlp::v2beta1::CloudStoragePath* OutputStorageConfig::release_storage_path() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.OutputStorageConfig.storage_path)
  if (has_storage_path()) {
    clear_has_type();
    ::google::privacy::dlp::v2beta1::CloudStoragePath* temp = type_.storage_path_;
    type_.storage_path_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void OutputStorageConfig::set_allocated_storage_path(::google::privacy::dlp::v2beta1::CloudStoragePath* storage_path) {
  clear_type();
  if (storage_path) {
    set_has_storage_path();
    type_.storage_path_ = storage_path;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.OutputStorageConfig.storage_path)
}

bool OutputStorageConfig::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void OutputStorageConfig::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
OutputStorageConfig::TypeCase OutputStorageConfig::type_case() const {
  return OutputStorageConfig::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoTypeStatistics::kInfoTypeFieldNumber;
const int InfoTypeStatistics::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoTypeStatistics::InfoTypeStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InfoTypeStatistics)
}
InfoTypeStatistics::InfoTypeStatistics(const InfoTypeStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType(*from.info_type_);
  } else {
    info_type_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InfoTypeStatistics)
}

void InfoTypeStatistics::SharedCtor() {
  ::memset(&info_type_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&info_type_) + sizeof(count_));
  _cached_size_ = 0;
}

InfoTypeStatistics::~InfoTypeStatistics() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  SharedDtor();
}

void InfoTypeStatistics::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_type_;
  }
}

void InfoTypeStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoTypeStatistics::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfoTypeStatistics& InfoTypeStatistics::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfoTypeStatistics* InfoTypeStatistics::New(::google::protobuf::Arena* arena) const {
  InfoTypeStatistics* n = new InfoTypeStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoTypeStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
  count_ = GOOGLE_LONGLONG(0);
}

bool InfoTypeStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  return false;
#undef DO_
}

void InfoTypeStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_type_, output);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InfoTypeStatistics)
}

::google::protobuf::uint8* InfoTypeStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_type_, deterministic, target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  return target;
}

size_t InfoTypeStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  size_t total_size = 0;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_type_);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoTypeStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoTypeStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoTypeStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InfoTypeStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InfoTypeStatistics)
    MergeFrom(*source);
  }
}

void InfoTypeStatistics::MergeFrom(const InfoTypeStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void InfoTypeStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoTypeStatistics::CopyFrom(const InfoTypeStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoTypeStatistics::IsInitialized() const {
  return true;
}

void InfoTypeStatistics::Swap(InfoTypeStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoTypeStatistics::InternalSwap(InfoTypeStatistics* other) {
  std::swap(info_type_, other->info_type_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoTypeStatistics::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoTypeStatistics

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
bool InfoTypeStatistics::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
void InfoTypeStatistics::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) delete info_type_;
  info_type_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InfoType& InfoTypeStatistics::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
  return info_type_ != NULL ? *info_type_
                         : *::google::privacy::dlp::v2beta1::InfoType::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InfoType* InfoTypeStatistics::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
  return info_type_;
}
::google::privacy::dlp::v2beta1::InfoType* InfoTypeStatistics::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
void InfoTypeStatistics::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  delete info_type_;
  info_type_ = info_type;
  if (info_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
}

// int64 count = 2;
void InfoTypeStatistics::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InfoTypeStatistics::count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeStatistics.count)
  return count_;
}
void InfoTypeStatistics::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoTypeStatistics.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectOperationMetadata::kProcessedBytesFieldNumber;
const int InspectOperationMetadata::kTotalEstimatedBytesFieldNumber;
const int InspectOperationMetadata::kInfoTypeStatsFieldNumber;
const int InspectOperationMetadata::kCreateTimeFieldNumber;
const int InspectOperationMetadata::kRequestInspectConfigFieldNumber;
const int InspectOperationMetadata::kRequestStorageConfigFieldNumber;
const int InspectOperationMetadata::kRequestOutputConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectOperationMetadata::InspectOperationMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectOperationMetadata)
}
InspectOperationMetadata::InspectOperationMetadata(const InspectOperationMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_type_stats_(from.info_type_stats_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  if (from.has_request_inspect_config()) {
    request_inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig(*from.request_inspect_config_);
  } else {
    request_inspect_config_ = NULL;
  }
  if (from.has_request_storage_config()) {
    request_storage_config_ = new ::google::privacy::dlp::v2beta1::StorageConfig(*from.request_storage_config_);
  } else {
    request_storage_config_ = NULL;
  }
  if (from.has_request_output_config()) {
    request_output_config_ = new ::google::privacy::dlp::v2beta1::OutputStorageConfig(*from.request_output_config_);
  } else {
    request_output_config_ = NULL;
  }
  ::memcpy(&processed_bytes_, &from.processed_bytes_,
    reinterpret_cast<char*>(&total_estimated_bytes_) -
    reinterpret_cast<char*>(&processed_bytes_) + sizeof(total_estimated_bytes_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectOperationMetadata)
}

void InspectOperationMetadata::SharedCtor() {
  ::memset(&create_time_, 0, reinterpret_cast<char*>(&total_estimated_bytes_) -
    reinterpret_cast<char*>(&create_time_) + sizeof(total_estimated_bytes_));
  _cached_size_ = 0;
}

InspectOperationMetadata::~InspectOperationMetadata() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  SharedDtor();
}

void InspectOperationMetadata::SharedDtor() {
  if (this != internal_default_instance()) {
    delete create_time_;
  }
  if (this != internal_default_instance()) {
    delete request_inspect_config_;
  }
  if (this != internal_default_instance()) {
    delete request_storage_config_;
  }
  if (this != internal_default_instance()) {
    delete request_output_config_;
  }
}

void InspectOperationMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectOperationMetadata::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectOperationMetadata& InspectOperationMetadata::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectOperationMetadata* InspectOperationMetadata::New(::google::protobuf::Arena* arena) const {
  InspectOperationMetadata* n = new InspectOperationMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectOperationMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  info_type_stats_.Clear();
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_inspect_config_ != NULL) {
    delete request_inspect_config_;
  }
  request_inspect_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_storage_config_ != NULL) {
    delete request_storage_config_;
  }
  request_storage_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_output_config_ != NULL) {
    delete request_output_config_;
  }
  request_output_config_ = NULL;
  ::memset(&processed_bytes_, 0, reinterpret_cast<char*>(&total_estimated_bytes_) -
    reinterpret_cast<char*>(&processed_bytes_) + sizeof(total_estimated_bytes_));
}

bool InspectOperationMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 processed_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processed_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_type_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_estimated_bytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_estimated_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.InspectConfig request_inspect_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.StorageConfig request_storage_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_storage_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.OutputStorageConfig request_output_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_output_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  return false;
#undef DO_
}

void InspectOperationMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 processed_bytes = 1;
  if (this->processed_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->processed_bytes(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
  for (unsigned int i = 0, n = this->info_type_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info_type_stats(i), output);
  }

  // .google.protobuf.Timestamp create_time = 3;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->create_time_, output);
  }

  // int64 total_estimated_bytes = 4;
  if (this->total_estimated_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_estimated_bytes(), output);
  }

  // .google.privacy.dlp.v2beta1.InspectConfig request_inspect_config = 5;
  if (this->has_request_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->request_inspect_config_, output);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig request_storage_config = 6;
  if (this->has_request_storage_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->request_storage_config_, output);
  }

  // .google.privacy.dlp.v2beta1.OutputStorageConfig request_output_config = 7;
  if (this->has_request_output_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->request_output_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectOperationMetadata)
}

::google::protobuf::uint8* InspectOperationMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 processed_bytes = 1;
  if (this->processed_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->processed_bytes(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
  for (unsigned int i = 0, n = this->info_type_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->info_type_stats(i), deterministic, target);
  }

  // .google.protobuf.Timestamp create_time = 3;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->create_time_, deterministic, target);
  }

  // int64 total_estimated_bytes = 4;
  if (this->total_estimated_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_estimated_bytes(), target);
  }

  // .google.privacy.dlp.v2beta1.InspectConfig request_inspect_config = 5;
  if (this->has_request_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->request_inspect_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig request_storage_config = 6;
  if (this->has_request_storage_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->request_storage_config_, deterministic, target);
  }

  // .google.privacy.dlp.v2beta1.OutputStorageConfig request_output_config = 7;
  if (this->has_request_output_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->request_output_config_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  return target;
}

size_t InspectOperationMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
  {
    unsigned int count = this->info_type_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_type_stats(i));
    }
  }

  // .google.protobuf.Timestamp create_time = 3;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // .google.privacy.dlp.v2beta1.InspectConfig request_inspect_config = 5;
  if (this->has_request_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_inspect_config_);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig request_storage_config = 6;
  if (this->has_request_storage_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_storage_config_);
  }

  // .google.privacy.dlp.v2beta1.OutputStorageConfig request_output_config = 7;
  if (this->has_request_output_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_output_config_);
  }

  // int64 processed_bytes = 1;
  if (this->processed_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processed_bytes());
  }

  // int64 total_estimated_bytes = 4;
  if (this->total_estimated_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_estimated_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectOperationMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectOperationMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectOperationMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectOperationMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectOperationMetadata)
    MergeFrom(*source);
  }
}

void InspectOperationMetadata::MergeFrom(const InspectOperationMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_type_stats_.MergeFrom(from.info_type_stats_);
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_request_inspect_config()) {
    mutable_request_inspect_config()->::google::privacy::dlp::v2beta1::InspectConfig::MergeFrom(from.request_inspect_config());
  }
  if (from.has_request_storage_config()) {
    mutable_request_storage_config()->::google::privacy::dlp::v2beta1::StorageConfig::MergeFrom(from.request_storage_config());
  }
  if (from.has_request_output_config()) {
    mutable_request_output_config()->::google::privacy::dlp::v2beta1::OutputStorageConfig::MergeFrom(from.request_output_config());
  }
  if (from.processed_bytes() != 0) {
    set_processed_bytes(from.processed_bytes());
  }
  if (from.total_estimated_bytes() != 0) {
    set_total_estimated_bytes(from.total_estimated_bytes());
  }
}

void InspectOperationMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectOperationMetadata::CopyFrom(const InspectOperationMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectOperationMetadata::IsInitialized() const {
  return true;
}

void InspectOperationMetadata::Swap(InspectOperationMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectOperationMetadata::InternalSwap(InspectOperationMetadata* other) {
  info_type_stats_.InternalSwap(&other->info_type_stats_);
  std::swap(create_time_, other->create_time_);
  std::swap(request_inspect_config_, other->request_inspect_config_);
  std::swap(request_storage_config_, other->request_storage_config_);
  std::swap(request_output_config_, other->request_output_config_);
  std::swap(processed_bytes_, other->processed_bytes_);
  std::swap(total_estimated_bytes_, other->total_estimated_bytes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectOperationMetadata::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectOperationMetadata

// int64 processed_bytes = 1;
void InspectOperationMetadata::clear_processed_bytes() {
  processed_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InspectOperationMetadata::processed_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.processed_bytes)
  return processed_bytes_;
}
void InspectOperationMetadata::set_processed_bytes(::google::protobuf::int64 value) {
  
  processed_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectOperationMetadata.processed_bytes)
}

// int64 total_estimated_bytes = 4;
void InspectOperationMetadata::clear_total_estimated_bytes() {
  total_estimated_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InspectOperationMetadata::total_estimated_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.total_estimated_bytes)
  return total_estimated_bytes_;
}
void InspectOperationMetadata::set_total_estimated_bytes(::google::protobuf::int64 value) {
  
  total_estimated_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectOperationMetadata.total_estimated_bytes)
}

// repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
int InspectOperationMetadata::info_type_stats_size() const {
  return info_type_stats_.size();
}
void InspectOperationMetadata::clear_info_type_stats() {
  info_type_stats_.Clear();
}
const ::google::privacy::dlp::v2beta1::InfoTypeStatistics& InspectOperationMetadata::info_type_stats(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_.Get(index);
}
::google::privacy::dlp::v2beta1::InfoTypeStatistics* InspectOperationMetadata::mutable_info_type_stats(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_.Mutable(index);
}
::google::privacy::dlp::v2beta1::InfoTypeStatistics* InspectOperationMetadata::add_info_type_stats() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics >*
InspectOperationMetadata::mutable_info_type_stats() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return &info_type_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics >&
InspectOperationMetadata::info_type_stats() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_;
}

// .google.protobuf.Timestamp create_time = 3;
bool InspectOperationMetadata::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void InspectOperationMetadata::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& InspectOperationMetadata::create_time() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* InspectOperationMetadata::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* InspectOperationMetadata::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void InspectOperationMetadata::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
}

// .google.privacy.dlp.v2beta1.InspectConfig request_inspect_config = 5;
bool InspectOperationMetadata::has_request_inspect_config() const {
  return this != internal_default_instance() && request_inspect_config_ != NULL;
}
void InspectOperationMetadata::clear_request_inspect_config() {
  if (GetArenaNoVirtual() == NULL && request_inspect_config_ != NULL) delete request_inspect_config_;
  request_inspect_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InspectConfig& InspectOperationMetadata::request_inspect_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_inspect_config)
  return request_inspect_config_ != NULL ? *request_inspect_config_
                         : *::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InspectConfig* InspectOperationMetadata::mutable_request_inspect_config() {
  
  if (request_inspect_config_ == NULL) {
    request_inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_inspect_config)
  return request_inspect_config_;
}
::google::privacy::dlp::v2beta1::InspectConfig* InspectOperationMetadata::release_request_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = request_inspect_config_;
  request_inspect_config_ = NULL;
  return temp;
}
void InspectOperationMetadata::set_allocated_request_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* request_inspect_config) {
  delete request_inspect_config_;
  request_inspect_config_ = request_inspect_config;
  if (request_inspect_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_inspect_config)
}

// .google.privacy.dlp.v2beta1.StorageConfig request_storage_config = 6;
bool InspectOperationMetadata::has_request_storage_config() const {
  return this != internal_default_instance() && request_storage_config_ != NULL;
}
void InspectOperationMetadata::clear_request_storage_config() {
  if (GetArenaNoVirtual() == NULL && request_storage_config_ != NULL) delete request_storage_config_;
  request_storage_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::StorageConfig& InspectOperationMetadata::request_storage_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_storage_config)
  return request_storage_config_ != NULL ? *request_storage_config_
                         : *::google::privacy::dlp::v2beta1::StorageConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::StorageConfig* InspectOperationMetadata::mutable_request_storage_config() {
  
  if (request_storage_config_ == NULL) {
    request_storage_config_ = new ::google::privacy::dlp::v2beta1::StorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_storage_config)
  return request_storage_config_;
}
::google::privacy::dlp::v2beta1::StorageConfig* InspectOperationMetadata::release_request_storage_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_storage_config)
  
  ::google::privacy::dlp::v2beta1::StorageConfig* temp = request_storage_config_;
  request_storage_config_ = NULL;
  return temp;
}
void InspectOperationMetadata::set_allocated_request_storage_config(::google::privacy::dlp::v2beta1::StorageConfig* request_storage_config) {
  delete request_storage_config_;
  request_storage_config_ = request_storage_config;
  if (request_storage_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_storage_config)
}

// .google.privacy.dlp.v2beta1.OutputStorageConfig request_output_config = 7;
bool InspectOperationMetadata::has_request_output_config() const {
  return this != internal_default_instance() && request_output_config_ != NULL;
}
void InspectOperationMetadata::clear_request_output_config() {
  if (GetArenaNoVirtual() == NULL && request_output_config_ != NULL) delete request_output_config_;
  request_output_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::OutputStorageConfig& InspectOperationMetadata::request_output_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_output_config)
  return request_output_config_ != NULL ? *request_output_config_
                         : *::google::privacy::dlp::v2beta1::OutputStorageConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::OutputStorageConfig* InspectOperationMetadata::mutable_request_output_config() {
  
  if (request_output_config_ == NULL) {
    request_output_config_ = new ::google::privacy::dlp::v2beta1::OutputStorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_output_config)
  return request_output_config_;
}
::google::privacy::dlp::v2beta1::OutputStorageConfig* InspectOperationMetadata::release_request_output_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_output_config)
  
  ::google::privacy::dlp::v2beta1::OutputStorageConfig* temp = request_output_config_;
  request_output_config_ = NULL;
  return temp;
}
void InspectOperationMetadata::set_allocated_request_output_config(::google::privacy::dlp::v2beta1::OutputStorageConfig* request_output_config) {
  delete request_output_config_;
  request_output_config_ = request_output_config;
  if (request_output_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationMetadata.request_output_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectOperationResult::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectOperationResult::InspectOperationResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectOperationResult)
}
InspectOperationResult::InspectOperationResult(const InspectOperationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectOperationResult)
}

void InspectOperationResult::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

InspectOperationResult::~InspectOperationResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectOperationResult)
  SharedDtor();
}

void InspectOperationResult::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InspectOperationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectOperationResult::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectOperationResult& InspectOperationResult::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectOperationResult* InspectOperationResult::New(::google::protobuf::Arena* arena) const {
  InspectOperationResult* n = new InspectOperationResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectOperationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InspectOperationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.InspectOperationResult.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectOperationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectOperationResult)
  return false;
#undef DO_
}

void InspectOperationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InspectOperationResult.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectOperationResult)
}

::google::protobuf::uint8* InspectOperationResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InspectOperationResult.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectOperationResult)
  return target;
}

size_t InspectOperationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectOperationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectOperationResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectOperationResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectOperationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectOperationResult)
    MergeFrom(*source);
  }
}

void InspectOperationResult::MergeFrom(const InspectOperationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void InspectOperationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectOperationResult::CopyFrom(const InspectOperationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectOperationResult::IsInitialized() const {
  return true;
}

void InspectOperationResult::Swap(InspectOperationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectOperationResult::InternalSwap(InspectOperationResult* other) {
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectOperationResult::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectOperationResult

// string name = 1;
void InspectOperationResult::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InspectOperationResult::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationResult.name)
  return name_.GetNoArena();
}
void InspectOperationResult::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
#if LANG_CXX11
void InspectOperationResult::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
#endif
void InspectOperationResult::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
void InspectOperationResult::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
::std::string* InspectOperationResult::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationResult.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InspectOperationResult::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationResult.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InspectOperationResult::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInspectFindingsRequest::kNameFieldNumber;
const int ListInspectFindingsRequest::kPageSizeFieldNumber;
const int ListInspectFindingsRequest::kPageTokenFieldNumber;
const int ListInspectFindingsRequest::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInspectFindingsRequest::ListInspectFindingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
}
ListInspectFindingsRequest::ListInspectFindingsRequest(const ListInspectFindingsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
}

void ListInspectFindingsRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListInspectFindingsRequest::~ListInspectFindingsRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  SharedDtor();
}

void ListInspectFindingsRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListInspectFindingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInspectFindingsRequest::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListInspectFindingsRequest& ListInspectFindingsRequest::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListInspectFindingsRequest* ListInspectFindingsRequest::New(::google::protobuf::Arena* arena) const {
  ListInspectFindingsRequest* n = new ListInspectFindingsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInspectFindingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

bool ListInspectFindingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  return false;
#undef DO_
}

void ListInspectFindingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filter(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
}

::google::protobuf::uint8* ListInspectFindingsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filter(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  return target;
}

size_t ListInspectFindingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInspectFindingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInspectFindingsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInspectFindingsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
    MergeFrom(*source);
  }
}

void ListInspectFindingsRequest::MergeFrom(const ListInspectFindingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListInspectFindingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInspectFindingsRequest::CopyFrom(const ListInspectFindingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInspectFindingsRequest::IsInitialized() const {
  return true;
}

void ListInspectFindingsRequest::Swap(ListInspectFindingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInspectFindingsRequest::InternalSwap(ListInspectFindingsRequest* other) {
  name_.Swap(&other->name_);
  page_token_.Swap(&other->page_token_);
  filter_.Swap(&other->filter_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInspectFindingsRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListInspectFindingsRequest

// string name = 1;
void ListInspectFindingsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListInspectFindingsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
  return name_.GetNoArena();
}
void ListInspectFindingsRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
#if LANG_CXX11
void ListInspectFindingsRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
#endif
void ListInspectFindingsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
void ListInspectFindingsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
::std::string* ListInspectFindingsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListInspectFindingsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListInspectFindingsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}

// int32 page_size = 2;
void ListInspectFindingsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListInspectFindingsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_size)
  return page_size_;
}
void ListInspectFindingsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_size)
}

// string page_token = 3;
void ListInspectFindingsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListInspectFindingsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
  return page_token_.GetNoArena();
}
void ListInspectFindingsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
#if LANG_CXX11
void ListInspectFindingsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
#endif
void ListInspectFindingsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
void ListInspectFindingsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
::std::string* ListInspectFindingsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListInspectFindingsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListInspectFindingsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}

// string filter = 4;
void ListInspectFindingsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListInspectFindingsRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
  return filter_.GetNoArena();
}
void ListInspectFindingsRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
}
#if LANG_CXX11
void ListInspectFindingsRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
}
#endif
void ListInspectFindingsRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
}
void ListInspectFindingsRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
}
::std::string* ListInspectFindingsRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListInspectFindingsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListInspectFindingsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.filter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInspectFindingsResponse::kResultFieldNumber;
const int ListInspectFindingsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInspectFindingsResponse::ListInspectFindingsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
}
ListInspectFindingsResponse::ListInspectFindingsResponse(const ListInspectFindingsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  if (from.has_result()) {
    result_ = new ::google::privacy::dlp::v2beta1::InspectResult(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
}

void ListInspectFindingsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  _cached_size_ = 0;
}

ListInspectFindingsResponse::~ListInspectFindingsResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  SharedDtor();
}

void ListInspectFindingsResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete result_;
  }
}

void ListInspectFindingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInspectFindingsResponse::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListInspectFindingsResponse& ListInspectFindingsResponse::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListInspectFindingsResponse* ListInspectFindingsResponse::New(::google::protobuf::Arena* arena) const {
  ListInspectFindingsResponse* n = new ListInspectFindingsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInspectFindingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}

bool ListInspectFindingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InspectResult result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  return false;
#undef DO_
}

void ListInspectFindingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectResult result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
}

::google::protobuf::uint8* ListInspectFindingsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2beta1.InspectResult result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->result_, deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  return target;
}

size_t ListInspectFindingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  size_t total_size = 0;

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // .google.privacy.dlp.v2beta1.InspectResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInspectFindingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInspectFindingsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInspectFindingsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
    MergeFrom(*source);
  }
}

void ListInspectFindingsResponse::MergeFrom(const ListInspectFindingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  if (from.has_result()) {
    mutable_result()->::google::privacy::dlp::v2beta1::InspectResult::MergeFrom(from.result());
  }
}

void ListInspectFindingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInspectFindingsResponse::CopyFrom(const ListInspectFindingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInspectFindingsResponse::IsInitialized() const {
  return true;
}

void ListInspectFindingsResponse::Swap(ListInspectFindingsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInspectFindingsResponse::InternalSwap(ListInspectFindingsResponse* other) {
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInspectFindingsResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListInspectFindingsResponse

// .google.privacy.dlp.v2beta1.InspectResult result = 1;
bool ListInspectFindingsResponse::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
void ListInspectFindingsResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InspectResult& ListInspectFindingsResponse::result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
  return result_ != NULL ? *result_
                         : *::google::privacy::dlp::v2beta1::InspectResult::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InspectResult* ListInspectFindingsResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::google::privacy::dlp::v2beta1::InspectResult;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
  return result_;
}
::google::privacy::dlp::v2beta1::InspectResult* ListInspectFindingsResponse::release_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
  
  ::google::privacy::dlp::v2beta1::InspectResult* temp = result_;
  result_ = NULL;
  return temp;
}
void ListInspectFindingsResponse::set_allocated_result(::google::privacy::dlp::v2beta1::InspectResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
}

// string next_page_token = 2;
void ListInspectFindingsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListInspectFindingsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
void ListInspectFindingsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
#if LANG_CXX11
void ListInspectFindingsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
#endif
void ListInspectFindingsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
void ListInspectFindingsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
::std::string* ListInspectFindingsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListInspectFindingsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListInspectFindingsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoTypeDescription::kNameFieldNumber;
const int InfoTypeDescription::kDisplayNameFieldNumber;
const int InfoTypeDescription::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoTypeDescription::InfoTypeDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InfoTypeDescription)
}
InfoTypeDescription::InfoTypeDescription(const InfoTypeDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      categories_(from.categories_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InfoTypeDescription)
}

void InfoTypeDescription::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

InfoTypeDescription::~InfoTypeDescription() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InfoTypeDescription)
  SharedDtor();
}

void InfoTypeDescription::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfoTypeDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoTypeDescription::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfoTypeDescription& InfoTypeDescription::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfoTypeDescription* InfoTypeDescription::New(::google::protobuf::Arena* arena) const {
  InfoTypeDescription* n = new InfoTypeDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoTypeDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  categories_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InfoTypeDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.InfoTypeDescription.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.InfoTypeDescription.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InfoTypeDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InfoTypeDescription)
  return false;
#undef DO_
}

void InfoTypeDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoTypeDescription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoTypeDescription.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->categories(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InfoTypeDescription)
}

::google::protobuf::uint8* InfoTypeDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoTypeDescription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoTypeDescription.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->categories(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InfoTypeDescription)
  return target;
}

size_t InfoTypeDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
  {
    unsigned int count = this->categories_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoTypeDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoTypeDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoTypeDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InfoTypeDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InfoTypeDescription)
    MergeFrom(*source);
  }
}

void InfoTypeDescription::MergeFrom(const InfoTypeDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
}

void InfoTypeDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoTypeDescription::CopyFrom(const InfoTypeDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoTypeDescription::IsInitialized() const {
  return true;
}

void InfoTypeDescription::Swap(InfoTypeDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoTypeDescription::InternalSwap(InfoTypeDescription* other) {
  categories_.InternalSwap(&other->categories_);
  name_.Swap(&other->name_);
  display_name_.Swap(&other->display_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoTypeDescription::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoTypeDescription

// string name = 1;
void InfoTypeDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InfoTypeDescription::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
  return name_.GetNoArena();
}
void InfoTypeDescription::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
#if LANG_CXX11
void InfoTypeDescription::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
#endif
void InfoTypeDescription::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
void InfoTypeDescription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
::std::string* InfoTypeDescription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InfoTypeDescription::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfoTypeDescription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}

// string display_name = 2;
void InfoTypeDescription::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InfoTypeDescription::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
  return display_name_.GetNoArena();
}
void InfoTypeDescription::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
#if LANG_CXX11
void InfoTypeDescription::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
#endif
void InfoTypeDescription::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
void InfoTypeDescription::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
::std::string* InfoTypeDescription::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InfoTypeDescription::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfoTypeDescription::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}

// repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
int InfoTypeDescription::categories_size() const {
  return categories_.size();
}
void InfoTypeDescription::clear_categories() {
  categories_.Clear();
}
const ::google::privacy::dlp::v2beta1::CategoryDescription& InfoTypeDescription::categories(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_.Get(index);
}
::google::privacy::dlp::v2beta1::CategoryDescription* InfoTypeDescription::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_.Mutable(index);
}
::google::privacy::dlp::v2beta1::CategoryDescription* InfoTypeDescription::add_categories() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >*
InfoTypeDescription::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return &categories_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >&
InfoTypeDescription::categories() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInfoTypesRequest::kCategoryFieldNumber;
const int ListInfoTypesRequest::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInfoTypesRequest::ListInfoTypesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
}
ListInfoTypesRequest::ListInfoTypesRequest(const ListInfoTypesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.category().size() > 0) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
}

void ListInfoTypesRequest::SharedCtor() {
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListInfoTypesRequest::~ListInfoTypesRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  SharedDtor();
}

void ListInfoTypesRequest::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListInfoTypesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInfoTypesRequest::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListInfoTypesRequest& ListInfoTypesRequest::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListInfoTypesRequest* ListInfoTypesRequest::New(::google::protobuf::Arena* arena) const {
  ListInfoTypesRequest* n = new ListInfoTypesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInfoTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListInfoTypesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string category = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInfoTypesRequest.category"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), this->language_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  return false;
#undef DO_
}

void ListInfoTypesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string category = 1;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInfoTypesRequest.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->category(), output);
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
}

::google::protobuf::uint8* ListInfoTypesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string category = 1;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInfoTypesRequest.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->category(), target);
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  return target;
}

size_t ListInfoTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  size_t total_size = 0;

  // string category = 1;
  if (this->category().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInfoTypesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInfoTypesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInfoTypesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
    MergeFrom(*source);
  }
}

void ListInfoTypesRequest::MergeFrom(const ListInfoTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
}

void ListInfoTypesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInfoTypesRequest::CopyFrom(const ListInfoTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInfoTypesRequest::IsInitialized() const {
  return true;
}

void ListInfoTypesRequest::Swap(ListInfoTypesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInfoTypesRequest::InternalSwap(ListInfoTypesRequest* other) {
  category_.Swap(&other->category_);
  language_code_.Swap(&other->language_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInfoTypesRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListInfoTypesRequest

// string category = 1;
void ListInfoTypesRequest::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListInfoTypesRequest::category() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
  return category_.GetNoArena();
}
void ListInfoTypesRequest::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
#if LANG_CXX11
void ListInfoTypesRequest::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
#endif
void ListInfoTypesRequest::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
void ListInfoTypesRequest::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
::std::string* ListInfoTypesRequest::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListInfoTypesRequest::release_category() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListInfoTypesRequest::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}

// string language_code = 2;
void ListInfoTypesRequest::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListInfoTypesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
  return language_code_.GetNoArena();
}
void ListInfoTypesRequest::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
#if LANG_CXX11
void ListInfoTypesRequest::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
#endif
void ListInfoTypesRequest::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
void ListInfoTypesRequest::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
::std::string* ListInfoTypesRequest::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListInfoTypesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListInfoTypesRequest::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInfoTypesResponse::kInfoTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInfoTypesResponse::ListInfoTypesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
}
ListInfoTypesResponse::ListInfoTypesResponse(const ListInfoTypesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_types_(from.info_types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
}

void ListInfoTypesResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListInfoTypesResponse::~ListInfoTypesResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  SharedDtor();
}

void ListInfoTypesResponse::SharedDtor() {
}

void ListInfoTypesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInfoTypesResponse::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListInfoTypesResponse& ListInfoTypesResponse::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListInfoTypesResponse* ListInfoTypesResponse::New(::google::protobuf::Arena* arena) const {
  ListInfoTypesResponse* n = new ListInfoTypesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInfoTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  info_types_.Clear();
}

bool ListInfoTypesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  return false;
#undef DO_
}

void ListInfoTypesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
  for (unsigned int i = 0, n = this->info_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_types(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
}

::google::protobuf::uint8* ListInfoTypesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
  for (unsigned int i = 0, n = this->info_types_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->info_types(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  return target;
}

size_t ListInfoTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
  {
    unsigned int count = this->info_types_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_types(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInfoTypesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInfoTypesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInfoTypesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
    MergeFrom(*source);
  }
}

void ListInfoTypesResponse::MergeFrom(const ListInfoTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_types_.MergeFrom(from.info_types_);
}

void ListInfoTypesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInfoTypesResponse::CopyFrom(const ListInfoTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInfoTypesResponse::IsInitialized() const {
  return true;
}

void ListInfoTypesResponse::Swap(ListInfoTypesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInfoTypesResponse::InternalSwap(ListInfoTypesResponse* other) {
  info_types_.InternalSwap(&other->info_types_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInfoTypesResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListInfoTypesResponse

// repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
int ListInfoTypesResponse::info_types_size() const {
  return info_types_.size();
}
void ListInfoTypesResponse::clear_info_types() {
  info_types_.Clear();
}
const ::google::privacy::dlp::v2beta1::InfoTypeDescription& ListInfoTypesResponse::info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_.Get(index);
}
::google::privacy::dlp::v2beta1::InfoTypeDescription* ListInfoTypesResponse::mutable_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_.Mutable(index);
}
::google::privacy::dlp::v2beta1::InfoTypeDescription* ListInfoTypesResponse::add_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription >*
ListInfoTypesResponse::mutable_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return &info_types_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription >&
ListInfoTypesResponse::info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryDescription::kNameFieldNumber;
const int CategoryDescription::kDisplayNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryDescription::CategoryDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CategoryDescription)
}
CategoryDescription::CategoryDescription(const CategoryDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CategoryDescription)
}

void CategoryDescription::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CategoryDescription::~CategoryDescription() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CategoryDescription)
  SharedDtor();
}

void CategoryDescription::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CategoryDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoryDescription::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CategoryDescription& CategoryDescription::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

CategoryDescription* CategoryDescription::New(::google::protobuf::Arena* arena) const {
  CategoryDescription* n = new CategoryDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CategoryDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CategoryDescription)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CategoryDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CategoryDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.CategoryDescription.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.CategoryDescription.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CategoryDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CategoryDescription)
  return false;
#undef DO_
}

void CategoryDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CategoryDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CategoryDescription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CategoryDescription.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CategoryDescription)
}

::google::protobuf::uint8* CategoryDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CategoryDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CategoryDescription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CategoryDescription.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CategoryDescription)
  return target;
}

size_t CategoryDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CategoryDescription)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoryDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CategoryDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const CategoryDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoryDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CategoryDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CategoryDescription)
    MergeFrom(*source);
  }
}

void CategoryDescription::MergeFrom(const CategoryDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CategoryDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
}

void CategoryDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CategoryDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryDescription::CopyFrom(const CategoryDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CategoryDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryDescription::IsInitialized() const {
  return true;
}

void CategoryDescription::Swap(CategoryDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryDescription::InternalSwap(CategoryDescription* other) {
  name_.Swap(&other->name_);
  display_name_.Swap(&other->display_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoryDescription::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoryDescription

// string name = 1;
void CategoryDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CategoryDescription::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CategoryDescription.name)
  return name_.GetNoArena();
}
void CategoryDescription::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
#if LANG_CXX11
void CategoryDescription::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
#endif
void CategoryDescription::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
void CategoryDescription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
::std::string* CategoryDescription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CategoryDescription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CategoryDescription::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CategoryDescription.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CategoryDescription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CategoryDescription.name)
}

// string display_name = 2;
void CategoryDescription::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CategoryDescription::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
  return display_name_.GetNoArena();
}
void CategoryDescription::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
#if LANG_CXX11
void CategoryDescription::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
#endif
void CategoryDescription::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
void CategoryDescription::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
::std::string* CategoryDescription::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CategoryDescription::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CategoryDescription::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRootCategoriesRequest::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRootCategoriesRequest::ListRootCategoriesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
}
ListRootCategoriesRequest::ListRootCategoriesRequest(const ListRootCategoriesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
}

void ListRootCategoriesRequest::SharedCtor() {
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListRootCategoriesRequest::~ListRootCategoriesRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  SharedDtor();
}

void ListRootCategoriesRequest::SharedDtor() {
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListRootCategoriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRootCategoriesRequest::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListRootCategoriesRequest& ListRootCategoriesRequest::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListRootCategoriesRequest* ListRootCategoriesRequest::New(::google::protobuf::Arena* arena) const {
  ListRootCategoriesRequest* n = new ListRootCategoriesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRootCategoriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListRootCategoriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string language_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), this->language_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  return false;
#undef DO_
}

void ListRootCategoriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
}

::google::protobuf::uint8* ListRootCategoriesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  return target;
}

size_t ListRootCategoriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  size_t total_size = 0;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRootCategoriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRootCategoriesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRootCategoriesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
    MergeFrom(*source);
  }
}

void ListRootCategoriesRequest::MergeFrom(const ListRootCategoriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
}

void ListRootCategoriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRootCategoriesRequest::CopyFrom(const ListRootCategoriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRootCategoriesRequest::IsInitialized() const {
  return true;
}

void ListRootCategoriesRequest::Swap(ListRootCategoriesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRootCategoriesRequest::InternalSwap(ListRootCategoriesRequest* other) {
  language_code_.Swap(&other->language_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRootCategoriesRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRootCategoriesRequest

// string language_code = 1;
void ListRootCategoriesRequest::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListRootCategoriesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
  return language_code_.GetNoArena();
}
void ListRootCategoriesRequest::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
#if LANG_CXX11
void ListRootCategoriesRequest::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
#endif
void ListRootCategoriesRequest::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
void ListRootCategoriesRequest::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
::std::string* ListRootCategoriesRequest::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListRootCategoriesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListRootCategoriesRequest::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRootCategoriesResponse::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRootCategoriesResponse::ListRootCategoriesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
}
ListRootCategoriesResponse::ListRootCategoriesResponse(const ListRootCategoriesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      categories_(from.categories_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
}

void ListRootCategoriesResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListRootCategoriesResponse::~ListRootCategoriesResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  SharedDtor();
}

void ListRootCategoriesResponse::SharedDtor() {
}

void ListRootCategoriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRootCategoriesResponse::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListRootCategoriesResponse& ListRootCategoriesResponse::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListRootCategoriesResponse* ListRootCategoriesResponse::New(::google::protobuf::Arena* arena) const {
  ListRootCategoriesResponse* n = new ListRootCategoriesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRootCategoriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  categories_.Clear();
}

bool ListRootCategoriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  return false;
#undef DO_
}

void ListRootCategoriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->categories(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
}

::google::protobuf::uint8* ListRootCategoriesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->categories(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  return target;
}

size_t ListRootCategoriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
  {
    unsigned int count = this->categories_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRootCategoriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRootCategoriesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRootCategoriesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
    MergeFrom(*source);
  }
}

void ListRootCategoriesResponse::MergeFrom(const ListRootCategoriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
}

void ListRootCategoriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRootCategoriesResponse::CopyFrom(const ListRootCategoriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRootCategoriesResponse::IsInitialized() const {
  return true;
}

void ListRootCategoriesResponse::Swap(ListRootCategoriesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRootCategoriesResponse::InternalSwap(ListRootCategoriesResponse* other) {
  categories_.InternalSwap(&other->categories_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRootCategoriesResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRootCategoriesResponse

// repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
int ListRootCategoriesResponse::categories_size() const {
  return categories_.size();
}
void ListRootCategoriesResponse::clear_categories() {
  categories_.Clear();
}
const ::google::privacy::dlp::v2beta1::CategoryDescription& ListRootCategoriesResponse::categories(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_.Get(index);
}
::google::privacy::dlp::v2beta1::CategoryDescription* ListRootCategoriesResponse::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_.Mutable(index);
}
::google::privacy::dlp::v2beta1::CategoryDescription* ListRootCategoriesResponse::add_categories() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >*
ListRootCategoriesResponse::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return &categories_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >&
ListRootCategoriesResponse::categories() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kIntegerValueFieldNumber;
const int Value::kFloatValueFieldNumber;
const int Value::kStringValueFieldNumber;
const int Value::kBooleanValueFieldNumber;
const int Value::kTimestampValueFieldNumber;
const int Value::kTimeValueFieldNumber;
const int Value::kDateValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kIntegerValue: {
      set_integer_value(from.integer_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kBooleanValue: {
      set_boolean_value(from.boolean_value());
      break;
    }
    case kTimestampValue: {
      mutable_timestamp_value()->::google::protobuf::Timestamp::MergeFrom(from.timestamp_value());
      break;
    }
    case kTimeValue: {
      mutable_time_value()->::google::type::TimeOfDay::MergeFrom(from.time_value());
      break;
    }
    case kDateValue: {
      mutable_date_value()->::google::type::Date::MergeFrom(from.date_value());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Value)
}

void Value::SharedCtor() {
  clear_has_type();
  _cached_size_ = 0;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value& Value::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.Value)
  switch (type_case()) {
    case kIntegerValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      type_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBooleanValue: {
      // No need to clear
      break;
    }
    case kTimestampValue: {
      delete type_.timestamp_value_;
      break;
    }
    case kTimeValue: {
      delete type_.time_value_;
      break;
    }
    case kDateValue: {
      delete type_.date_value_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Value)
  clear_type();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 integer_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_.integer_value_)));
          set_has_integer_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double float_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &type_.float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string string_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.Value.string_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boolean_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_.boolean_value_)));
          set_has_boolean_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.type.TimeOfDay time_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.type.Date date_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 integer_value = 1;
  if (has_integer_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->integer_value(), output);
  }

  // double float_value = 2;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->float_value(), output);
  }

  // string string_value = 3;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Value.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->string_value(), output);
  }

  // bool boolean_value = 4;
  if (has_boolean_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->boolean_value(), output);
  }

  // .google.protobuf.Timestamp timestamp_value = 5;
  if (has_timestamp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *type_.timestamp_value_, output);
  }

  // .google.type.TimeOfDay time_value = 6;
  if (has_time_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *type_.time_value_, output);
  }

  // .google.type.Date date_value = 7;
  if (has_date_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *type_.date_value_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 integer_value = 1;
  if (has_integer_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->integer_value(), target);
  }

  // double float_value = 2;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->float_value(), target);
  }

  // string string_value = 3;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Value.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->string_value(), target);
  }

  // bool boolean_value = 4;
  if (has_boolean_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->boolean_value(), target);
  }

  // .google.protobuf.Timestamp timestamp_value = 5;
  if (has_timestamp_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *type_.timestamp_value_, deterministic, target);
  }

  // .google.type.TimeOfDay time_value = 6;
  if (has_time_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *type_.time_value_, deterministic, target);
  }

  // .google.type.Date date_value = 7;
  if (has_date_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *type_.date_value_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Value)
  size_t total_size = 0;

  switch (type_case()) {
    // int64 integer_value = 1;
    case kIntegerValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->integer_value());
      break;
    }
    // double float_value = 2;
    case kFloatValue: {
      total_size += 1 + 8;
      break;
    }
    // string string_value = 3;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // bool boolean_value = 4;
    case kBooleanValue: {
      total_size += 1 + 1;
      break;
    }
    // .google.protobuf.Timestamp timestamp_value = 5;
    case kTimestampValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.timestamp_value_);
      break;
    }
    // .google.type.TimeOfDay time_value = 6;
    case kTimeValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.time_value_);
      break;
    }
    // .google.type.Date date_value = 7;
    case kDateValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.date_value_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kIntegerValue: {
      set_integer_value(from.integer_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kBooleanValue: {
      set_boolean_value(from.boolean_value());
      break;
    }
    case kTimestampValue: {
      mutable_timestamp_value()->::google::protobuf::Timestamp::MergeFrom(from.timestamp_value());
      break;
    }
    case kTimeValue: {
      mutable_time_value()->::google::type::TimeOfDay::MergeFrom(from.time_value());
      break;
    }
    case kDateValue: {
      mutable_date_value()->::google::type::Date::MergeFrom(from.date_value());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// int64 integer_value = 1;
bool Value::has_integer_value() const {
  return type_case() == kIntegerValue;
}
void Value::set_has_integer_value() {
  _oneof_case_[0] = kIntegerValue;
}
void Value::clear_integer_value() {
  if (has_integer_value()) {
    type_.integer_value_ = GOOGLE_LONGLONG(0);
    clear_has_type();
  }
}
::google::protobuf::int64 Value::integer_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.integer_value)
  if (has_integer_value()) {
    return type_.integer_value_;
  }
  return GOOGLE_LONGLONG(0);
}
void Value::set_integer_value(::google::protobuf::int64 value) {
  if (!has_integer_value()) {
    clear_type();
    set_has_integer_value();
  }
  type_.integer_value_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Value.integer_value)
}

// double float_value = 2;
bool Value::has_float_value() const {
  return type_case() == kFloatValue;
}
void Value::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
void Value::clear_float_value() {
  if (has_float_value()) {
    type_.float_value_ = 0;
    clear_has_type();
  }
}
double Value::float_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.float_value)
  if (has_float_value()) {
    return type_.float_value_;
  }
  return 0;
}
void Value::set_float_value(double value) {
  if (!has_float_value()) {
    clear_type();
    set_has_float_value();
  }
  type_.float_value_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Value.float_value)
}

// string string_value = 3;
bool Value::has_string_value() const {
  return type_case() == kStringValue;
}
void Value::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
void Value::clear_string_value() {
  if (has_string_value()) {
    type_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
const ::std::string& Value::string_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.string_value)
  if (has_string_value()) {
    return type_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Value::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Value.string_value)
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Value.string_value)
}
#if LANG_CXX11
void Value::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Value.string_value)
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.Value.string_value)
}
#endif
void Value::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.Value.string_value)
}
void Value::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.Value.string_value)
}
::std::string* Value::mutable_string_value() {
  if (!has_string_value()) {
    clear_type();
    set_has_string_value();
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Value.string_value)
  return type_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Value::release_string_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Value.string_value)
  if (has_string_value()) {
    clear_has_type();
    return type_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Value::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    type_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type();
  if (string_value != NULL) {
    set_has_string_value();
    type_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Value.string_value)
}

// bool boolean_value = 4;
bool Value::has_boolean_value() const {
  return type_case() == kBooleanValue;
}
void Value::set_has_boolean_value() {
  _oneof_case_[0] = kBooleanValue;
}
void Value::clear_boolean_value() {
  if (has_boolean_value()) {
    type_.boolean_value_ = false;
    clear_has_type();
  }
}
bool Value::boolean_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.boolean_value)
  if (has_boolean_value()) {
    return type_.boolean_value_;
  }
  return false;
}
void Value::set_boolean_value(bool value) {
  if (!has_boolean_value()) {
    clear_type();
    set_has_boolean_value();
  }
  type_.boolean_value_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Value.boolean_value)
}

// .google.protobuf.Timestamp timestamp_value = 5;
bool Value::has_timestamp_value() const {
  return type_case() == kTimestampValue;
}
void Value::set_has_timestamp_value() {
  _oneof_case_[0] = kTimestampValue;
}
void Value::clear_timestamp_value() {
  if (has_timestamp_value()) {
    delete type_.timestamp_value_;
    clear_has_type();
  }
}
 const ::google::protobuf::Timestamp& Value::timestamp_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.timestamp_value)
  return has_timestamp_value()
      ? *type_.timestamp_value_
      : ::google::protobuf::Timestamp::default_instance();
}
::google::protobuf::Timestamp* Value::mutable_timestamp_value() {
  if (!has_timestamp_value()) {
    clear_type();
    set_has_timestamp_value();
    type_.timestamp_value_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Value.timestamp_value)
  return type_.timestamp_value_;
}
::google::protobuf::Timestamp* Value::release_timestamp_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Value.timestamp_value)
  if (has_timestamp_value()) {
    clear_has_type();
    ::google::protobuf::Timestamp* temp = type_.timestamp_value_;
    type_.timestamp_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Value::set_allocated_timestamp_value(::google::protobuf::Timestamp* timestamp_value) {
  clear_type();
  if (timestamp_value) {
    if (static_cast< ::google::protobuf::Timestamp*>(timestamp_value)->GetArena() != NULL) {
      ::google::protobuf::Timestamp* new_timestamp_value = new ::google::protobuf::Timestamp;
      new_timestamp_value->CopyFrom(*timestamp_value);
      timestamp_value = new_timestamp_value;
    }
    set_has_timestamp_value();
    type_.timestamp_value_ = timestamp_value;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Value.timestamp_value)
}

// .google.type.TimeOfDay time_value = 6;
bool Value::has_time_value() const {
  return type_case() == kTimeValue;
}
void Value::set_has_time_value() {
  _oneof_case_[0] = kTimeValue;
}
void Value::clear_time_value() {
  if (has_time_value()) {
    delete type_.time_value_;
    clear_has_type();
  }
}
 const ::google::type::TimeOfDay& Value::time_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.time_value)
  return has_time_value()
      ? *type_.time_value_
      : ::google::type::TimeOfDay::default_instance();
}
::google::type::TimeOfDay* Value::mutable_time_value() {
  if (!has_time_value()) {
    clear_type();
    set_has_time_value();
    type_.time_value_ = new ::google::type::TimeOfDay;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Value.time_value)
  return type_.time_value_;
}
::google::type::TimeOfDay* Value::release_time_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Value.time_value)
  if (has_time_value()) {
    clear_has_type();
    ::google::type::TimeOfDay* temp = type_.time_value_;
    type_.time_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Value::set_allocated_time_value(::google::type::TimeOfDay* time_value) {
  clear_type();
  if (time_value) {
    set_has_time_value();
    type_.time_value_ = time_value;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Value.time_value)
}

// .google.type.Date date_value = 7;
bool Value::has_date_value() const {
  return type_case() == kDateValue;
}
void Value::set_has_date_value() {
  _oneof_case_[0] = kDateValue;
}
void Value::clear_date_value() {
  if (has_date_value()) {
    delete type_.date_value_;
    clear_has_type();
  }
}
 const ::google::type::Date& Value::date_value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Value.date_value)
  return has_date_value()
      ? *type_.date_value_
      : ::google::type::Date::default_instance();
}
::google::type::Date* Value::mutable_date_value() {
  if (!has_date_value()) {
    clear_type();
    set_has_date_value();
    type_.date_value_ = new ::google::type::Date;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Value.date_value)
  return type_.date_value_;
}
::google::type::Date* Value::release_date_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Value.date_value)
  if (has_date_value()) {
    clear_has_type();
    ::google::type::Date* temp = type_.date_value_;
    type_.date_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Value::set_allocated_date_value(::google::type::Date* date_value) {
  clear_type();
  if (date_value) {
    if (static_cast< ::google::type::Date*>(date_value)->GetArena() != NULL) {
      ::google::type::Date* new_date_value = new ::google::type::Date;
      new_date_value->CopyFrom(*date_value);
      date_value = new_date_value;
    }
    set_has_date_value();
    type_.date_value_ = date_value;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Value.date_value)
}

bool Value::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void Value::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
Value::TypeCase Value::type_case() const {
  return Value::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
}  // namespace google

// @@protoc_insertion_point(global_scope)
