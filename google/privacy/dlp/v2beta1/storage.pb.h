// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/storage.proto

#ifndef PROTOBUF_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto__INCLUDED
#define PROTOBUF_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
namespace google {
namespace api {
}  // namespace api
namespace privacy {
namespace dlp {
namespace v2beta1 {
class BigQueryOptions;
class BigQueryOptionsDefaultTypeInternal;
extern BigQueryOptionsDefaultTypeInternal _BigQueryOptions_default_instance_;
class BigQueryTable;
class BigQueryTableDefaultTypeInternal;
extern BigQueryTableDefaultTypeInternal _BigQueryTable_default_instance_;
class CloudStorageKey;
class CloudStorageKeyDefaultTypeInternal;
extern CloudStorageKeyDefaultTypeInternal _CloudStorageKey_default_instance_;
class CloudStorageOptions;
class CloudStorageOptionsDefaultTypeInternal;
extern CloudStorageOptionsDefaultTypeInternal _CloudStorageOptions_default_instance_;
class CloudStorageOptions_FileSet;
class CloudStorageOptions_FileSetDefaultTypeInternal;
extern CloudStorageOptions_FileSetDefaultTypeInternal _CloudStorageOptions_FileSet_default_instance_;
class CloudStoragePath;
class CloudStoragePathDefaultTypeInternal;
extern CloudStoragePathDefaultTypeInternal _CloudStoragePath_default_instance_;
class DatastoreKey;
class DatastoreKeyDefaultTypeInternal;
extern DatastoreKeyDefaultTypeInternal _DatastoreKey_default_instance_;
class DatastoreOptions;
class DatastoreOptionsDefaultTypeInternal;
extern DatastoreOptionsDefaultTypeInternal _DatastoreOptions_default_instance_;
class FieldId;
class FieldIdDefaultTypeInternal;
extern FieldIdDefaultTypeInternal _FieldId_default_instance_;
class InfoType;
class InfoTypeDefaultTypeInternal;
extern InfoTypeDefaultTypeInternal _InfoType_default_instance_;
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class Key_PathElement;
class Key_PathElementDefaultTypeInternal;
extern Key_PathElementDefaultTypeInternal _Key_PathElement_default_instance_;
class KindExpression;
class KindExpressionDefaultTypeInternal;
extern KindExpressionDefaultTypeInternal _KindExpression_default_instance_;
class PartitionId;
class PartitionIdDefaultTypeInternal;
extern PartitionIdDefaultTypeInternal _PartitionId_default_instance_;
class Projection;
class ProjectionDefaultTypeInternal;
extern ProjectionDefaultTypeInternal _Projection_default_instance_;
class PropertyReference;
class PropertyReferenceDefaultTypeInternal;
extern PropertyReferenceDefaultTypeInternal _PropertyReference_default_instance_;
class RecordKey;
class RecordKeyDefaultTypeInternal;
extern RecordKeyDefaultTypeInternal _RecordKey_default_instance_;
class StorageConfig;
class StorageConfigDefaultTypeInternal;
extern StorageConfigDefaultTypeInternal _StorageConfig_default_instance_;
}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
namespace protobuf {
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace google {
namespace privacy {
namespace dlp {
namespace v2beta1 {

namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto

// ===================================================================

class InfoType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InfoType) */ {
 public:
  InfoType();
  virtual ~InfoType();

  InfoType(const InfoType& from);

  inline InfoType& operator=(const InfoType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoType& default_instance();

  static inline const InfoType* internal_default_instance() {
    return reinterpret_cast<const InfoType*>(
               &_InfoType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(InfoType* other);

  // implements Message ----------------------------------------------

  inline InfoType* New() const PROTOBUF_FINAL { return New(NULL); }

  InfoType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfoType& from);
  void MergeFrom(const InfoType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfoType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InfoType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FieldId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.FieldId) */ {
 public:
  FieldId();
  virtual ~FieldId();

  FieldId(const FieldId& from);

  inline FieldId& operator=(const FieldId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldId& default_instance();

  static inline const FieldId* internal_default_instance() {
    return reinterpret_cast<const FieldId*>(
               &_FieldId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FieldId* other);

  // implements Message ----------------------------------------------

  inline FieldId* New() const PROTOBUF_FINAL { return New(NULL); }

  FieldId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FieldId& from);
  void MergeFrom(const FieldId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FieldId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string column_name = 1;
  void clear_column_name();
  static const int kColumnNameFieldNumber = 1;
  const ::std::string& column_name() const;
  void set_column_name(const ::std::string& value);
  #if LANG_CXX11
  void set_column_name(::std::string&& value);
  #endif
  void set_column_name(const char* value);
  void set_column_name(const char* value, size_t size);
  ::std::string* mutable_column_name();
  ::std::string* release_column_name();
  void set_allocated_column_name(::std::string* column_name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.FieldId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr column_name_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PartitionId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.PartitionId) */ {
 public:
  PartitionId();
  virtual ~PartitionId();

  PartitionId(const PartitionId& from);

  inline PartitionId& operator=(const PartitionId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PartitionId& default_instance();

  static inline const PartitionId* internal_default_instance() {
    return reinterpret_cast<const PartitionId*>(
               &_PartitionId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PartitionId* other);

  // implements Message ----------------------------------------------

  inline PartitionId* New() const PROTOBUF_FINAL { return New(NULL); }

  PartitionId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PartitionId& from);
  void MergeFrom(const PartitionId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PartitionId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 2;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 2;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string namespace_id = 4;
  void clear_namespace_id();
  static const int kNamespaceIdFieldNumber = 4;
  const ::std::string& namespace_id() const;
  void set_namespace_id(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_id(::std::string&& value);
  #endif
  void set_namespace_id(const char* value);
  void set_namespace_id(const char* value, size_t size);
  ::std::string* mutable_namespace_id();
  ::std::string* release_namespace_id();
  void set_allocated_namespace_id(::std::string* namespace_id);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.PartitionId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr namespace_id_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KindExpression : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.KindExpression) */ {
 public:
  KindExpression();
  virtual ~KindExpression();

  KindExpression(const KindExpression& from);

  inline KindExpression& operator=(const KindExpression& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KindExpression& default_instance();

  static inline const KindExpression* internal_default_instance() {
    return reinterpret_cast<const KindExpression*>(
               &_KindExpression_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(KindExpression* other);

  // implements Message ----------------------------------------------

  inline KindExpression* New() const PROTOBUF_FINAL { return New(NULL); }

  KindExpression* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KindExpression& from);
  void MergeFrom(const KindExpression& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KindExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.KindExpression)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PropertyReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.PropertyReference) */ {
 public:
  PropertyReference();
  virtual ~PropertyReference();

  PropertyReference(const PropertyReference& from);

  inline PropertyReference& operator=(const PropertyReference& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyReference& default_instance();

  static inline const PropertyReference* internal_default_instance() {
    return reinterpret_cast<const PropertyReference*>(
               &_PropertyReference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PropertyReference* other);

  // implements Message ----------------------------------------------

  inline PropertyReference* New() const PROTOBUF_FINAL { return New(NULL); }

  PropertyReference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PropertyReference& from);
  void MergeFrom(const PropertyReference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PropertyReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.PropertyReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Projection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Projection) */ {
 public:
  Projection();
  virtual ~Projection();

  Projection(const Projection& from);

  inline Projection& operator=(const Projection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Projection& default_instance();

  static inline const Projection* internal_default_instance() {
    return reinterpret_cast<const Projection*>(
               &_Projection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Projection* other);

  // implements Message ----------------------------------------------

  inline Projection* New() const PROTOBUF_FINAL { return New(NULL); }

  Projection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Projection& from);
  void MergeFrom(const Projection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Projection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.PropertyReference property = 1;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::PropertyReference& property() const;
  ::google::privacy::dlp::v2beta1::PropertyReference* mutable_property();
  ::google::privacy::dlp::v2beta1::PropertyReference* release_property();
  void set_allocated_property(::google::privacy::dlp::v2beta1::PropertyReference* property);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Projection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::PropertyReference* property_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatastoreOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.DatastoreOptions) */ {
 public:
  DatastoreOptions();
  virtual ~DatastoreOptions();

  DatastoreOptions(const DatastoreOptions& from);

  inline DatastoreOptions& operator=(const DatastoreOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatastoreOptions& default_instance();

  static inline const DatastoreOptions* internal_default_instance() {
    return reinterpret_cast<const DatastoreOptions*>(
               &_DatastoreOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DatastoreOptions* other);

  // implements Message ----------------------------------------------

  inline DatastoreOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  DatastoreOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatastoreOptions& from);
  void MergeFrom(const DatastoreOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatastoreOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.Projection projection = 3;
  int projection_size() const;
  void clear_projection();
  static const int kProjectionFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::Projection& projection(int index) const;
  ::google::privacy::dlp::v2beta1::Projection* mutable_projection(int index);
  ::google::privacy::dlp::v2beta1::Projection* add_projection();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Projection >*
      mutable_projection();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Projection >&
      projection() const;

  // .google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
  bool has_partition_id() const;
  void clear_partition_id();
  static const int kPartitionIdFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::PartitionId& partition_id() const;
  ::google::privacy::dlp::v2beta1::PartitionId* mutable_partition_id();
  ::google::privacy::dlp::v2beta1::PartitionId* release_partition_id();
  void set_allocated_partition_id(::google::privacy::dlp::v2beta1::PartitionId* partition_id);

  // .google.privacy.dlp.v2beta1.KindExpression kind = 2;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::KindExpression& kind() const;
  ::google::privacy::dlp::v2beta1::KindExpression* mutable_kind();
  ::google::privacy::dlp::v2beta1::KindExpression* release_kind();
  void set_allocated_kind(::google::privacy::dlp::v2beta1::KindExpression* kind);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.DatastoreOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Projection > projection_;
  ::google::privacy::dlp::v2beta1::PartitionId* partition_id_;
  ::google::privacy::dlp::v2beta1::KindExpression* kind_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloudStorageOptions_FileSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet) */ {
 public:
  CloudStorageOptions_FileSet();
  virtual ~CloudStorageOptions_FileSet();

  CloudStorageOptions_FileSet(const CloudStorageOptions_FileSet& from);

  inline CloudStorageOptions_FileSet& operator=(const CloudStorageOptions_FileSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudStorageOptions_FileSet& default_instance();

  static inline const CloudStorageOptions_FileSet* internal_default_instance() {
    return reinterpret_cast<const CloudStorageOptions_FileSet*>(
               &_CloudStorageOptions_FileSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CloudStorageOptions_FileSet* other);

  // implements Message ----------------------------------------------

  inline CloudStorageOptions_FileSet* New() const PROTOBUF_FINAL { return New(NULL); }

  CloudStorageOptions_FileSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloudStorageOptions_FileSet& from);
  void MergeFrom(const CloudStorageOptions_FileSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloudStorageOptions_FileSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloudStorageOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CloudStorageOptions) */ {
 public:
  CloudStorageOptions();
  virtual ~CloudStorageOptions();

  CloudStorageOptions(const CloudStorageOptions& from);

  inline CloudStorageOptions& operator=(const CloudStorageOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudStorageOptions& default_instance();

  static inline const CloudStorageOptions* internal_default_instance() {
    return reinterpret_cast<const CloudStorageOptions*>(
               &_CloudStorageOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CloudStorageOptions* other);

  // implements Message ----------------------------------------------

  inline CloudStorageOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  CloudStorageOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloudStorageOptions& from);
  void MergeFrom(const CloudStorageOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloudStorageOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CloudStorageOptions_FileSet FileSet;

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet file_set = 1;
  bool has_file_set() const;
  void clear_file_set();
  static const int kFileSetFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet& file_set() const;
  ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet* mutable_file_set();
  ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet* release_file_set();
  void set_allocated_file_set(::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet* file_set);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CloudStorageOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet* file_set_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloudStoragePath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CloudStoragePath) */ {
 public:
  CloudStoragePath();
  virtual ~CloudStoragePath();

  CloudStoragePath(const CloudStoragePath& from);

  inline CloudStoragePath& operator=(const CloudStoragePath& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudStoragePath& default_instance();

  static inline const CloudStoragePath* internal_default_instance() {
    return reinterpret_cast<const CloudStoragePath*>(
               &_CloudStoragePath_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CloudStoragePath* other);

  // implements Message ----------------------------------------------

  inline CloudStoragePath* New() const PROTOBUF_FINAL { return New(NULL); }

  CloudStoragePath* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloudStoragePath& from);
  void MergeFrom(const CloudStoragePath& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloudStoragePath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CloudStoragePath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BigQueryOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.BigQueryOptions) */ {
 public:
  BigQueryOptions();
  virtual ~BigQueryOptions();

  BigQueryOptions(const BigQueryOptions& from);

  inline BigQueryOptions& operator=(const BigQueryOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BigQueryOptions& default_instance();

  static inline const BigQueryOptions* internal_default_instance() {
    return reinterpret_cast<const BigQueryOptions*>(
               &_BigQueryOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(BigQueryOptions* other);

  // implements Message ----------------------------------------------

  inline BigQueryOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  BigQueryOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BigQueryOptions& from);
  void MergeFrom(const BigQueryOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BigQueryOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.FieldId identifying_fields = 2;
  int identifying_fields_size() const;
  void clear_identifying_fields();
  static const int kIdentifyingFieldsFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::FieldId& identifying_fields(int index) const;
  ::google::privacy::dlp::v2beta1::FieldId* mutable_identifying_fields(int index);
  ::google::privacy::dlp::v2beta1::FieldId* add_identifying_fields();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >*
      mutable_identifying_fields();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >&
      identifying_fields() const;

  // .google.privacy.dlp.v2beta1.BigQueryTable table_reference = 1;
  bool has_table_reference() const;
  void clear_table_reference();
  static const int kTableReferenceFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::BigQueryTable& table_reference() const;
  ::google::privacy::dlp::v2beta1::BigQueryTable* mutable_table_reference();
  ::google::privacy::dlp::v2beta1::BigQueryTable* release_table_reference();
  void set_allocated_table_reference(::google::privacy::dlp::v2beta1::BigQueryTable* table_reference);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.BigQueryOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId > identifying_fields_;
  ::google::privacy::dlp::v2beta1::BigQueryTable* table_reference_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.StorageConfig) */ {
 public:
  StorageConfig();
  virtual ~StorageConfig();

  StorageConfig(const StorageConfig& from);

  inline StorageConfig& operator=(const StorageConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageConfig& default_instance();

  enum TypeCase {
    kDatastoreOptions = 2,
    kCloudStorageOptions = 3,
    kBigQueryOptions = 4,
    TYPE_NOT_SET = 0,
  };

  static inline const StorageConfig* internal_default_instance() {
    return reinterpret_cast<const StorageConfig*>(
               &_StorageConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(StorageConfig* other);

  // implements Message ----------------------------------------------

  inline StorageConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageConfig& from);
  void MergeFrom(const StorageConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.DatastoreOptions datastore_options = 2;
  bool has_datastore_options() const;
  void clear_datastore_options();
  static const int kDatastoreOptionsFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::DatastoreOptions& datastore_options() const;
  ::google::privacy::dlp::v2beta1::DatastoreOptions* mutable_datastore_options();
  ::google::privacy::dlp::v2beta1::DatastoreOptions* release_datastore_options();
  void set_allocated_datastore_options(::google::privacy::dlp::v2beta1::DatastoreOptions* datastore_options);

  // .google.privacy.dlp.v2beta1.CloudStorageOptions cloud_storage_options = 3;
  bool has_cloud_storage_options() const;
  void clear_cloud_storage_options();
  static const int kCloudStorageOptionsFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::CloudStorageOptions& cloud_storage_options() const;
  ::google::privacy::dlp::v2beta1::CloudStorageOptions* mutable_cloud_storage_options();
  ::google::privacy::dlp::v2beta1::CloudStorageOptions* release_cloud_storage_options();
  void set_allocated_cloud_storage_options(::google::privacy::dlp::v2beta1::CloudStorageOptions* cloud_storage_options);

  // .google.privacy.dlp.v2beta1.BigQueryOptions big_query_options = 4;
  bool has_big_query_options() const;
  void clear_big_query_options();
  static const int kBigQueryOptionsFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::BigQueryOptions& big_query_options() const;
  ::google::privacy::dlp::v2beta1::BigQueryOptions* mutable_big_query_options();
  ::google::privacy::dlp::v2beta1::BigQueryOptions* release_big_query_options();
  void set_allocated_big_query_options(::google::privacy::dlp::v2beta1::BigQueryOptions* big_query_options);

  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.StorageConfig)
 private:
  void set_has_datastore_options();
  void set_has_cloud_storage_options();
  void set_has_big_query_options();

  inline bool has_type() const;
  void clear_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::google::privacy::dlp::v2beta1::DatastoreOptions* datastore_options_;
    ::google::privacy::dlp::v2beta1::CloudStorageOptions* cloud_storage_options_;
    ::google::privacy::dlp::v2beta1::BigQueryOptions* big_query_options_;
  } type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloudStorageKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CloudStorageKey) */ {
 public:
  CloudStorageKey();
  virtual ~CloudStorageKey();

  CloudStorageKey(const CloudStorageKey& from);

  inline CloudStorageKey& operator=(const CloudStorageKey& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudStorageKey& default_instance();

  static inline const CloudStorageKey* internal_default_instance() {
    return reinterpret_cast<const CloudStorageKey*>(
               &_CloudStorageKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CloudStorageKey* other);

  // implements Message ----------------------------------------------

  inline CloudStorageKey* New() const PROTOBUF_FINAL { return New(NULL); }

  CloudStorageKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloudStorageKey& from);
  void MergeFrom(const CloudStorageKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloudStorageKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_path = 1;
  void clear_file_path();
  static const int kFilePathFieldNumber = 1;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // int64 start_offset = 2;
  void clear_start_offset();
  static const int kStartOffsetFieldNumber = 2;
  ::google::protobuf::int64 start_offset() const;
  void set_start_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CloudStorageKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  ::google::protobuf::int64 start_offset_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatastoreKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.DatastoreKey) */ {
 public:
  DatastoreKey();
  virtual ~DatastoreKey();

  DatastoreKey(const DatastoreKey& from);

  inline DatastoreKey& operator=(const DatastoreKey& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatastoreKey& default_instance();

  static inline const DatastoreKey* internal_default_instance() {
    return reinterpret_cast<const DatastoreKey*>(
               &_DatastoreKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DatastoreKey* other);

  // implements Message ----------------------------------------------

  inline DatastoreKey* New() const PROTOBUF_FINAL { return New(NULL); }

  DatastoreKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatastoreKey& from);
  void MergeFrom(const DatastoreKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatastoreKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.Key entity_key = 1;
  bool has_entity_key() const;
  void clear_entity_key();
  static const int kEntityKeyFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Key& entity_key() const;
  ::google::privacy::dlp::v2beta1::Key* mutable_entity_key();
  ::google::privacy::dlp::v2beta1::Key* release_entity_key();
  void set_allocated_entity_key(::google::privacy::dlp::v2beta1::Key* entity_key);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.DatastoreKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::Key* entity_key_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Key_PathElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Key.PathElement) */ {
 public:
  Key_PathElement();
  virtual ~Key_PathElement();

  Key_PathElement(const Key_PathElement& from);

  inline Key_PathElement& operator=(const Key_PathElement& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Key_PathElement& default_instance();

  enum IdTypeCase {
    kId = 2,
    kName = 3,
    ID_TYPE_NOT_SET = 0,
  };

  static inline const Key_PathElement* internal_default_instance() {
    return reinterpret_cast<const Key_PathElement*>(
               &_Key_PathElement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Key_PathElement* other);

  // implements Message ----------------------------------------------

  inline Key_PathElement* New() const PROTOBUF_FINAL { return New(NULL); }

  Key_PathElement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Key_PathElement& from);
  void MergeFrom(const Key_PathElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Key_PathElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // int64 id = 2;
  private:
  bool has_id() const;
  public:
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // string name = 3;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  IdTypeCase id_type_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Key.PathElement)
 private:
  void set_has_id();
  void set_has_name();

  inline bool has_id_type() const;
  void clear_id_type();
  inline void clear_has_id_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  union IdTypeUnion {
    IdTypeUnion() {}
    ::google::protobuf::int64 id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
  } id_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Key& default_instance();

  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Key* other);

  // implements Message ----------------------------------------------

  inline Key* New() const PROTOBUF_FINAL { return New(NULL); }

  Key* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Key_PathElement PathElement;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.Key.PathElement path = 2;
  int path_size() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::Key_PathElement& path(int index) const;
  ::google::privacy::dlp::v2beta1::Key_PathElement* mutable_path(int index);
  ::google::privacy::dlp::v2beta1::Key_PathElement* add_path();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Key_PathElement >*
      mutable_path();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Key_PathElement >&
      path() const;

  // .google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
  bool has_partition_id() const;
  void clear_partition_id();
  static const int kPartitionIdFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::PartitionId& partition_id() const;
  ::google::privacy::dlp::v2beta1::PartitionId* mutable_partition_id();
  ::google::privacy::dlp::v2beta1::PartitionId* release_partition_id();
  void set_allocated_partition_id(::google::privacy::dlp::v2beta1::PartitionId* partition_id);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Key_PathElement > path_;
  ::google::privacy::dlp::v2beta1::PartitionId* partition_id_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecordKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RecordKey) */ {
 public:
  RecordKey();
  virtual ~RecordKey();

  RecordKey(const RecordKey& from);

  inline RecordKey& operator=(const RecordKey& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordKey& default_instance();

  enum TypeCase {
    kCloudStorageKey = 1,
    kDatastoreKey = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const RecordKey* internal_default_instance() {
    return reinterpret_cast<const RecordKey*>(
               &_RecordKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(RecordKey* other);

  // implements Message ----------------------------------------------

  inline RecordKey* New() const PROTOBUF_FINAL { return New(NULL); }

  RecordKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecordKey& from);
  void MergeFrom(const RecordKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecordKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.CloudStorageKey cloud_storage_key = 1;
  bool has_cloud_storage_key() const;
  void clear_cloud_storage_key();
  static const int kCloudStorageKeyFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::CloudStorageKey& cloud_storage_key() const;
  ::google::privacy::dlp::v2beta1::CloudStorageKey* mutable_cloud_storage_key();
  ::google::privacy::dlp::v2beta1::CloudStorageKey* release_cloud_storage_key();
  void set_allocated_cloud_storage_key(::google::privacy::dlp::v2beta1::CloudStorageKey* cloud_storage_key);

  // .google.privacy.dlp.v2beta1.DatastoreKey datastore_key = 2;
  bool has_datastore_key() const;
  void clear_datastore_key();
  static const int kDatastoreKeyFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::DatastoreKey& datastore_key() const;
  ::google::privacy::dlp::v2beta1::DatastoreKey* mutable_datastore_key();
  ::google::privacy::dlp::v2beta1::DatastoreKey* release_datastore_key();
  void set_allocated_datastore_key(::google::privacy::dlp::v2beta1::DatastoreKey* datastore_key);

  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RecordKey)
 private:
  void set_has_cloud_storage_key();
  void set_has_datastore_key();

  inline bool has_type() const;
  void clear_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::google::privacy::dlp::v2beta1::CloudStorageKey* cloud_storage_key_;
    ::google::privacy::dlp::v2beta1::DatastoreKey* datastore_key_;
  } type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BigQueryTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.BigQueryTable) */ {
 public:
  BigQueryTable();
  virtual ~BigQueryTable();

  BigQueryTable(const BigQueryTable& from);

  inline BigQueryTable& operator=(const BigQueryTable& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BigQueryTable& default_instance();

  static inline const BigQueryTable* internal_default_instance() {
    return reinterpret_cast<const BigQueryTable*>(
               &_BigQueryTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(BigQueryTable* other);

  // implements Message ----------------------------------------------

  inline BigQueryTable* New() const PROTOBUF_FINAL { return New(NULL); }

  BigQueryTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BigQueryTable& from);
  void MergeFrom(const BigQueryTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BigQueryTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string dataset_id = 2;
  void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 2;
  const ::std::string& dataset_id() const;
  void set_dataset_id(const ::std::string& value);
  #if LANG_CXX11
  void set_dataset_id(::std::string&& value);
  #endif
  void set_dataset_id(const char* value);
  void set_dataset_id(const char* value, size_t size);
  ::std::string* mutable_dataset_id();
  ::std::string* release_dataset_id();
  void set_allocated_dataset_id(::std::string* dataset_id);

  // string table_id = 3;
  void clear_table_id();
  static const int kTableIdFieldNumber = 3;
  const ::std::string& table_id() const;
  void set_table_id(const ::std::string& value);
  #if LANG_CXX11
  void set_table_id(::std::string&& value);
  #endif
  void set_table_id(const char* value);
  void set_table_id(const char* value, size_t size);
  ::std::string* mutable_table_id();
  ::std::string* release_table_id();
  void set_allocated_table_id(::std::string* table_id);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.BigQueryTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr dataset_id_;
  ::google::protobuf::internal::ArenaStringPtr table_id_;
  mutable int _cached_size_;
  friend struct protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoType

// string name = 1;
inline void InfoType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoType::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoType.name)
  return name_.GetNoArena();
}
inline void InfoType::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoType.name)
}
#if LANG_CXX11
inline void InfoType::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InfoType.name)
}
#endif
inline void InfoType::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InfoType.name)
}
inline void InfoType::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InfoType.name)
}
inline ::std::string* InfoType::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoType::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoType.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoType.name)
}

// -------------------------------------------------------------------

// FieldId

// string column_name = 1;
inline void FieldId::clear_column_name() {
  column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FieldId::column_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.FieldId.column_name)
  return column_name_.GetNoArena();
}
inline void FieldId::set_column_name(const ::std::string& value) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.FieldId.column_name)
}
#if LANG_CXX11
inline void FieldId::set_column_name(::std::string&& value) {
  
  column_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.FieldId.column_name)
}
#endif
inline void FieldId::set_column_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.FieldId.column_name)
}
inline void FieldId::set_column_name(const char* value, size_t size) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.FieldId.column_name)
}
inline ::std::string* FieldId::mutable_column_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.FieldId.column_name)
  return column_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldId::release_column_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.FieldId.column_name)
  
  return column_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldId::set_allocated_column_name(::std::string* column_name) {
  if (column_name != NULL) {
    
  } else {
    
  }
  column_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.FieldId.column_name)
}

// -------------------------------------------------------------------

// PartitionId

// string project_id = 2;
inline void PartitionId::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PartitionId::project_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PartitionId.project_id)
  return project_id_.GetNoArena();
}
inline void PartitionId::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.PartitionId.project_id)
}
#if LANG_CXX11
inline void PartitionId::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.PartitionId.project_id)
}
#endif
inline void PartitionId::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.PartitionId.project_id)
}
inline void PartitionId::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.PartitionId.project_id)
}
inline ::std::string* PartitionId::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PartitionId.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PartitionId::release_project_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PartitionId.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionId::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PartitionId.project_id)
}

// string namespace_id = 4;
inline void PartitionId::clear_namespace_id() {
  namespace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PartitionId::namespace_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PartitionId.namespace_id)
  return namespace_id_.GetNoArena();
}
inline void PartitionId::set_namespace_id(const ::std::string& value) {
  
  namespace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.PartitionId.namespace_id)
}
#if LANG_CXX11
inline void PartitionId::set_namespace_id(::std::string&& value) {
  
  namespace_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.PartitionId.namespace_id)
}
#endif
inline void PartitionId::set_namespace_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namespace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.PartitionId.namespace_id)
}
inline void PartitionId::set_namespace_id(const char* value, size_t size) {
  
  namespace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.PartitionId.namespace_id)
}
inline ::std::string* PartitionId::mutable_namespace_id() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PartitionId.namespace_id)
  return namespace_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PartitionId::release_namespace_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PartitionId.namespace_id)
  
  return namespace_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionId::set_allocated_namespace_id(::std::string* namespace_id) {
  if (namespace_id != NULL) {
    
  } else {
    
  }
  namespace_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_id);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PartitionId.namespace_id)
}

// -------------------------------------------------------------------

// KindExpression

// string name = 1;
inline void KindExpression::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KindExpression::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.KindExpression.name)
  return name_.GetNoArena();
}
inline void KindExpression::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.KindExpression.name)
}
#if LANG_CXX11
inline void KindExpression::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.KindExpression.name)
}
#endif
inline void KindExpression::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.KindExpression.name)
}
inline void KindExpression::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.KindExpression.name)
}
inline ::std::string* KindExpression::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.KindExpression.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KindExpression::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.KindExpression.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KindExpression::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.KindExpression.name)
}

// -------------------------------------------------------------------

// PropertyReference

// string name = 2;
inline void PropertyReference::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyReference::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.PropertyReference.name)
  return name_.GetNoArena();
}
inline void PropertyReference::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.PropertyReference.name)
}
#if LANG_CXX11
inline void PropertyReference::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.PropertyReference.name)
}
#endif
inline void PropertyReference::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.PropertyReference.name)
}
inline void PropertyReference::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.PropertyReference.name)
}
inline ::std::string* PropertyReference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.PropertyReference.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyReference::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.PropertyReference.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyReference::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.PropertyReference.name)
}

// -------------------------------------------------------------------

// Projection

// .google.privacy.dlp.v2beta1.PropertyReference property = 1;
inline bool Projection::has_property() const {
  return this != internal_default_instance() && property_ != NULL;
}
inline void Projection::clear_property() {
  if (GetArenaNoVirtual() == NULL && property_ != NULL) delete property_;
  property_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::PropertyReference& Projection::property() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Projection.property)
  return property_ != NULL ? *property_
                         : *::google::privacy::dlp::v2beta1::PropertyReference::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::PropertyReference* Projection::mutable_property() {
  
  if (property_ == NULL) {
    property_ = new ::google::privacy::dlp::v2beta1::PropertyReference;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Projection.property)
  return property_;
}
inline ::google::privacy::dlp::v2beta1::PropertyReference* Projection::release_property() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Projection.property)
  
  ::google::privacy::dlp::v2beta1::PropertyReference* temp = property_;
  property_ = NULL;
  return temp;
}
inline void Projection::set_allocated_property(::google::privacy::dlp::v2beta1::PropertyReference* property) {
  delete property_;
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Projection.property)
}

// -------------------------------------------------------------------

// DatastoreOptions

// .google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
inline bool DatastoreOptions::has_partition_id() const {
  return this != internal_default_instance() && partition_id_ != NULL;
}
inline void DatastoreOptions::clear_partition_id() {
  if (GetArenaNoVirtual() == NULL && partition_id_ != NULL) delete partition_id_;
  partition_id_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::PartitionId& DatastoreOptions::partition_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DatastoreOptions.partition_id)
  return partition_id_ != NULL ? *partition_id_
                         : *::google::privacy::dlp::v2beta1::PartitionId::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::PartitionId* DatastoreOptions::mutable_partition_id() {
  
  if (partition_id_ == NULL) {
    partition_id_ = new ::google::privacy::dlp::v2beta1::PartitionId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.DatastoreOptions.partition_id)
  return partition_id_;
}
inline ::google::privacy::dlp::v2beta1::PartitionId* DatastoreOptions::release_partition_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.DatastoreOptions.partition_id)
  
  ::google::privacy::dlp::v2beta1::PartitionId* temp = partition_id_;
  partition_id_ = NULL;
  return temp;
}
inline void DatastoreOptions::set_allocated_partition_id(::google::privacy::dlp::v2beta1::PartitionId* partition_id) {
  delete partition_id_;
  partition_id_ = partition_id;
  if (partition_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.DatastoreOptions.partition_id)
}

// .google.privacy.dlp.v2beta1.KindExpression kind = 2;
inline bool DatastoreOptions::has_kind() const {
  return this != internal_default_instance() && kind_ != NULL;
}
inline void DatastoreOptions::clear_kind() {
  if (GetArenaNoVirtual() == NULL && kind_ != NULL) delete kind_;
  kind_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::KindExpression& DatastoreOptions::kind() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DatastoreOptions.kind)
  return kind_ != NULL ? *kind_
                         : *::google::privacy::dlp::v2beta1::KindExpression::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::KindExpression* DatastoreOptions::mutable_kind() {
  
  if (kind_ == NULL) {
    kind_ = new ::google::privacy::dlp::v2beta1::KindExpression;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.DatastoreOptions.kind)
  return kind_;
}
inline ::google::privacy::dlp::v2beta1::KindExpression* DatastoreOptions::release_kind() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.DatastoreOptions.kind)
  
  ::google::privacy::dlp::v2beta1::KindExpression* temp = kind_;
  kind_ = NULL;
  return temp;
}
inline void DatastoreOptions::set_allocated_kind(::google::privacy::dlp::v2beta1::KindExpression* kind) {
  delete kind_;
  kind_ = kind;
  if (kind) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.DatastoreOptions.kind)
}

// repeated .google.privacy.dlp.v2beta1.Projection projection = 3;
inline int DatastoreOptions::projection_size() const {
  return projection_.size();
}
inline void DatastoreOptions::clear_projection() {
  projection_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::Projection& DatastoreOptions::projection(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DatastoreOptions.projection)
  return projection_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::Projection* DatastoreOptions::mutable_projection(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.DatastoreOptions.projection)
  return projection_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::Projection* DatastoreOptions::add_projection() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.DatastoreOptions.projection)
  return projection_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Projection >*
DatastoreOptions::mutable_projection() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.DatastoreOptions.projection)
  return &projection_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Projection >&
DatastoreOptions::projection() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.DatastoreOptions.projection)
  return projection_;
}

// -------------------------------------------------------------------

// CloudStorageOptions_FileSet

// string url = 1;
inline void CloudStorageOptions_FileSet::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudStorageOptions_FileSet::url() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet.url)
  return url_.GetNoArena();
}
inline void CloudStorageOptions_FileSet::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet.url)
}
#if LANG_CXX11
inline void CloudStorageOptions_FileSet::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet.url)
}
#endif
inline void CloudStorageOptions_FileSet::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet.url)
}
inline void CloudStorageOptions_FileSet::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet.url)
}
inline ::std::string* CloudStorageOptions_FileSet::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudStorageOptions_FileSet::release_url() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudStorageOptions_FileSet::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet.url)
}

// -------------------------------------------------------------------

// CloudStorageOptions

// .google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet file_set = 1;
inline bool CloudStorageOptions::has_file_set() const {
  return this != internal_default_instance() && file_set_ != NULL;
}
inline void CloudStorageOptions::clear_file_set() {
  if (GetArenaNoVirtual() == NULL && file_set_ != NULL) delete file_set_;
  file_set_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet& CloudStorageOptions::file_set() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CloudStorageOptions.file_set)
  return file_set_ != NULL ? *file_set_
                         : *::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet* CloudStorageOptions::mutable_file_set() {
  
  if (file_set_ == NULL) {
    file_set_ = new ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CloudStorageOptions.file_set)
  return file_set_;
}
inline ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet* CloudStorageOptions::release_file_set() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CloudStorageOptions.file_set)
  
  ::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet* temp = file_set_;
  file_set_ = NULL;
  return temp;
}
inline void CloudStorageOptions::set_allocated_file_set(::google::privacy::dlp::v2beta1::CloudStorageOptions_FileSet* file_set) {
  delete file_set_;
  file_set_ = file_set;
  if (file_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CloudStorageOptions.file_set)
}

// -------------------------------------------------------------------

// CloudStoragePath

// string path = 1;
inline void CloudStoragePath::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudStoragePath::path() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CloudStoragePath.path)
  return path_.GetNoArena();
}
inline void CloudStoragePath::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CloudStoragePath.path)
}
#if LANG_CXX11
inline void CloudStoragePath::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CloudStoragePath.path)
}
#endif
inline void CloudStoragePath::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CloudStoragePath.path)
}
inline void CloudStoragePath::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CloudStoragePath.path)
}
inline ::std::string* CloudStoragePath::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CloudStoragePath.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudStoragePath::release_path() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CloudStoragePath.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudStoragePath::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CloudStoragePath.path)
}

// -------------------------------------------------------------------

// BigQueryOptions

// .google.privacy.dlp.v2beta1.BigQueryTable table_reference = 1;
inline bool BigQueryOptions::has_table_reference() const {
  return this != internal_default_instance() && table_reference_ != NULL;
}
inline void BigQueryOptions::clear_table_reference() {
  if (GetArenaNoVirtual() == NULL && table_reference_ != NULL) delete table_reference_;
  table_reference_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::BigQueryTable& BigQueryOptions::table_reference() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.BigQueryOptions.table_reference)
  return table_reference_ != NULL ? *table_reference_
                         : *::google::privacy::dlp::v2beta1::BigQueryTable::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::BigQueryTable* BigQueryOptions::mutable_table_reference() {
  
  if (table_reference_ == NULL) {
    table_reference_ = new ::google::privacy::dlp::v2beta1::BigQueryTable;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.BigQueryOptions.table_reference)
  return table_reference_;
}
inline ::google::privacy::dlp::v2beta1::BigQueryTable* BigQueryOptions::release_table_reference() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.BigQueryOptions.table_reference)
  
  ::google::privacy::dlp::v2beta1::BigQueryTable* temp = table_reference_;
  table_reference_ = NULL;
  return temp;
}
inline void BigQueryOptions::set_allocated_table_reference(::google::privacy::dlp::v2beta1::BigQueryTable* table_reference) {
  delete table_reference_;
  table_reference_ = table_reference;
  if (table_reference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.BigQueryOptions.table_reference)
}

// repeated .google.privacy.dlp.v2beta1.FieldId identifying_fields = 2;
inline int BigQueryOptions::identifying_fields_size() const {
  return identifying_fields_.size();
}
inline void BigQueryOptions::clear_identifying_fields() {
  identifying_fields_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::FieldId& BigQueryOptions::identifying_fields(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.BigQueryOptions.identifying_fields)
  return identifying_fields_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::FieldId* BigQueryOptions::mutable_identifying_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.BigQueryOptions.identifying_fields)
  return identifying_fields_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::FieldId* BigQueryOptions::add_identifying_fields() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.BigQueryOptions.identifying_fields)
  return identifying_fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >*
BigQueryOptions::mutable_identifying_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.BigQueryOptions.identifying_fields)
  return &identifying_fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::FieldId >&
BigQueryOptions::identifying_fields() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.BigQueryOptions.identifying_fields)
  return identifying_fields_;
}

// -------------------------------------------------------------------

// StorageConfig

// .google.privacy.dlp.v2beta1.DatastoreOptions datastore_options = 2;
inline bool StorageConfig::has_datastore_options() const {
  return type_case() == kDatastoreOptions;
}
inline void StorageConfig::set_has_datastore_options() {
  _oneof_case_[0] = kDatastoreOptions;
}
inline void StorageConfig::clear_datastore_options() {
  if (has_datastore_options()) {
    delete type_.datastore_options_;
    clear_has_type();
  }
}
inline  const ::google::privacy::dlp::v2beta1::DatastoreOptions& StorageConfig::datastore_options() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.StorageConfig.datastore_options)
  return has_datastore_options()
      ? *type_.datastore_options_
      : ::google::privacy::dlp::v2beta1::DatastoreOptions::default_instance();
}
inline ::google::privacy::dlp::v2beta1::DatastoreOptions* StorageConfig::mutable_datastore_options() {
  if (!has_datastore_options()) {
    clear_type();
    set_has_datastore_options();
    type_.datastore_options_ = new ::google::privacy::dlp::v2beta1::DatastoreOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.StorageConfig.datastore_options)
  return type_.datastore_options_;
}
inline ::google::privacy::dlp::v2beta1::DatastoreOptions* StorageConfig::release_datastore_options() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.StorageConfig.datastore_options)
  if (has_datastore_options()) {
    clear_has_type();
    ::google::privacy::dlp::v2beta1::DatastoreOptions* temp = type_.datastore_options_;
    type_.datastore_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StorageConfig::set_allocated_datastore_options(::google::privacy::dlp::v2beta1::DatastoreOptions* datastore_options) {
  clear_type();
  if (datastore_options) {
    set_has_datastore_options();
    type_.datastore_options_ = datastore_options;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.StorageConfig.datastore_options)
}

// .google.privacy.dlp.v2beta1.CloudStorageOptions cloud_storage_options = 3;
inline bool StorageConfig::has_cloud_storage_options() const {
  return type_case() == kCloudStorageOptions;
}
inline void StorageConfig::set_has_cloud_storage_options() {
  _oneof_case_[0] = kCloudStorageOptions;
}
inline void StorageConfig::clear_cloud_storage_options() {
  if (has_cloud_storage_options()) {
    delete type_.cloud_storage_options_;
    clear_has_type();
  }
}
inline  const ::google::privacy::dlp::v2beta1::CloudStorageOptions& StorageConfig::cloud_storage_options() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.StorageConfig.cloud_storage_options)
  return has_cloud_storage_options()
      ? *type_.cloud_storage_options_
      : ::google::privacy::dlp::v2beta1::CloudStorageOptions::default_instance();
}
inline ::google::privacy::dlp::v2beta1::CloudStorageOptions* StorageConfig::mutable_cloud_storage_options() {
  if (!has_cloud_storage_options()) {
    clear_type();
    set_has_cloud_storage_options();
    type_.cloud_storage_options_ = new ::google::privacy::dlp::v2beta1::CloudStorageOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.StorageConfig.cloud_storage_options)
  return type_.cloud_storage_options_;
}
inline ::google::privacy::dlp::v2beta1::CloudStorageOptions* StorageConfig::release_cloud_storage_options() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.StorageConfig.cloud_storage_options)
  if (has_cloud_storage_options()) {
    clear_has_type();
    ::google::privacy::dlp::v2beta1::CloudStorageOptions* temp = type_.cloud_storage_options_;
    type_.cloud_storage_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StorageConfig::set_allocated_cloud_storage_options(::google::privacy::dlp::v2beta1::CloudStorageOptions* cloud_storage_options) {
  clear_type();
  if (cloud_storage_options) {
    set_has_cloud_storage_options();
    type_.cloud_storage_options_ = cloud_storage_options;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.StorageConfig.cloud_storage_options)
}

// .google.privacy.dlp.v2beta1.BigQueryOptions big_query_options = 4;
inline bool StorageConfig::has_big_query_options() const {
  return type_case() == kBigQueryOptions;
}
inline void StorageConfig::set_has_big_query_options() {
  _oneof_case_[0] = kBigQueryOptions;
}
inline void StorageConfig::clear_big_query_options() {
  if (has_big_query_options()) {
    delete type_.big_query_options_;
    clear_has_type();
  }
}
inline  const ::google::privacy::dlp::v2beta1::BigQueryOptions& StorageConfig::big_query_options() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.StorageConfig.big_query_options)
  return has_big_query_options()
      ? *type_.big_query_options_
      : ::google::privacy::dlp::v2beta1::BigQueryOptions::default_instance();
}
inline ::google::privacy::dlp::v2beta1::BigQueryOptions* StorageConfig::mutable_big_query_options() {
  if (!has_big_query_options()) {
    clear_type();
    set_has_big_query_options();
    type_.big_query_options_ = new ::google::privacy::dlp::v2beta1::BigQueryOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.StorageConfig.big_query_options)
  return type_.big_query_options_;
}
inline ::google::privacy::dlp::v2beta1::BigQueryOptions* StorageConfig::release_big_query_options() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.StorageConfig.big_query_options)
  if (has_big_query_options()) {
    clear_has_type();
    ::google::privacy::dlp::v2beta1::BigQueryOptions* temp = type_.big_query_options_;
    type_.big_query_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StorageConfig::set_allocated_big_query_options(::google::privacy::dlp::v2beta1::BigQueryOptions* big_query_options) {
  clear_type();
  if (big_query_options) {
    set_has_big_query_options();
    type_.big_query_options_ = big_query_options;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.StorageConfig.big_query_options)
}

inline bool StorageConfig::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void StorageConfig::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline StorageConfig::TypeCase StorageConfig::type_case() const {
  return StorageConfig::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CloudStorageKey

// string file_path = 1;
inline void CloudStorageKey::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudStorageKey::file_path() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CloudStorageKey.file_path)
  return file_path_.GetNoArena();
}
inline void CloudStorageKey::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CloudStorageKey.file_path)
}
#if LANG_CXX11
inline void CloudStorageKey::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CloudStorageKey.file_path)
}
#endif
inline void CloudStorageKey::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CloudStorageKey.file_path)
}
inline void CloudStorageKey::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CloudStorageKey.file_path)
}
inline ::std::string* CloudStorageKey::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CloudStorageKey.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudStorageKey::release_file_path() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CloudStorageKey.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudStorageKey::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CloudStorageKey.file_path)
}

// int64 start_offset = 2;
inline void CloudStorageKey::clear_start_offset() {
  start_offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CloudStorageKey::start_offset() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CloudStorageKey.start_offset)
  return start_offset_;
}
inline void CloudStorageKey::set_start_offset(::google::protobuf::int64 value) {
  
  start_offset_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CloudStorageKey.start_offset)
}

// -------------------------------------------------------------------

// DatastoreKey

// .google.privacy.dlp.v2beta1.Key entity_key = 1;
inline bool DatastoreKey::has_entity_key() const {
  return this != internal_default_instance() && entity_key_ != NULL;
}
inline void DatastoreKey::clear_entity_key() {
  if (GetArenaNoVirtual() == NULL && entity_key_ != NULL) delete entity_key_;
  entity_key_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Key& DatastoreKey::entity_key() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.DatastoreKey.entity_key)
  return entity_key_ != NULL ? *entity_key_
                         : *::google::privacy::dlp::v2beta1::Key::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::Key* DatastoreKey::mutable_entity_key() {
  
  if (entity_key_ == NULL) {
    entity_key_ = new ::google::privacy::dlp::v2beta1::Key;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.DatastoreKey.entity_key)
  return entity_key_;
}
inline ::google::privacy::dlp::v2beta1::Key* DatastoreKey::release_entity_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.DatastoreKey.entity_key)
  
  ::google::privacy::dlp::v2beta1::Key* temp = entity_key_;
  entity_key_ = NULL;
  return temp;
}
inline void DatastoreKey::set_allocated_entity_key(::google::privacy::dlp::v2beta1::Key* entity_key) {
  delete entity_key_;
  entity_key_ = entity_key;
  if (entity_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.DatastoreKey.entity_key)
}

// -------------------------------------------------------------------

// Key_PathElement

// string kind = 1;
inline void Key_PathElement::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Key_PathElement::kind() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Key.PathElement.kind)
  return kind_.GetNoArena();
}
inline void Key_PathElement::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Key.PathElement.kind)
}
#if LANG_CXX11
inline void Key_PathElement::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.Key.PathElement.kind)
}
#endif
inline void Key_PathElement::set_kind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.Key.PathElement.kind)
}
inline void Key_PathElement::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.Key.PathElement.kind)
}
inline ::std::string* Key_PathElement::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Key.PathElement.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key_PathElement::release_kind() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Key.PathElement.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key_PathElement::set_allocated_kind(::std::string* kind) {
  if (kind != NULL) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Key.PathElement.kind)
}

// int64 id = 2;
inline bool Key_PathElement::has_id() const {
  return id_type_case() == kId;
}
inline void Key_PathElement::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void Key_PathElement::clear_id() {
  if (has_id()) {
    id_type_.id_ = GOOGLE_LONGLONG(0);
    clear_has_id_type();
  }
}
inline ::google::protobuf::int64 Key_PathElement::id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Key.PathElement.id)
  if (has_id()) {
    return id_type_.id_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Key_PathElement::set_id(::google::protobuf::int64 value) {
  if (!has_id()) {
    clear_id_type();
    set_has_id();
  }
  id_type_.id_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Key.PathElement.id)
}

// string name = 3;
inline bool Key_PathElement::has_name() const {
  return id_type_case() == kName;
}
inline void Key_PathElement::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void Key_PathElement::clear_name() {
  if (has_name()) {
    id_type_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id_type();
  }
}
inline const ::std::string& Key_PathElement::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Key.PathElement.name)
  if (has_name()) {
    return id_type_.name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Key_PathElement::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Key.PathElement.name)
  if (!has_name()) {
    clear_id_type();
    set_has_name();
    id_type_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_type_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Key.PathElement.name)
}
#if LANG_CXX11
inline void Key_PathElement::set_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Key.PathElement.name)
  if (!has_name()) {
    clear_id_type();
    set_has_name();
    id_type_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_type_.name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.Key.PathElement.name)
}
#endif
inline void Key_PathElement::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_name()) {
    clear_id_type();
    set_has_name();
    id_type_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_type_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.Key.PathElement.name)
}
inline void Key_PathElement::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_id_type();
    set_has_name();
    id_type_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_type_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.Key.PathElement.name)
}
inline ::std::string* Key_PathElement::mutable_name() {
  if (!has_name()) {
    clear_id_type();
    set_has_name();
    id_type_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Key.PathElement.name)
  return id_type_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key_PathElement::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Key.PathElement.name)
  if (has_name()) {
    clear_has_id_type();
    return id_type_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Key_PathElement::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    id_type_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_id_type();
  if (name != NULL) {
    set_has_name();
    id_type_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Key.PathElement.name)
}

inline bool Key_PathElement::has_id_type() const {
  return id_type_case() != ID_TYPE_NOT_SET;
}
inline void Key_PathElement::clear_has_id_type() {
  _oneof_case_[0] = ID_TYPE_NOT_SET;
}
inline Key_PathElement::IdTypeCase Key_PathElement::id_type_case() const {
  return Key_PathElement::IdTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Key

// .google.privacy.dlp.v2beta1.PartitionId partition_id = 1;
inline bool Key::has_partition_id() const {
  return this != internal_default_instance() && partition_id_ != NULL;
}
inline void Key::clear_partition_id() {
  if (GetArenaNoVirtual() == NULL && partition_id_ != NULL) delete partition_id_;
  partition_id_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::PartitionId& Key::partition_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Key.partition_id)
  return partition_id_ != NULL ? *partition_id_
                         : *::google::privacy::dlp::v2beta1::PartitionId::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::PartitionId* Key::mutable_partition_id() {
  
  if (partition_id_ == NULL) {
    partition_id_ = new ::google::privacy::dlp::v2beta1::PartitionId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Key.partition_id)
  return partition_id_;
}
inline ::google::privacy::dlp::v2beta1::PartitionId* Key::release_partition_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Key.partition_id)
  
  ::google::privacy::dlp::v2beta1::PartitionId* temp = partition_id_;
  partition_id_ = NULL;
  return temp;
}
inline void Key::set_allocated_partition_id(::google::privacy::dlp::v2beta1::PartitionId* partition_id) {
  delete partition_id_;
  partition_id_ = partition_id;
  if (partition_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Key.partition_id)
}

// repeated .google.privacy.dlp.v2beta1.Key.PathElement path = 2;
inline int Key::path_size() const {
  return path_.size();
}
inline void Key::clear_path() {
  path_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::Key_PathElement& Key::path(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Key.path)
  return path_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::Key_PathElement* Key::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Key.path)
  return path_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::Key_PathElement* Key::add_path() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.Key.path)
  return path_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Key_PathElement >*
Key::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.Key.path)
  return &path_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Key_PathElement >&
Key::path() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.Key.path)
  return path_;
}

// -------------------------------------------------------------------

// RecordKey

// .google.privacy.dlp.v2beta1.CloudStorageKey cloud_storage_key = 1;
inline bool RecordKey::has_cloud_storage_key() const {
  return type_case() == kCloudStorageKey;
}
inline void RecordKey::set_has_cloud_storage_key() {
  _oneof_case_[0] = kCloudStorageKey;
}
inline void RecordKey::clear_cloud_storage_key() {
  if (has_cloud_storage_key()) {
    delete type_.cloud_storage_key_;
    clear_has_type();
  }
}
inline  const ::google::privacy::dlp::v2beta1::CloudStorageKey& RecordKey::cloud_storage_key() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RecordKey.cloud_storage_key)
  return has_cloud_storage_key()
      ? *type_.cloud_storage_key_
      : ::google::privacy::dlp::v2beta1::CloudStorageKey::default_instance();
}
inline ::google::privacy::dlp::v2beta1::CloudStorageKey* RecordKey::mutable_cloud_storage_key() {
  if (!has_cloud_storage_key()) {
    clear_type();
    set_has_cloud_storage_key();
    type_.cloud_storage_key_ = new ::google::privacy::dlp::v2beta1::CloudStorageKey;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RecordKey.cloud_storage_key)
  return type_.cloud_storage_key_;
}
inline ::google::privacy::dlp::v2beta1::CloudStorageKey* RecordKey::release_cloud_storage_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RecordKey.cloud_storage_key)
  if (has_cloud_storage_key()) {
    clear_has_type();
    ::google::privacy::dlp::v2beta1::CloudStorageKey* temp = type_.cloud_storage_key_;
    type_.cloud_storage_key_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RecordKey::set_allocated_cloud_storage_key(::google::privacy::dlp::v2beta1::CloudStorageKey* cloud_storage_key) {
  clear_type();
  if (cloud_storage_key) {
    set_has_cloud_storage_key();
    type_.cloud_storage_key_ = cloud_storage_key;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RecordKey.cloud_storage_key)
}

// .google.privacy.dlp.v2beta1.DatastoreKey datastore_key = 2;
inline bool RecordKey::has_datastore_key() const {
  return type_case() == kDatastoreKey;
}
inline void RecordKey::set_has_datastore_key() {
  _oneof_case_[0] = kDatastoreKey;
}
inline void RecordKey::clear_datastore_key() {
  if (has_datastore_key()) {
    delete type_.datastore_key_;
    clear_has_type();
  }
}
inline  const ::google::privacy::dlp::v2beta1::DatastoreKey& RecordKey::datastore_key() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RecordKey.datastore_key)
  return has_datastore_key()
      ? *type_.datastore_key_
      : ::google::privacy::dlp::v2beta1::DatastoreKey::default_instance();
}
inline ::google::privacy::dlp::v2beta1::DatastoreKey* RecordKey::mutable_datastore_key() {
  if (!has_datastore_key()) {
    clear_type();
    set_has_datastore_key();
    type_.datastore_key_ = new ::google::privacy::dlp::v2beta1::DatastoreKey;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RecordKey.datastore_key)
  return type_.datastore_key_;
}
inline ::google::privacy::dlp::v2beta1::DatastoreKey* RecordKey::release_datastore_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RecordKey.datastore_key)
  if (has_datastore_key()) {
    clear_has_type();
    ::google::privacy::dlp::v2beta1::DatastoreKey* temp = type_.datastore_key_;
    type_.datastore_key_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RecordKey::set_allocated_datastore_key(::google::privacy::dlp::v2beta1::DatastoreKey* datastore_key) {
  clear_type();
  if (datastore_key) {
    set_has_datastore_key();
    type_.datastore_key_ = datastore_key;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RecordKey.datastore_key)
}

inline bool RecordKey::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void RecordKey::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline RecordKey::TypeCase RecordKey::type_case() const {
  return RecordKey::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BigQueryTable

// string project_id = 1;
inline void BigQueryTable::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BigQueryTable::project_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.BigQueryTable.project_id)
  return project_id_.GetNoArena();
}
inline void BigQueryTable::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.BigQueryTable.project_id)
}
#if LANG_CXX11
inline void BigQueryTable::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.BigQueryTable.project_id)
}
#endif
inline void BigQueryTable::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.BigQueryTable.project_id)
}
inline void BigQueryTable::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.BigQueryTable.project_id)
}
inline ::std::string* BigQueryTable::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.BigQueryTable.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigQueryTable::release_project_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.BigQueryTable.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigQueryTable::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.BigQueryTable.project_id)
}

// string dataset_id = 2;
inline void BigQueryTable::clear_dataset_id() {
  dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BigQueryTable::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.BigQueryTable.dataset_id)
  return dataset_id_.GetNoArena();
}
inline void BigQueryTable::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.BigQueryTable.dataset_id)
}
#if LANG_CXX11
inline void BigQueryTable::set_dataset_id(::std::string&& value) {
  
  dataset_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.BigQueryTable.dataset_id)
}
#endif
inline void BigQueryTable::set_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.BigQueryTable.dataset_id)
}
inline void BigQueryTable::set_dataset_id(const char* value, size_t size) {
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.BigQueryTable.dataset_id)
}
inline ::std::string* BigQueryTable::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.BigQueryTable.dataset_id)
  return dataset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigQueryTable::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.BigQueryTable.dataset_id)
  
  return dataset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigQueryTable::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != NULL) {
    
  } else {
    
  }
  dataset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.BigQueryTable.dataset_id)
}

// string table_id = 3;
inline void BigQueryTable::clear_table_id() {
  table_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BigQueryTable::table_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.BigQueryTable.table_id)
  return table_id_.GetNoArena();
}
inline void BigQueryTable::set_table_id(const ::std::string& value) {
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.BigQueryTable.table_id)
}
#if LANG_CXX11
inline void BigQueryTable::set_table_id(::std::string&& value) {
  
  table_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.BigQueryTable.table_id)
}
#endif
inline void BigQueryTable::set_table_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.BigQueryTable.table_id)
}
inline void BigQueryTable::set_table_id(const char* value, size_t size) {
  
  table_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.BigQueryTable.table_id)
}
inline ::std::string* BigQueryTable::mutable_table_id() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.BigQueryTable.table_id)
  return table_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigQueryTable::release_table_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.BigQueryTable.table_id)
  
  return table_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigQueryTable::set_allocated_table_id(::std::string* table_id) {
  if (table_id != NULL) {
    
  } else {
    
  }
  table_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_id);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.BigQueryTable.table_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto__INCLUDED
