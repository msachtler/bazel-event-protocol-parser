# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.pubsub.v1beta2 import pubsub_pb2 as google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2


class SubscriberStub(object):
  """The service that an application uses to manipulate subscriptions and to
  consume messages from a subscription via the Pull method.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateSubscription = channel.unary_unary(
        '/google.pubsub.v1beta2.Subscriber/CreateSubscription',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.Subscription.SerializeToString,
        response_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.Subscription.FromString,
        )
    self.GetSubscription = channel.unary_unary(
        '/google.pubsub.v1beta2.Subscriber/GetSubscription',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.GetSubscriptionRequest.SerializeToString,
        response_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.Subscription.FromString,
        )
    self.ListSubscriptions = channel.unary_unary(
        '/google.pubsub.v1beta2.Subscriber/ListSubscriptions',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ListSubscriptionsRequest.SerializeToString,
        response_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ListSubscriptionsResponse.FromString,
        )
    self.DeleteSubscription = channel.unary_unary(
        '/google.pubsub.v1beta2.Subscriber/DeleteSubscription',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.DeleteSubscriptionRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.ModifyAckDeadline = channel.unary_unary(
        '/google.pubsub.v1beta2.Subscriber/ModifyAckDeadline',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ModifyAckDeadlineRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.Acknowledge = channel.unary_unary(
        '/google.pubsub.v1beta2.Subscriber/Acknowledge',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.AcknowledgeRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.Pull = channel.unary_unary(
        '/google.pubsub.v1beta2.Subscriber/Pull',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.PullRequest.SerializeToString,
        response_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.PullResponse.FromString,
        )
    self.ModifyPushConfig = channel.unary_unary(
        '/google.pubsub.v1beta2.Subscriber/ModifyPushConfig',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ModifyPushConfigRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )


class SubscriberServicer(object):
  """The service that an application uses to manipulate subscriptions and to
  consume messages from a subscription via the Pull method.
  """

  def CreateSubscription(self, request, context):
    """Creates a subscription to a given topic for a given subscriber.
    If the subscription already exists, returns ALREADY_EXISTS.
    If the corresponding topic doesn't exist, returns NOT_FOUND.

    If the name is not provided in the request, the server will assign a random
    name for this subscription on the same project as the topic.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSubscription(self, request, context):
    """Gets the configuration details of a subscription.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListSubscriptions(self, request, context):
    """Lists matching subscriptions.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteSubscription(self, request, context):
    """Deletes an existing subscription. All pending messages in the subscription
    are immediately dropped. Calls to Pull after deletion will return
    NOT_FOUND. After a subscription is deleted, a new one may be created with
    the same name, but the new one has no association with the old
    subscription, or its topic unless the same topic is specified.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ModifyAckDeadline(self, request, context):
    """Modifies the ack deadline for a specific message. This method is useful to
    indicate that more time is needed to process a message by the subscriber,
    or to make the message available for redelivery if the processing was
    interrupted.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Acknowledge(self, request, context):
    """Acknowledges the messages associated with the ack tokens in the
    AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
    from the subscription.

    Acknowledging a message whose ack deadline has expired may succeed,
    but such a message may be redelivered later. Acknowledging a message more
    than once will not result in an error.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Pull(self, request, context):
    """Pulls messages from the server. Returns an empty list if there are no
    messages available in the backlog. The server may return UNAVAILABLE if
    there are too many concurrent pull requests pending for the given
    subscription.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ModifyPushConfig(self, request, context):
    """Modifies the PushConfig for a specified subscription.

    This may be used to change a push subscription to a pull one (signified
    by an empty PushConfig) or vice versa, or change the endpoint URL and other
    attributes of a push subscription. Messages will accumulate for
    delivery continuously through the call regardless of changes to the
    PushConfig.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SubscriberServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateSubscription': grpc.unary_unary_rpc_method_handler(
          servicer.CreateSubscription,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.Subscription.FromString,
          response_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.Subscription.SerializeToString,
      ),
      'GetSubscription': grpc.unary_unary_rpc_method_handler(
          servicer.GetSubscription,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.GetSubscriptionRequest.FromString,
          response_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.Subscription.SerializeToString,
      ),
      'ListSubscriptions': grpc.unary_unary_rpc_method_handler(
          servicer.ListSubscriptions,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ListSubscriptionsRequest.FromString,
          response_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ListSubscriptionsResponse.SerializeToString,
      ),
      'DeleteSubscription': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteSubscription,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.DeleteSubscriptionRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'ModifyAckDeadline': grpc.unary_unary_rpc_method_handler(
          servicer.ModifyAckDeadline,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ModifyAckDeadlineRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'Acknowledge': grpc.unary_unary_rpc_method_handler(
          servicer.Acknowledge,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.AcknowledgeRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'Pull': grpc.unary_unary_rpc_method_handler(
          servicer.Pull,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.PullRequest.FromString,
          response_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.PullResponse.SerializeToString,
      ),
      'ModifyPushConfig': grpc.unary_unary_rpc_method_handler(
          servicer.ModifyPushConfig,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ModifyPushConfigRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'google.pubsub.v1beta2.Subscriber', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class PublisherStub(object):
  """The service that an application uses to manipulate topics, and to send
  messages to a topic.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateTopic = channel.unary_unary(
        '/google.pubsub.v1beta2.Publisher/CreateTopic',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.Topic.SerializeToString,
        response_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.Topic.FromString,
        )
    self.Publish = channel.unary_unary(
        '/google.pubsub.v1beta2.Publisher/Publish',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.PublishRequest.SerializeToString,
        response_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.PublishResponse.FromString,
        )
    self.GetTopic = channel.unary_unary(
        '/google.pubsub.v1beta2.Publisher/GetTopic',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.GetTopicRequest.SerializeToString,
        response_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.Topic.FromString,
        )
    self.ListTopics = channel.unary_unary(
        '/google.pubsub.v1beta2.Publisher/ListTopics',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ListTopicsRequest.SerializeToString,
        response_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ListTopicsResponse.FromString,
        )
    self.ListTopicSubscriptions = channel.unary_unary(
        '/google.pubsub.v1beta2.Publisher/ListTopicSubscriptions',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ListTopicSubscriptionsRequest.SerializeToString,
        response_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ListTopicSubscriptionsResponse.FromString,
        )
    self.DeleteTopic = channel.unary_unary(
        '/google.pubsub.v1beta2.Publisher/DeleteTopic',
        request_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.DeleteTopicRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )


class PublisherServicer(object):
  """The service that an application uses to manipulate topics, and to send
  messages to a topic.
  """

  def CreateTopic(self, request, context):
    """Creates the given topic with the given name.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Publish(self, request, context):
    """Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
    not exist.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTopic(self, request, context):
    """Gets the configuration of a topic.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListTopics(self, request, context):
    """Lists matching topics.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListTopicSubscriptions(self, request, context):
    """Lists the name of the subscriptions for this topic.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteTopic(self, request, context):
    """Deletes the topic with the given name. Returns NOT_FOUND if the topic does
    not exist. After a topic is deleted, a new topic may be created with the
    same name; this is an entirely new topic with none of the old
    configuration or subscriptions. Existing subscriptions to this topic are
    not deleted.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PublisherServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateTopic': grpc.unary_unary_rpc_method_handler(
          servicer.CreateTopic,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.Topic.FromString,
          response_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.Topic.SerializeToString,
      ),
      'Publish': grpc.unary_unary_rpc_method_handler(
          servicer.Publish,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.PublishRequest.FromString,
          response_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.PublishResponse.SerializeToString,
      ),
      'GetTopic': grpc.unary_unary_rpc_method_handler(
          servicer.GetTopic,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.GetTopicRequest.FromString,
          response_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.Topic.SerializeToString,
      ),
      'ListTopics': grpc.unary_unary_rpc_method_handler(
          servicer.ListTopics,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ListTopicsRequest.FromString,
          response_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ListTopicsResponse.SerializeToString,
      ),
      'ListTopicSubscriptions': grpc.unary_unary_rpc_method_handler(
          servicer.ListTopicSubscriptions,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ListTopicSubscriptionsRequest.FromString,
          response_serializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.ListTopicSubscriptionsResponse.SerializeToString,
      ),
      'DeleteTopic': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteTopic,
          request_deserializer=google_dot_pubsub_dot_v1beta2_dot_pubsub__pb2.DeleteTopicRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'google.pubsub.v1beta2.Publisher', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
