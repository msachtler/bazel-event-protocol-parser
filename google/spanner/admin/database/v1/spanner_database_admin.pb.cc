// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/admin/database/v1/spanner_database_admin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/spanner/admin/database/v1/spanner_database_admin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace spanner {
namespace admin {
namespace database {
namespace v1 {
class DatabaseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Database> {
} _Database_default_instance_;
class ListDatabasesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListDatabasesRequest> {
} _ListDatabasesRequest_default_instance_;
class ListDatabasesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListDatabasesResponse> {
} _ListDatabasesResponse_default_instance_;
class CreateDatabaseRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateDatabaseRequest> {
} _CreateDatabaseRequest_default_instance_;
class CreateDatabaseMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateDatabaseMetadata> {
} _CreateDatabaseMetadata_default_instance_;
class GetDatabaseRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDatabaseRequest> {
} _GetDatabaseRequest_default_instance_;
class UpdateDatabaseDdlRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateDatabaseDdlRequest> {
} _UpdateDatabaseDdlRequest_default_instance_;
class UpdateDatabaseDdlMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateDatabaseDdlMetadata> {
} _UpdateDatabaseDdlMetadata_default_instance_;
class DropDatabaseRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DropDatabaseRequest> {
} _DropDatabaseRequest_default_instance_;
class GetDatabaseDdlRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDatabaseDdlRequest> {
} _GetDatabaseDdlRequest_default_instance_;
class GetDatabaseDdlResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetDatabaseDdlResponse> {
} _GetDatabaseDdlResponse_default_instance_;

namespace protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatabasesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatabasesRequest, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatabasesRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatabasesRequest, page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatabasesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatabasesResponse, databases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListDatabasesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseRequest, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseRequest, create_statement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseRequest, extra_statements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDatabaseMetadata, database_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatabaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatabaseRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatabaseDdlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatabaseDdlRequest, database_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatabaseDdlRequest, statements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatabaseDdlRequest, operation_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatabaseDdlMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatabaseDdlMetadata, database_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatabaseDdlMetadata, statements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatabaseDdlMetadata, commit_timestamps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropDatabaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropDatabaseRequest, database_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatabaseDdlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatabaseDdlRequest, database_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatabaseDdlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatabaseDdlResponse, statements_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Database)},
  { 7, -1, sizeof(ListDatabasesRequest)},
  { 15, -1, sizeof(ListDatabasesResponse)},
  { 22, -1, sizeof(CreateDatabaseRequest)},
  { 30, -1, sizeof(CreateDatabaseMetadata)},
  { 36, -1, sizeof(GetDatabaseRequest)},
  { 42, -1, sizeof(UpdateDatabaseDdlRequest)},
  { 50, -1, sizeof(UpdateDatabaseDdlMetadata)},
  { 58, -1, sizeof(DropDatabaseRequest)},
  { 64, -1, sizeof(GetDatabaseDdlRequest)},
  { 70, -1, sizeof(GetDatabaseDdlResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Database_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListDatabasesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListDatabasesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateDatabaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateDatabaseMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDatabaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateDatabaseDdlRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateDatabaseDdlMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropDatabaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDatabaseDdlRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDatabaseDdlResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/spanner/admin/database/v1/spanner_database_admin.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace

void TableStruct::Shutdown() {
  _Database_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ListDatabasesRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ListDatabasesResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CreateDatabaseRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CreateDatabaseMetadata_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GetDatabaseRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _UpdateDatabaseDdlRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _UpdateDatabaseDdlMetadata_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _DropDatabaseRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _GetDatabaseDdlRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _GetDatabaseDdlResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::api::protobuf_google_2fapi_2fauth_2eproto::InitDefaults();
  ::google::iam::v1::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::InitDefaults();
  ::google::iam::v1::protobuf_google_2fiam_2fv1_2fpolicy_2eproto::InitDefaults();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _Database_default_instance_.DefaultConstruct();
  _ListDatabasesRequest_default_instance_.DefaultConstruct();
  _ListDatabasesResponse_default_instance_.DefaultConstruct();
  _CreateDatabaseRequest_default_instance_.DefaultConstruct();
  _CreateDatabaseMetadata_default_instance_.DefaultConstruct();
  _GetDatabaseRequest_default_instance_.DefaultConstruct();
  _UpdateDatabaseDdlRequest_default_instance_.DefaultConstruct();
  _UpdateDatabaseDdlMetadata_default_instance_.DefaultConstruct();
  _DropDatabaseRequest_default_instance_.DefaultConstruct();
  _GetDatabaseDdlRequest_default_instance_.DefaultConstruct();
  _GetDatabaseDdlResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n=google/spanner/admin/database/v1/spann"
      "er_database_admin.proto\022 google.spanner."
      "admin.database.v1\032\034google/api/annotation"
      "s.proto\032\025google/api/auth.proto\032\036google/i"
      "am/v1/iam_policy.proto\032\032google/iam/v1/po"
      "licy.proto\032#google/longrunning/operation"
      "s.proto\032\033google/protobuf/empty.proto\032\037go"
      "ogle/protobuf/timestamp.proto\"\222\001\n\010Databa"
      "se\022\014\n\004name\030\001 \001(\t\022\?\n\005state\030\002 \001(\01620.google"
      ".spanner.admin.database.v1.Database.Stat"
      "e\"7\n\005State\022\025\n\021STATE_UNSPECIFIED\020\000\022\014\n\010CRE"
      "ATING\020\001\022\t\n\005READY\020\002\"M\n\024ListDatabasesReque"
      "st\022\016\n\006parent\030\001 \001(\t\022\021\n\tpage_size\030\003 \001(\005\022\022\n"
      "\npage_token\030\004 \001(\t\"o\n\025ListDatabasesRespon"
      "se\022=\n\tdatabases\030\001 \003(\0132*.google.spanner.a"
      "dmin.database.v1.Database\022\027\n\017next_page_t"
      "oken\030\002 \001(\t\"[\n\025CreateDatabaseRequest\022\016\n\006p"
      "arent\030\001 \001(\t\022\030\n\020create_statement\030\002 \001(\t\022\030\n"
      "\020extra_statements\030\003 \003(\t\"*\n\026CreateDatabas"
      "eMetadata\022\020\n\010database\030\001 \001(\t\"\"\n\022GetDataba"
      "seRequest\022\014\n\004name\030\001 \001(\t\"V\n\030UpdateDatabas"
      "eDdlRequest\022\020\n\010database\030\001 \001(\t\022\022\n\nstateme"
      "nts\030\002 \003(\t\022\024\n\014operation_id\030\003 \001(\t\"x\n\031Updat"
      "eDatabaseDdlMetadata\022\020\n\010database\030\001 \001(\t\022\022"
      "\n\nstatements\030\002 \003(\t\0225\n\021commit_timestamps\030"
      "\003 \003(\0132\032.google.protobuf.Timestamp\"\'\n\023Dro"
      "pDatabaseRequest\022\020\n\010database\030\001 \001(\t\")\n\025Ge"
      "tDatabaseDdlRequest\022\020\n\010database\030\001 \001(\t\",\n"
      "\026GetDatabaseDdlResponse\022\022\n\nstatements\030\001 "
      "\003(\t2\225\014\n\rDatabaseAdmin\022\267\001\n\rListDatabases\022"
      "6.google.spanner.admin.database.v1.ListD"
      "atabasesRequest\0327.google.spanner.admin.d"
      "atabase.v1.ListDatabasesResponse\"5\202\323\344\223\002/"
      "\022-/v1/{parent=projects/*/instances/*}/da"
      "tabases\022\242\001\n\016CreateDatabase\0227.google.span"
      "ner.admin.database.v1.CreateDatabaseRequ"
      "est\032\035.google.longrunning.Operation\"8\202\323\344\223"
      "\0022\"-/v1/{parent=projects/*/instances/*}/"
      "databases:\001*\022\246\001\n\013GetDatabase\0224.google.sp"
      "anner.admin.database.v1.GetDatabaseReque"
      "st\032*.google.spanner.admin.database.v1.Da"
      "tabase\"5\202\323\344\223\002/\022-/v1/{name=projects/*/ins"
      "tances/*/databases/*}\022\260\001\n\021UpdateDatabase"
      "Ddl\022:.google.spanner.admin.database.v1.U"
      "pdateDatabaseDdlRequest\032\035.google.longrun"
      "ning.Operation\"@\202\323\344\223\002:25/v1/{database=pr"
      "ojects/*/instances/*/databases/*}/ddl:\001*"
      "\022\230\001\n\014DropDatabase\0225.google.spanner.admin"
      ".database.v1.DropDatabaseRequest\032\026.googl"
      "e.protobuf.Empty\"9\202\323\344\223\0023*1/v1/{database="
      "projects/*/instances/*/databases/*}\022\302\001\n\016"
      "GetDatabaseDdl\0227.google.spanner.admin.da"
      "tabase.v1.GetDatabaseDdlRequest\0328.google"
      ".spanner.admin.database.v1.GetDatabaseDd"
      "lResponse\"=\202\323\344\223\0027\0225/v1/{database=project"
      "s/*/instances/*/databases/*}/ddl\022\224\001\n\014Set"
      "IamPolicy\022\".google.iam.v1.SetIamPolicyRe"
      "quest\032\025.google.iam.v1.Policy\"I\202\323\344\223\002C\">/v"
      "1/{resource=projects/*/instances/*/datab"
      "ases/*}:setIamPolicy:\001*\022\224\001\n\014GetIamPolicy"
      "\022\".google.iam.v1.GetIamPolicyRequest\032\025.g"
      "oogle.iam.v1.Policy\"I\202\323\344\223\002C\">/v1/{resour"
      "ce=projects/*/instances/*/databases/*}:g"
      "etIamPolicy:\001*\022\272\001\n\022TestIamPermissions\022(."
      "google.iam.v1.TestIamPermissionsRequest\032"
      ").google.iam.v1.TestIamPermissionsRespon"
      "se\"O\202\323\344\223\002I\"D/v1/{resource=projects/*/ins"
      "tances/*/databases/*}:testIamPermissions"
      ":\001*B\266\001\n$com.google.spanner.admin.databas"
      "e.v1B\031SpannerDatabaseAdminProtoP\001ZHgoogl"
      "e.golang.org/genproto/googleapis/spanner"
      "/admin/database/v1;database\252\002&Google.Clo"
      "ud.Spanner.Admin.Database.V1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2916);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/spanner/admin/database/v1/spanner_database_admin.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::api::protobuf_google_2fapi_2fauth_2eproto::AddDescriptors();
  ::google::iam::v1::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::AddDescriptors();
  ::google::iam::v1::protobuf_google_2fiam_2fv1_2fpolicy_2eproto::AddDescriptors();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto

const ::google::protobuf::EnumDescriptor* Database_State_descriptor() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_enum_descriptors[0];
}
bool Database_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Database_State Database::STATE_UNSPECIFIED;
const Database_State Database::CREATING;
const Database_State Database::READY;
const Database_State Database::State_MIN;
const Database_State Database::State_MAX;
const int Database::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Database::kNameFieldNumber;
const int Database::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Database::Database()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.admin.database.v1.Database)
}
Database::Database(const Database& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:google.spanner.admin.database.v1.Database)
}

void Database::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _cached_size_ = 0;
}

Database::~Database() {
  // @@protoc_insertion_point(destructor:google.spanner.admin.database.v1.Database)
  SharedDtor();
}

void Database::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Database::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Database::descriptor() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Database& Database::default_instance() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

Database* Database::New(::google::protobuf::Arena* arena) const {
  Database* n = new Database;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Database::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.admin.database.v1.Database)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

bool Database::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.admin.database.v1.Database)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.Database.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.admin.database.v1.Database.State state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::spanner::admin::database::v1::Database_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.admin.database.v1.Database)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.admin.database.v1.Database)
  return false;
#undef DO_
}

void Database::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.admin.database.v1.Database)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.Database.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.spanner.admin.database.v1.Database.State state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.admin.database.v1.Database)
}

::google::protobuf::uint8* Database::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.admin.database.v1.Database)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.Database.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.spanner.admin.database.v1.Database.State state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.admin.database.v1.Database)
  return target;
}

size_t Database::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.admin.database.v1.Database)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.spanner.admin.database.v1.Database.State state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Database::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.admin.database.v1.Database)
  GOOGLE_DCHECK_NE(&from, this);
  const Database* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Database>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.admin.database.v1.Database)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.admin.database.v1.Database)
    MergeFrom(*source);
  }
}

void Database::MergeFrom(const Database& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.admin.database.v1.Database)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Database::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.admin.database.v1.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Database::CopyFrom(const Database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.admin.database.v1.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Database::IsInitialized() const {
  return true;
}

void Database::Swap(Database* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Database::InternalSwap(Database* other) {
  name_.Swap(&other->name_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Database::GetMetadata() const {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Database

// string name = 1;
void Database::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Database::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.name)
  return name_.GetNoArena();
}
void Database::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Database.name)
}
#if LANG_CXX11
void Database::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.Database.name)
}
#endif
void Database::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.Database.name)
}
void Database::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.Database.name)
}
::std::string* Database::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Database.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Database::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Database.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Database::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Database.name)
}

// .google.spanner.admin.database.v1.Database.State state = 2;
void Database::clear_state() {
  state_ = 0;
}
::google::spanner::admin::database::v1::Database_State Database::state() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.state)
  return static_cast< ::google::spanner::admin::database::v1::Database_State >(state_);
}
void Database::set_state(::google::spanner::admin::database::v1::Database_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Database.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDatabasesRequest::kParentFieldNumber;
const int ListDatabasesRequest::kPageSizeFieldNumber;
const int ListDatabasesRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDatabasesRequest::ListDatabasesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.admin.database.v1.ListDatabasesRequest)
}
ListDatabasesRequest::ListDatabasesRequest(const ListDatabasesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.spanner.admin.database.v1.ListDatabasesRequest)
}

void ListDatabasesRequest::SharedCtor() {
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListDatabasesRequest::~ListDatabasesRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.admin.database.v1.ListDatabasesRequest)
  SharedDtor();
}

void ListDatabasesRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListDatabasesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDatabasesRequest::descriptor() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListDatabasesRequest& ListDatabasesRequest::default_instance() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListDatabasesRequest* ListDatabasesRequest::New(::google::protobuf::Arena* arena) const {
  ListDatabasesRequest* n = new ListDatabasesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListDatabasesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.admin.database.v1.ListDatabasesRequest)
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

bool ListDatabasesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.admin.database.v1.ListDatabasesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.ListDatabasesRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.ListDatabasesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.admin.database.v1.ListDatabasesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.admin.database.v1.ListDatabasesRequest)
  return false;
#undef DO_
}

void ListDatabasesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.admin.database.v1.ListDatabasesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.ListDatabasesRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.ListDatabasesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.admin.database.v1.ListDatabasesRequest)
}

::google::protobuf::uint8* ListDatabasesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.admin.database.v1.ListDatabasesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.ListDatabasesRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.ListDatabasesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.admin.database.v1.ListDatabasesRequest)
  return target;
}

size_t ListDatabasesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.admin.database.v1.ListDatabasesRequest)
  size_t total_size = 0;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDatabasesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.admin.database.v1.ListDatabasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDatabasesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDatabasesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.admin.database.v1.ListDatabasesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.admin.database.v1.ListDatabasesRequest)
    MergeFrom(*source);
  }
}

void ListDatabasesRequest::MergeFrom(const ListDatabasesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.admin.database.v1.ListDatabasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListDatabasesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.admin.database.v1.ListDatabasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDatabasesRequest::CopyFrom(const ListDatabasesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.admin.database.v1.ListDatabasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatabasesRequest::IsInitialized() const {
  return true;
}

void ListDatabasesRequest::Swap(ListDatabasesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDatabasesRequest::InternalSwap(ListDatabasesRequest* other) {
  parent_.Swap(&other->parent_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDatabasesRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDatabasesRequest

// string parent = 1;
void ListDatabasesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListDatabasesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
  return parent_.GetNoArena();
}
void ListDatabasesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
#if LANG_CXX11
void ListDatabasesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
#endif
void ListDatabasesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
void ListDatabasesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
::std::string* ListDatabasesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListDatabasesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListDatabasesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}

// int32 page_size = 3;
void ListDatabasesRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListDatabasesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesRequest.page_size)
  return page_size_;
}
void ListDatabasesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesRequest.page_size)
}

// string page_token = 4;
void ListDatabasesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListDatabasesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
  return page_token_.GetNoArena();
}
void ListDatabasesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
#if LANG_CXX11
void ListDatabasesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
#endif
void ListDatabasesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
void ListDatabasesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
::std::string* ListDatabasesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListDatabasesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListDatabasesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDatabasesResponse::kDatabasesFieldNumber;
const int ListDatabasesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDatabasesResponse::ListDatabasesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.admin.database.v1.ListDatabasesResponse)
}
ListDatabasesResponse::ListDatabasesResponse(const ListDatabasesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      databases_(from.databases_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.admin.database.v1.ListDatabasesResponse)
}

void ListDatabasesResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListDatabasesResponse::~ListDatabasesResponse() {
  // @@protoc_insertion_point(destructor:google.spanner.admin.database.v1.ListDatabasesResponse)
  SharedDtor();
}

void ListDatabasesResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListDatabasesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListDatabasesResponse::descriptor() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListDatabasesResponse& ListDatabasesResponse::default_instance() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListDatabasesResponse* ListDatabasesResponse::New(::google::protobuf::Arena* arena) const {
  ListDatabasesResponse* n = new ListDatabasesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListDatabasesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.admin.database.v1.ListDatabasesResponse)
  databases_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListDatabasesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.admin.database.v1.ListDatabasesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.spanner.admin.database.v1.Database databases = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_databases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.admin.database.v1.ListDatabasesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.admin.database.v1.ListDatabasesResponse)
  return false;
#undef DO_
}

void ListDatabasesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.admin.database.v1.ListDatabasesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.spanner.admin.database.v1.Database databases = 1;
  for (unsigned int i = 0, n = this->databases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->databases(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.admin.database.v1.ListDatabasesResponse)
}

::google::protobuf::uint8* ListDatabasesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.admin.database.v1.ListDatabasesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.spanner.admin.database.v1.Database databases = 1;
  for (unsigned int i = 0, n = this->databases_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->databases(i), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.admin.database.v1.ListDatabasesResponse)
  return target;
}

size_t ListDatabasesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.admin.database.v1.ListDatabasesResponse)
  size_t total_size = 0;

  // repeated .google.spanner.admin.database.v1.Database databases = 1;
  {
    unsigned int count = this->databases_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->databases(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListDatabasesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.admin.database.v1.ListDatabasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDatabasesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListDatabasesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.admin.database.v1.ListDatabasesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.admin.database.v1.ListDatabasesResponse)
    MergeFrom(*source);
  }
}

void ListDatabasesResponse::MergeFrom(const ListDatabasesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.admin.database.v1.ListDatabasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  databases_.MergeFrom(from.databases_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListDatabasesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.admin.database.v1.ListDatabasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDatabasesResponse::CopyFrom(const ListDatabasesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.admin.database.v1.ListDatabasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatabasesResponse::IsInitialized() const {
  return true;
}

void ListDatabasesResponse::Swap(ListDatabasesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDatabasesResponse::InternalSwap(ListDatabasesResponse* other) {
  databases_.InternalSwap(&other->databases_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListDatabasesResponse::GetMetadata() const {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListDatabasesResponse

// repeated .google.spanner.admin.database.v1.Database databases = 1;
int ListDatabasesResponse::databases_size() const {
  return databases_.size();
}
void ListDatabasesResponse::clear_databases() {
  databases_.Clear();
}
const ::google::spanner::admin::database::v1::Database& ListDatabasesResponse::databases(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return databases_.Get(index);
}
::google::spanner::admin::database::v1::Database* ListDatabasesResponse::mutable_databases(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return databases_.Mutable(index);
}
::google::spanner::admin::database::v1::Database* ListDatabasesResponse::add_databases() {
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return databases_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >*
ListDatabasesResponse::mutable_databases() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return &databases_;
}
const ::google::protobuf::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >&
ListDatabasesResponse::databases() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return databases_;
}

// string next_page_token = 2;
void ListDatabasesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListDatabasesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
void ListDatabasesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
#if LANG_CXX11
void ListDatabasesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
#endif
void ListDatabasesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
void ListDatabasesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
::std::string* ListDatabasesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListDatabasesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListDatabasesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDatabaseRequest::kParentFieldNumber;
const int CreateDatabaseRequest::kCreateStatementFieldNumber;
const int CreateDatabaseRequest::kExtraStatementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDatabaseRequest::CreateDatabaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.admin.database.v1.CreateDatabaseRequest)
}
CreateDatabaseRequest::CreateDatabaseRequest(const CreateDatabaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extra_statements_(from.extra_statements_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  create_statement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.create_statement().size() > 0) {
    create_statement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_statement_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.admin.database.v1.CreateDatabaseRequest)
}

void CreateDatabaseRequest::SharedCtor() {
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_statement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateDatabaseRequest::~CreateDatabaseRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.admin.database.v1.CreateDatabaseRequest)
  SharedDtor();
}

void CreateDatabaseRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_statement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateDatabaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDatabaseRequest::descriptor() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateDatabaseRequest& CreateDatabaseRequest::default_instance() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateDatabaseRequest* CreateDatabaseRequest::New(::google::protobuf::Arena* arena) const {
  CreateDatabaseRequest* n = new CreateDatabaseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateDatabaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.admin.database.v1.CreateDatabaseRequest)
  extra_statements_.Clear();
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateDatabaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.admin.database.v1.CreateDatabaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.CreateDatabaseRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string create_statement = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_statement()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->create_statement().data(), this->create_statement().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string extra_statements = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_extra_statements()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extra_statements(this->extra_statements_size() - 1).data(),
            this->extra_statements(this->extra_statements_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.admin.database.v1.CreateDatabaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.admin.database.v1.CreateDatabaseRequest)
  return false;
#undef DO_
}

void CreateDatabaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.admin.database.v1.CreateDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.CreateDatabaseRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // string create_statement = 2;
  if (this->create_statement().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->create_statement().data(), this->create_statement().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->create_statement(), output);
  }

  // repeated string extra_statements = 3;
  for (int i = 0, n = this->extra_statements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra_statements(i).data(), this->extra_statements(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->extra_statements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.admin.database.v1.CreateDatabaseRequest)
}

::google::protobuf::uint8* CreateDatabaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.admin.database.v1.CreateDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.CreateDatabaseRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // string create_statement = 2;
  if (this->create_statement().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->create_statement().data(), this->create_statement().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->create_statement(), target);
  }

  // repeated string extra_statements = 3;
  for (int i = 0, n = this->extra_statements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra_statements(i).data(), this->extra_statements(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->extra_statements(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.admin.database.v1.CreateDatabaseRequest)
  return target;
}

size_t CreateDatabaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.admin.database.v1.CreateDatabaseRequest)
  size_t total_size = 0;

  // repeated string extra_statements = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->extra_statements_size());
  for (int i = 0, n = this->extra_statements_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->extra_statements(i));
  }

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string create_statement = 2;
  if (this->create_statement().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->create_statement());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDatabaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.admin.database.v1.CreateDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDatabaseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateDatabaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.admin.database.v1.CreateDatabaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.admin.database.v1.CreateDatabaseRequest)
    MergeFrom(*source);
  }
}

void CreateDatabaseRequest::MergeFrom(const CreateDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.admin.database.v1.CreateDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_statements_.MergeFrom(from.extra_statements_);
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.create_statement().size() > 0) {

    create_statement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_statement_);
  }
}

void CreateDatabaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.admin.database.v1.CreateDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDatabaseRequest::CopyFrom(const CreateDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.admin.database.v1.CreateDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDatabaseRequest::IsInitialized() const {
  return true;
}

void CreateDatabaseRequest::Swap(CreateDatabaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDatabaseRequest::InternalSwap(CreateDatabaseRequest* other) {
  extra_statements_.InternalSwap(&other->extra_statements_);
  parent_.Swap(&other->parent_);
  create_statement_.Swap(&other->create_statement_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateDatabaseRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateDatabaseRequest

// string parent = 1;
void CreateDatabaseRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateDatabaseRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
  return parent_.GetNoArena();
}
void CreateDatabaseRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
#if LANG_CXX11
void CreateDatabaseRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
#endif
void CreateDatabaseRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
void CreateDatabaseRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
::std::string* CreateDatabaseRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateDatabaseRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateDatabaseRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}

// string create_statement = 2;
void CreateDatabaseRequest::clear_create_statement() {
  create_statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateDatabaseRequest::create_statement() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
  return create_statement_.GetNoArena();
}
void CreateDatabaseRequest::set_create_statement(const ::std::string& value) {
  
  create_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
#if LANG_CXX11
void CreateDatabaseRequest::set_create_statement(::std::string&& value) {
  
  create_statement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
#endif
void CreateDatabaseRequest::set_create_statement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  create_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
void CreateDatabaseRequest::set_create_statement(const char* value, size_t size) {
  
  create_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
::std::string* CreateDatabaseRequest::mutable_create_statement() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
  return create_statement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateDatabaseRequest::release_create_statement() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
  
  return create_statement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateDatabaseRequest::set_allocated_create_statement(::std::string* create_statement) {
  if (create_statement != NULL) {
    
  } else {
    
  }
  create_statement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_statement);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}

// repeated string extra_statements = 3;
int CreateDatabaseRequest::extra_statements_size() const {
  return extra_statements_.size();
}
void CreateDatabaseRequest::clear_extra_statements() {
  extra_statements_.Clear();
}
const ::std::string& CreateDatabaseRequest::extra_statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return extra_statements_.Get(index);
}
::std::string* CreateDatabaseRequest::mutable_extra_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return extra_statements_.Mutable(index);
}
void CreateDatabaseRequest::set_extra_statements(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  extra_statements_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CreateDatabaseRequest::set_extra_statements(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  extra_statements_.Mutable(index)->assign(std::move(value));
}
#endif
void CreateDatabaseRequest::set_extra_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
void CreateDatabaseRequest::set_extra_statements(int index, const char* value, size_t size) {
  extra_statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
::std::string* CreateDatabaseRequest::add_extra_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return extra_statements_.Add();
}
void CreateDatabaseRequest::add_extra_statements(const ::std::string& value) {
  extra_statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
#if LANG_CXX11
void CreateDatabaseRequest::add_extra_statements(::std::string&& value) {
  extra_statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
#endif
void CreateDatabaseRequest::add_extra_statements(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
void CreateDatabaseRequest::add_extra_statements(const char* value, size_t size) {
  extra_statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateDatabaseRequest::extra_statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return extra_statements_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CreateDatabaseRequest::mutable_extra_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return &extra_statements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDatabaseMetadata::kDatabaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDatabaseMetadata::CreateDatabaseMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.admin.database.v1.CreateDatabaseMetadata)
}
CreateDatabaseMetadata::CreateDatabaseMetadata(const CreateDatabaseMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.database().size() > 0) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.admin.database.v1.CreateDatabaseMetadata)
}

void CreateDatabaseMetadata::SharedCtor() {
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateDatabaseMetadata::~CreateDatabaseMetadata() {
  // @@protoc_insertion_point(destructor:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  SharedDtor();
}

void CreateDatabaseMetadata::SharedDtor() {
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateDatabaseMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDatabaseMetadata::descriptor() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateDatabaseMetadata& CreateDatabaseMetadata::default_instance() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateDatabaseMetadata* CreateDatabaseMetadata::New(::google::protobuf::Arena* arena) const {
  CreateDatabaseMetadata* n = new CreateDatabaseMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateDatabaseMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateDatabaseMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string database = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), this->database().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.CreateDatabaseMetadata.database"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  return false;
#undef DO_
}

void CreateDatabaseMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.CreateDatabaseMetadata.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.admin.database.v1.CreateDatabaseMetadata)
}

::google::protobuf::uint8* CreateDatabaseMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.CreateDatabaseMetadata.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  return target;
}

size_t CreateDatabaseMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  size_t total_size = 0;

  // string database = 1;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDatabaseMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDatabaseMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateDatabaseMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.admin.database.v1.CreateDatabaseMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.admin.database.v1.CreateDatabaseMetadata)
    MergeFrom(*source);
  }
}

void CreateDatabaseMetadata::MergeFrom(const CreateDatabaseMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
}

void CreateDatabaseMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDatabaseMetadata::CopyFrom(const CreateDatabaseMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.admin.database.v1.CreateDatabaseMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDatabaseMetadata::IsInitialized() const {
  return true;
}

void CreateDatabaseMetadata::Swap(CreateDatabaseMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDatabaseMetadata::InternalSwap(CreateDatabaseMetadata* other) {
  database_.Swap(&other->database_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateDatabaseMetadata::GetMetadata() const {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateDatabaseMetadata

// string database = 1;
void CreateDatabaseMetadata::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateDatabaseMetadata::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
  return database_.GetNoArena();
}
void CreateDatabaseMetadata::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
#if LANG_CXX11
void CreateDatabaseMetadata::set_database(::std::string&& value) {
  
  database_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
#endif
void CreateDatabaseMetadata::set_database(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
void CreateDatabaseMetadata::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
::std::string* CreateDatabaseMetadata::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateDatabaseMetadata::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateDatabaseMetadata::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDatabaseRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDatabaseRequest::GetDatabaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.admin.database.v1.GetDatabaseRequest)
}
GetDatabaseRequest::GetDatabaseRequest(const GetDatabaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.admin.database.v1.GetDatabaseRequest)
}

void GetDatabaseRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetDatabaseRequest::~GetDatabaseRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.admin.database.v1.GetDatabaseRequest)
  SharedDtor();
}

void GetDatabaseRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetDatabaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatabaseRequest::descriptor() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDatabaseRequest& GetDatabaseRequest::default_instance() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDatabaseRequest* GetDatabaseRequest::New(::google::protobuf::Arena* arena) const {
  GetDatabaseRequest* n = new GetDatabaseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDatabaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.admin.database.v1.GetDatabaseRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetDatabaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.admin.database.v1.GetDatabaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.GetDatabaseRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.admin.database.v1.GetDatabaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.admin.database.v1.GetDatabaseRequest)
  return false;
#undef DO_
}

void GetDatabaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.admin.database.v1.GetDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.GetDatabaseRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.admin.database.v1.GetDatabaseRequest)
}

::google::protobuf::uint8* GetDatabaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.admin.database.v1.GetDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.GetDatabaseRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.admin.database.v1.GetDatabaseRequest)
  return target;
}

size_t GetDatabaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.admin.database.v1.GetDatabaseRequest)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatabaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.admin.database.v1.GetDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDatabaseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDatabaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.admin.database.v1.GetDatabaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.admin.database.v1.GetDatabaseRequest)
    MergeFrom(*source);
  }
}

void GetDatabaseRequest::MergeFrom(const GetDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.admin.database.v1.GetDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GetDatabaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.admin.database.v1.GetDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatabaseRequest::CopyFrom(const GetDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.admin.database.v1.GetDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatabaseRequest::IsInitialized() const {
  return true;
}

void GetDatabaseRequest::Swap(GetDatabaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDatabaseRequest::InternalSwap(GetDatabaseRequest* other) {
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDatabaseRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDatabaseRequest

// string name = 1;
void GetDatabaseRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetDatabaseRequest::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetDatabaseRequest.name)
  return name_.GetNoArena();
}
void GetDatabaseRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
#if LANG_CXX11
void GetDatabaseRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
#endif
void GetDatabaseRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
void GetDatabaseRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
::std::string* GetDatabaseRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetDatabaseRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetDatabaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.GetDatabaseRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetDatabaseRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDatabaseDdlRequest::kDatabaseFieldNumber;
const int UpdateDatabaseDdlRequest::kStatementsFieldNumber;
const int UpdateDatabaseDdlRequest::kOperationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDatabaseDdlRequest::UpdateDatabaseDdlRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
}
UpdateDatabaseDdlRequest::UpdateDatabaseDdlRequest(const UpdateDatabaseDdlRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      statements_(from.statements_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.database().size() > 0) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operation_id().size() > 0) {
    operation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
}

void UpdateDatabaseDdlRequest::SharedCtor() {
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UpdateDatabaseDdlRequest::~UpdateDatabaseDdlRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  SharedDtor();
}

void UpdateDatabaseDdlRequest::SharedDtor() {
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateDatabaseDdlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDatabaseDdlRequest::descriptor() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateDatabaseDdlRequest& UpdateDatabaseDdlRequest::default_instance() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateDatabaseDdlRequest* UpdateDatabaseDdlRequest::New(::google::protobuf::Arena* arena) const {
  UpdateDatabaseDdlRequest* n = new UpdateDatabaseDdlRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateDatabaseDdlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  statements_.Clear();
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateDatabaseDdlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string database = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), this->database().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string statements = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_statements()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->statements(this->statements_size() - 1).data(),
            this->statements(this->statements_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operation_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operation_id().data(), this->operation_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  return false;
#undef DO_
}

void UpdateDatabaseDdlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database(), output);
  }

  // repeated string statements = 2;
  for (int i = 0, n = this->statements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->statements(i).data(), this->statements(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->statements(i), output);
  }

  // string operation_id = 3;
  if (this->operation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation_id().data(), this->operation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->operation_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
}

::google::protobuf::uint8* UpdateDatabaseDdlRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database(), target);
  }

  // repeated string statements = 2;
  for (int i = 0, n = this->statements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->statements(i).data(), this->statements(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->statements(i), target);
  }

  // string operation_id = 3;
  if (this->operation_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation_id().data(), this->operation_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->operation_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  return target;
}

size_t UpdateDatabaseDdlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  size_t total_size = 0;

  // repeated string statements = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->statements_size());
  for (int i = 0, n = this->statements_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->statements(i));
  }

  // string database = 1;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  // string operation_id = 3;
  if (this->operation_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDatabaseDdlRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDatabaseDdlRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateDatabaseDdlRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
    MergeFrom(*source);
  }
}

void UpdateDatabaseDdlRequest::MergeFrom(const UpdateDatabaseDdlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statements_.MergeFrom(from.statements_);
  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  if (from.operation_id().size() > 0) {

    operation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_id_);
  }
}

void UpdateDatabaseDdlRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDatabaseDdlRequest::CopyFrom(const UpdateDatabaseDdlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDatabaseDdlRequest::IsInitialized() const {
  return true;
}

void UpdateDatabaseDdlRequest::Swap(UpdateDatabaseDdlRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDatabaseDdlRequest::InternalSwap(UpdateDatabaseDdlRequest* other) {
  statements_.InternalSwap(&other->statements_);
  database_.Swap(&other->database_);
  operation_id_.Swap(&other->operation_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateDatabaseDdlRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateDatabaseDdlRequest

// string database = 1;
void UpdateDatabaseDdlRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateDatabaseDdlRequest::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
  return database_.GetNoArena();
}
void UpdateDatabaseDdlRequest::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
#if LANG_CXX11
void UpdateDatabaseDdlRequest::set_database(::std::string&& value) {
  
  database_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
#endif
void UpdateDatabaseDdlRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
void UpdateDatabaseDdlRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
::std::string* UpdateDatabaseDdlRequest::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDatabaseDdlRequest::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDatabaseDdlRequest::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}

// repeated string statements = 2;
int UpdateDatabaseDdlRequest::statements_size() const {
  return statements_.size();
}
void UpdateDatabaseDdlRequest::clear_statements() {
  statements_.Clear();
}
const ::std::string& UpdateDatabaseDdlRequest::statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return statements_.Get(index);
}
::std::string* UpdateDatabaseDdlRequest::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return statements_.Mutable(index);
}
void UpdateDatabaseDdlRequest::set_statements(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  statements_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UpdateDatabaseDdlRequest::set_statements(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  statements_.Mutable(index)->assign(std::move(value));
}
#endif
void UpdateDatabaseDdlRequest::set_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
void UpdateDatabaseDdlRequest::set_statements(int index, const char* value, size_t size) {
  statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
::std::string* UpdateDatabaseDdlRequest::add_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return statements_.Add();
}
void UpdateDatabaseDdlRequest::add_statements(const ::std::string& value) {
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
#if LANG_CXX11
void UpdateDatabaseDdlRequest::add_statements(::std::string&& value) {
  statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
#endif
void UpdateDatabaseDdlRequest::add_statements(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
void UpdateDatabaseDdlRequest::add_statements(const char* value, size_t size) {
  statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateDatabaseDdlRequest::statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return statements_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateDatabaseDdlRequest::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return &statements_;
}

// string operation_id = 3;
void UpdateDatabaseDdlRequest::clear_operation_id() {
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateDatabaseDdlRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
  return operation_id_.GetNoArena();
}
void UpdateDatabaseDdlRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
#if LANG_CXX11
void UpdateDatabaseDdlRequest::set_operation_id(::std::string&& value) {
  
  operation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
#endif
void UpdateDatabaseDdlRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
void UpdateDatabaseDdlRequest::set_operation_id(const char* value, size_t size) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
::std::string* UpdateDatabaseDdlRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
  return operation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDatabaseDdlRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
  
  return operation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDatabaseDdlRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDatabaseDdlMetadata::kDatabaseFieldNumber;
const int UpdateDatabaseDdlMetadata::kStatementsFieldNumber;
const int UpdateDatabaseDdlMetadata::kCommitTimestampsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDatabaseDdlMetadata::UpdateDatabaseDdlMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
}
UpdateDatabaseDdlMetadata::UpdateDatabaseDdlMetadata(const UpdateDatabaseDdlMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      statements_(from.statements_),
      commit_timestamps_(from.commit_timestamps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.database().size() > 0) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
}

void UpdateDatabaseDdlMetadata::SharedCtor() {
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UpdateDatabaseDdlMetadata::~UpdateDatabaseDdlMetadata() {
  // @@protoc_insertion_point(destructor:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  SharedDtor();
}

void UpdateDatabaseDdlMetadata::SharedDtor() {
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateDatabaseDdlMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDatabaseDdlMetadata::descriptor() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateDatabaseDdlMetadata& UpdateDatabaseDdlMetadata::default_instance() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateDatabaseDdlMetadata* UpdateDatabaseDdlMetadata::New(::google::protobuf::Arena* arena) const {
  UpdateDatabaseDdlMetadata* n = new UpdateDatabaseDdlMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateDatabaseDdlMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  statements_.Clear();
  commit_timestamps_.Clear();
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateDatabaseDdlMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string database = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), this->database().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string statements = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_statements()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->statements(this->statements_size() - 1).data(),
            this->statements(this->statements_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Timestamp commit_timestamps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commit_timestamps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  return false;
#undef DO_
}

void UpdateDatabaseDdlMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database(), output);
  }

  // repeated string statements = 2;
  for (int i = 0, n = this->statements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->statements(i).data(), this->statements(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->statements(i), output);
  }

  // repeated .google.protobuf.Timestamp commit_timestamps = 3;
  for (unsigned int i = 0, n = this->commit_timestamps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commit_timestamps(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
}

::google::protobuf::uint8* UpdateDatabaseDdlMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database(), target);
  }

  // repeated string statements = 2;
  for (int i = 0, n = this->statements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->statements(i).data(), this->statements(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->statements(i), target);
  }

  // repeated .google.protobuf.Timestamp commit_timestamps = 3;
  for (unsigned int i = 0, n = this->commit_timestamps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->commit_timestamps(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  return target;
}

size_t UpdateDatabaseDdlMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  size_t total_size = 0;

  // repeated string statements = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->statements_size());
  for (int i = 0, n = this->statements_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->statements(i));
  }

  // repeated .google.protobuf.Timestamp commit_timestamps = 3;
  {
    unsigned int count = this->commit_timestamps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commit_timestamps(i));
    }
  }

  // string database = 1;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDatabaseDdlMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDatabaseDdlMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateDatabaseDdlMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
    MergeFrom(*source);
  }
}

void UpdateDatabaseDdlMetadata::MergeFrom(const UpdateDatabaseDdlMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statements_.MergeFrom(from.statements_);
  commit_timestamps_.MergeFrom(from.commit_timestamps_);
  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
}

void UpdateDatabaseDdlMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDatabaseDdlMetadata::CopyFrom(const UpdateDatabaseDdlMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDatabaseDdlMetadata::IsInitialized() const {
  return true;
}

void UpdateDatabaseDdlMetadata::Swap(UpdateDatabaseDdlMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDatabaseDdlMetadata::InternalSwap(UpdateDatabaseDdlMetadata* other) {
  statements_.InternalSwap(&other->statements_);
  commit_timestamps_.InternalSwap(&other->commit_timestamps_);
  database_.Swap(&other->database_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateDatabaseDdlMetadata::GetMetadata() const {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateDatabaseDdlMetadata

// string database = 1;
void UpdateDatabaseDdlMetadata::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateDatabaseDdlMetadata::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
  return database_.GetNoArena();
}
void UpdateDatabaseDdlMetadata::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
#if LANG_CXX11
void UpdateDatabaseDdlMetadata::set_database(::std::string&& value) {
  
  database_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
#endif
void UpdateDatabaseDdlMetadata::set_database(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
void UpdateDatabaseDdlMetadata::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
::std::string* UpdateDatabaseDdlMetadata::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateDatabaseDdlMetadata::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateDatabaseDdlMetadata::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}

// repeated string statements = 2;
int UpdateDatabaseDdlMetadata::statements_size() const {
  return statements_.size();
}
void UpdateDatabaseDdlMetadata::clear_statements() {
  statements_.Clear();
}
const ::std::string& UpdateDatabaseDdlMetadata::statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return statements_.Get(index);
}
::std::string* UpdateDatabaseDdlMetadata::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return statements_.Mutable(index);
}
void UpdateDatabaseDdlMetadata::set_statements(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  statements_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void UpdateDatabaseDdlMetadata::set_statements(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  statements_.Mutable(index)->assign(std::move(value));
}
#endif
void UpdateDatabaseDdlMetadata::set_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
void UpdateDatabaseDdlMetadata::set_statements(int index, const char* value, size_t size) {
  statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
::std::string* UpdateDatabaseDdlMetadata::add_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return statements_.Add();
}
void UpdateDatabaseDdlMetadata::add_statements(const ::std::string& value) {
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
#if LANG_CXX11
void UpdateDatabaseDdlMetadata::add_statements(::std::string&& value) {
  statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
#endif
void UpdateDatabaseDdlMetadata::add_statements(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
void UpdateDatabaseDdlMetadata::add_statements(const char* value, size_t size) {
  statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateDatabaseDdlMetadata::statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return statements_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateDatabaseDdlMetadata::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return &statements_;
}

// repeated .google.protobuf.Timestamp commit_timestamps = 3;
int UpdateDatabaseDdlMetadata::commit_timestamps_size() const {
  return commit_timestamps_.size();
}
void UpdateDatabaseDdlMetadata::clear_commit_timestamps() {
  commit_timestamps_.Clear();
}
const ::google::protobuf::Timestamp& UpdateDatabaseDdlMetadata::commit_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return commit_timestamps_.Get(index);
}
::google::protobuf::Timestamp* UpdateDatabaseDdlMetadata::mutable_commit_timestamps(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return commit_timestamps_.Mutable(index);
}
::google::protobuf::Timestamp* UpdateDatabaseDdlMetadata::add_commit_timestamps() {
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return commit_timestamps_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >*
UpdateDatabaseDdlMetadata::mutable_commit_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return &commit_timestamps_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >&
UpdateDatabaseDdlMetadata::commit_timestamps() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return commit_timestamps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropDatabaseRequest::kDatabaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropDatabaseRequest::DropDatabaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.admin.database.v1.DropDatabaseRequest)
}
DropDatabaseRequest::DropDatabaseRequest(const DropDatabaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.database().size() > 0) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.admin.database.v1.DropDatabaseRequest)
}

void DropDatabaseRequest::SharedCtor() {
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DropDatabaseRequest::~DropDatabaseRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.admin.database.v1.DropDatabaseRequest)
  SharedDtor();
}

void DropDatabaseRequest::SharedDtor() {
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DropDatabaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropDatabaseRequest::descriptor() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DropDatabaseRequest& DropDatabaseRequest::default_instance() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropDatabaseRequest* DropDatabaseRequest::New(::google::protobuf::Arena* arena) const {
  DropDatabaseRequest* n = new DropDatabaseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropDatabaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.admin.database.v1.DropDatabaseRequest)
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DropDatabaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.admin.database.v1.DropDatabaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string database = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), this->database().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.DropDatabaseRequest.database"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.admin.database.v1.DropDatabaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.admin.database.v1.DropDatabaseRequest)
  return false;
#undef DO_
}

void DropDatabaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.admin.database.v1.DropDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.DropDatabaseRequest.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.admin.database.v1.DropDatabaseRequest)
}

::google::protobuf::uint8* DropDatabaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.admin.database.v1.DropDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.DropDatabaseRequest.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.admin.database.v1.DropDatabaseRequest)
  return target;
}

size_t DropDatabaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.admin.database.v1.DropDatabaseRequest)
  size_t total_size = 0;

  // string database = 1;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropDatabaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.admin.database.v1.DropDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DropDatabaseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropDatabaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.admin.database.v1.DropDatabaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.admin.database.v1.DropDatabaseRequest)
    MergeFrom(*source);
  }
}

void DropDatabaseRequest::MergeFrom(const DropDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.admin.database.v1.DropDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
}

void DropDatabaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.admin.database.v1.DropDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropDatabaseRequest::CopyFrom(const DropDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.admin.database.v1.DropDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropDatabaseRequest::IsInitialized() const {
  return true;
}

void DropDatabaseRequest::Swap(DropDatabaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropDatabaseRequest::InternalSwap(DropDatabaseRequest* other) {
  database_.Swap(&other->database_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropDatabaseRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropDatabaseRequest

// string database = 1;
void DropDatabaseRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DropDatabaseRequest::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.DropDatabaseRequest.database)
  return database_.GetNoArena();
}
void DropDatabaseRequest::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
#if LANG_CXX11
void DropDatabaseRequest::set_database(::std::string&& value) {
  
  database_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
#endif
void DropDatabaseRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
void DropDatabaseRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
::std::string* DropDatabaseRequest::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.DropDatabaseRequest.database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DropDatabaseRequest::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.DropDatabaseRequest.database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DropDatabaseRequest::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDatabaseDdlRequest::kDatabaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDatabaseDdlRequest::GetDatabaseDdlRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
}
GetDatabaseDdlRequest::GetDatabaseDdlRequest(const GetDatabaseDdlRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.database().size() > 0) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
}

void GetDatabaseDdlRequest::SharedCtor() {
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetDatabaseDdlRequest::~GetDatabaseDdlRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  SharedDtor();
}

void GetDatabaseDdlRequest::SharedDtor() {
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetDatabaseDdlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatabaseDdlRequest::descriptor() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDatabaseDdlRequest& GetDatabaseDdlRequest::default_instance() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDatabaseDdlRequest* GetDatabaseDdlRequest::New(::google::protobuf::Arena* arena) const {
  GetDatabaseDdlRequest* n = new GetDatabaseDdlRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDatabaseDdlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetDatabaseDdlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string database = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), this->database().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.GetDatabaseDdlRequest.database"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  return false;
#undef DO_
}

void GetDatabaseDdlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.GetDatabaseDdlRequest.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
}

::google::protobuf::uint8* GetDatabaseDdlRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.GetDatabaseDdlRequest.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  return target;
}

size_t GetDatabaseDdlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  size_t total_size = 0;

  // string database = 1;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatabaseDdlRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDatabaseDdlRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDatabaseDdlRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
    MergeFrom(*source);
  }
}

void GetDatabaseDdlRequest::MergeFrom(const GetDatabaseDdlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
}

void GetDatabaseDdlRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatabaseDdlRequest::CopyFrom(const GetDatabaseDdlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatabaseDdlRequest::IsInitialized() const {
  return true;
}

void GetDatabaseDdlRequest::Swap(GetDatabaseDdlRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDatabaseDdlRequest::InternalSwap(GetDatabaseDdlRequest* other) {
  database_.Swap(&other->database_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDatabaseDdlRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDatabaseDdlRequest

// string database = 1;
void GetDatabaseDdlRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetDatabaseDdlRequest::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
  return database_.GetNoArena();
}
void GetDatabaseDdlRequest::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
#if LANG_CXX11
void GetDatabaseDdlRequest::set_database(::std::string&& value) {
  
  database_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
#endif
void GetDatabaseDdlRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
void GetDatabaseDdlRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
::std::string* GetDatabaseDdlRequest::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetDatabaseDdlRequest::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetDatabaseDdlRequest::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDatabaseDdlResponse::kStatementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDatabaseDdlResponse::GetDatabaseDdlResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
}
GetDatabaseDdlResponse::GetDatabaseDdlResponse(const GetDatabaseDdlResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      statements_(from.statements_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
}

void GetDatabaseDdlResponse::SharedCtor() {
  _cached_size_ = 0;
}

GetDatabaseDdlResponse::~GetDatabaseDdlResponse() {
  // @@protoc_insertion_point(destructor:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  SharedDtor();
}

void GetDatabaseDdlResponse::SharedDtor() {
}

void GetDatabaseDdlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatabaseDdlResponse::descriptor() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDatabaseDdlResponse& GetDatabaseDdlResponse::default_instance() {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDatabaseDdlResponse* GetDatabaseDdlResponse::New(::google::protobuf::Arena* arena) const {
  GetDatabaseDdlResponse* n = new GetDatabaseDdlResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDatabaseDdlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  statements_.Clear();
}

bool GetDatabaseDdlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string statements = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_statements()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->statements(this->statements_size() - 1).data(),
            this->statements(this->statements_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  return false;
#undef DO_
}

void GetDatabaseDdlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string statements = 1;
  for (int i = 0, n = this->statements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->statements(i).data(), this->statements(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->statements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
}

::google::protobuf::uint8* GetDatabaseDdlResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string statements = 1;
  for (int i = 0, n = this->statements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->statements(i).data(), this->statements(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->statements(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  return target;
}

size_t GetDatabaseDdlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  size_t total_size = 0;

  // repeated string statements = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->statements_size());
  for (int i = 0, n = this->statements_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->statements(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatabaseDdlResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDatabaseDdlResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDatabaseDdlResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
    MergeFrom(*source);
  }
}

void GetDatabaseDdlResponse::MergeFrom(const GetDatabaseDdlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statements_.MergeFrom(from.statements_);
}

void GetDatabaseDdlResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatabaseDdlResponse::CopyFrom(const GetDatabaseDdlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatabaseDdlResponse::IsInitialized() const {
  return true;
}

void GetDatabaseDdlResponse::Swap(GetDatabaseDdlResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDatabaseDdlResponse::InternalSwap(GetDatabaseDdlResponse* other) {
  statements_.InternalSwap(&other->statements_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDatabaseDdlResponse::GetMetadata() const {
  protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDatabaseDdlResponse

// repeated string statements = 1;
int GetDatabaseDdlResponse::statements_size() const {
  return statements_.size();
}
void GetDatabaseDdlResponse::clear_statements() {
  statements_.Clear();
}
const ::std::string& GetDatabaseDdlResponse::statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return statements_.Get(index);
}
::std::string* GetDatabaseDdlResponse::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return statements_.Mutable(index);
}
void GetDatabaseDdlResponse::set_statements(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  statements_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void GetDatabaseDdlResponse::set_statements(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  statements_.Mutable(index)->assign(std::move(value));
}
#endif
void GetDatabaseDdlResponse::set_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
void GetDatabaseDdlResponse::set_statements(int index, const char* value, size_t size) {
  statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
::std::string* GetDatabaseDdlResponse::add_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return statements_.Add();
}
void GetDatabaseDdlResponse::add_statements(const ::std::string& value) {
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
#if LANG_CXX11
void GetDatabaseDdlResponse::add_statements(::std::string&& value) {
  statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
#endif
void GetDatabaseDdlResponse::add_statements(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
void GetDatabaseDdlResponse::add_statements(const char* value, size_t size) {
  statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetDatabaseDdlResponse::statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return statements_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GetDatabaseDdlResponse::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return &statements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace database
}  // namespace admin
}  // namespace spanner
}  // namespace google

// @@protoc_insertion_point(global_scope)
