// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/mutation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/spanner/v1/mutation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace spanner {
namespace v1 {
class Mutation_WriteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mutation_Write> {
} _Mutation_Write_default_instance_;
class Mutation_DeleteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mutation_Delete> {
} _Mutation_Delete_default_instance_;
class MutationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mutation> {
  public:
  const ::google::spanner::v1::Mutation_Write* insert_;
  const ::google::spanner::v1::Mutation_Write* update_;
  const ::google::spanner::v1::Mutation_Write* insert_or_update_;
  const ::google::spanner::v1::Mutation_Write* replace_;
  const ::google::spanner::v1::Mutation_Delete* delete__;
} _Mutation_default_instance_;

namespace protobuf_google_2fspanner_2fv1_2fmutation_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_Write, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_Write, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_Write, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_Write, values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_Delete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_Delete, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation_Delete, key_set_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mutation_default_instance_), insert_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mutation_default_instance_), update_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mutation_default_instance_), insert_or_update_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mutation_default_instance_), replace_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mutation_default_instance_), delete__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, operation_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Mutation_Write)},
  { 8, -1, sizeof(Mutation_Delete)},
  { 15, -1, sizeof(Mutation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mutation_Write_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mutation_Delete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mutation_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/spanner/v1/mutation.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Mutation_Write_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Mutation_Delete_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Mutation_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaults();
  ::google::spanner::v1::protobuf_google_2fspanner_2fv1_2fkeys_2eproto::InitDefaults();
  _Mutation_Write_default_instance_.DefaultConstruct();
  _Mutation_Delete_default_instance_.DefaultConstruct();
  _Mutation_default_instance_.DefaultConstruct();
  _Mutation_Delete_default_instance_.get_mutable()->key_set_ = const_cast< ::google::spanner::v1::KeySet*>(
      ::google::spanner::v1::KeySet::internal_default_instance());
  _Mutation_default_instance_.insert_ = const_cast< ::google::spanner::v1::Mutation_Write*>(
      ::google::spanner::v1::Mutation_Write::internal_default_instance());
  _Mutation_default_instance_.update_ = const_cast< ::google::spanner::v1::Mutation_Write*>(
      ::google::spanner::v1::Mutation_Write::internal_default_instance());
  _Mutation_default_instance_.insert_or_update_ = const_cast< ::google::spanner::v1::Mutation_Write*>(
      ::google::spanner::v1::Mutation_Write::internal_default_instance());
  _Mutation_default_instance_.replace_ = const_cast< ::google::spanner::v1::Mutation_Write*>(
      ::google::spanner::v1::Mutation_Write::internal_default_instance());
  _Mutation_default_instance_.delete__ = const_cast< ::google::spanner::v1::Mutation_Delete*>(
      ::google::spanner::v1::Mutation_Delete::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n google/spanner/v1/mutation.proto\022\021goog"
      "le.spanner.v1\032\034google/api/annotations.pr"
      "oto\032\034google/protobuf/struct.proto\032\034googl"
      "e/spanner/v1/keys.proto\"\306\003\n\010Mutation\0223\n\006"
      "insert\030\001 \001(\0132!.google.spanner.v1.Mutatio"
      "n.WriteH\000\0223\n\006update\030\002 \001(\0132!.google.spann"
      "er.v1.Mutation.WriteH\000\022=\n\020insert_or_upda"
      "te\030\003 \001(\0132!.google.spanner.v1.Mutation.Wr"
      "iteH\000\0224\n\007replace\030\004 \001(\0132!.google.spanner."
      "v1.Mutation.WriteH\000\0224\n\006delete\030\005 \001(\0132\".go"
      "ogle.spanner.v1.Mutation.DeleteH\000\032S\n\005Wri"
      "te\022\r\n\005table\030\001 \001(\t\022\017\n\007columns\030\002 \003(\t\022*\n\006va"
      "lues\030\003 \003(\0132\032.google.protobuf.ListValue\032C"
      "\n\006Delete\022\r\n\005table\030\001 \001(\t\022*\n\007key_set\030\002 \001(\013"
      "2\031.google.spanner.v1.KeySetB\013\n\toperation"
      "B|\n\025com.google.spanner.v1B\rMutationProto"
      "P\001Z8google.golang.org/genproto/googleapi"
      "s/spanner/v1;spanner\252\002\027Google.Cloud.Span"
      "ner.V1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 734);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/spanner/v1/mutation.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::google::spanner::v1::protobuf_google_2fspanner_2fv1_2fkeys_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fspanner_2fv1_2fmutation_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation_Write::kTableFieldNumber;
const int Mutation_Write::kColumnsFieldNumber;
const int Mutation_Write::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation_Write::Mutation_Write()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fv1_2fmutation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.Mutation.Write)
}
Mutation_Write::Mutation_Write(const Mutation_Write& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.Mutation.Write)
}

void Mutation_Write::SharedCtor() {
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Mutation_Write::~Mutation_Write() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.Mutation.Write)
  SharedDtor();
}

void Mutation_Write::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mutation_Write::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation_Write::descriptor() {
  protobuf_google_2fspanner_2fv1_2fmutation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fmutation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mutation_Write& Mutation_Write::default_instance() {
  protobuf_google_2fspanner_2fv1_2fmutation_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mutation_Write* Mutation_Write::New(::google::protobuf::Arena* arena) const {
  Mutation_Write* n = new Mutation_Write;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation_Write::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.Mutation.Write)
  columns_.Clear();
  values_.Clear();
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Mutation_Write::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.Mutation.Write)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.Mutation.Write.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_columns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->columns(this->columns_size() - 1).data(),
            this->columns(this->columns_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.Mutation.Write.columns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.ListValue values = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.Mutation.Write)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.Mutation.Write)
  return false;
#undef DO_
}

void Mutation_Write::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.Mutation.Write)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.Mutation.Write.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table(), output);
  }

  // repeated string columns = 2;
  for (int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->columns(i).data(), this->columns(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.Mutation.Write.columns");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->columns(i), output);
  }

  // repeated .google.protobuf.ListValue values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.v1.Mutation.Write)
}

::google::protobuf::uint8* Mutation_Write::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.Mutation.Write)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.Mutation.Write.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table(), target);
  }

  // repeated string columns = 2;
  for (int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->columns(i).data(), this->columns(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.Mutation.Write.columns");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->columns(i), target);
  }

  // repeated .google.protobuf.ListValue values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->values(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.Mutation.Write)
  return target;
}

size_t Mutation_Write::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.Mutation.Write)
  size_t total_size = 0;

  // repeated string columns = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->columns_size());
  for (int i = 0, n = this->columns_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->columns(i));
  }

  // repeated .google.protobuf.ListValue values = 3;
  {
    unsigned int count = this->values_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values(i));
    }
  }

  // string table = 1;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation_Write::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.Mutation.Write)
  GOOGLE_DCHECK_NE(&from, this);
  const Mutation_Write* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation_Write>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.Mutation.Write)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.Mutation.Write)
    MergeFrom(*source);
  }
}

void Mutation_Write::MergeFrom(const Mutation_Write& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.Mutation.Write)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  values_.MergeFrom(from.values_);
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
}

void Mutation_Write::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.Mutation.Write)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation_Write::CopyFrom(const Mutation_Write& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.Mutation.Write)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutation_Write::IsInitialized() const {
  return true;
}

void Mutation_Write::Swap(Mutation_Write* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation_Write::InternalSwap(Mutation_Write* other) {
  columns_.InternalSwap(&other->columns_);
  values_.InternalSwap(&other->values_);
  table_.Swap(&other->table_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation_Write::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fmutation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fmutation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mutation_Write

// string table = 1;
void Mutation_Write::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mutation_Write::table() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.Write.table)
  return table_.GetNoArena();
}
void Mutation_Write::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.Mutation.Write.table)
}
#if LANG_CXX11
void Mutation_Write::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.Mutation.Write.table)
}
#endif
void Mutation_Write::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.Mutation.Write.table)
}
void Mutation_Write::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.Mutation.Write.table)
}
::std::string* Mutation_Write::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.Write.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mutation_Write::release_table() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.Write.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_Write::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Mutation.Write.table)
}

// repeated string columns = 2;
int Mutation_Write::columns_size() const {
  return columns_.size();
}
void Mutation_Write::clear_columns() {
  columns_.Clear();
}
const ::std::string& Mutation_Write::columns(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.Write.columns)
  return columns_.Get(index);
}
::std::string* Mutation_Write::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.Write.columns)
  return columns_.Mutable(index);
}
void Mutation_Write::set_columns(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.v1.Mutation.Write.columns)
  columns_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Mutation_Write::set_columns(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.v1.Mutation.Write.columns)
  columns_.Mutable(index)->assign(std::move(value));
}
#endif
void Mutation_Write::set_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.Mutation.Write.columns)
}
void Mutation_Write::set_columns(int index, const char* value, size_t size) {
  columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.Mutation.Write.columns)
}
::std::string* Mutation_Write::add_columns() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.v1.Mutation.Write.columns)
  return columns_.Add();
}
void Mutation_Write::add_columns(const ::std::string& value) {
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.v1.Mutation.Write.columns)
}
#if LANG_CXX11
void Mutation_Write::add_columns(::std::string&& value) {
  columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.v1.Mutation.Write.columns)
}
#endif
void Mutation_Write::add_columns(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.v1.Mutation.Write.columns)
}
void Mutation_Write::add_columns(const char* value, size_t size) {
  columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.v1.Mutation.Write.columns)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mutation_Write::columns() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.Mutation.Write.columns)
  return columns_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Mutation_Write::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.Mutation.Write.columns)
  return &columns_;
}

// repeated .google.protobuf.ListValue values = 3;
int Mutation_Write::values_size() const {
  return values_.size();
}
void Mutation_Write::clear_values() {
  values_.Clear();
}
const ::google::protobuf::ListValue& Mutation_Write::values(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.Write.values)
  return values_.Get(index);
}
::google::protobuf::ListValue* Mutation_Write::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.Write.values)
  return values_.Mutable(index);
}
::google::protobuf::ListValue* Mutation_Write::add_values() {
  // @@protoc_insertion_point(field_add:google.spanner.v1.Mutation.Write.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::ListValue >*
Mutation_Write::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.Mutation.Write.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::ListValue >&
Mutation_Write::values() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.Mutation.Write.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation_Delete::kTableFieldNumber;
const int Mutation_Delete::kKeySetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation_Delete::Mutation_Delete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fv1_2fmutation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.Mutation.Delete)
}
Mutation_Delete::Mutation_Delete(const Mutation_Delete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_key_set()) {
    key_set_ = new ::google::spanner::v1::KeySet(*from.key_set_);
  } else {
    key_set_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.Mutation.Delete)
}

void Mutation_Delete::SharedCtor() {
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_set_ = NULL;
  _cached_size_ = 0;
}

Mutation_Delete::~Mutation_Delete() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.Mutation.Delete)
  SharedDtor();
}

void Mutation_Delete::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete key_set_;
  }
}

void Mutation_Delete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation_Delete::descriptor() {
  protobuf_google_2fspanner_2fv1_2fmutation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fmutation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mutation_Delete& Mutation_Delete::default_instance() {
  protobuf_google_2fspanner_2fv1_2fmutation_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mutation_Delete* Mutation_Delete::New(::google::protobuf::Arena* arena) const {
  Mutation_Delete* n = new Mutation_Delete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation_Delete::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.Mutation.Delete)
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && key_set_ != NULL) {
    delete key_set_;
  }
  key_set_ = NULL;
}

bool Mutation_Delete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.Mutation.Delete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.Mutation.Delete.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.KeySet key_set = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.Mutation.Delete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.Mutation.Delete)
  return false;
#undef DO_
}

void Mutation_Delete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.Mutation.Delete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.Mutation.Delete.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->table(), output);
  }

  // .google.spanner.v1.KeySet key_set = 2;
  if (this->has_key_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_set_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.v1.Mutation.Delete)
}

::google::protobuf::uint8* Mutation_Delete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.Mutation.Delete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.Mutation.Delete.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table(), target);
  }

  // .google.spanner.v1.KeySet key_set = 2;
  if (this->has_key_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->key_set_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.Mutation.Delete)
  return target;
}

size_t Mutation_Delete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.Mutation.Delete)
  size_t total_size = 0;

  // string table = 1;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // .google.spanner.v1.KeySet key_set = 2;
  if (this->has_key_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation_Delete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.Mutation.Delete)
  GOOGLE_DCHECK_NE(&from, this);
  const Mutation_Delete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation_Delete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.Mutation.Delete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.Mutation.Delete)
    MergeFrom(*source);
  }
}

void Mutation_Delete::MergeFrom(const Mutation_Delete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.Mutation.Delete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.has_key_set()) {
    mutable_key_set()->::google::spanner::v1::KeySet::MergeFrom(from.key_set());
  }
}

void Mutation_Delete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.Mutation.Delete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation_Delete::CopyFrom(const Mutation_Delete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.Mutation.Delete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutation_Delete::IsInitialized() const {
  return true;
}

void Mutation_Delete::Swap(Mutation_Delete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation_Delete::InternalSwap(Mutation_Delete* other) {
  table_.Swap(&other->table_);
  std::swap(key_set_, other->key_set_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation_Delete::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fmutation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fmutation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mutation_Delete

// string table = 1;
void Mutation_Delete::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mutation_Delete::table() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.Delete.table)
  return table_.GetNoArena();
}
void Mutation_Delete::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.Mutation.Delete.table)
}
#if LANG_CXX11
void Mutation_Delete::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.Mutation.Delete.table)
}
#endif
void Mutation_Delete::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.Mutation.Delete.table)
}
void Mutation_Delete::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.Mutation.Delete.table)
}
::std::string* Mutation_Delete::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.Delete.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mutation_Delete::release_table() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.Delete.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation_Delete::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Mutation.Delete.table)
}

// .google.spanner.v1.KeySet key_set = 2;
bool Mutation_Delete::has_key_set() const {
  return this != internal_default_instance() && key_set_ != NULL;
}
void Mutation_Delete::clear_key_set() {
  if (GetArenaNoVirtual() == NULL && key_set_ != NULL) delete key_set_;
  key_set_ = NULL;
}
const ::google::spanner::v1::KeySet& Mutation_Delete::key_set() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.Delete.key_set)
  return key_set_ != NULL ? *key_set_
                         : *::google::spanner::v1::KeySet::internal_default_instance();
}
::google::spanner::v1::KeySet* Mutation_Delete::mutable_key_set() {
  
  if (key_set_ == NULL) {
    key_set_ = new ::google::spanner::v1::KeySet;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.Delete.key_set)
  return key_set_;
}
::google::spanner::v1::KeySet* Mutation_Delete::release_key_set() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.Delete.key_set)
  
  ::google::spanner::v1::KeySet* temp = key_set_;
  key_set_ = NULL;
  return temp;
}
void Mutation_Delete::set_allocated_key_set(::google::spanner::v1::KeySet* key_set) {
  delete key_set_;
  key_set_ = key_set;
  if (key_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Mutation.Delete.key_set)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation::kInsertFieldNumber;
const int Mutation::kUpdateFieldNumber;
const int Mutation::kInsertOrUpdateFieldNumber;
const int Mutation::kReplaceFieldNumber;
const int Mutation::kDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation::Mutation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fv1_2fmutation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.Mutation)
}
Mutation::Mutation(const Mutation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_operation();
  switch (from.operation_case()) {
    case kInsert: {
      mutable_insert()->::google::spanner::v1::Mutation_Write::MergeFrom(from.insert());
      break;
    }
    case kUpdate: {
      mutable_update()->::google::spanner::v1::Mutation_Write::MergeFrom(from.update());
      break;
    }
    case kInsertOrUpdate: {
      mutable_insert_or_update()->::google::spanner::v1::Mutation_Write::MergeFrom(from.insert_or_update());
      break;
    }
    case kReplace: {
      mutable_replace()->::google::spanner::v1::Mutation_Write::MergeFrom(from.replace());
      break;
    }
    case kDelete: {
      mutable_delete_()->::google::spanner::v1::Mutation_Delete::MergeFrom(from.delete_());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.Mutation)
}

void Mutation::SharedCtor() {
  clear_has_operation();
  _cached_size_ = 0;
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.Mutation)
  SharedDtor();
}

void Mutation::SharedDtor() {
  if (has_operation()) {
    clear_operation();
  }
}

void Mutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation::descriptor() {
  protobuf_google_2fspanner_2fv1_2fmutation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fmutation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mutation& Mutation::default_instance() {
  protobuf_google_2fspanner_2fv1_2fmutation_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mutation* Mutation::New(::google::protobuf::Arena* arena) const {
  Mutation* n = new Mutation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:google.spanner.v1.Mutation)
  switch (operation_case()) {
    case kInsert: {
      delete operation_.insert_;
      break;
    }
    case kUpdate: {
      delete operation_.update_;
      break;
    }
    case kInsertOrUpdate: {
      delete operation_.insert_or_update_;
      break;
    }
    case kReplace: {
      delete operation_.replace_;
      break;
    }
    case kDelete: {
      delete operation_.delete__;
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_NOT_SET;
}


void Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.Mutation)
  clear_operation();
}

bool Mutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.Mutation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.spanner.v1.Mutation.Write insert = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.Mutation.Write update = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.Mutation.Write insert_or_update = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insert_or_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.Mutation.Write replace = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.Mutation.Delete delete = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.Mutation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.Mutation)
  return false;
#undef DO_
}

void Mutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.Mutation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.spanner.v1.Mutation.Write insert = 1;
  if (has_insert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *operation_.insert_, output);
  }

  // .google.spanner.v1.Mutation.Write update = 2;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *operation_.update_, output);
  }

  // .google.spanner.v1.Mutation.Write insert_or_update = 3;
  if (has_insert_or_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *operation_.insert_or_update_, output);
  }

  // .google.spanner.v1.Mutation.Write replace = 4;
  if (has_replace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *operation_.replace_, output);
  }

  // .google.spanner.v1.Mutation.Delete delete = 5;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *operation_.delete__, output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.v1.Mutation)
}

::google::protobuf::uint8* Mutation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.Mutation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.spanner.v1.Mutation.Write insert = 1;
  if (has_insert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *operation_.insert_, deterministic, target);
  }

  // .google.spanner.v1.Mutation.Write update = 2;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *operation_.update_, deterministic, target);
  }

  // .google.spanner.v1.Mutation.Write insert_or_update = 3;
  if (has_insert_or_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *operation_.insert_or_update_, deterministic, target);
  }

  // .google.spanner.v1.Mutation.Write replace = 4;
  if (has_replace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *operation_.replace_, deterministic, target);
  }

  // .google.spanner.v1.Mutation.Delete delete = 5;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *operation_.delete__, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.Mutation)
  return target;
}

size_t Mutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.Mutation)
  size_t total_size = 0;

  switch (operation_case()) {
    // .google.spanner.v1.Mutation.Write insert = 1;
    case kInsert: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.insert_);
      break;
    }
    // .google.spanner.v1.Mutation.Write update = 2;
    case kUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.update_);
      break;
    }
    // .google.spanner.v1.Mutation.Write insert_or_update = 3;
    case kInsertOrUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.insert_or_update_);
      break;
    }
    // .google.spanner.v1.Mutation.Write replace = 4;
    case kReplace: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.replace_);
      break;
    }
    // .google.spanner.v1.Mutation.Delete delete = 5;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *operation_.delete__);
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  const Mutation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.Mutation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.Mutation)
    MergeFrom(*source);
  }
}

void Mutation::MergeFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.operation_case()) {
    case kInsert: {
      mutable_insert()->::google::spanner::v1::Mutation_Write::MergeFrom(from.insert());
      break;
    }
    case kUpdate: {
      mutable_update()->::google::spanner::v1::Mutation_Write::MergeFrom(from.update());
      break;
    }
    case kInsertOrUpdate: {
      mutable_insert_or_update()->::google::spanner::v1::Mutation_Write::MergeFrom(from.insert_or_update());
      break;
    }
    case kReplace: {
      mutable_replace()->::google::spanner::v1::Mutation_Write::MergeFrom(from.replace());
      break;
    }
    case kDelete: {
      mutable_delete_()->::google::spanner::v1::Mutation_Delete::MergeFrom(from.delete_());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
}

void Mutation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation::CopyFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutation::IsInitialized() const {
  return true;
}

void Mutation::Swap(Mutation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation::InternalSwap(Mutation* other) {
  std::swap(operation_, other->operation_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fmutation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fmutation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mutation

// .google.spanner.v1.Mutation.Write insert = 1;
bool Mutation::has_insert() const {
  return operation_case() == kInsert;
}
void Mutation::set_has_insert() {
  _oneof_case_[0] = kInsert;
}
void Mutation::clear_insert() {
  if (has_insert()) {
    delete operation_.insert_;
    clear_has_operation();
  }
}
 const ::google::spanner::v1::Mutation_Write& Mutation::insert() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.insert)
  return has_insert()
      ? *operation_.insert_
      : ::google::spanner::v1::Mutation_Write::default_instance();
}
::google::spanner::v1::Mutation_Write* Mutation::mutable_insert() {
  if (!has_insert()) {
    clear_operation();
    set_has_insert();
    operation_.insert_ = new ::google::spanner::v1::Mutation_Write;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.insert)
  return operation_.insert_;
}
::google::spanner::v1::Mutation_Write* Mutation::release_insert() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.insert)
  if (has_insert()) {
    clear_has_operation();
    ::google::spanner::v1::Mutation_Write* temp = operation_.insert_;
    operation_.insert_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_insert(::google::spanner::v1::Mutation_Write* insert) {
  clear_operation();
  if (insert) {
    set_has_insert();
    operation_.insert_ = insert;
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Mutation.insert)
}

// .google.spanner.v1.Mutation.Write update = 2;
bool Mutation::has_update() const {
  return operation_case() == kUpdate;
}
void Mutation::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
void Mutation::clear_update() {
  if (has_update()) {
    delete operation_.update_;
    clear_has_operation();
  }
}
 const ::google::spanner::v1::Mutation_Write& Mutation::update() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.update)
  return has_update()
      ? *operation_.update_
      : ::google::spanner::v1::Mutation_Write::default_instance();
}
::google::spanner::v1::Mutation_Write* Mutation::mutable_update() {
  if (!has_update()) {
    clear_operation();
    set_has_update();
    operation_.update_ = new ::google::spanner::v1::Mutation_Write;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.update)
  return operation_.update_;
}
::google::spanner::v1::Mutation_Write* Mutation::release_update() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.update)
  if (has_update()) {
    clear_has_operation();
    ::google::spanner::v1::Mutation_Write* temp = operation_.update_;
    operation_.update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_update(::google::spanner::v1::Mutation_Write* update) {
  clear_operation();
  if (update) {
    set_has_update();
    operation_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Mutation.update)
}

// .google.spanner.v1.Mutation.Write insert_or_update = 3;
bool Mutation::has_insert_or_update() const {
  return operation_case() == kInsertOrUpdate;
}
void Mutation::set_has_insert_or_update() {
  _oneof_case_[0] = kInsertOrUpdate;
}
void Mutation::clear_insert_or_update() {
  if (has_insert_or_update()) {
    delete operation_.insert_or_update_;
    clear_has_operation();
  }
}
 const ::google::spanner::v1::Mutation_Write& Mutation::insert_or_update() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.insert_or_update)
  return has_insert_or_update()
      ? *operation_.insert_or_update_
      : ::google::spanner::v1::Mutation_Write::default_instance();
}
::google::spanner::v1::Mutation_Write* Mutation::mutable_insert_or_update() {
  if (!has_insert_or_update()) {
    clear_operation();
    set_has_insert_or_update();
    operation_.insert_or_update_ = new ::google::spanner::v1::Mutation_Write;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.insert_or_update)
  return operation_.insert_or_update_;
}
::google::spanner::v1::Mutation_Write* Mutation::release_insert_or_update() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.insert_or_update)
  if (has_insert_or_update()) {
    clear_has_operation();
    ::google::spanner::v1::Mutation_Write* temp = operation_.insert_or_update_;
    operation_.insert_or_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_insert_or_update(::google::spanner::v1::Mutation_Write* insert_or_update) {
  clear_operation();
  if (insert_or_update) {
    set_has_insert_or_update();
    operation_.insert_or_update_ = insert_or_update;
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Mutation.insert_or_update)
}

// .google.spanner.v1.Mutation.Write replace = 4;
bool Mutation::has_replace() const {
  return operation_case() == kReplace;
}
void Mutation::set_has_replace() {
  _oneof_case_[0] = kReplace;
}
void Mutation::clear_replace() {
  if (has_replace()) {
    delete operation_.replace_;
    clear_has_operation();
  }
}
 const ::google::spanner::v1::Mutation_Write& Mutation::replace() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.replace)
  return has_replace()
      ? *operation_.replace_
      : ::google::spanner::v1::Mutation_Write::default_instance();
}
::google::spanner::v1::Mutation_Write* Mutation::mutable_replace() {
  if (!has_replace()) {
    clear_operation();
    set_has_replace();
    operation_.replace_ = new ::google::spanner::v1::Mutation_Write;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.replace)
  return operation_.replace_;
}
::google::spanner::v1::Mutation_Write* Mutation::release_replace() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.replace)
  if (has_replace()) {
    clear_has_operation();
    ::google::spanner::v1::Mutation_Write* temp = operation_.replace_;
    operation_.replace_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_replace(::google::spanner::v1::Mutation_Write* replace) {
  clear_operation();
  if (replace) {
    set_has_replace();
    operation_.replace_ = replace;
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Mutation.replace)
}

// .google.spanner.v1.Mutation.Delete delete = 5;
bool Mutation::has_delete_() const {
  return operation_case() == kDelete;
}
void Mutation::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
void Mutation::clear_delete_() {
  if (has_delete_()) {
    delete operation_.delete__;
    clear_has_operation();
  }
}
 const ::google::spanner::v1::Mutation_Delete& Mutation::delete_() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.Mutation.delete)
  return has_delete_()
      ? *operation_.delete__
      : ::google::spanner::v1::Mutation_Delete::default_instance();
}
::google::spanner::v1::Mutation_Delete* Mutation::mutable_delete_() {
  if (!has_delete_()) {
    clear_operation();
    set_has_delete_();
    operation_.delete__ = new ::google::spanner::v1::Mutation_Delete;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.Mutation.delete)
  return operation_.delete__;
}
::google::spanner::v1::Mutation_Delete* Mutation::release_delete_() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.Mutation.delete)
  if (has_delete_()) {
    clear_has_operation();
    ::google::spanner::v1::Mutation_Delete* temp = operation_.delete__;
    operation_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mutation::set_allocated_delete_(::google::spanner::v1::Mutation_Delete* delete_) {
  clear_operation();
  if (delete_) {
    set_has_delete_();
    operation_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.Mutation.delete)
}

bool Mutation::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
void Mutation::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
Mutation::OperationCase Mutation::operation_case() const {
  return Mutation::OperationCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace spanner
}  // namespace google

// @@protoc_insertion_point(global_scope)
