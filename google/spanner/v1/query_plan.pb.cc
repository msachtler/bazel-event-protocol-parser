// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/query_plan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/spanner/v1/query_plan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace spanner {
namespace v1 {
class PlanNode_ChildLinkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanNode_ChildLink> {
} _PlanNode_ChildLink_default_instance_;
class PlanNode_ShortRepresentation_SubqueriesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanNode_ShortRepresentation::PlanNode_ShortRepresentation_SubqueriesEntry> {
} _PlanNode_ShortRepresentation_SubqueriesEntry_default_instance_;
class PlanNode_ShortRepresentationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanNode_ShortRepresentation> {
} _PlanNode_ShortRepresentation_default_instance_;
class PlanNodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanNode> {
} _PlanNode_default_instance_;
class QueryPlanDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryPlan> {
} _QueryPlan_default_instance_;

namespace protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode_ChildLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode_ChildLink, child_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode_ChildLink, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode_ChildLink, variable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode_ShortRepresentation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode_ShortRepresentation, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode_ShortRepresentation, subqueries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode, child_links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode, short_representation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanNode, execution_stats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlan, plan_nodes_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PlanNode_ChildLink)},
  { 8, -1, sizeof(PlanNode_ShortRepresentation)},
  { 15, -1, sizeof(PlanNode)},
  { 27, -1, sizeof(QueryPlan)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanNode_ChildLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanNode_ShortRepresentation_SubqueriesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanNode_ShortRepresentation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryPlan_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/spanner/v1/query_plan.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[1].reflection = PlanNode_ShortRepresentation::PlanNode_ShortRepresentation_SubqueriesEntry::CreateReflection(file_level_metadata[1].descriptor, _PlanNode_ShortRepresentation_SubqueriesEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _PlanNode_ChildLink_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PlanNode_ShortRepresentation_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PlanNode_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _QueryPlan_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaults();
  _PlanNode_ChildLink_default_instance_.DefaultConstruct();
  _PlanNode_ShortRepresentation_SubqueriesEntry_default_instance_.DefaultConstruct();
  _PlanNode_ShortRepresentation_default_instance_.DefaultConstruct();
  _PlanNode_default_instance_.DefaultConstruct();
  _QueryPlan_default_instance_.DefaultConstruct();
  _PlanNode_ShortRepresentation_SubqueriesEntry_default_instance_.get_mutable()->set_default_instance(_PlanNode_ShortRepresentation_SubqueriesEntry_default_instance_.get_mutable());
  _PlanNode_ShortRepresentation_SubqueriesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _PlanNode_default_instance_.get_mutable()->short_representation_ = const_cast< ::google::spanner::v1::PlanNode_ShortRepresentation*>(
      ::google::spanner::v1::PlanNode_ShortRepresentation::internal_default_instance());
  _PlanNode_default_instance_.get_mutable()->metadata_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  _PlanNode_default_instance_.get_mutable()->execution_stats_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\"google/spanner/v1/query_plan.proto\022\021go"
      "ogle.spanner.v1\032\034google/api/annotations."
      "proto\032\034google/protobuf/struct.proto\"\370\004\n\010"
      "PlanNode\022\r\n\005index\030\001 \001(\005\022.\n\004kind\030\002 \001(\0162 ."
      "google.spanner.v1.PlanNode.Kind\022\024\n\014displ"
      "ay_name\030\003 \001(\t\022:\n\013child_links\030\004 \003(\0132%.goo"
      "gle.spanner.v1.PlanNode.ChildLink\022M\n\024sho"
      "rt_representation\030\005 \001(\0132/.google.spanner"
      ".v1.PlanNode.ShortRepresentation\022)\n\010meta"
      "data\030\006 \001(\0132\027.google.protobuf.Struct\0220\n\017e"
      "xecution_stats\030\007 \001(\0132\027.google.protobuf.S"
      "truct\032@\n\tChildLink\022\023\n\013child_index\030\001 \001(\005\022"
      "\014\n\004type\030\002 \001(\t\022\020\n\010variable\030\003 \001(\t\032\262\001\n\023Shor"
      "tRepresentation\022\023\n\013description\030\001 \001(\t\022S\n\n"
      "subqueries\030\002 \003(\0132\?.google.spanner.v1.Pla"
      "nNode.ShortRepresentation.SubqueriesEntr"
      "y\0321\n\017SubqueriesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
      "ue\030\002 \001(\005:\0028\001\"8\n\004Kind\022\024\n\020KIND_UNSPECIFIED"
      "\020\000\022\016\n\nRELATIONAL\020\001\022\n\n\006SCALAR\020\002\"<\n\tQueryP"
      "lan\022/\n\nplan_nodes\030\001 \003(\0132\033.google.spanner"
      ".v1.PlanNodeB}\n\025com.google.spanner.v1B\016Q"
      "ueryPlanProtoP\001Z8google.golang.org/genpr"
      "oto/googleapis/spanner/v1;spanner\252\002\027Goog"
      "le.Cloud.Spanner.V1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 947);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/spanner/v1/query_plan.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto

const ::google::protobuf::EnumDescriptor* PlanNode_Kind_descriptor() {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::file_level_enum_descriptors[0];
}
bool PlanNode_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlanNode_Kind PlanNode::KIND_UNSPECIFIED;
const PlanNode_Kind PlanNode::RELATIONAL;
const PlanNode_Kind PlanNode::SCALAR;
const PlanNode_Kind PlanNode::Kind_MIN;
const PlanNode_Kind PlanNode::Kind_MAX;
const int PlanNode::Kind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanNode_ChildLink::kChildIndexFieldNumber;
const int PlanNode_ChildLink::kTypeFieldNumber;
const int PlanNode_ChildLink::kVariableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanNode_ChildLink::PlanNode_ChildLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.PlanNode.ChildLink)
}
PlanNode_ChildLink::PlanNode_ChildLink(const PlanNode_ChildLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  variable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.variable().size() > 0) {
    variable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  child_index_ = from.child_index_;
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.PlanNode.ChildLink)
}

void PlanNode_ChildLink::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_index_ = 0;
  _cached_size_ = 0;
}

PlanNode_ChildLink::~PlanNode_ChildLink() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.PlanNode.ChildLink)
  SharedDtor();
}

void PlanNode_ChildLink::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variable_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlanNode_ChildLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanNode_ChildLink::descriptor() {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanNode_ChildLink& PlanNode_ChildLink::default_instance() {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanNode_ChildLink* PlanNode_ChildLink::New(::google::protobuf::Arena* arena) const {
  PlanNode_ChildLink* n = new PlanNode_ChildLink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanNode_ChildLink::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.PlanNode.ChildLink)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_index_ = 0;
}

bool PlanNode_ChildLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.PlanNode.ChildLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 child_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.PlanNode.ChildLink.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string variable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variable()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->variable().data(), this->variable().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.PlanNode.ChildLink.variable"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.PlanNode.ChildLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.PlanNode.ChildLink)
  return false;
#undef DO_
}

void PlanNode_ChildLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.PlanNode.ChildLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 child_index = 1;
  if (this->child_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->child_index(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.PlanNode.ChildLink.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // string variable = 3;
  if (this->variable().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variable().data(), this->variable().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.PlanNode.ChildLink.variable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->variable(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.v1.PlanNode.ChildLink)
}

::google::protobuf::uint8* PlanNode_ChildLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.PlanNode.ChildLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 child_index = 1;
  if (this->child_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->child_index(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.PlanNode.ChildLink.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // string variable = 3;
  if (this->variable().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->variable().data(), this->variable().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.PlanNode.ChildLink.variable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->variable(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.PlanNode.ChildLink)
  return target;
}

size_t PlanNode_ChildLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.PlanNode.ChildLink)
  size_t total_size = 0;

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string variable = 3;
  if (this->variable().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->variable());
  }

  // int32 child_index = 1;
  if (this->child_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->child_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanNode_ChildLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.PlanNode.ChildLink)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanNode_ChildLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanNode_ChildLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.PlanNode.ChildLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.PlanNode.ChildLink)
    MergeFrom(*source);
  }
}

void PlanNode_ChildLink::MergeFrom(const PlanNode_ChildLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.PlanNode.ChildLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.variable().size() > 0) {

    variable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.variable_);
  }
  if (from.child_index() != 0) {
    set_child_index(from.child_index());
  }
}

void PlanNode_ChildLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.PlanNode.ChildLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanNode_ChildLink::CopyFrom(const PlanNode_ChildLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.PlanNode.ChildLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanNode_ChildLink::IsInitialized() const {
  return true;
}

void PlanNode_ChildLink::Swap(PlanNode_ChildLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanNode_ChildLink::InternalSwap(PlanNode_ChildLink* other) {
  type_.Swap(&other->type_);
  variable_.Swap(&other->variable_);
  std::swap(child_index_, other->child_index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanNode_ChildLink::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanNode_ChildLink

// int32 child_index = 1;
void PlanNode_ChildLink::clear_child_index() {
  child_index_ = 0;
}
::google::protobuf::int32 PlanNode_ChildLink::child_index() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.ChildLink.child_index)
  return child_index_;
}
void PlanNode_ChildLink::set_child_index(::google::protobuf::int32 value) {
  
  child_index_ = value;
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.ChildLink.child_index)
}

// string type = 2;
void PlanNode_ChildLink::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlanNode_ChildLink::type() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.ChildLink.type)
  return type_.GetNoArena();
}
void PlanNode_ChildLink::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.ChildLink.type)
}
#if LANG_CXX11
void PlanNode_ChildLink::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.PlanNode.ChildLink.type)
}
#endif
void PlanNode_ChildLink::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.PlanNode.ChildLink.type)
}
void PlanNode_ChildLink::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.PlanNode.ChildLink.type)
}
::std::string* PlanNode_ChildLink::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.ChildLink.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlanNode_ChildLink::release_type() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.ChildLink.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlanNode_ChildLink::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.ChildLink.type)
}

// string variable = 3;
void PlanNode_ChildLink::clear_variable() {
  variable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlanNode_ChildLink::variable() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.ChildLink.variable)
  return variable_.GetNoArena();
}
void PlanNode_ChildLink::set_variable(const ::std::string& value) {
  
  variable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.ChildLink.variable)
}
#if LANG_CXX11
void PlanNode_ChildLink::set_variable(::std::string&& value) {
  
  variable_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.PlanNode.ChildLink.variable)
}
#endif
void PlanNode_ChildLink::set_variable(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  variable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.PlanNode.ChildLink.variable)
}
void PlanNode_ChildLink::set_variable(const char* value, size_t size) {
  
  variable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.PlanNode.ChildLink.variable)
}
::std::string* PlanNode_ChildLink::mutable_variable() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.ChildLink.variable)
  return variable_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlanNode_ChildLink::release_variable() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.ChildLink.variable)
  
  return variable_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlanNode_ChildLink::set_allocated_variable(::std::string* variable) {
  if (variable != NULL) {
    
  } else {
    
  }
  variable_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variable);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.ChildLink.variable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

PlanNode_ShortRepresentation::PlanNode_ShortRepresentation_SubqueriesEntry::PlanNode_ShortRepresentation_SubqueriesEntry() {}
PlanNode_ShortRepresentation::PlanNode_ShortRepresentation_SubqueriesEntry::PlanNode_ShortRepresentation_SubqueriesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata PlanNode_ShortRepresentation::PlanNode_ShortRepresentation_SubqueriesEntry::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::file_level_metadata[1];
}
void PlanNode_ShortRepresentation::PlanNode_ShortRepresentation_SubqueriesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void PlanNode_ShortRepresentation::PlanNode_ShortRepresentation_SubqueriesEntry::MergeFrom(const PlanNode_ShortRepresentation_SubqueriesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanNode_ShortRepresentation::kDescriptionFieldNumber;
const int PlanNode_ShortRepresentation::kSubqueriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanNode_ShortRepresentation::PlanNode_ShortRepresentation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.PlanNode.ShortRepresentation)
}
PlanNode_ShortRepresentation::PlanNode_ShortRepresentation(const PlanNode_ShortRepresentation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subqueries_.MergeFrom(from.subqueries_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.PlanNode.ShortRepresentation)
}

void PlanNode_ShortRepresentation::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PlanNode_ShortRepresentation::~PlanNode_ShortRepresentation() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.PlanNode.ShortRepresentation)
  SharedDtor();
}

void PlanNode_ShortRepresentation::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlanNode_ShortRepresentation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanNode_ShortRepresentation::descriptor() {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanNode_ShortRepresentation& PlanNode_ShortRepresentation::default_instance() {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanNode_ShortRepresentation* PlanNode_ShortRepresentation::New(::google::protobuf::Arena* arena) const {
  PlanNode_ShortRepresentation* n = new PlanNode_ShortRepresentation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanNode_ShortRepresentation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.PlanNode.ShortRepresentation)
  subqueries_.Clear();
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PlanNode_ShortRepresentation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.PlanNode.ShortRepresentation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.PlanNode.ShortRepresentation.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> subqueries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          PlanNode_ShortRepresentation_SubqueriesEntry::Parser< ::google::protobuf::internal::MapField<
              PlanNode_ShortRepresentation_SubqueriesEntry,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&subqueries_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.PlanNode.ShortRepresentation.SubqueriesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.PlanNode.ShortRepresentation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.PlanNode.ShortRepresentation)
  return false;
#undef DO_
}

void PlanNode_ShortRepresentation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.PlanNode.ShortRepresentation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.PlanNode.ShortRepresentation.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // map<string, int32> subqueries = 2;
  if (!this->subqueries().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.spanner.v1.PlanNode.ShortRepresentation.SubqueriesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->subqueries().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->subqueries().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->subqueries().begin();
          it != this->subqueries().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PlanNode_ShortRepresentation_SubqueriesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(subqueries_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PlanNode_ShortRepresentation_SubqueriesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->subqueries().begin();
          it != this->subqueries().end(); ++it) {
        entry.reset(subqueries_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.v1.PlanNode.ShortRepresentation)
}

::google::protobuf::uint8* PlanNode_ShortRepresentation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.PlanNode.ShortRepresentation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.PlanNode.ShortRepresentation.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // map<string, int32> subqueries = 2;
  if (!this->subqueries().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.spanner.v1.PlanNode.ShortRepresentation.SubqueriesEntry.key");
      }
    };

    if (deterministic &&
        this->subqueries().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->subqueries().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->subqueries().begin();
          it != this->subqueries().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<PlanNode_ShortRepresentation_SubqueriesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(subqueries_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PlanNode_ShortRepresentation_SubqueriesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->subqueries().begin();
          it != this->subqueries().end(); ++it) {
        entry.reset(subqueries_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.PlanNode.ShortRepresentation)
  return target;
}

size_t PlanNode_ShortRepresentation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.PlanNode.ShortRepresentation)
  size_t total_size = 0;

  // map<string, int32> subqueries = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subqueries_size());
  {
    ::google::protobuf::scoped_ptr<PlanNode_ShortRepresentation_SubqueriesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->subqueries().begin();
        it != this->subqueries().end(); ++it) {
      entry.reset(subqueries_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanNode_ShortRepresentation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.PlanNode.ShortRepresentation)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanNode_ShortRepresentation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanNode_ShortRepresentation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.PlanNode.ShortRepresentation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.PlanNode.ShortRepresentation)
    MergeFrom(*source);
  }
}

void PlanNode_ShortRepresentation::MergeFrom(const PlanNode_ShortRepresentation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.PlanNode.ShortRepresentation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subqueries_.MergeFrom(from.subqueries_);
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void PlanNode_ShortRepresentation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.PlanNode.ShortRepresentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanNode_ShortRepresentation::CopyFrom(const PlanNode_ShortRepresentation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.PlanNode.ShortRepresentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanNode_ShortRepresentation::IsInitialized() const {
  return true;
}

void PlanNode_ShortRepresentation::Swap(PlanNode_ShortRepresentation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanNode_ShortRepresentation::InternalSwap(PlanNode_ShortRepresentation* other) {
  subqueries_.Swap(&other->subqueries_);
  description_.Swap(&other->description_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanNode_ShortRepresentation::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanNode_ShortRepresentation

// string description = 1;
void PlanNode_ShortRepresentation::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlanNode_ShortRepresentation::description() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.ShortRepresentation.description)
  return description_.GetNoArena();
}
void PlanNode_ShortRepresentation::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.ShortRepresentation.description)
}
#if LANG_CXX11
void PlanNode_ShortRepresentation::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.PlanNode.ShortRepresentation.description)
}
#endif
void PlanNode_ShortRepresentation::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.PlanNode.ShortRepresentation.description)
}
void PlanNode_ShortRepresentation::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.PlanNode.ShortRepresentation.description)
}
::std::string* PlanNode_ShortRepresentation::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.ShortRepresentation.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlanNode_ShortRepresentation::release_description() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.ShortRepresentation.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlanNode_ShortRepresentation::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.ShortRepresentation.description)
}

// map<string, int32> subqueries = 2;
int PlanNode_ShortRepresentation::subqueries_size() const {
  return subqueries_.size();
}
void PlanNode_ShortRepresentation::clear_subqueries() {
  subqueries_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
PlanNode_ShortRepresentation::subqueries() const {
  // @@protoc_insertion_point(field_map:google.spanner.v1.PlanNode.ShortRepresentation.subqueries)
  return subqueries_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
PlanNode_ShortRepresentation::mutable_subqueries() {
  // @@protoc_insertion_point(field_mutable_map:google.spanner.v1.PlanNode.ShortRepresentation.subqueries)
  return subqueries_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanNode::kIndexFieldNumber;
const int PlanNode::kKindFieldNumber;
const int PlanNode::kDisplayNameFieldNumber;
const int PlanNode::kChildLinksFieldNumber;
const int PlanNode::kShortRepresentationFieldNumber;
const int PlanNode::kMetadataFieldNumber;
const int PlanNode::kExecutionStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanNode::PlanNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.PlanNode)
}
PlanNode::PlanNode(const PlanNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      child_links_(from.child_links_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.has_short_representation()) {
    short_representation_ = new ::google::spanner::v1::PlanNode_ShortRepresentation(*from.short_representation_);
  } else {
    short_representation_ = NULL;
  }
  if (from.has_metadata()) {
    metadata_ = new ::google::protobuf::Struct(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  if (from.has_execution_stats()) {
    execution_stats_ = new ::google::protobuf::Struct(*from.execution_stats_);
  } else {
    execution_stats_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&index_) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.PlanNode)
}

void PlanNode::SharedCtor() {
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&short_representation_, 0, reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&short_representation_) + sizeof(kind_));
  _cached_size_ = 0;
}

PlanNode::~PlanNode() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.PlanNode)
  SharedDtor();
}

void PlanNode::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete short_representation_;
  }
  if (this != internal_default_instance()) {
    delete metadata_;
  }
  if (this != internal_default_instance()) {
    delete execution_stats_;
  }
}

void PlanNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanNode::descriptor() {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanNode& PlanNode::default_instance() {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanNode* PlanNode::New(::google::protobuf::Arena* arena) const {
  PlanNode* n = new PlanNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanNode::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.PlanNode)
  child_links_.Clear();
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && short_representation_ != NULL) {
    delete short_representation_;
  }
  short_representation_ = NULL;
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && execution_stats_ != NULL) {
    delete execution_stats_;
  }
  execution_stats_ = NULL;
  ::memset(&index_, 0, reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&index_) + sizeof(kind_));
}

bool PlanNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.PlanNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.PlanNode.Kind kind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::google::spanner::v1::PlanNode_Kind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.PlanNode.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.spanner.v1.PlanNode.ChildLink child_links = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.PlanNode.ShortRepresentation short_representation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_short_representation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct metadata = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct execution_stats = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_execution_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.PlanNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.PlanNode)
  return false;
#undef DO_
}

void PlanNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.PlanNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // .google.spanner.v1.PlanNode.Kind kind = 2;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kind(), output);
  }

  // string display_name = 3;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.PlanNode.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->display_name(), output);
  }

  // repeated .google.spanner.v1.PlanNode.ChildLink child_links = 4;
  for (unsigned int i = 0, n = this->child_links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->child_links(i), output);
  }

  // .google.spanner.v1.PlanNode.ShortRepresentation short_representation = 5;
  if (this->has_short_representation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->short_representation_, output);
  }

  // .google.protobuf.Struct metadata = 6;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->metadata_, output);
  }

  // .google.protobuf.Struct execution_stats = 7;
  if (this->has_execution_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->execution_stats_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.v1.PlanNode)
}

::google::protobuf::uint8* PlanNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.PlanNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // .google.spanner.v1.PlanNode.Kind kind = 2;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kind(), target);
  }

  // string display_name = 3;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.PlanNode.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->display_name(), target);
  }

  // repeated .google.spanner.v1.PlanNode.ChildLink child_links = 4;
  for (unsigned int i = 0, n = this->child_links_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->child_links(i), deterministic, target);
  }

  // .google.spanner.v1.PlanNode.ShortRepresentation short_representation = 5;
  if (this->has_short_representation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->short_representation_, deterministic, target);
  }

  // .google.protobuf.Struct metadata = 6;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->metadata_, deterministic, target);
  }

  // .google.protobuf.Struct execution_stats = 7;
  if (this->has_execution_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->execution_stats_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.PlanNode)
  return target;
}

size_t PlanNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.PlanNode)
  size_t total_size = 0;

  // repeated .google.spanner.v1.PlanNode.ChildLink child_links = 4;
  {
    unsigned int count = this->child_links_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->child_links(i));
    }
  }

  // string display_name = 3;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // .google.spanner.v1.PlanNode.ShortRepresentation short_representation = 5;
  if (this->has_short_representation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->short_representation_);
  }

  // .google.protobuf.Struct metadata = 6;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // .google.protobuf.Struct execution_stats = 7;
  if (this->has_execution_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->execution_stats_);
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // .google.spanner.v1.PlanNode.Kind kind = 2;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.PlanNode)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.PlanNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.PlanNode)
    MergeFrom(*source);
  }
}

void PlanNode::MergeFrom(const PlanNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.PlanNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_links_.MergeFrom(from.child_links_);
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.has_short_representation()) {
    mutable_short_representation()->::google::spanner::v1::PlanNode_ShortRepresentation::MergeFrom(from.short_representation());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::google::protobuf::Struct::MergeFrom(from.metadata());
  }
  if (from.has_execution_stats()) {
    mutable_execution_stats()->::google::protobuf::Struct::MergeFrom(from.execution_stats());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
}

void PlanNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.PlanNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanNode::CopyFrom(const PlanNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.PlanNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanNode::IsInitialized() const {
  return true;
}

void PlanNode::Swap(PlanNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanNode::InternalSwap(PlanNode* other) {
  child_links_.InternalSwap(&other->child_links_);
  display_name_.Swap(&other->display_name_);
  std::swap(short_representation_, other->short_representation_);
  std::swap(metadata_, other->metadata_);
  std::swap(execution_stats_, other->execution_stats_);
  std::swap(index_, other->index_);
  std::swap(kind_, other->kind_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanNode::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanNode

// int32 index = 1;
void PlanNode::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 PlanNode::index() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.index)
  return index_;
}
void PlanNode::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.index)
}

// .google.spanner.v1.PlanNode.Kind kind = 2;
void PlanNode::clear_kind() {
  kind_ = 0;
}
::google::spanner::v1::PlanNode_Kind PlanNode::kind() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.kind)
  return static_cast< ::google::spanner::v1::PlanNode_Kind >(kind_);
}
void PlanNode::set_kind(::google::spanner::v1::PlanNode_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.kind)
}

// string display_name = 3;
void PlanNode::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlanNode::display_name() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.display_name)
  return display_name_.GetNoArena();
}
void PlanNode::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.v1.PlanNode.display_name)
}
#if LANG_CXX11
void PlanNode::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.v1.PlanNode.display_name)
}
#endif
void PlanNode::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.v1.PlanNode.display_name)
}
void PlanNode::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.v1.PlanNode.display_name)
}
::std::string* PlanNode::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlanNode::release_display_name() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlanNode::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.display_name)
}

// repeated .google.spanner.v1.PlanNode.ChildLink child_links = 4;
int PlanNode::child_links_size() const {
  return child_links_.size();
}
void PlanNode::clear_child_links() {
  child_links_.Clear();
}
const ::google::spanner::v1::PlanNode_ChildLink& PlanNode::child_links(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.child_links)
  return child_links_.Get(index);
}
::google::spanner::v1::PlanNode_ChildLink* PlanNode::mutable_child_links(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.child_links)
  return child_links_.Mutable(index);
}
::google::spanner::v1::PlanNode_ChildLink* PlanNode::add_child_links() {
  // @@protoc_insertion_point(field_add:google.spanner.v1.PlanNode.child_links)
  return child_links_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode_ChildLink >*
PlanNode::mutable_child_links() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.PlanNode.child_links)
  return &child_links_;
}
const ::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode_ChildLink >&
PlanNode::child_links() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.PlanNode.child_links)
  return child_links_;
}

// .google.spanner.v1.PlanNode.ShortRepresentation short_representation = 5;
bool PlanNode::has_short_representation() const {
  return this != internal_default_instance() && short_representation_ != NULL;
}
void PlanNode::clear_short_representation() {
  if (GetArenaNoVirtual() == NULL && short_representation_ != NULL) delete short_representation_;
  short_representation_ = NULL;
}
const ::google::spanner::v1::PlanNode_ShortRepresentation& PlanNode::short_representation() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.short_representation)
  return short_representation_ != NULL ? *short_representation_
                         : *::google::spanner::v1::PlanNode_ShortRepresentation::internal_default_instance();
}
::google::spanner::v1::PlanNode_ShortRepresentation* PlanNode::mutable_short_representation() {
  
  if (short_representation_ == NULL) {
    short_representation_ = new ::google::spanner::v1::PlanNode_ShortRepresentation;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.short_representation)
  return short_representation_;
}
::google::spanner::v1::PlanNode_ShortRepresentation* PlanNode::release_short_representation() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.short_representation)
  
  ::google::spanner::v1::PlanNode_ShortRepresentation* temp = short_representation_;
  short_representation_ = NULL;
  return temp;
}
void PlanNode::set_allocated_short_representation(::google::spanner::v1::PlanNode_ShortRepresentation* short_representation) {
  delete short_representation_;
  short_representation_ = short_representation;
  if (short_representation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.short_representation)
}

// .google.protobuf.Struct metadata = 6;
bool PlanNode::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
void PlanNode::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::google::protobuf::Struct& PlanNode::metadata() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::google::protobuf::Struct::internal_default_instance();
}
::google::protobuf::Struct* PlanNode::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.metadata)
  return metadata_;
}
::google::protobuf::Struct* PlanNode::release_metadata() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.metadata)
  
  ::google::protobuf::Struct* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void PlanNode::set_allocated_metadata(::google::protobuf::Struct* metadata) {
  delete metadata_;
  if (metadata != NULL && metadata->GetArena() != NULL) {
    ::google::protobuf::Struct* new_metadata = new ::google::protobuf::Struct;
    new_metadata->CopyFrom(*metadata);
    metadata = new_metadata;
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.metadata)
}

// .google.protobuf.Struct execution_stats = 7;
bool PlanNode::has_execution_stats() const {
  return this != internal_default_instance() && execution_stats_ != NULL;
}
void PlanNode::clear_execution_stats() {
  if (GetArenaNoVirtual() == NULL && execution_stats_ != NULL) delete execution_stats_;
  execution_stats_ = NULL;
}
const ::google::protobuf::Struct& PlanNode::execution_stats() const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.PlanNode.execution_stats)
  return execution_stats_ != NULL ? *execution_stats_
                         : *::google::protobuf::Struct::internal_default_instance();
}
::google::protobuf::Struct* PlanNode::mutable_execution_stats() {
  
  if (execution_stats_ == NULL) {
    execution_stats_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.PlanNode.execution_stats)
  return execution_stats_;
}
::google::protobuf::Struct* PlanNode::release_execution_stats() {
  // @@protoc_insertion_point(field_release:google.spanner.v1.PlanNode.execution_stats)
  
  ::google::protobuf::Struct* temp = execution_stats_;
  execution_stats_ = NULL;
  return temp;
}
void PlanNode::set_allocated_execution_stats(::google::protobuf::Struct* execution_stats) {
  delete execution_stats_;
  if (execution_stats != NULL && execution_stats->GetArena() != NULL) {
    ::google::protobuf::Struct* new_execution_stats = new ::google::protobuf::Struct;
    new_execution_stats->CopyFrom(*execution_stats);
    execution_stats = new_execution_stats;
  }
  execution_stats_ = execution_stats;
  if (execution_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.PlanNode.execution_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryPlan::kPlanNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryPlan::QueryPlan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.QueryPlan)
}
QueryPlan::QueryPlan(const QueryPlan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      plan_nodes_(from.plan_nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.QueryPlan)
}

void QueryPlan::SharedCtor() {
  _cached_size_ = 0;
}

QueryPlan::~QueryPlan() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.QueryPlan)
  SharedDtor();
}

void QueryPlan::SharedDtor() {
}

void QueryPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPlan::descriptor() {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryPlan& QueryPlan::default_instance() {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryPlan* QueryPlan::New(::google::protobuf::Arena* arena) const {
  QueryPlan* n = new QueryPlan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.QueryPlan)
  plan_nodes_.Clear();
}

bool QueryPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.QueryPlan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.spanner.v1.PlanNode plan_nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plan_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.QueryPlan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.QueryPlan)
  return false;
#undef DO_
}

void QueryPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.QueryPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.spanner.v1.PlanNode plan_nodes = 1;
  for (unsigned int i = 0, n = this->plan_nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plan_nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.spanner.v1.QueryPlan)
}

::google::protobuf::uint8* QueryPlan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.QueryPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.spanner.v1.PlanNode plan_nodes = 1;
  for (unsigned int i = 0, n = this->plan_nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->plan_nodes(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.QueryPlan)
  return target;
}

size_t QueryPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.QueryPlan)
  size_t total_size = 0;

  // repeated .google.spanner.v1.PlanNode plan_nodes = 1;
  {
    unsigned int count = this->plan_nodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plan_nodes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPlan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.QueryPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPlan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryPlan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.QueryPlan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.QueryPlan)
    MergeFrom(*source);
  }
}

void QueryPlan::MergeFrom(const QueryPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.QueryPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plan_nodes_.MergeFrom(from.plan_nodes_);
}

void QueryPlan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.QueryPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPlan::CopyFrom(const QueryPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.QueryPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlan::IsInitialized() const {
  return true;
}

void QueryPlan::Swap(QueryPlan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryPlan::InternalSwap(QueryPlan* other) {
  plan_nodes_.InternalSwap(&other->plan_nodes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryPlan::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fquery_5fplan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryPlan

// repeated .google.spanner.v1.PlanNode plan_nodes = 1;
int QueryPlan::plan_nodes_size() const {
  return plan_nodes_.size();
}
void QueryPlan::clear_plan_nodes() {
  plan_nodes_.Clear();
}
const ::google::spanner::v1::PlanNode& QueryPlan::plan_nodes(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.v1.QueryPlan.plan_nodes)
  return plan_nodes_.Get(index);
}
::google::spanner::v1::PlanNode* QueryPlan::mutable_plan_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.v1.QueryPlan.plan_nodes)
  return plan_nodes_.Mutable(index);
}
::google::spanner::v1::PlanNode* QueryPlan::add_plan_nodes() {
  // @@protoc_insertion_point(field_add:google.spanner.v1.QueryPlan.plan_nodes)
  return plan_nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode >*
QueryPlan::mutable_plan_nodes() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.v1.QueryPlan.plan_nodes)
  return &plan_nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::google::spanner::v1::PlanNode >&
QueryPlan::plan_nodes() const {
  // @@protoc_insertion_point(field_list:google.spanner.v1.QueryPlan.plan_nodes)
  return plan_nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace spanner
}  // namespace google

// @@protoc_insertion_point(global_scope)
