// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/streetview/publish/v1/resources.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/streetview/publish/v1/resources.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace streetview {
namespace publish {
namespace v1 {
class UploadRefDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadRef> {
} _UploadRef_default_instance_;
class PhotoIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PhotoId> {
} _PhotoId_default_instance_;
class LevelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Level> {
} _Level_default_instance_;
class PoseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Pose> {
} _Pose_default_instance_;
class PlaceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Place> {
} _Place_default_instance_;
class ConnectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Connection> {
} _Connection_default_instance_;
class PhotoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Photo> {
} _Photo_default_instance_;

namespace protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRef, upload_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoId, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, lat_lng_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Place, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Place, place_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, photo_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, upload_reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, download_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, thumbnail_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, share_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, capture_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, places_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, view_count_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(UploadRef)},
  { 6, -1, sizeof(PhotoId)},
  { 12, -1, sizeof(Level)},
  { 19, -1, sizeof(Pose)},
  { 30, -1, sizeof(Place)},
  { 36, -1, sizeof(Connection)},
  { 42, -1, sizeof(Photo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UploadRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PhotoId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Level_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Place_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Connection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Photo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/streetview/publish/v1/resources.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _UploadRef_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PhotoId_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Level_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Pose_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Place_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Connection_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Photo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  ::google::type::protobuf_google_2ftype_2flatlng_2eproto::InitDefaults();
  _UploadRef_default_instance_.DefaultConstruct();
  _PhotoId_default_instance_.DefaultConstruct();
  _Level_default_instance_.DefaultConstruct();
  _Pose_default_instance_.DefaultConstruct();
  _Place_default_instance_.DefaultConstruct();
  _Connection_default_instance_.DefaultConstruct();
  _Photo_default_instance_.DefaultConstruct();
  _Pose_default_instance_.get_mutable()->lat_lng_pair_ = const_cast< ::google::type::LatLng*>(
      ::google::type::LatLng::internal_default_instance());
  _Pose_default_instance_.get_mutable()->level_ = const_cast< ::google::streetview::publish::v1::Level*>(
      ::google::streetview::publish::v1::Level::internal_default_instance());
  _Connection_default_instance_.get_mutable()->target_ = const_cast< ::google::streetview::publish::v1::PhotoId*>(
      ::google::streetview::publish::v1::PhotoId::internal_default_instance());
  _Photo_default_instance_.get_mutable()->photo_id_ = const_cast< ::google::streetview::publish::v1::PhotoId*>(
      ::google::streetview::publish::v1::PhotoId::internal_default_instance());
  _Photo_default_instance_.get_mutable()->upload_reference_ = const_cast< ::google::streetview::publish::v1::UploadRef*>(
      ::google::streetview::publish::v1::UploadRef::internal_default_instance());
  _Photo_default_instance_.get_mutable()->pose_ = const_cast< ::google::streetview::publish::v1::Pose*>(
      ::google::streetview::publish::v1::Pose::internal_default_instance());
  _Photo_default_instance_.get_mutable()->capture_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n,google/streetview/publish/v1/resources"
      ".proto\022\034google.streetview.publish.v1\032\034go"
      "ogle/api/annotations.proto\032\037google/proto"
      "buf/timestamp.proto\032\030google/type/latlng."
      "proto\"\037\n\tUploadRef\022\022\n\nupload_url\030\001 \001(\t\"\025"
      "\n\007PhotoId\022\n\n\002id\030\001 \001(\t\"%\n\005Level\022\016\n\006number"
      "\030\001 \001(\001\022\014\n\004name\030\002 \001(\t\"\245\001\n\004Pose\022)\n\014lat_lng"
      "_pair\030\001 \001(\0132\023.google.type.LatLng\022\020\n\010alti"
      "tude\030\002 \001(\001\022\017\n\007heading\030\003 \001(\001\022\r\n\005pitch\030\004 \001"
      "(\001\022\014\n\004roll\030\005 \001(\001\0222\n\005level\030\007 \001(\0132#.google"
      ".streetview.publish.v1.Level\"\031\n\005Place\022\020\n"
      "\010place_id\030\001 \001(\t\"C\n\nConnection\0225\n\006target\030"
      "\001 \001(\0132%.google.streetview.publish.v1.Pho"
      "toId\"\260\003\n\005Photo\0227\n\010photo_id\030\001 \001(\0132%.googl"
      "e.streetview.publish.v1.PhotoId\022A\n\020uploa"
      "d_reference\030\002 \001(\0132\'.google.streetview.pu"
      "blish.v1.UploadRef\022\024\n\014download_url\030\003 \001(\t"
      "\022\025\n\rthumbnail_url\030\t \001(\t\022\022\n\nshare_link\030\013 "
      "\001(\t\0220\n\004pose\030\004 \001(\0132\".google.streetview.pu"
      "blish.v1.Pose\022=\n\013connections\030\005 \003(\0132(.goo"
      "gle.streetview.publish.v1.Connection\0220\n\014"
      "capture_time\030\006 \001(\0132\032.google.protobuf.Tim"
      "estamp\0223\n\006places\030\007 \003(\0132#.google.streetvi"
      "ew.publish.v1.Place\022\022\n\nview_count\030\n \001(\003B"
      "\213\001\n(com.google.geo.ugc.streetview.publis"
      "h.v1B\032StreetViewPublishResourcesZCgoogle"
      ".golang.org/genproto/googleapis/streetvi"
      "ew/publish/v1;publishb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/streetview/publish/v1/resources.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::type::protobuf_google_2ftype_2flatlng_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadRef::kUploadUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadRef::UploadRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.UploadRef)
}
UploadRef::UploadRef(const UploadRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upload_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.upload_url().size() > 0) {
    upload_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_url_);
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.UploadRef)
}

void UploadRef::SharedCtor() {
  upload_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UploadRef::~UploadRef() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.UploadRef)
  SharedDtor();
}

void UploadRef::SharedDtor() {
  upload_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UploadRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadRef::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UploadRef& UploadRef::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadRef* UploadRef::New(::google::protobuf::Arena* arena) const {
  UploadRef* n = new UploadRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadRef::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.UploadRef)
  upload_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UploadRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.UploadRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string upload_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upload_url().data(), this->upload_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.UploadRef.upload_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.UploadRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.UploadRef)
  return false;
#undef DO_
}

void UploadRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.UploadRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string upload_url = 1;
  if (this->upload_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upload_url().data(), this->upload_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.UploadRef.upload_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->upload_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.UploadRef)
}

::google::protobuf::uint8* UploadRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.UploadRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string upload_url = 1;
  if (this->upload_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upload_url().data(), this->upload_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.UploadRef.upload_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->upload_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.UploadRef)
  return target;
}

size_t UploadRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.UploadRef)
  size_t total_size = 0;

  // string upload_url = 1;
  if (this->upload_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->upload_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.UploadRef)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UploadRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.UploadRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.UploadRef)
    MergeFrom(*source);
  }
}

void UploadRef::MergeFrom(const UploadRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.UploadRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upload_url().size() > 0) {

    upload_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_url_);
  }
}

void UploadRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.UploadRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadRef::CopyFrom(const UploadRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.UploadRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadRef::IsInitialized() const {
  return true;
}

void UploadRef::Swap(UploadRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadRef::InternalSwap(UploadRef* other) {
  upload_url_.Swap(&other->upload_url_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UploadRef::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadRef

// string upload_url = 1;
void UploadRef::clear_upload_url() {
  upload_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UploadRef::upload_url() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.UploadRef.upload_url)
  return upload_url_.GetNoArena();
}
void UploadRef::set_upload_url(const ::std::string& value) {
  
  upload_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.UploadRef.upload_url)
}
#if LANG_CXX11
void UploadRef::set_upload_url(::std::string&& value) {
  
  upload_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.UploadRef.upload_url)
}
#endif
void UploadRef::set_upload_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upload_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.UploadRef.upload_url)
}
void UploadRef::set_upload_url(const char* value, size_t size) {
  
  upload_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.UploadRef.upload_url)
}
::std::string* UploadRef::mutable_upload_url() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.UploadRef.upload_url)
  return upload_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadRef::release_upload_url() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.UploadRef.upload_url)
  
  return upload_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadRef::set_allocated_upload_url(::std::string* upload_url) {
  if (upload_url != NULL) {
    
  } else {
    
  }
  upload_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_url);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.UploadRef.upload_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotoId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotoId::PhotoId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.PhotoId)
}
PhotoId::PhotoId(const PhotoId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.PhotoId)
}

void PhotoId::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PhotoId::~PhotoId() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.PhotoId)
  SharedDtor();
}

void PhotoId::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PhotoId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoId::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhotoId& PhotoId::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhotoId* PhotoId::New(::google::protobuf::Arena* arena) const {
  PhotoId* n = new PhotoId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotoId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.PhotoId)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PhotoId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.PhotoId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.PhotoId.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.PhotoId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.PhotoId)
  return false;
#undef DO_
}

void PhotoId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.PhotoId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.PhotoId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.PhotoId)
}

::google::protobuf::uint8* PhotoId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.PhotoId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.PhotoId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.PhotoId)
  return target;
}

size_t PhotoId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.PhotoId)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.PhotoId)
  GOOGLE_DCHECK_NE(&from, this);
  const PhotoId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotoId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.PhotoId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.PhotoId)
    MergeFrom(*source);
  }
}

void PhotoId::MergeFrom(const PhotoId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.PhotoId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void PhotoId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.PhotoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoId::CopyFrom(const PhotoId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.PhotoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoId::IsInitialized() const {
  return true;
}

void PhotoId::Swap(PhotoId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotoId::InternalSwap(PhotoId* other) {
  id_.Swap(&other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotoId::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotoId

// string id = 1;
void PhotoId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PhotoId::id() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.PhotoId.id)
  return id_.GetNoArena();
}
void PhotoId::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.PhotoId.id)
}
#if LANG_CXX11
void PhotoId::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.PhotoId.id)
}
#endif
void PhotoId::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.PhotoId.id)
}
void PhotoId::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.PhotoId.id)
}
::std::string* PhotoId::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.PhotoId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PhotoId::release_id() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.PhotoId.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PhotoId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.PhotoId.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Level::kNumberFieldNumber;
const int Level::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Level::Level()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.Level)
}
Level::Level(const Level& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.Level)
}

void Level::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_ = 0;
  _cached_size_ = 0;
}

Level::~Level() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.Level)
  SharedDtor();
}

void Level::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Level::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Level& Level::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  return *internal_default_instance();
}

Level* Level::New(::google::protobuf::Arena* arena) const {
  Level* n = new Level;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Level::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.Level)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_ = 0;
}

bool Level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.Level)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.Level.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.Level)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.Level)
  return false;
#undef DO_
}

void Level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.Level)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double number = 1;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->number(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Level.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.Level)
}

::google::protobuf::uint8* Level::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.Level)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double number = 1;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->number(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Level.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.Level)
  return target;
}

size_t Level::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.Level)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // double number = 1;
  if (this->number() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Level::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.Level)
  GOOGLE_DCHECK_NE(&from, this);
  const Level* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Level>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.Level)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.Level)
    MergeFrom(*source);
  }
}

void Level::MergeFrom(const Level& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.Level)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
}

void Level::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Level::CopyFrom(const Level& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level::IsInitialized() const {
  return true;
}

void Level::Swap(Level* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Level::InternalSwap(Level* other) {
  name_.Swap(&other->name_);
  std::swap(number_, other->number_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Level::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Level

// double number = 1;
void Level::clear_number() {
  number_ = 0;
}
double Level::number() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Level.number)
  return number_;
}
void Level::set_number(double value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Level.number)
}

// string name = 2;
void Level::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Level::name() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Level.name)
  return name_.GetNoArena();
}
void Level::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Level.name)
}
#if LANG_CXX11
void Level::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.Level.name)
}
#endif
void Level::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.Level.name)
}
void Level::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.Level.name)
}
::std::string* Level::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Level.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Level::release_name() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Level.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Level::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Level.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kLatLngPairFieldNumber;
const int Pose::kAltitudeFieldNumber;
const int Pose::kHeadingFieldNumber;
const int Pose::kPitchFieldNumber;
const int Pose::kRollFieldNumber;
const int Pose::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lat_lng_pair()) {
    lat_lng_pair_ = new ::google::type::LatLng(*from.lat_lng_pair_);
  } else {
    lat_lng_pair_ = NULL;
  }
  if (from.has_level()) {
    level_ = new ::google::streetview::publish::v1::Level(*from.level_);
  } else {
    level_ = NULL;
  }
  ::memcpy(&altitude_, &from.altitude_,
    reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&altitude_) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.Pose)
}

void Pose::SharedCtor() {
  ::memset(&lat_lng_pair_, 0, reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&lat_lng_pair_) + sizeof(roll_));
  _cached_size_ = 0;
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != internal_default_instance()) {
    delete lat_lng_pair_;
  }
  if (this != internal_default_instance()) {
    delete level_;
  }
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pose* Pose::New(::google::protobuf::Arena* arena) const {
  Pose* n = new Pose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.Pose)
  if (GetArenaNoVirtual() == NULL && lat_lng_pair_ != NULL) {
    delete lat_lng_pair_;
  }
  lat_lng_pair_ = NULL;
  if (GetArenaNoVirtual() == NULL && level_ != NULL) {
    delete level_;
  }
  level_ = NULL;
  ::memset(&altitude_, 0, reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&altitude_) + sizeof(roll_));
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.Pose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.type.LatLng lat_lng_pair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lat_lng_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double altitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double roll = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.streetview.publish.v1.Level level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.type.LatLng lat_lng_pair = 1;
  if (this->has_lat_lng_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->lat_lng_pair_, output);
  }

  // double altitude = 2;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->altitude(), output);
  }

  // double heading = 3;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // double pitch = 4;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pitch(), output);
  }

  // double roll = 5;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->roll(), output);
  }

  // .google.streetview.publish.v1.Level level = 7;
  if (this->has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->level_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.type.LatLng lat_lng_pair = 1;
  if (this->has_lat_lng_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->lat_lng_pair_, deterministic, target);
  }

  // double altitude = 2;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->altitude(), target);
  }

  // double heading = 3;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // double pitch = 4;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pitch(), target);
  }

  // double roll = 5;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->roll(), target);
  }

  // .google.streetview.publish.v1.Level level = 7;
  if (this->has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->level_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.Pose)
  size_t total_size = 0;

  // .google.type.LatLng lat_lng_pair = 1;
  if (this->has_lat_lng_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lat_lng_pair_);
  }

  // .google.streetview.publish.v1.Level level = 7;
  if (this->has_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->level_);
  }

  // double altitude = 2;
  if (this->altitude() != 0) {
    total_size += 1 + 8;
  }

  // double heading = 3;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // double pitch = 4;
  if (this->pitch() != 0) {
    total_size += 1 + 8;
  }

  // double roll = 5;
  if (this->roll() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lat_lng_pair()) {
    mutable_lat_lng_pair()->::google::type::LatLng::MergeFrom(from.lat_lng_pair());
  }
  if (from.has_level()) {
    mutable_level()->::google::streetview::publish::v1::Level::MergeFrom(from.level());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  std::swap(lat_lng_pair_, other->lat_lng_pair_);
  std::swap(level_, other->level_);
  std::swap(altitude_, other->altitude_);
  std::swap(heading_, other->heading_);
  std::swap(pitch_, other->pitch_);
  std::swap(roll_, other->roll_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose

// .google.type.LatLng lat_lng_pair = 1;
bool Pose::has_lat_lng_pair() const {
  return this != internal_default_instance() && lat_lng_pair_ != NULL;
}
void Pose::clear_lat_lng_pair() {
  if (GetArenaNoVirtual() == NULL && lat_lng_pair_ != NULL) delete lat_lng_pair_;
  lat_lng_pair_ = NULL;
}
const ::google::type::LatLng& Pose::lat_lng_pair() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Pose.lat_lng_pair)
  return lat_lng_pair_ != NULL ? *lat_lng_pair_
                         : *::google::type::LatLng::internal_default_instance();
}
::google::type::LatLng* Pose::mutable_lat_lng_pair() {
  
  if (lat_lng_pair_ == NULL) {
    lat_lng_pair_ = new ::google::type::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Pose.lat_lng_pair)
  return lat_lng_pair_;
}
::google::type::LatLng* Pose::release_lat_lng_pair() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Pose.lat_lng_pair)
  
  ::google::type::LatLng* temp = lat_lng_pair_;
  lat_lng_pair_ = NULL;
  return temp;
}
void Pose::set_allocated_lat_lng_pair(::google::type::LatLng* lat_lng_pair) {
  delete lat_lng_pair_;
  lat_lng_pair_ = lat_lng_pair;
  if (lat_lng_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Pose.lat_lng_pair)
}

// double altitude = 2;
void Pose::clear_altitude() {
  altitude_ = 0;
}
double Pose::altitude() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Pose.altitude)
  return altitude_;
}
void Pose::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Pose.altitude)
}

// double heading = 3;
void Pose::clear_heading() {
  heading_ = 0;
}
double Pose::heading() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Pose.heading)
  return heading_;
}
void Pose::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Pose.heading)
}

// double pitch = 4;
void Pose::clear_pitch() {
  pitch_ = 0;
}
double Pose::pitch() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Pose.pitch)
  return pitch_;
}
void Pose::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Pose.pitch)
}

// double roll = 5;
void Pose::clear_roll() {
  roll_ = 0;
}
double Pose::roll() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Pose.roll)
  return roll_;
}
void Pose::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Pose.roll)
}

// .google.streetview.publish.v1.Level level = 7;
bool Pose::has_level() const {
  return this != internal_default_instance() && level_ != NULL;
}
void Pose::clear_level() {
  if (GetArenaNoVirtual() == NULL && level_ != NULL) delete level_;
  level_ = NULL;
}
const ::google::streetview::publish::v1::Level& Pose::level() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Pose.level)
  return level_ != NULL ? *level_
                         : *::google::streetview::publish::v1::Level::internal_default_instance();
}
::google::streetview::publish::v1::Level* Pose::mutable_level() {
  
  if (level_ == NULL) {
    level_ = new ::google::streetview::publish::v1::Level;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Pose.level)
  return level_;
}
::google::streetview::publish::v1::Level* Pose::release_level() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Pose.level)
  
  ::google::streetview::publish::v1::Level* temp = level_;
  level_ = NULL;
  return temp;
}
void Pose::set_allocated_level(::google::streetview::publish::v1::Level* level) {
  delete level_;
  level_ = level;
  if (level) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Pose.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Place::kPlaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Place::Place()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.Place)
}
Place::Place(const Place& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  place_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.place_id().size() > 0) {
    place_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.Place)
}

void Place::SharedCtor() {
  place_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Place::~Place() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.Place)
  SharedDtor();
}

void Place::SharedDtor() {
  place_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Place::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Place::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Place& Place::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  return *internal_default_instance();
}

Place* Place::New(::google::protobuf::Arena* arena) const {
  Place* n = new Place;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Place::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.Place)
  place_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Place::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.Place)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string place_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->place_id().data(), this->place_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.Place.place_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.Place)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.Place)
  return false;
#undef DO_
}

void Place::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.Place)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string place_id = 1;
  if (this->place_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->place_id().data(), this->place_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Place.place_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->place_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.Place)
}

::google::protobuf::uint8* Place::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.Place)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string place_id = 1;
  if (this->place_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->place_id().data(), this->place_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Place.place_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->place_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.Place)
  return target;
}

size_t Place::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.Place)
  size_t total_size = 0;

  // string place_id = 1;
  if (this->place_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->place_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Place::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.Place)
  GOOGLE_DCHECK_NE(&from, this);
  const Place* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Place>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.Place)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.Place)
    MergeFrom(*source);
  }
}

void Place::MergeFrom(const Place& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.Place)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.place_id().size() > 0) {

    place_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place_id_);
  }
}

void Place::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.Place)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Place::CopyFrom(const Place& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.Place)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Place::IsInitialized() const {
  return true;
}

void Place::Swap(Place* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Place::InternalSwap(Place* other) {
  place_id_.Swap(&other->place_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Place::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Place

// string place_id = 1;
void Place::clear_place_id() {
  place_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Place::place_id() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Place.place_id)
  return place_id_.GetNoArena();
}
void Place::set_place_id(const ::std::string& value) {
  
  place_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Place.place_id)
}
#if LANG_CXX11
void Place::set_place_id(::std::string&& value) {
  
  place_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.Place.place_id)
}
#endif
void Place::set_place_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  place_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.Place.place_id)
}
void Place::set_place_id(const char* value, size_t size) {
  
  place_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.Place.place_id)
}
::std::string* Place::mutable_place_id() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Place.place_id)
  return place_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Place::release_place_id() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Place.place_id)
  
  return place_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Place::set_allocated_place_id(::std::string* place_id) {
  if (place_id != NULL) {
    
  } else {
    
  }
  place_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place_id);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Place.place_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connection::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connection::Connection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.Connection)
}
Connection::Connection(const Connection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::google::streetview::publish::v1::PhotoId(*from.target_);
  } else {
    target_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.Connection)
}

void Connection::SharedCtor() {
  target_ = NULL;
  _cached_size_ = 0;
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.Connection)
  SharedDtor();
}

void Connection::SharedDtor() {
  if (this != internal_default_instance()) {
    delete target_;
  }
}

void Connection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connection::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Connection& Connection::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  return *internal_default_instance();
}

Connection* Connection::New(::google::protobuf::Arena* arena) const {
  Connection* n = new Connection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.Connection)
  if (GetArenaNoVirtual() == NULL && target_ != NULL) {
    delete target_;
  }
  target_ = NULL;
}

bool Connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.Connection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.streetview.publish.v1.PhotoId target = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.Connection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.Connection)
  return false;
#undef DO_
}

void Connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.PhotoId target = 1;
  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->target_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.Connection)
}

::google::protobuf::uint8* Connection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.Connection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.PhotoId target = 1;
  if (this->has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->target_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.Connection)
  return target;
}

size_t Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.Connection)
  size_t total_size = 0;

  // .google.streetview.publish.v1.PhotoId target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const Connection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Connection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.Connection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::google::streetview::publish::v1::PhotoId::MergeFrom(from.target());
  }
}

void Connection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {
  return true;
}

void Connection::Swap(Connection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connection::InternalSwap(Connection* other) {
  std::swap(target_, other->target_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Connection::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Connection

// .google.streetview.publish.v1.PhotoId target = 1;
bool Connection::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
void Connection::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
const ::google::streetview::publish::v1::PhotoId& Connection::target() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Connection.target)
  return target_ != NULL ? *target_
                         : *::google::streetview::publish::v1::PhotoId::internal_default_instance();
}
::google::streetview::publish::v1::PhotoId* Connection::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::google::streetview::publish::v1::PhotoId;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Connection.target)
  return target_;
}
::google::streetview::publish::v1::PhotoId* Connection::release_target() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Connection.target)
  
  ::google::streetview::publish::v1::PhotoId* temp = target_;
  target_ = NULL;
  return temp;
}
void Connection::set_allocated_target(::google::streetview::publish::v1::PhotoId* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Connection.target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Photo::kPhotoIdFieldNumber;
const int Photo::kUploadReferenceFieldNumber;
const int Photo::kDownloadUrlFieldNumber;
const int Photo::kThumbnailUrlFieldNumber;
const int Photo::kShareLinkFieldNumber;
const int Photo::kPoseFieldNumber;
const int Photo::kConnectionsFieldNumber;
const int Photo::kCaptureTimeFieldNumber;
const int Photo::kPlacesFieldNumber;
const int Photo::kViewCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Photo::Photo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.Photo)
}
Photo::Photo(const Photo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      connections_(from.connections_),
      places_(from.places_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  download_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.download_url().size() > 0) {
    download_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_url_);
  }
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thumbnail_url().size() > 0) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  share_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.share_link().size() > 0) {
    share_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_link_);
  }
  if (from.has_photo_id()) {
    photo_id_ = new ::google::streetview::publish::v1::PhotoId(*from.photo_id_);
  } else {
    photo_id_ = NULL;
  }
  if (from.has_upload_reference()) {
    upload_reference_ = new ::google::streetview::publish::v1::UploadRef(*from.upload_reference_);
  } else {
    upload_reference_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::google::streetview::publish::v1::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_capture_time()) {
    capture_time_ = new ::google::protobuf::Timestamp(*from.capture_time_);
  } else {
    capture_time_ = NULL;
  }
  view_count_ = from.view_count_;
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.Photo)
}

void Photo::SharedCtor() {
  download_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&photo_id_, 0, reinterpret_cast<char*>(&view_count_) -
    reinterpret_cast<char*>(&photo_id_) + sizeof(view_count_));
  _cached_size_ = 0;
}

Photo::~Photo() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.Photo)
  SharedDtor();
}

void Photo::SharedDtor() {
  download_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete photo_id_;
  }
  if (this != internal_default_instance()) {
    delete upload_reference_;
  }
  if (this != internal_default_instance()) {
    delete pose_;
  }
  if (this != internal_default_instance()) {
    delete capture_time_;
  }
}

void Photo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Photo::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Photo& Photo::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  return *internal_default_instance();
}

Photo* Photo::New(::google::protobuf::Arena* arena) const {
  Photo* n = new Photo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Photo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.Photo)
  connections_.Clear();
  places_.Clear();
  download_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && photo_id_ != NULL) {
    delete photo_id_;
  }
  photo_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && upload_reference_ != NULL) {
    delete upload_reference_;
  }
  upload_reference_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && capture_time_ != NULL) {
    delete capture_time_;
  }
  capture_time_ = NULL;
  view_count_ = GOOGLE_LONGLONG(0);
}

bool Photo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.Photo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.streetview.publish.v1.PhotoId photo_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.streetview.publish.v1.UploadRef upload_reference = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string download_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->download_url().data(), this->download_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.Photo.download_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.streetview.publish.v1.Pose pose = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.streetview.publish.v1.Connection connections = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp capture_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capture_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.streetview.publish.v1.Place places = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_places()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string thumbnail_url = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->thumbnail_url().data(), this->thumbnail_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.Photo.thumbnail_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 view_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &view_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string share_link = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share_link()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->share_link().data(), this->share_link().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.Photo.share_link"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.Photo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.Photo)
  return false;
#undef DO_
}

void Photo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.Photo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.PhotoId photo_id = 1;
  if (this->has_photo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->photo_id_, output);
  }

  // .google.streetview.publish.v1.UploadRef upload_reference = 2;
  if (this->has_upload_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->upload_reference_, output);
  }

  // string download_url = 3;
  if (this->download_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Photo.download_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->download_url(), output);
  }

  // .google.streetview.publish.v1.Pose pose = 4;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pose_, output);
  }

  // repeated .google.streetview.publish.v1.Connection connections = 5;
  for (unsigned int i = 0, n = this->connections_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->connections(i), output);
  }

  // .google.protobuf.Timestamp capture_time = 6;
  if (this->has_capture_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->capture_time_, output);
  }

  // repeated .google.streetview.publish.v1.Place places = 7;
  for (unsigned int i = 0, n = this->places_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->places(i), output);
  }

  // string thumbnail_url = 9;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), this->thumbnail_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Photo.thumbnail_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->thumbnail_url(), output);
  }

  // int64 view_count = 10;
  if (this->view_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->view_count(), output);
  }

  // string share_link = 11;
  if (this->share_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->share_link().data(), this->share_link().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Photo.share_link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->share_link(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.Photo)
}

::google::protobuf::uint8* Photo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.Photo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.PhotoId photo_id = 1;
  if (this->has_photo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->photo_id_, deterministic, target);
  }

  // .google.streetview.publish.v1.UploadRef upload_reference = 2;
  if (this->has_upload_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->upload_reference_, deterministic, target);
  }

  // string download_url = 3;
  if (this->download_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Photo.download_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->download_url(), target);
  }

  // .google.streetview.publish.v1.Pose pose = 4;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pose_, deterministic, target);
  }

  // repeated .google.streetview.publish.v1.Connection connections = 5;
  for (unsigned int i = 0, n = this->connections_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->connections(i), deterministic, target);
  }

  // .google.protobuf.Timestamp capture_time = 6;
  if (this->has_capture_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->capture_time_, deterministic, target);
  }

  // repeated .google.streetview.publish.v1.Place places = 7;
  for (unsigned int i = 0, n = this->places_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->places(i), deterministic, target);
  }

  // string thumbnail_url = 9;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thumbnail_url().data(), this->thumbnail_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Photo.thumbnail_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->thumbnail_url(), target);
  }

  // int64 view_count = 10;
  if (this->view_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->view_count(), target);
  }

  // string share_link = 11;
  if (this->share_link().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->share_link().data(), this->share_link().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.Photo.share_link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->share_link(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.Photo)
  return target;
}

size_t Photo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.Photo)
  size_t total_size = 0;

  // repeated .google.streetview.publish.v1.Connection connections = 5;
  {
    unsigned int count = this->connections_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connections(i));
    }
  }

  // repeated .google.streetview.publish.v1.Place places = 7;
  {
    unsigned int count = this->places_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->places(i));
    }
  }

  // string download_url = 3;
  if (this->download_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->download_url());
  }

  // string thumbnail_url = 9;
  if (this->thumbnail_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thumbnail_url());
  }

  // string share_link = 11;
  if (this->share_link().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->share_link());
  }

  // .google.streetview.publish.v1.PhotoId photo_id = 1;
  if (this->has_photo_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->photo_id_);
  }

  // .google.streetview.publish.v1.UploadRef upload_reference = 2;
  if (this->has_upload_reference()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->upload_reference_);
  }

  // .google.streetview.publish.v1.Pose pose = 4;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // .google.protobuf.Timestamp capture_time = 6;
  if (this->has_capture_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capture_time_);
  }

  // int64 view_count = 10;
  if (this->view_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->view_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Photo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.Photo)
  GOOGLE_DCHECK_NE(&from, this);
  const Photo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Photo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.Photo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.Photo)
    MergeFrom(*source);
  }
}

void Photo::MergeFrom(const Photo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.Photo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connections_.MergeFrom(from.connections_);
  places_.MergeFrom(from.places_);
  if (from.download_url().size() > 0) {

    download_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_url_);
  }
  if (from.thumbnail_url().size() > 0) {

    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  if (from.share_link().size() > 0) {

    share_link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_link_);
  }
  if (from.has_photo_id()) {
    mutable_photo_id()->::google::streetview::publish::v1::PhotoId::MergeFrom(from.photo_id());
  }
  if (from.has_upload_reference()) {
    mutable_upload_reference()->::google::streetview::publish::v1::UploadRef::MergeFrom(from.upload_reference());
  }
  if (from.has_pose()) {
    mutable_pose()->::google::streetview::publish::v1::Pose::MergeFrom(from.pose());
  }
  if (from.has_capture_time()) {
    mutable_capture_time()->::google::protobuf::Timestamp::MergeFrom(from.capture_time());
  }
  if (from.view_count() != 0) {
    set_view_count(from.view_count());
  }
}

void Photo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Photo::CopyFrom(const Photo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Photo::IsInitialized() const {
  return true;
}

void Photo::Swap(Photo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Photo::InternalSwap(Photo* other) {
  connections_.InternalSwap(&other->connections_);
  places_.InternalSwap(&other->places_);
  download_url_.Swap(&other->download_url_);
  thumbnail_url_.Swap(&other->thumbnail_url_);
  share_link_.Swap(&other->share_link_);
  std::swap(photo_id_, other->photo_id_);
  std::swap(upload_reference_, other->upload_reference_);
  std::swap(pose_, other->pose_);
  std::swap(capture_time_, other->capture_time_);
  std::swap(view_count_, other->view_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Photo::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Photo

// .google.streetview.publish.v1.PhotoId photo_id = 1;
bool Photo::has_photo_id() const {
  return this != internal_default_instance() && photo_id_ != NULL;
}
void Photo::clear_photo_id() {
  if (GetArenaNoVirtual() == NULL && photo_id_ != NULL) delete photo_id_;
  photo_id_ = NULL;
}
const ::google::streetview::publish::v1::PhotoId& Photo::photo_id() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.photo_id)
  return photo_id_ != NULL ? *photo_id_
                         : *::google::streetview::publish::v1::PhotoId::internal_default_instance();
}
::google::streetview::publish::v1::PhotoId* Photo::mutable_photo_id() {
  
  if (photo_id_ == NULL) {
    photo_id_ = new ::google::streetview::publish::v1::PhotoId;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.photo_id)
  return photo_id_;
}
::google::streetview::publish::v1::PhotoId* Photo::release_photo_id() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.photo_id)
  
  ::google::streetview::publish::v1::PhotoId* temp = photo_id_;
  photo_id_ = NULL;
  return temp;
}
void Photo::set_allocated_photo_id(::google::streetview::publish::v1::PhotoId* photo_id) {
  delete photo_id_;
  photo_id_ = photo_id;
  if (photo_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.photo_id)
}

// .google.streetview.publish.v1.UploadRef upload_reference = 2;
bool Photo::has_upload_reference() const {
  return this != internal_default_instance() && upload_reference_ != NULL;
}
void Photo::clear_upload_reference() {
  if (GetArenaNoVirtual() == NULL && upload_reference_ != NULL) delete upload_reference_;
  upload_reference_ = NULL;
}
const ::google::streetview::publish::v1::UploadRef& Photo::upload_reference() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.upload_reference)
  return upload_reference_ != NULL ? *upload_reference_
                         : *::google::streetview::publish::v1::UploadRef::internal_default_instance();
}
::google::streetview::publish::v1::UploadRef* Photo::mutable_upload_reference() {
  
  if (upload_reference_ == NULL) {
    upload_reference_ = new ::google::streetview::publish::v1::UploadRef;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.upload_reference)
  return upload_reference_;
}
::google::streetview::publish::v1::UploadRef* Photo::release_upload_reference() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.upload_reference)
  
  ::google::streetview::publish::v1::UploadRef* temp = upload_reference_;
  upload_reference_ = NULL;
  return temp;
}
void Photo::set_allocated_upload_reference(::google::streetview::publish::v1::UploadRef* upload_reference) {
  delete upload_reference_;
  upload_reference_ = upload_reference;
  if (upload_reference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.upload_reference)
}

// string download_url = 3;
void Photo::clear_download_url() {
  download_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Photo::download_url() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.download_url)
  return download_url_.GetNoArena();
}
void Photo::set_download_url(const ::std::string& value) {
  
  download_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Photo.download_url)
}
#if LANG_CXX11
void Photo::set_download_url(::std::string&& value) {
  
  download_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.Photo.download_url)
}
#endif
void Photo::set_download_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  download_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.Photo.download_url)
}
void Photo::set_download_url(const char* value, size_t size) {
  
  download_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.Photo.download_url)
}
::std::string* Photo::mutable_download_url() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.download_url)
  return download_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Photo::release_download_url() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.download_url)
  
  return download_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Photo::set_allocated_download_url(::std::string* download_url) {
  if (download_url != NULL) {
    
  } else {
    
  }
  download_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), download_url);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.download_url)
}

// string thumbnail_url = 9;
void Photo::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Photo::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
void Photo::set_thumbnail_url(const ::std::string& value) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Photo.thumbnail_url)
}
#if LANG_CXX11
void Photo::set_thumbnail_url(::std::string&& value) {
  
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.Photo.thumbnail_url)
}
#endif
void Photo::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.Photo.thumbnail_url)
}
void Photo::set_thumbnail_url(const char* value, size_t size) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.Photo.thumbnail_url)
}
::std::string* Photo::mutable_thumbnail_url() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Photo::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.thumbnail_url)
  
  return thumbnail_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Photo::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != NULL) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.thumbnail_url)
}

// string share_link = 11;
void Photo::clear_share_link() {
  share_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Photo::share_link() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.share_link)
  return share_link_.GetNoArena();
}
void Photo::set_share_link(const ::std::string& value) {
  
  share_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Photo.share_link)
}
#if LANG_CXX11
void Photo::set_share_link(::std::string&& value) {
  
  share_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.Photo.share_link)
}
#endif
void Photo::set_share_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  share_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.Photo.share_link)
}
void Photo::set_share_link(const char* value, size_t size) {
  
  share_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.Photo.share_link)
}
::std::string* Photo::mutable_share_link() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.share_link)
  return share_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Photo::release_share_link() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.share_link)
  
  return share_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Photo::set_allocated_share_link(::std::string* share_link) {
  if (share_link != NULL) {
    
  } else {
    
  }
  share_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share_link);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.share_link)
}

// .google.streetview.publish.v1.Pose pose = 4;
bool Photo::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
void Photo::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::google::streetview::publish::v1::Pose& Photo::pose() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.pose)
  return pose_ != NULL ? *pose_
                         : *::google::streetview::publish::v1::Pose::internal_default_instance();
}
::google::streetview::publish::v1::Pose* Photo::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::google::streetview::publish::v1::Pose;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.pose)
  return pose_;
}
::google::streetview::publish::v1::Pose* Photo::release_pose() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.pose)
  
  ::google::streetview::publish::v1::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Photo::set_allocated_pose(::google::streetview::publish::v1::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.pose)
}

// repeated .google.streetview.publish.v1.Connection connections = 5;
int Photo::connections_size() const {
  return connections_.size();
}
void Photo::clear_connections() {
  connections_.Clear();
}
const ::google::streetview::publish::v1::Connection& Photo::connections(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.connections)
  return connections_.Get(index);
}
::google::streetview::publish::v1::Connection* Photo::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.connections)
  return connections_.Mutable(index);
}
::google::streetview::publish::v1::Connection* Photo::add_connections() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.Photo.connections)
  return connections_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Connection >*
Photo::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.Photo.connections)
  return &connections_;
}
const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Connection >&
Photo::connections() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.Photo.connections)
  return connections_;
}

// .google.protobuf.Timestamp capture_time = 6;
bool Photo::has_capture_time() const {
  return this != internal_default_instance() && capture_time_ != NULL;
}
void Photo::clear_capture_time() {
  if (GetArenaNoVirtual() == NULL && capture_time_ != NULL) delete capture_time_;
  capture_time_ = NULL;
}
const ::google::protobuf::Timestamp& Photo::capture_time() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.capture_time)
  return capture_time_ != NULL ? *capture_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Photo::mutable_capture_time() {
  
  if (capture_time_ == NULL) {
    capture_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.capture_time)
  return capture_time_;
}
::google::protobuf::Timestamp* Photo::release_capture_time() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.capture_time)
  
  ::google::protobuf::Timestamp* temp = capture_time_;
  capture_time_ = NULL;
  return temp;
}
void Photo::set_allocated_capture_time(::google::protobuf::Timestamp* capture_time) {
  delete capture_time_;
  if (capture_time != NULL && capture_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_capture_time = new ::google::protobuf::Timestamp;
    new_capture_time->CopyFrom(*capture_time);
    capture_time = new_capture_time;
  }
  capture_time_ = capture_time;
  if (capture_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.capture_time)
}

// repeated .google.streetview.publish.v1.Place places = 7;
int Photo::places_size() const {
  return places_.size();
}
void Photo::clear_places() {
  places_.Clear();
}
const ::google::streetview::publish::v1::Place& Photo::places(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.places)
  return places_.Get(index);
}
::google::streetview::publish::v1::Place* Photo::mutable_places(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.places)
  return places_.Mutable(index);
}
::google::streetview::publish::v1::Place* Photo::add_places() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.Photo.places)
  return places_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Place >*
Photo::mutable_places() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.Photo.places)
  return &places_;
}
const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Place >&
Photo::places() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.Photo.places)
  return places_;
}

// int64 view_count = 10;
void Photo::clear_view_count() {
  view_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Photo::view_count() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.view_count)
  return view_count_;
}
void Photo::set_view_count(::google::protobuf::int64 value) {
  
  view_count_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Photo.view_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace publish
}  // namespace streetview
}  // namespace google

// @@protoc_insertion_point(global_scope)
