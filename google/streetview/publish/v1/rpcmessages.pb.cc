// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/streetview/publish/v1/rpcmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/streetview/publish/v1/rpcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace streetview {
namespace publish {
namespace v1 {
class CreatePhotoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreatePhotoRequest> {
} _CreatePhotoRequest_default_instance_;
class GetPhotoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetPhotoRequest> {
} _GetPhotoRequest_default_instance_;
class BatchGetPhotosRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetPhotosRequest> {
} _BatchGetPhotosRequest_default_instance_;
class BatchGetPhotosResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetPhotosResponse> {
} _BatchGetPhotosResponse_default_instance_;
class PhotoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PhotoResponse> {
} _PhotoResponse_default_instance_;
class ListPhotosRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListPhotosRequest> {
} _ListPhotosRequest_default_instance_;
class ListPhotosResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListPhotosResponse> {
} _ListPhotosResponse_default_instance_;
class UpdatePhotoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdatePhotoRequest> {
} _UpdatePhotoRequest_default_instance_;
class BatchUpdatePhotosRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchUpdatePhotosRequest> {
} _BatchUpdatePhotosRequest_default_instance_;
class BatchUpdatePhotosResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchUpdatePhotosResponse> {
} _BatchUpdatePhotosResponse_default_instance_;
class DeletePhotoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeletePhotoRequest> {
} _DeletePhotoRequest_default_instance_;
class BatchDeletePhotosRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchDeletePhotosRequest> {
} _BatchDeletePhotosRequest_default_instance_;
class BatchDeletePhotosResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchDeletePhotosResponse> {
} _BatchDeletePhotosResponse_default_instance_;

namespace protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePhotoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePhotoRequest, photo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRequest, photo_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPhotoRequest, view_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetPhotosRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetPhotosRequest, photo_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetPhotosRequest, view_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetPhotosResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetPhotosResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoResponse, photo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPhotosRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPhotosRequest, view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPhotosRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPhotosRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPhotosRequest, filter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPhotosResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPhotosResponse, photos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPhotosResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePhotoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePhotoRequest, photo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePhotoRequest, update_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdatePhotosRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdatePhotosRequest, update_photo_requests_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdatePhotosResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdatePhotosResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePhotoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePhotoRequest, photo_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDeletePhotosRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDeletePhotosRequest, photo_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDeletePhotosResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDeletePhotosResponse, status_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CreatePhotoRequest)},
  { 6, -1, sizeof(GetPhotoRequest)},
  { 13, -1, sizeof(BatchGetPhotosRequest)},
  { 20, -1, sizeof(BatchGetPhotosResponse)},
  { 26, -1, sizeof(PhotoResponse)},
  { 33, -1, sizeof(ListPhotosRequest)},
  { 42, -1, sizeof(ListPhotosResponse)},
  { 49, -1, sizeof(UpdatePhotoRequest)},
  { 56, -1, sizeof(BatchUpdatePhotosRequest)},
  { 62, -1, sizeof(BatchUpdatePhotosResponse)},
  { 68, -1, sizeof(DeletePhotoRequest)},
  { 74, -1, sizeof(BatchDeletePhotosRequest)},
  { 80, -1, sizeof(BatchDeletePhotosResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreatePhotoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetPhotoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetPhotosRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetPhotosResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PhotoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListPhotosRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListPhotosResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdatePhotoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchUpdatePhotosRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchUpdatePhotosResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeletePhotoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchDeletePhotosRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchDeletePhotosResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/streetview/publish/v1/rpcmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

}  // namespace

void TableStruct::Shutdown() {
  _CreatePhotoRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _GetPhotoRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _BatchGetPhotosRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _BatchGetPhotosResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _PhotoResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ListPhotosRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ListPhotosResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _UpdatePhotoRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _BatchUpdatePhotosRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _BatchUpdatePhotosResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _DeletePhotoRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _BatchDeletePhotosRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _BatchDeletePhotosResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::InitDefaults();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::InitDefaults();
  ::google::streetview::publish::v1::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaults();
  _CreatePhotoRequest_default_instance_.DefaultConstruct();
  _GetPhotoRequest_default_instance_.DefaultConstruct();
  _BatchGetPhotosRequest_default_instance_.DefaultConstruct();
  _BatchGetPhotosResponse_default_instance_.DefaultConstruct();
  _PhotoResponse_default_instance_.DefaultConstruct();
  _ListPhotosRequest_default_instance_.DefaultConstruct();
  _ListPhotosResponse_default_instance_.DefaultConstruct();
  _UpdatePhotoRequest_default_instance_.DefaultConstruct();
  _BatchUpdatePhotosRequest_default_instance_.DefaultConstruct();
  _BatchUpdatePhotosResponse_default_instance_.DefaultConstruct();
  _DeletePhotoRequest_default_instance_.DefaultConstruct();
  _BatchDeletePhotosRequest_default_instance_.DefaultConstruct();
  _BatchDeletePhotosResponse_default_instance_.DefaultConstruct();
  _CreatePhotoRequest_default_instance_.get_mutable()->photo_ = const_cast< ::google::streetview::publish::v1::Photo*>(
      ::google::streetview::publish::v1::Photo::internal_default_instance());
  _PhotoResponse_default_instance_.get_mutable()->status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  _PhotoResponse_default_instance_.get_mutable()->photo_ = const_cast< ::google::streetview::publish::v1::Photo*>(
      ::google::streetview::publish::v1::Photo::internal_default_instance());
  _UpdatePhotoRequest_default_instance_.get_mutable()->photo_ = const_cast< ::google::streetview::publish::v1::Photo*>(
      ::google::streetview::publish::v1::Photo::internal_default_instance());
  _UpdatePhotoRequest_default_instance_.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n.google/streetview/publish/v1/rpcmessag"
      "es.proto\022\034google.streetview.publish.v1\032 "
      "google/protobuf/field_mask.proto\032\027google"
      "/rpc/status.proto\032,google/streetview/pub"
      "lish/v1/resources.proto\"H\n\022CreatePhotoRe"
      "quest\0222\n\005photo\030\001 \001(\0132#.google.streetview"
      ".publish.v1.Photo\"Z\n\017GetPhotoRequest\022\020\n\010"
      "photo_id\030\001 \001(\t\0225\n\004view\030\002 \001(\0162\'.google.st"
      "reetview.publish.v1.PhotoView\"a\n\025BatchGe"
      "tPhotosRequest\022\021\n\tphoto_ids\030\001 \003(\t\0225\n\004vie"
      "w\030\002 \001(\0162\'.google.streetview.publish.v1.P"
      "hotoView\"V\n\026BatchGetPhotosResponse\022<\n\007re"
      "sults\030\001 \003(\0132+.google.streetview.publish."
      "v1.PhotoResponse\"g\n\rPhotoResponse\022\"\n\006sta"
      "tus\030\001 \001(\0132\022.google.rpc.Status\0222\n\005photo\030\002"
      " \001(\0132#.google.streetview.publish.v1.Phot"
      "o\"\201\001\n\021ListPhotosRequest\0225\n\004view\030\001 \001(\0162\'."
      "google.streetview.publish.v1.PhotoView\022\021"
      "\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\022\016\n"
      "\006filter\030\004 \001(\t\"b\n\022ListPhotosResponse\0223\n\006p"
      "hotos\030\001 \003(\0132#.google.streetview.publish."
      "v1.Photo\022\027\n\017next_page_token\030\002 \001(\t\"y\n\022Upd"
      "atePhotoRequest\0222\n\005photo\030\001 \001(\0132#.google."
      "streetview.publish.v1.Photo\022/\n\013update_ma"
      "sk\030\002 \001(\0132\032.google.protobuf.FieldMask\"k\n\030"
      "BatchUpdatePhotosRequest\022O\n\025update_photo"
      "_requests\030\001 \003(\01320.google.streetview.publ"
      "ish.v1.UpdatePhotoRequest\"Y\n\031BatchUpdate"
      "PhotosResponse\022<\n\007results\030\001 \003(\0132+.google"
      ".streetview.publish.v1.PhotoResponse\"&\n\022"
      "DeletePhotoRequest\022\020\n\010photo_id\030\001 \001(\t\"-\n\030"
      "BatchDeletePhotosRequest\022\021\n\tphoto_ids\030\001 "
      "\003(\t\"\?\n\031BatchDeletePhotosResponse\022\"\n\006stat"
      "us\030\001 \003(\0132\022.google.rpc.Status*0\n\tPhotoVie"
      "w\022\t\n\005BASIC\020\000\022\030\n\024INCLUDE_DOWNLOAD_URL\020\001B\215"
      "\001\n(com.google.geo.ugc.streetview.publish"
      ".v1B\034StreetViewPublishRpcMessagesZCgoogl"
      "e.golang.org/genproto/googleapis/streetv"
      "iew/publish/v1;publishb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1550);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/streetview/publish/v1/rpcmessages.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::AddDescriptors();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
  ::google::streetview::publish::v1::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto

const ::google::protobuf::EnumDescriptor* PhotoView_descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_enum_descriptors[0];
}
bool PhotoView_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreatePhotoRequest::kPhotoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreatePhotoRequest::CreatePhotoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.CreatePhotoRequest)
}
CreatePhotoRequest::CreatePhotoRequest(const CreatePhotoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_photo()) {
    photo_ = new ::google::streetview::publish::v1::Photo(*from.photo_);
  } else {
    photo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.CreatePhotoRequest)
}

void CreatePhotoRequest::SharedCtor() {
  photo_ = NULL;
  _cached_size_ = 0;
}

CreatePhotoRequest::~CreatePhotoRequest() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.CreatePhotoRequest)
  SharedDtor();
}

void CreatePhotoRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete photo_;
  }
}

void CreatePhotoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePhotoRequest::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreatePhotoRequest& CreatePhotoRequest::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreatePhotoRequest* CreatePhotoRequest::New(::google::protobuf::Arena* arena) const {
  CreatePhotoRequest* n = new CreatePhotoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreatePhotoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.CreatePhotoRequest)
  if (GetArenaNoVirtual() == NULL && photo_ != NULL) {
    delete photo_;
  }
  photo_ = NULL;
}

bool CreatePhotoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.CreatePhotoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.streetview.publish.v1.Photo photo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.CreatePhotoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.CreatePhotoRequest)
  return false;
#undef DO_
}

void CreatePhotoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.CreatePhotoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.Photo photo = 1;
  if (this->has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->photo_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.CreatePhotoRequest)
}

::google::protobuf::uint8* CreatePhotoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.CreatePhotoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.Photo photo = 1;
  if (this->has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->photo_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.CreatePhotoRequest)
  return target;
}

size_t CreatePhotoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.CreatePhotoRequest)
  size_t total_size = 0;

  // .google.streetview.publish.v1.Photo photo = 1;
  if (this->has_photo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->photo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePhotoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.CreatePhotoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePhotoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreatePhotoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.CreatePhotoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.CreatePhotoRequest)
    MergeFrom(*source);
  }
}

void CreatePhotoRequest::MergeFrom(const CreatePhotoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.CreatePhotoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_photo()) {
    mutable_photo()->::google::streetview::publish::v1::Photo::MergeFrom(from.photo());
  }
}

void CreatePhotoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.CreatePhotoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePhotoRequest::CopyFrom(const CreatePhotoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.CreatePhotoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePhotoRequest::IsInitialized() const {
  return true;
}

void CreatePhotoRequest::Swap(CreatePhotoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreatePhotoRequest::InternalSwap(CreatePhotoRequest* other) {
  std::swap(photo_, other->photo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreatePhotoRequest::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreatePhotoRequest

// .google.streetview.publish.v1.Photo photo = 1;
bool CreatePhotoRequest::has_photo() const {
  return this != internal_default_instance() && photo_ != NULL;
}
void CreatePhotoRequest::clear_photo() {
  if (GetArenaNoVirtual() == NULL && photo_ != NULL) delete photo_;
  photo_ = NULL;
}
const ::google::streetview::publish::v1::Photo& CreatePhotoRequest::photo() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.CreatePhotoRequest.photo)
  return photo_ != NULL ? *photo_
                         : *::google::streetview::publish::v1::Photo::internal_default_instance();
}
::google::streetview::publish::v1::Photo* CreatePhotoRequest::mutable_photo() {
  
  if (photo_ == NULL) {
    photo_ = new ::google::streetview::publish::v1::Photo;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.CreatePhotoRequest.photo)
  return photo_;
}
::google::streetview::publish::v1::Photo* CreatePhotoRequest::release_photo() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.CreatePhotoRequest.photo)
  
  ::google::streetview::publish::v1::Photo* temp = photo_;
  photo_ = NULL;
  return temp;
}
void CreatePhotoRequest::set_allocated_photo(::google::streetview::publish::v1::Photo* photo) {
  delete photo_;
  photo_ = photo;
  if (photo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.CreatePhotoRequest.photo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPhotoRequest::kPhotoIdFieldNumber;
const int GetPhotoRequest::kViewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPhotoRequest::GetPhotoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.GetPhotoRequest)
}
GetPhotoRequest::GetPhotoRequest(const GetPhotoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  photo_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.photo_id().size() > 0) {
    photo_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_id_);
  }
  view_ = from.view_;
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.GetPhotoRequest)
}

void GetPhotoRequest::SharedCtor() {
  photo_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_ = 0;
  _cached_size_ = 0;
}

GetPhotoRequest::~GetPhotoRequest() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.GetPhotoRequest)
  SharedDtor();
}

void GetPhotoRequest::SharedDtor() {
  photo_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetPhotoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPhotoRequest::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPhotoRequest& GetPhotoRequest::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetPhotoRequest* GetPhotoRequest::New(::google::protobuf::Arena* arena) const {
  GetPhotoRequest* n = new GetPhotoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPhotoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.GetPhotoRequest)
  photo_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_ = 0;
}

bool GetPhotoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.GetPhotoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string photo_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photo_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->photo_id().data(), this->photo_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.GetPhotoRequest.photo_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.streetview.publish.v1.PhotoView view = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_view(static_cast< ::google::streetview::publish::v1::PhotoView >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.GetPhotoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.GetPhotoRequest)
  return false;
#undef DO_
}

void GetPhotoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.GetPhotoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string photo_id = 1;
  if (this->photo_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_id().data(), this->photo_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.GetPhotoRequest.photo_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->photo_id(), output);
  }

  // .google.streetview.publish.v1.PhotoView view = 2;
  if (this->view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->view(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.GetPhotoRequest)
}

::google::protobuf::uint8* GetPhotoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.GetPhotoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string photo_id = 1;
  if (this->photo_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_id().data(), this->photo_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.GetPhotoRequest.photo_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->photo_id(), target);
  }

  // .google.streetview.publish.v1.PhotoView view = 2;
  if (this->view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->view(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.GetPhotoRequest)
  return target;
}

size_t GetPhotoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.GetPhotoRequest)
  size_t total_size = 0;

  // string photo_id = 1;
  if (this->photo_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->photo_id());
  }

  // .google.streetview.publish.v1.PhotoView view = 2;
  if (this->view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->view());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPhotoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.GetPhotoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPhotoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPhotoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.GetPhotoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.GetPhotoRequest)
    MergeFrom(*source);
  }
}

void GetPhotoRequest::MergeFrom(const GetPhotoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.GetPhotoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.photo_id().size() > 0) {

    photo_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_id_);
  }
  if (from.view() != 0) {
    set_view(from.view());
  }
}

void GetPhotoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.GetPhotoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPhotoRequest::CopyFrom(const GetPhotoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.GetPhotoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPhotoRequest::IsInitialized() const {
  return true;
}

void GetPhotoRequest::Swap(GetPhotoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPhotoRequest::InternalSwap(GetPhotoRequest* other) {
  photo_id_.Swap(&other->photo_id_);
  std::swap(view_, other->view_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPhotoRequest::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPhotoRequest

// string photo_id = 1;
void GetPhotoRequest::clear_photo_id() {
  photo_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetPhotoRequest::photo_id() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.GetPhotoRequest.photo_id)
  return photo_id_.GetNoArena();
}
void GetPhotoRequest::set_photo_id(const ::std::string& value) {
  
  photo_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.GetPhotoRequest.photo_id)
}
#if LANG_CXX11
void GetPhotoRequest::set_photo_id(::std::string&& value) {
  
  photo_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.GetPhotoRequest.photo_id)
}
#endif
void GetPhotoRequest::set_photo_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  photo_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.GetPhotoRequest.photo_id)
}
void GetPhotoRequest::set_photo_id(const char* value, size_t size) {
  
  photo_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.GetPhotoRequest.photo_id)
}
::std::string* GetPhotoRequest::mutable_photo_id() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.GetPhotoRequest.photo_id)
  return photo_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetPhotoRequest::release_photo_id() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.GetPhotoRequest.photo_id)
  
  return photo_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetPhotoRequest::set_allocated_photo_id(::std::string* photo_id) {
  if (photo_id != NULL) {
    
  } else {
    
  }
  photo_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_id);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.GetPhotoRequest.photo_id)
}

// .google.streetview.publish.v1.PhotoView view = 2;
void GetPhotoRequest::clear_view() {
  view_ = 0;
}
::google::streetview::publish::v1::PhotoView GetPhotoRequest::view() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.GetPhotoRequest.view)
  return static_cast< ::google::streetview::publish::v1::PhotoView >(view_);
}
void GetPhotoRequest::set_view(::google::streetview::publish::v1::PhotoView value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.GetPhotoRequest.view)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetPhotosRequest::kPhotoIdsFieldNumber;
const int BatchGetPhotosRequest::kViewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetPhotosRequest::BatchGetPhotosRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.BatchGetPhotosRequest)
}
BatchGetPhotosRequest::BatchGetPhotosRequest(const BatchGetPhotosRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      photo_ids_(from.photo_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  view_ = from.view_;
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.BatchGetPhotosRequest)
}

void BatchGetPhotosRequest::SharedCtor() {
  view_ = 0;
  _cached_size_ = 0;
}

BatchGetPhotosRequest::~BatchGetPhotosRequest() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.BatchGetPhotosRequest)
  SharedDtor();
}

void BatchGetPhotosRequest::SharedDtor() {
}

void BatchGetPhotosRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetPhotosRequest::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetPhotosRequest& BatchGetPhotosRequest::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetPhotosRequest* BatchGetPhotosRequest::New(::google::protobuf::Arena* arena) const {
  BatchGetPhotosRequest* n = new BatchGetPhotosRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetPhotosRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.BatchGetPhotosRequest)
  photo_ids_.Clear();
  view_ = 0;
}

bool BatchGetPhotosRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.BatchGetPhotosRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string photo_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_photo_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->photo_ids(this->photo_ids_size() - 1).data(),
            this->photo_ids(this->photo_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.streetview.publish.v1.PhotoView view = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_view(static_cast< ::google::streetview::publish::v1::PhotoView >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.BatchGetPhotosRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.BatchGetPhotosRequest)
  return false;
#undef DO_
}

void BatchGetPhotosRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.BatchGetPhotosRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string photo_ids = 1;
  for (int i = 0, n = this->photo_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_ids(i).data(), this->photo_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->photo_ids(i), output);
  }

  // .google.streetview.publish.v1.PhotoView view = 2;
  if (this->view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->view(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.BatchGetPhotosRequest)
}

::google::protobuf::uint8* BatchGetPhotosRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.BatchGetPhotosRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string photo_ids = 1;
  for (int i = 0, n = this->photo_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_ids(i).data(), this->photo_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->photo_ids(i), target);
  }

  // .google.streetview.publish.v1.PhotoView view = 2;
  if (this->view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->view(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.BatchGetPhotosRequest)
  return target;
}

size_t BatchGetPhotosRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.BatchGetPhotosRequest)
  size_t total_size = 0;

  // repeated string photo_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->photo_ids_size());
  for (int i = 0, n = this->photo_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->photo_ids(i));
  }

  // .google.streetview.publish.v1.PhotoView view = 2;
  if (this->view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->view());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetPhotosRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.BatchGetPhotosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetPhotosRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetPhotosRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.BatchGetPhotosRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.BatchGetPhotosRequest)
    MergeFrom(*source);
  }
}

void BatchGetPhotosRequest::MergeFrom(const BatchGetPhotosRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.BatchGetPhotosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  photo_ids_.MergeFrom(from.photo_ids_);
  if (from.view() != 0) {
    set_view(from.view());
  }
}

void BatchGetPhotosRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.BatchGetPhotosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetPhotosRequest::CopyFrom(const BatchGetPhotosRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.BatchGetPhotosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetPhotosRequest::IsInitialized() const {
  return true;
}

void BatchGetPhotosRequest::Swap(BatchGetPhotosRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetPhotosRequest::InternalSwap(BatchGetPhotosRequest* other) {
  photo_ids_.InternalSwap(&other->photo_ids_);
  std::swap(view_, other->view_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetPhotosRequest::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetPhotosRequest

// repeated string photo_ids = 1;
int BatchGetPhotosRequest::photo_ids_size() const {
  return photo_ids_.size();
}
void BatchGetPhotosRequest::clear_photo_ids() {
  photo_ids_.Clear();
}
const ::std::string& BatchGetPhotosRequest::photo_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  return photo_ids_.Get(index);
}
::std::string* BatchGetPhotosRequest::mutable_photo_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  return photo_ids_.Mutable(index);
}
void BatchGetPhotosRequest::set_photo_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  photo_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BatchGetPhotosRequest::set_photo_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  photo_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void BatchGetPhotosRequest::set_photo_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  photo_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
}
void BatchGetPhotosRequest::set_photo_ids(int index, const char* value, size_t size) {
  photo_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
}
::std::string* BatchGetPhotosRequest::add_photo_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  return photo_ids_.Add();
}
void BatchGetPhotosRequest::add_photo_ids(const ::std::string& value) {
  photo_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
}
#if LANG_CXX11
void BatchGetPhotosRequest::add_photo_ids(::std::string&& value) {
  photo_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
}
#endif
void BatchGetPhotosRequest::add_photo_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  photo_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
}
void BatchGetPhotosRequest::add_photo_ids(const char* value, size_t size) {
  photo_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchGetPhotosRequest::photo_ids() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  return photo_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BatchGetPhotosRequest::mutable_photo_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  return &photo_ids_;
}

// .google.streetview.publish.v1.PhotoView view = 2;
void BatchGetPhotosRequest::clear_view() {
  view_ = 0;
}
::google::streetview::publish::v1::PhotoView BatchGetPhotosRequest::view() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchGetPhotosRequest.view)
  return static_cast< ::google::streetview::publish::v1::PhotoView >(view_);
}
void BatchGetPhotosRequest::set_view(::google::streetview::publish::v1::PhotoView value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.BatchGetPhotosRequest.view)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetPhotosResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetPhotosResponse::BatchGetPhotosResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.BatchGetPhotosResponse)
}
BatchGetPhotosResponse::BatchGetPhotosResponse(const BatchGetPhotosResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.BatchGetPhotosResponse)
}

void BatchGetPhotosResponse::SharedCtor() {
  _cached_size_ = 0;
}

BatchGetPhotosResponse::~BatchGetPhotosResponse() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.BatchGetPhotosResponse)
  SharedDtor();
}

void BatchGetPhotosResponse::SharedDtor() {
}

void BatchGetPhotosResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetPhotosResponse::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetPhotosResponse& BatchGetPhotosResponse::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetPhotosResponse* BatchGetPhotosResponse::New(::google::protobuf::Arena* arena) const {
  BatchGetPhotosResponse* n = new BatchGetPhotosResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetPhotosResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.BatchGetPhotosResponse)
  results_.Clear();
}

bool BatchGetPhotosResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.BatchGetPhotosResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.streetview.publish.v1.PhotoResponse results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.BatchGetPhotosResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.BatchGetPhotosResponse)
  return false;
#undef DO_
}

void BatchGetPhotosResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.BatchGetPhotosResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.streetview.publish.v1.PhotoResponse results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.BatchGetPhotosResponse)
}

::google::protobuf::uint8* BatchGetPhotosResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.BatchGetPhotosResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.streetview.publish.v1.PhotoResponse results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.BatchGetPhotosResponse)
  return target;
}

size_t BatchGetPhotosResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.BatchGetPhotosResponse)
  size_t total_size = 0;

  // repeated .google.streetview.publish.v1.PhotoResponse results = 1;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetPhotosResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.BatchGetPhotosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetPhotosResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetPhotosResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.BatchGetPhotosResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.BatchGetPhotosResponse)
    MergeFrom(*source);
  }
}

void BatchGetPhotosResponse::MergeFrom(const BatchGetPhotosResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.BatchGetPhotosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void BatchGetPhotosResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.BatchGetPhotosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetPhotosResponse::CopyFrom(const BatchGetPhotosResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.BatchGetPhotosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetPhotosResponse::IsInitialized() const {
  return true;
}

void BatchGetPhotosResponse::Swap(BatchGetPhotosResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetPhotosResponse::InternalSwap(BatchGetPhotosResponse* other) {
  results_.InternalSwap(&other->results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetPhotosResponse::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetPhotosResponse

// repeated .google.streetview.publish.v1.PhotoResponse results = 1;
int BatchGetPhotosResponse::results_size() const {
  return results_.size();
}
void BatchGetPhotosResponse::clear_results() {
  results_.Clear();
}
const ::google::streetview::publish::v1::PhotoResponse& BatchGetPhotosResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchGetPhotosResponse.results)
  return results_.Get(index);
}
::google::streetview::publish::v1::PhotoResponse* BatchGetPhotosResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.BatchGetPhotosResponse.results)
  return results_.Mutable(index);
}
::google::streetview::publish::v1::PhotoResponse* BatchGetPhotosResponse::add_results() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchGetPhotosResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse >*
BatchGetPhotosResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.BatchGetPhotosResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse >&
BatchGetPhotosResponse::results() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.BatchGetPhotosResponse.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotoResponse::kStatusFieldNumber;
const int PhotoResponse::kPhotoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotoResponse::PhotoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.PhotoResponse)
}
PhotoResponse::PhotoResponse(const PhotoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::google::rpc::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  if (from.has_photo()) {
    photo_ = new ::google::streetview::publish::v1::Photo(*from.photo_);
  } else {
    photo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.PhotoResponse)
}

void PhotoResponse::SharedCtor() {
  ::memset(&status_, 0, reinterpret_cast<char*>(&photo_) -
    reinterpret_cast<char*>(&status_) + sizeof(photo_));
  _cached_size_ = 0;
}

PhotoResponse::~PhotoResponse() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.PhotoResponse)
  SharedDtor();
}

void PhotoResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete status_;
  }
  if (this != internal_default_instance()) {
    delete photo_;
  }
}

void PhotoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoResponse::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhotoResponse& PhotoResponse::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhotoResponse* PhotoResponse::New(::google::protobuf::Arena* arena) const {
  PhotoResponse* n = new PhotoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.PhotoResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  if (GetArenaNoVirtual() == NULL && photo_ != NULL) {
    delete photo_;
  }
  photo_ = NULL;
}

bool PhotoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.PhotoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.streetview.publish.v1.Photo photo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.PhotoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.PhotoResponse)
  return false;
#undef DO_
}

void PhotoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.PhotoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // .google.streetview.publish.v1.Photo photo = 2;
  if (this->has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->photo_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.PhotoResponse)
}

::google::protobuf::uint8* PhotoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.PhotoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, deterministic, target);
  }

  // .google.streetview.publish.v1.Photo photo = 2;
  if (this->has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->photo_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.PhotoResponse)
  return target;
}

size_t PhotoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.PhotoResponse)
  size_t total_size = 0;

  // .google.rpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // .google.streetview.publish.v1.Photo photo = 2;
  if (this->has_photo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->photo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.PhotoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PhotoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.PhotoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.PhotoResponse)
    MergeFrom(*source);
  }
}

void PhotoResponse::MergeFrom(const PhotoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.PhotoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::google::rpc::Status::MergeFrom(from.status());
  }
  if (from.has_photo()) {
    mutable_photo()->::google::streetview::publish::v1::Photo::MergeFrom(from.photo());
  }
}

void PhotoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.PhotoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoResponse::CopyFrom(const PhotoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.PhotoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoResponse::IsInitialized() const {
  return true;
}

void PhotoResponse::Swap(PhotoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotoResponse::InternalSwap(PhotoResponse* other) {
  std::swap(status_, other->status_);
  std::swap(photo_, other->photo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotoResponse::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotoResponse

// .google.rpc.Status status = 1;
bool PhotoResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void PhotoResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::google::rpc::Status& PhotoResponse::status() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.PhotoResponse.status)
  return status_ != NULL ? *status_
                         : *::google::rpc::Status::internal_default_instance();
}
::google::rpc::Status* PhotoResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.PhotoResponse.status)
  return status_;
}
::google::rpc::Status* PhotoResponse::release_status() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.PhotoResponse.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void PhotoResponse::set_allocated_status(::google::rpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.PhotoResponse.status)
}

// .google.streetview.publish.v1.Photo photo = 2;
bool PhotoResponse::has_photo() const {
  return this != internal_default_instance() && photo_ != NULL;
}
void PhotoResponse::clear_photo() {
  if (GetArenaNoVirtual() == NULL && photo_ != NULL) delete photo_;
  photo_ = NULL;
}
const ::google::streetview::publish::v1::Photo& PhotoResponse::photo() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.PhotoResponse.photo)
  return photo_ != NULL ? *photo_
                         : *::google::streetview::publish::v1::Photo::internal_default_instance();
}
::google::streetview::publish::v1::Photo* PhotoResponse::mutable_photo() {
  
  if (photo_ == NULL) {
    photo_ = new ::google::streetview::publish::v1::Photo;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.PhotoResponse.photo)
  return photo_;
}
::google::streetview::publish::v1::Photo* PhotoResponse::release_photo() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.PhotoResponse.photo)
  
  ::google::streetview::publish::v1::Photo* temp = photo_;
  photo_ = NULL;
  return temp;
}
void PhotoResponse::set_allocated_photo(::google::streetview::publish::v1::Photo* photo) {
  delete photo_;
  photo_ = photo;
  if (photo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.PhotoResponse.photo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListPhotosRequest::kViewFieldNumber;
const int ListPhotosRequest::kPageSizeFieldNumber;
const int ListPhotosRequest::kPageTokenFieldNumber;
const int ListPhotosRequest::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListPhotosRequest::ListPhotosRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.ListPhotosRequest)
}
ListPhotosRequest::ListPhotosRequest(const ListPhotosRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  ::memcpy(&view_, &from.view_,
    reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&view_) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.ListPhotosRequest)
}

void ListPhotosRequest::SharedCtor() {
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&view_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&view_) + sizeof(page_size_));
  _cached_size_ = 0;
}

ListPhotosRequest::~ListPhotosRequest() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.ListPhotosRequest)
  SharedDtor();
}

void ListPhotosRequest::SharedDtor() {
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListPhotosRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListPhotosRequest::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListPhotosRequest& ListPhotosRequest::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListPhotosRequest* ListPhotosRequest::New(::google::protobuf::Arena* arena) const {
  ListPhotosRequest* n = new ListPhotosRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListPhotosRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.ListPhotosRequest)
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&view_, 0, reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&view_) + sizeof(page_size_));
}

bool ListPhotosRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.ListPhotosRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.streetview.publish.v1.PhotoView view = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_view(static_cast< ::google::streetview::publish::v1::PhotoView >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.ListPhotosRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.ListPhotosRequest.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.ListPhotosRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.ListPhotosRequest)
  return false;
#undef DO_
}

void ListPhotosRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.ListPhotosRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.PhotoView view = 1;
  if (this->view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->view(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.ListPhotosRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.ListPhotosRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filter(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.ListPhotosRequest)
}

::google::protobuf::uint8* ListPhotosRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.ListPhotosRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.PhotoView view = 1;
  if (this->view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->view(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.ListPhotosRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.ListPhotosRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filter(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.ListPhotosRequest)
  return target;
}

size_t ListPhotosRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.ListPhotosRequest)
  size_t total_size = 0;

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string filter = 4;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // .google.streetview.publish.v1.PhotoView view = 1;
  if (this->view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->view());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListPhotosRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.ListPhotosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPhotosRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListPhotosRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.ListPhotosRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.ListPhotosRequest)
    MergeFrom(*source);
  }
}

void ListPhotosRequest::MergeFrom(const ListPhotosRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.ListPhotosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.view() != 0) {
    set_view(from.view());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListPhotosRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.ListPhotosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPhotosRequest::CopyFrom(const ListPhotosRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.ListPhotosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPhotosRequest::IsInitialized() const {
  return true;
}

void ListPhotosRequest::Swap(ListPhotosRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListPhotosRequest::InternalSwap(ListPhotosRequest* other) {
  page_token_.Swap(&other->page_token_);
  filter_.Swap(&other->filter_);
  std::swap(view_, other->view_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListPhotosRequest::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListPhotosRequest

// .google.streetview.publish.v1.PhotoView view = 1;
void ListPhotosRequest::clear_view() {
  view_ = 0;
}
::google::streetview::publish::v1::PhotoView ListPhotosRequest::view() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.ListPhotosRequest.view)
  return static_cast< ::google::streetview::publish::v1::PhotoView >(view_);
}
void ListPhotosRequest::set_view(::google::streetview::publish::v1::PhotoView value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.ListPhotosRequest.view)
}

// int32 page_size = 2;
void ListPhotosRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListPhotosRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.ListPhotosRequest.page_size)
  return page_size_;
}
void ListPhotosRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.ListPhotosRequest.page_size)
}

// string page_token = 3;
void ListPhotosRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListPhotosRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.ListPhotosRequest.page_token)
  return page_token_.GetNoArena();
}
void ListPhotosRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.ListPhotosRequest.page_token)
}
#if LANG_CXX11
void ListPhotosRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.ListPhotosRequest.page_token)
}
#endif
void ListPhotosRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.ListPhotosRequest.page_token)
}
void ListPhotosRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.ListPhotosRequest.page_token)
}
::std::string* ListPhotosRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.ListPhotosRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListPhotosRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.ListPhotosRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListPhotosRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.ListPhotosRequest.page_token)
}

// string filter = 4;
void ListPhotosRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListPhotosRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.ListPhotosRequest.filter)
  return filter_.GetNoArena();
}
void ListPhotosRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.ListPhotosRequest.filter)
}
#if LANG_CXX11
void ListPhotosRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.ListPhotosRequest.filter)
}
#endif
void ListPhotosRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.ListPhotosRequest.filter)
}
void ListPhotosRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.ListPhotosRequest.filter)
}
::std::string* ListPhotosRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.ListPhotosRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListPhotosRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.ListPhotosRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListPhotosRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.ListPhotosRequest.filter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListPhotosResponse::kPhotosFieldNumber;
const int ListPhotosResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListPhotosResponse::ListPhotosResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.ListPhotosResponse)
}
ListPhotosResponse::ListPhotosResponse(const ListPhotosResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      photos_(from.photos_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.ListPhotosResponse)
}

void ListPhotosResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListPhotosResponse::~ListPhotosResponse() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.ListPhotosResponse)
  SharedDtor();
}

void ListPhotosResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListPhotosResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListPhotosResponse::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListPhotosResponse& ListPhotosResponse::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListPhotosResponse* ListPhotosResponse::New(::google::protobuf::Arena* arena) const {
  ListPhotosResponse* n = new ListPhotosResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListPhotosResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.ListPhotosResponse)
  photos_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListPhotosResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.ListPhotosResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.streetview.publish.v1.Photo photos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.ListPhotosResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.ListPhotosResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.ListPhotosResponse)
  return false;
#undef DO_
}

void ListPhotosResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.ListPhotosResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.streetview.publish.v1.Photo photos = 1;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->photos(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.ListPhotosResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.ListPhotosResponse)
}

::google::protobuf::uint8* ListPhotosResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.ListPhotosResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.streetview.publish.v1.Photo photos = 1;
  for (unsigned int i = 0, n = this->photos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->photos(i), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.ListPhotosResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.ListPhotosResponse)
  return target;
}

size_t ListPhotosResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.ListPhotosResponse)
  size_t total_size = 0;

  // repeated .google.streetview.publish.v1.Photo photos = 1;
  {
    unsigned int count = this->photos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photos(i));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListPhotosResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.ListPhotosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPhotosResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListPhotosResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.ListPhotosResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.ListPhotosResponse)
    MergeFrom(*source);
  }
}

void ListPhotosResponse::MergeFrom(const ListPhotosResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.ListPhotosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  photos_.MergeFrom(from.photos_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListPhotosResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.ListPhotosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPhotosResponse::CopyFrom(const ListPhotosResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.ListPhotosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPhotosResponse::IsInitialized() const {
  return true;
}

void ListPhotosResponse::Swap(ListPhotosResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListPhotosResponse::InternalSwap(ListPhotosResponse* other) {
  photos_.InternalSwap(&other->photos_);
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListPhotosResponse::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListPhotosResponse

// repeated .google.streetview.publish.v1.Photo photos = 1;
int ListPhotosResponse::photos_size() const {
  return photos_.size();
}
void ListPhotosResponse::clear_photos() {
  photos_.Clear();
}
const ::google::streetview::publish::v1::Photo& ListPhotosResponse::photos(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.ListPhotosResponse.photos)
  return photos_.Get(index);
}
::google::streetview::publish::v1::Photo* ListPhotosResponse::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.ListPhotosResponse.photos)
  return photos_.Mutable(index);
}
::google::streetview::publish::v1::Photo* ListPhotosResponse::add_photos() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.ListPhotosResponse.photos)
  return photos_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Photo >*
ListPhotosResponse::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.ListPhotosResponse.photos)
  return &photos_;
}
const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Photo >&
ListPhotosResponse::photos() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.ListPhotosResponse.photos)
  return photos_;
}

// string next_page_token = 2;
void ListPhotosResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListPhotosResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
void ListPhotosResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
}
#if LANG_CXX11
void ListPhotosResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
}
#endif
void ListPhotosResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
}
void ListPhotosResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
}
::std::string* ListPhotosResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListPhotosResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListPhotosResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdatePhotoRequest::kPhotoFieldNumber;
const int UpdatePhotoRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdatePhotoRequest::UpdatePhotoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.UpdatePhotoRequest)
}
UpdatePhotoRequest::UpdatePhotoRequest(const UpdatePhotoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_photo()) {
    photo_ = new ::google::streetview::publish::v1::Photo(*from.photo_);
  } else {
    photo_ = NULL;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.UpdatePhotoRequest)
}

void UpdatePhotoRequest::SharedCtor() {
  ::memset(&photo_, 0, reinterpret_cast<char*>(&update_mask_) -
    reinterpret_cast<char*>(&photo_) + sizeof(update_mask_));
  _cached_size_ = 0;
}

UpdatePhotoRequest::~UpdatePhotoRequest() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.UpdatePhotoRequest)
  SharedDtor();
}

void UpdatePhotoRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete photo_;
  }
  if (this != internal_default_instance()) {
    delete update_mask_;
  }
}

void UpdatePhotoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePhotoRequest::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdatePhotoRequest& UpdatePhotoRequest::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdatePhotoRequest* UpdatePhotoRequest::New(::google::protobuf::Arena* arena) const {
  UpdatePhotoRequest* n = new UpdatePhotoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdatePhotoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.UpdatePhotoRequest)
  if (GetArenaNoVirtual() == NULL && photo_ != NULL) {
    delete photo_;
  }
  photo_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
}

bool UpdatePhotoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.UpdatePhotoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.streetview.publish.v1.Photo photo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.UpdatePhotoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.UpdatePhotoRequest)
  return false;
#undef DO_
}

void UpdatePhotoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.UpdatePhotoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.Photo photo = 1;
  if (this->has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->photo_, output);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->update_mask_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.UpdatePhotoRequest)
}

::google::protobuf::uint8* UpdatePhotoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.UpdatePhotoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.streetview.publish.v1.Photo photo = 1;
  if (this->has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->photo_, deterministic, target);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->update_mask_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.UpdatePhotoRequest)
  return target;
}

size_t UpdatePhotoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.UpdatePhotoRequest)
  size_t total_size = 0;

  // .google.streetview.publish.v1.Photo photo = 1;
  if (this->has_photo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->photo_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePhotoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.UpdatePhotoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePhotoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdatePhotoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.UpdatePhotoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.UpdatePhotoRequest)
    MergeFrom(*source);
  }
}

void UpdatePhotoRequest::MergeFrom(const UpdatePhotoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.UpdatePhotoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_photo()) {
    mutable_photo()->::google::streetview::publish::v1::Photo::MergeFrom(from.photo());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdatePhotoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.UpdatePhotoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePhotoRequest::CopyFrom(const UpdatePhotoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.UpdatePhotoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePhotoRequest::IsInitialized() const {
  return true;
}

void UpdatePhotoRequest::Swap(UpdatePhotoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdatePhotoRequest::InternalSwap(UpdatePhotoRequest* other) {
  std::swap(photo_, other->photo_);
  std::swap(update_mask_, other->update_mask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdatePhotoRequest::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdatePhotoRequest

// .google.streetview.publish.v1.Photo photo = 1;
bool UpdatePhotoRequest::has_photo() const {
  return this != internal_default_instance() && photo_ != NULL;
}
void UpdatePhotoRequest::clear_photo() {
  if (GetArenaNoVirtual() == NULL && photo_ != NULL) delete photo_;
  photo_ = NULL;
}
const ::google::streetview::publish::v1::Photo& UpdatePhotoRequest::photo() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.UpdatePhotoRequest.photo)
  return photo_ != NULL ? *photo_
                         : *::google::streetview::publish::v1::Photo::internal_default_instance();
}
::google::streetview::publish::v1::Photo* UpdatePhotoRequest::mutable_photo() {
  
  if (photo_ == NULL) {
    photo_ = new ::google::streetview::publish::v1::Photo;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.UpdatePhotoRequest.photo)
  return photo_;
}
::google::streetview::publish::v1::Photo* UpdatePhotoRequest::release_photo() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.UpdatePhotoRequest.photo)
  
  ::google::streetview::publish::v1::Photo* temp = photo_;
  photo_ = NULL;
  return temp;
}
void UpdatePhotoRequest::set_allocated_photo(::google::streetview::publish::v1::Photo* photo) {
  delete photo_;
  photo_ = photo;
  if (photo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.UpdatePhotoRequest.photo)
}

// .google.protobuf.FieldMask update_mask = 2;
bool UpdatePhotoRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
void UpdatePhotoRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) delete update_mask_;
  update_mask_ = NULL;
}
const ::google::protobuf::FieldMask& UpdatePhotoRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.UpdatePhotoRequest.update_mask)
  return update_mask_ != NULL ? *update_mask_
                         : *::google::protobuf::FieldMask::internal_default_instance();
}
::google::protobuf::FieldMask* UpdatePhotoRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    update_mask_ = new ::google::protobuf::FieldMask;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.UpdatePhotoRequest.update_mask)
  return update_mask_;
}
::google::protobuf::FieldMask* UpdatePhotoRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.UpdatePhotoRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
void UpdatePhotoRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  delete update_mask_;
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.UpdatePhotoRequest.update_mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchUpdatePhotosRequest::kUpdatePhotoRequestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchUpdatePhotosRequest::BatchUpdatePhotosRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.BatchUpdatePhotosRequest)
}
BatchUpdatePhotosRequest::BatchUpdatePhotosRequest(const BatchUpdatePhotosRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      update_photo_requests_(from.update_photo_requests_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.BatchUpdatePhotosRequest)
}

void BatchUpdatePhotosRequest::SharedCtor() {
  _cached_size_ = 0;
}

BatchUpdatePhotosRequest::~BatchUpdatePhotosRequest() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  SharedDtor();
}

void BatchUpdatePhotosRequest::SharedDtor() {
}

void BatchUpdatePhotosRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchUpdatePhotosRequest::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchUpdatePhotosRequest& BatchUpdatePhotosRequest::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchUpdatePhotosRequest* BatchUpdatePhotosRequest::New(::google::protobuf::Arena* arena) const {
  BatchUpdatePhotosRequest* n = new BatchUpdatePhotosRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchUpdatePhotosRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  update_photo_requests_.Clear();
}

bool BatchUpdatePhotosRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.streetview.publish.v1.UpdatePhotoRequest update_photo_requests = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update_photo_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  return false;
#undef DO_
}

void BatchUpdatePhotosRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.streetview.publish.v1.UpdatePhotoRequest update_photo_requests = 1;
  for (unsigned int i = 0, n = this->update_photo_requests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->update_photo_requests(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.BatchUpdatePhotosRequest)
}

::google::protobuf::uint8* BatchUpdatePhotosRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.streetview.publish.v1.UpdatePhotoRequest update_photo_requests = 1;
  for (unsigned int i = 0, n = this->update_photo_requests_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->update_photo_requests(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  return target;
}

size_t BatchUpdatePhotosRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  size_t total_size = 0;

  // repeated .google.streetview.publish.v1.UpdatePhotoRequest update_photo_requests = 1;
  {
    unsigned int count = this->update_photo_requests_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_photo_requests(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchUpdatePhotosRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchUpdatePhotosRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchUpdatePhotosRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.BatchUpdatePhotosRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.BatchUpdatePhotosRequest)
    MergeFrom(*source);
  }
}

void BatchUpdatePhotosRequest::MergeFrom(const BatchUpdatePhotosRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  update_photo_requests_.MergeFrom(from.update_photo_requests_);
}

void BatchUpdatePhotosRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchUpdatePhotosRequest::CopyFrom(const BatchUpdatePhotosRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.BatchUpdatePhotosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchUpdatePhotosRequest::IsInitialized() const {
  return true;
}

void BatchUpdatePhotosRequest::Swap(BatchUpdatePhotosRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchUpdatePhotosRequest::InternalSwap(BatchUpdatePhotosRequest* other) {
  update_photo_requests_.InternalSwap(&other->update_photo_requests_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchUpdatePhotosRequest::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchUpdatePhotosRequest

// repeated .google.streetview.publish.v1.UpdatePhotoRequest update_photo_requests = 1;
int BatchUpdatePhotosRequest::update_photo_requests_size() const {
  return update_photo_requests_.size();
}
void BatchUpdatePhotosRequest::clear_update_photo_requests() {
  update_photo_requests_.Clear();
}
const ::google::streetview::publish::v1::UpdatePhotoRequest& BatchUpdatePhotosRequest::update_photo_requests(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchUpdatePhotosRequest.update_photo_requests)
  return update_photo_requests_.Get(index);
}
::google::streetview::publish::v1::UpdatePhotoRequest* BatchUpdatePhotosRequest::mutable_update_photo_requests(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.BatchUpdatePhotosRequest.update_photo_requests)
  return update_photo_requests_.Mutable(index);
}
::google::streetview::publish::v1::UpdatePhotoRequest* BatchUpdatePhotosRequest::add_update_photo_requests() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchUpdatePhotosRequest.update_photo_requests)
  return update_photo_requests_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::UpdatePhotoRequest >*
BatchUpdatePhotosRequest::mutable_update_photo_requests() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.BatchUpdatePhotosRequest.update_photo_requests)
  return &update_photo_requests_;
}
const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::UpdatePhotoRequest >&
BatchUpdatePhotosRequest::update_photo_requests() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.BatchUpdatePhotosRequest.update_photo_requests)
  return update_photo_requests_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchUpdatePhotosResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchUpdatePhotosResponse::BatchUpdatePhotosResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.BatchUpdatePhotosResponse)
}
BatchUpdatePhotosResponse::BatchUpdatePhotosResponse(const BatchUpdatePhotosResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.BatchUpdatePhotosResponse)
}

void BatchUpdatePhotosResponse::SharedCtor() {
  _cached_size_ = 0;
}

BatchUpdatePhotosResponse::~BatchUpdatePhotosResponse() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  SharedDtor();
}

void BatchUpdatePhotosResponse::SharedDtor() {
}

void BatchUpdatePhotosResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchUpdatePhotosResponse::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchUpdatePhotosResponse& BatchUpdatePhotosResponse::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchUpdatePhotosResponse* BatchUpdatePhotosResponse::New(::google::protobuf::Arena* arena) const {
  BatchUpdatePhotosResponse* n = new BatchUpdatePhotosResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchUpdatePhotosResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  results_.Clear();
}

bool BatchUpdatePhotosResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.streetview.publish.v1.PhotoResponse results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  return false;
#undef DO_
}

void BatchUpdatePhotosResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.streetview.publish.v1.PhotoResponse results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.BatchUpdatePhotosResponse)
}

::google::protobuf::uint8* BatchUpdatePhotosResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.streetview.publish.v1.PhotoResponse results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  return target;
}

size_t BatchUpdatePhotosResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  size_t total_size = 0;

  // repeated .google.streetview.publish.v1.PhotoResponse results = 1;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchUpdatePhotosResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchUpdatePhotosResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchUpdatePhotosResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.BatchUpdatePhotosResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.BatchUpdatePhotosResponse)
    MergeFrom(*source);
  }
}

void BatchUpdatePhotosResponse::MergeFrom(const BatchUpdatePhotosResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void BatchUpdatePhotosResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchUpdatePhotosResponse::CopyFrom(const BatchUpdatePhotosResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.BatchUpdatePhotosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchUpdatePhotosResponse::IsInitialized() const {
  return true;
}

void BatchUpdatePhotosResponse::Swap(BatchUpdatePhotosResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchUpdatePhotosResponse::InternalSwap(BatchUpdatePhotosResponse* other) {
  results_.InternalSwap(&other->results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchUpdatePhotosResponse::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchUpdatePhotosResponse

// repeated .google.streetview.publish.v1.PhotoResponse results = 1;
int BatchUpdatePhotosResponse::results_size() const {
  return results_.size();
}
void BatchUpdatePhotosResponse::clear_results() {
  results_.Clear();
}
const ::google::streetview::publish::v1::PhotoResponse& BatchUpdatePhotosResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchUpdatePhotosResponse.results)
  return results_.Get(index);
}
::google::streetview::publish::v1::PhotoResponse* BatchUpdatePhotosResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.BatchUpdatePhotosResponse.results)
  return results_.Mutable(index);
}
::google::streetview::publish::v1::PhotoResponse* BatchUpdatePhotosResponse::add_results() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchUpdatePhotosResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse >*
BatchUpdatePhotosResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.BatchUpdatePhotosResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse >&
BatchUpdatePhotosResponse::results() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.BatchUpdatePhotosResponse.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeletePhotoRequest::kPhotoIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeletePhotoRequest::DeletePhotoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.DeletePhotoRequest)
}
DeletePhotoRequest::DeletePhotoRequest(const DeletePhotoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  photo_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.photo_id().size() > 0) {
    photo_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.DeletePhotoRequest)
}

void DeletePhotoRequest::SharedCtor() {
  photo_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeletePhotoRequest::~DeletePhotoRequest() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.DeletePhotoRequest)
  SharedDtor();
}

void DeletePhotoRequest::SharedDtor() {
  photo_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeletePhotoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePhotoRequest::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeletePhotoRequest& DeletePhotoRequest::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeletePhotoRequest* DeletePhotoRequest::New(::google::protobuf::Arena* arena) const {
  DeletePhotoRequest* n = new DeletePhotoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeletePhotoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.DeletePhotoRequest)
  photo_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeletePhotoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.DeletePhotoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string photo_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photo_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->photo_id().data(), this->photo_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.DeletePhotoRequest.photo_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.DeletePhotoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.DeletePhotoRequest)
  return false;
#undef DO_
}

void DeletePhotoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.DeletePhotoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string photo_id = 1;
  if (this->photo_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_id().data(), this->photo_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.DeletePhotoRequest.photo_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->photo_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.DeletePhotoRequest)
}

::google::protobuf::uint8* DeletePhotoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.DeletePhotoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string photo_id = 1;
  if (this->photo_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_id().data(), this->photo_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.DeletePhotoRequest.photo_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->photo_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.DeletePhotoRequest)
  return target;
}

size_t DeletePhotoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.DeletePhotoRequest)
  size_t total_size = 0;

  // string photo_id = 1;
  if (this->photo_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->photo_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePhotoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.DeletePhotoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePhotoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeletePhotoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.DeletePhotoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.DeletePhotoRequest)
    MergeFrom(*source);
  }
}

void DeletePhotoRequest::MergeFrom(const DeletePhotoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.DeletePhotoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.photo_id().size() > 0) {

    photo_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_id_);
  }
}

void DeletePhotoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.DeletePhotoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePhotoRequest::CopyFrom(const DeletePhotoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.DeletePhotoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePhotoRequest::IsInitialized() const {
  return true;
}

void DeletePhotoRequest::Swap(DeletePhotoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeletePhotoRequest::InternalSwap(DeletePhotoRequest* other) {
  photo_id_.Swap(&other->photo_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeletePhotoRequest::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeletePhotoRequest

// string photo_id = 1;
void DeletePhotoRequest::clear_photo_id() {
  photo_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeletePhotoRequest::photo_id() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
  return photo_id_.GetNoArena();
}
void DeletePhotoRequest::set_photo_id(const ::std::string& value) {
  
  photo_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
}
#if LANG_CXX11
void DeletePhotoRequest::set_photo_id(::std::string&& value) {
  
  photo_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
}
#endif
void DeletePhotoRequest::set_photo_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  photo_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
}
void DeletePhotoRequest::set_photo_id(const char* value, size_t size) {
  
  photo_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
}
::std::string* DeletePhotoRequest::mutable_photo_id() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
  return photo_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeletePhotoRequest::release_photo_id() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
  
  return photo_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeletePhotoRequest::set_allocated_photo_id(::std::string* photo_id) {
  if (photo_id != NULL) {
    
  } else {
    
  }
  photo_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_id);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchDeletePhotosRequest::kPhotoIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchDeletePhotosRequest::BatchDeletePhotosRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.BatchDeletePhotosRequest)
}
BatchDeletePhotosRequest::BatchDeletePhotosRequest(const BatchDeletePhotosRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      photo_ids_(from.photo_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.BatchDeletePhotosRequest)
}

void BatchDeletePhotosRequest::SharedCtor() {
  _cached_size_ = 0;
}

BatchDeletePhotosRequest::~BatchDeletePhotosRequest() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.BatchDeletePhotosRequest)
  SharedDtor();
}

void BatchDeletePhotosRequest::SharedDtor() {
}

void BatchDeletePhotosRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchDeletePhotosRequest::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchDeletePhotosRequest& BatchDeletePhotosRequest::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchDeletePhotosRequest* BatchDeletePhotosRequest::New(::google::protobuf::Arena* arena) const {
  BatchDeletePhotosRequest* n = new BatchDeletePhotosRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchDeletePhotosRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.BatchDeletePhotosRequest)
  photo_ids_.Clear();
}

bool BatchDeletePhotosRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.BatchDeletePhotosRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string photo_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_photo_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->photo_ids(this->photo_ids_size() - 1).data(),
            this->photo_ids(this->photo_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.BatchDeletePhotosRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.BatchDeletePhotosRequest)
  return false;
#undef DO_
}

void BatchDeletePhotosRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.BatchDeletePhotosRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string photo_ids = 1;
  for (int i = 0, n = this->photo_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_ids(i).data(), this->photo_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->photo_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.BatchDeletePhotosRequest)
}

::google::protobuf::uint8* BatchDeletePhotosRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.BatchDeletePhotosRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string photo_ids = 1;
  for (int i = 0, n = this->photo_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->photo_ids(i).data(), this->photo_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->photo_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.BatchDeletePhotosRequest)
  return target;
}

size_t BatchDeletePhotosRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.BatchDeletePhotosRequest)
  size_t total_size = 0;

  // repeated string photo_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->photo_ids_size());
  for (int i = 0, n = this->photo_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->photo_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchDeletePhotosRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.BatchDeletePhotosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchDeletePhotosRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchDeletePhotosRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.BatchDeletePhotosRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.BatchDeletePhotosRequest)
    MergeFrom(*source);
  }
}

void BatchDeletePhotosRequest::MergeFrom(const BatchDeletePhotosRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.BatchDeletePhotosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  photo_ids_.MergeFrom(from.photo_ids_);
}

void BatchDeletePhotosRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.BatchDeletePhotosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchDeletePhotosRequest::CopyFrom(const BatchDeletePhotosRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.BatchDeletePhotosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchDeletePhotosRequest::IsInitialized() const {
  return true;
}

void BatchDeletePhotosRequest::Swap(BatchDeletePhotosRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchDeletePhotosRequest::InternalSwap(BatchDeletePhotosRequest* other) {
  photo_ids_.InternalSwap(&other->photo_ids_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchDeletePhotosRequest::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchDeletePhotosRequest

// repeated string photo_ids = 1;
int BatchDeletePhotosRequest::photo_ids_size() const {
  return photo_ids_.size();
}
void BatchDeletePhotosRequest::clear_photo_ids() {
  photo_ids_.Clear();
}
const ::std::string& BatchDeletePhotosRequest::photo_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  return photo_ids_.Get(index);
}
::std::string* BatchDeletePhotosRequest::mutable_photo_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  return photo_ids_.Mutable(index);
}
void BatchDeletePhotosRequest::set_photo_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  photo_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BatchDeletePhotosRequest::set_photo_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  photo_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void BatchDeletePhotosRequest::set_photo_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  photo_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
}
void BatchDeletePhotosRequest::set_photo_ids(int index, const char* value, size_t size) {
  photo_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
}
::std::string* BatchDeletePhotosRequest::add_photo_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  return photo_ids_.Add();
}
void BatchDeletePhotosRequest::add_photo_ids(const ::std::string& value) {
  photo_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
}
#if LANG_CXX11
void BatchDeletePhotosRequest::add_photo_ids(::std::string&& value) {
  photo_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
}
#endif
void BatchDeletePhotosRequest::add_photo_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  photo_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
}
void BatchDeletePhotosRequest::add_photo_ids(const char* value, size_t size) {
  photo_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchDeletePhotosRequest::photo_ids() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  return photo_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BatchDeletePhotosRequest::mutable_photo_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  return &photo_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchDeletePhotosResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchDeletePhotosResponse::BatchDeletePhotosResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.streetview.publish.v1.BatchDeletePhotosResponse)
}
BatchDeletePhotosResponse::BatchDeletePhotosResponse(const BatchDeletePhotosResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      status_(from.status_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.streetview.publish.v1.BatchDeletePhotosResponse)
}

void BatchDeletePhotosResponse::SharedCtor() {
  _cached_size_ = 0;
}

BatchDeletePhotosResponse::~BatchDeletePhotosResponse() {
  // @@protoc_insertion_point(destructor:google.streetview.publish.v1.BatchDeletePhotosResponse)
  SharedDtor();
}

void BatchDeletePhotosResponse::SharedDtor() {
}

void BatchDeletePhotosResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchDeletePhotosResponse::descriptor() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchDeletePhotosResponse& BatchDeletePhotosResponse::default_instance() {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchDeletePhotosResponse* BatchDeletePhotosResponse::New(::google::protobuf::Arena* arena) const {
  BatchDeletePhotosResponse* n = new BatchDeletePhotosResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchDeletePhotosResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.streetview.publish.v1.BatchDeletePhotosResponse)
  status_.Clear();
}

bool BatchDeletePhotosResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.streetview.publish.v1.BatchDeletePhotosResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.rpc.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.streetview.publish.v1.BatchDeletePhotosResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.streetview.publish.v1.BatchDeletePhotosResponse)
  return false;
#undef DO_
}

void BatchDeletePhotosResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.streetview.publish.v1.BatchDeletePhotosResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.rpc.Status status = 1;
  for (unsigned int i = 0, n = this->status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.streetview.publish.v1.BatchDeletePhotosResponse)
}

::google::protobuf::uint8* BatchDeletePhotosResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.streetview.publish.v1.BatchDeletePhotosResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.rpc.Status status = 1;
  for (unsigned int i = 0, n = this->status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->status(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.streetview.publish.v1.BatchDeletePhotosResponse)
  return target;
}

size_t BatchDeletePhotosResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.streetview.publish.v1.BatchDeletePhotosResponse)
  size_t total_size = 0;

  // repeated .google.rpc.Status status = 1;
  {
    unsigned int count = this->status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchDeletePhotosResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.streetview.publish.v1.BatchDeletePhotosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchDeletePhotosResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchDeletePhotosResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.streetview.publish.v1.BatchDeletePhotosResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.streetview.publish.v1.BatchDeletePhotosResponse)
    MergeFrom(*source);
  }
}

void BatchDeletePhotosResponse::MergeFrom(const BatchDeletePhotosResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.streetview.publish.v1.BatchDeletePhotosResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
}

void BatchDeletePhotosResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.streetview.publish.v1.BatchDeletePhotosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchDeletePhotosResponse::CopyFrom(const BatchDeletePhotosResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.streetview.publish.v1.BatchDeletePhotosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchDeletePhotosResponse::IsInitialized() const {
  return true;
}

void BatchDeletePhotosResponse::Swap(BatchDeletePhotosResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchDeletePhotosResponse::InternalSwap(BatchDeletePhotosResponse* other) {
  status_.InternalSwap(&other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchDeletePhotosResponse::GetMetadata() const {
  protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchDeletePhotosResponse

// repeated .google.rpc.Status status = 1;
int BatchDeletePhotosResponse::status_size() const {
  return status_.size();
}
void BatchDeletePhotosResponse::clear_status() {
  status_.Clear();
}
const ::google::rpc::Status& BatchDeletePhotosResponse::status(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchDeletePhotosResponse.status)
  return status_.Get(index);
}
::google::rpc::Status* BatchDeletePhotosResponse::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.BatchDeletePhotosResponse.status)
  return status_.Mutable(index);
}
::google::rpc::Status* BatchDeletePhotosResponse::add_status() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchDeletePhotosResponse.status)
  return status_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::rpc::Status >*
BatchDeletePhotosResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.BatchDeletePhotosResponse.status)
  return &status_;
}
const ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >&
BatchDeletePhotosResponse::status() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.BatchDeletePhotosResponse.status)
  return status_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace publish
}  // namespace streetview
}  // namespace google

// @@protoc_insertion_point(global_scope)
